// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event.proto

#include "protos/perfetto/trace/ftrace/ftrace_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocPagesIommuEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocPagesIommuFailFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocPagesIommuStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocPagesSysEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocPagesSysFailFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocPagesSysStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderLockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderLockedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderSetPriorityFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderTransactionAllocBufFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderTransactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderTransactionReceivedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinderUnlockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockBioBackmergeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockBioBounceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockBioCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockBioFrontmergeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockBioQueueFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockBioRemapFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockDirtyBufferFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockGetrqFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockPlugFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRqAbortFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRqCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRqInsertFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRqIssueFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRqRemapFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRqRequeueFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockSleeprqFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockSplitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockTouchBufferFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockUnplugFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdevUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupAttachTaskFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupDestroyRootFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupMkdirFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupReleaseFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupRemountFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupRenameFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupRmdirFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupSetupRootFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgroupTransferTasksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClkDisableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClkEnableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClkSetRateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClockDisableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClockEnableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClockSetRateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuFrequencyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuFrequencyLimitsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuIdleFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuhpEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuhpExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuhpLatencyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuhpMultiEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DmaAllocContiguousRetryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fdpu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DpuTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fdpu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4AllocDaBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4AllocateBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4AllocateInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4BeginOrderedTruncateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4CollapseRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaReleaseSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaReserveSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaUpdateReserveSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaWriteBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaWriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaWritePagesExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DaWritePagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DirectIOEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DirectIOExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DiscardBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DiscardPreallocationsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4DropInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsCacheExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsFindDelayedExtentRangeExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsInsertExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsLookupExtentEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsLookupExtentExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsRemoveExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsShrinkCountFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsShrinkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsShrinkScanEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EsShrinkScanExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4EvictInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtConvertToInitializedEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtConvertToInitializedFastpathFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtHandleUnwrittenExtentsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtInCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtLoadExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtMapBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtMapBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtPutInCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtRemoveSpaceDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtRemoveSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtRmIdxFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtRmLeafFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ExtShowExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4FallocateEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4FallocateExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4FindDelallocRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ForgetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4FreeBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4FreeInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4GetImpliedClusterAllocExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4GetReservedClusterAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4IndMapBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4IndMapBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4InsertRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4InvalidatepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4JournalStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4JournalStartReservedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4JournalledInvalidatepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4JournalledWriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4LoadInodeBitmapFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4LoadInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MarkInodeDirtyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbBitmapLoadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbBuddyBitmapLoadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbDiscardPreallocationsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbNewGroupPaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbNewInodePaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbReleaseGroupPaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MbReleaseInodePaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MballocAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MballocDiscardFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MballocFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4MballocPreallocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4OtherInodeUpdateTimeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4PunchHoleFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ReadBlockBitmapLoadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ReadpageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ReleasepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4RemoveBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4RequestBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4RequestInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4SyncFileEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4SyncFileExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4SyncFsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4TrimAllFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4TrimExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4TruncateEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4TruncateExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4UnlinkEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4UnlinkExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4WriteBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4WriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4WritepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4WritepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4WritepagesResultFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ext4ZeroRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsDoSubmitBioFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsEvictInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsFallocateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsGetDataBlockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsGetVictimFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsIgetExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsIgetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsNewInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsReadpageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsReserveNewBlockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsSetPageDirtyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsSubmitWritePageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsSyncFileEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsSyncFileExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsSyncFsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateDataBlocksRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateInodeBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateInodeBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateNodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateNodesEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncateNodesExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsTruncatePartialNodesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsUnlinkEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsUnlinkExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsVmPageMkwriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsWriteBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsWriteCheckpointFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_F2fsWriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffastrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastrpcDmaStatFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffastrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FenceDestroyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FenceEnableSignalFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FenceInitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FenceSignaledFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fg2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_G2dTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fg2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fgeneric_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fgeneric_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuFrequencyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuMemTotalFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_I2cReadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_I2cReplyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_I2cResultFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_I2cWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IommuMapRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IommuSecPtblMapRangeEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IommuSecPtblMapRangeStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonAllocBufferEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonAllocBufferFailFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonAllocBufferFallbackFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonAllocBufferStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonBufferCreateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonBufferDestroyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonCpAllocRetryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonCpSecureBufferEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonCpSecureBufferStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonHeapGrowFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonHeapShrinkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonPrefetchingFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonSecureCmaAddToPoolEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonSecureCmaAddToPoolStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonSecureCmaAllocateEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonSecureCmaAllocateStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonSecureCmaShrinkPoolEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonSecureCmaShrinkPoolStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IonStatFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpiEntryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpiExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpiRaiseFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IrqHandlerEntryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IrqHandlerExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KfreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmallocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmallocNodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmemCacheAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmemCacheAllocNodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmemCacheFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2flowmemorykiller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LowmemoryKillFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2flowmemorykiller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaliTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarkVictimFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdKickoffFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdPingpongDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdReadptrDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdReleaseBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCmdWaitPingpongFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCommitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpCompareBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpMisrCrcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpMixerUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfPrefillCalcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetOtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetPanicLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfSetWmLevelsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpPerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpSsppChangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpSsppSetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MdpVideoUnderrunDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MigratePagesEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MigratePagesStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MigrateRetryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionDeferCompactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionDeferResetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionDeferredFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionFinishedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionIsolateFreepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionIsolateMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionKcompactdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionKcompactdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionSuitableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionTryToCompactPagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmCompactionWakeupKcompactdFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmm_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmEventRecordFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmm_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmFilemapAddToPageCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmFilemapDeleteFromPageCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmPageAllocExtfragFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmPageAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmPageAllocZoneLockedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmPageFreeBatchedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmPageFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmPagePcpuDrainFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanDirectReclaimBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanDirectReclaimEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanKswapdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanKswapdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OomScoreAdjUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrintFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorDisableCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorDisableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorEnableCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorEnableDelayFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorEnableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorSetVoltageCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegulatorSetVoltageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotatorBwAoAsContextFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RssStatFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedBlockedReasonFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedCpuHotplugFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedProcessExecFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedProcessExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedProcessForkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedProcessFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedProcessHangFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedProcessWaitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedSwitchFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedWakeupFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedWakeupNewFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedWakingFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScmCallEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScmCallStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalDeliverFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalGenerateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmbusReadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmbusReplyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmbusResultFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmbusWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftirqEntryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftirqExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftirqRaiseFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuspendResumeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncPtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncTimelineFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncWaitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskNewtaskFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskRenameFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalTemperatureFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueActivateWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueExecuteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueExecuteStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueQueueWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsystrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZeroFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsystrace_2eproto;
namespace perfetto {
namespace protos {
class FtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceEvent> _instance;
  const ::perfetto::protos::PrintFtraceEvent* print_;
  const ::perfetto::protos::SchedSwitchFtraceEvent* sched_switch_;
  const ::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency_;
  const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits_;
  const ::perfetto::protos::CpuIdleFtraceEvent* cpu_idle_;
  const ::perfetto::protos::ClockEnableFtraceEvent* clock_enable_;
  const ::perfetto::protos::ClockDisableFtraceEvent* clock_disable_;
  const ::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate_;
  const ::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup_;
  const ::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason_;
  const ::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug_;
  const ::perfetto::protos::SchedWakingFtraceEvent* sched_waking_;
  const ::perfetto::protos::IpiEntryFtraceEvent* ipi_entry_;
  const ::perfetto::protos::IpiExitFtraceEvent* ipi_exit_;
  const ::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise_;
  const ::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry_;
  const ::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit_;
  const ::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise_;
  const ::perfetto::protos::I2cReadFtraceEvent* i2c_read_;
  const ::perfetto::protos::I2cWriteFtraceEvent* i2c_write_;
  const ::perfetto::protos::I2cResultFtraceEvent* i2c_result_;
  const ::perfetto::protos::I2cReplyFtraceEvent* i2c_reply_;
  const ::perfetto::protos::SmbusReadFtraceEvent* smbus_read_;
  const ::perfetto::protos::SmbusWriteFtraceEvent* smbus_write_;
  const ::perfetto::protos::SmbusResultFtraceEvent* smbus_result_;
  const ::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply_;
  const ::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill_;
  const ::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry_;
  const ::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit_;
  const ::perfetto::protos::SyncPtFtraceEvent* sync_pt_;
  const ::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline_;
  const ::perfetto::protos::SyncWaitFtraceEvent* sync_wait_;
  const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin_;
  const ::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end_;
  const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter_;
  const ::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit_;
  const ::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue_;
  const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin_;
  const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end_;
  const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake_;
  const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep_;
  const ::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction_;
  const ::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received_;
  const ::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority_;
  const ::perfetto::protos::BinderLockFtraceEvent* binder_lock_;
  const ::perfetto::protos::BinderLockedFtraceEvent* binder_locked_;
  const ::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock_;
  const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work_;
  const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end_;
  const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start_;
  const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work_;
  const ::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable_;
  const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete_;
  const ::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable_;
  const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete_;
  const ::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay_;
  const ::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage_;
  const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete_;
  const ::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task_;
  const ::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir_;
  const ::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount_;
  const ::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir_;
  const ::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks_;
  const ::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root_;
  const ::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release_;
  const ::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename_;
  const ::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root_;
  const ::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff_;
  const ::perfetto::protos::MdpCommitFtraceEvent* mdp_commit_;
  const ::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot_;
  const ::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change_;
  const ::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write_;
  const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done_;
  const ::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw_;
  const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts_;
  const ::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set_;
  const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done_;
  const ::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc_;
  const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts_;
  const ::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter_;
  const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw_;
  const ::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update_;
  const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels_;
  const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done_;
  const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong_;
  const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc_;
  const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus_;
  const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context_;
  const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache_;
  const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache_;
  const ::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin_;
  const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction_;
  const ::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred_;
  const ::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset_;
  const ::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end_;
  const ::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished_;
  const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages_;
  const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages_;
  const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep_;
  const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake_;
  const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages_;
  const ::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable_;
  const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages_;
  const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd_;
  const ::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume_;
  const ::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new_;
  const ::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge_;
  const ::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce_;
  const ::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete_;
  const ::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge_;
  const ::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue_;
  const ::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap_;
  const ::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer_;
  const ::perfetto::protos::BlockGetrqFtraceEvent* block_getrq_;
  const ::perfetto::protos::BlockPlugFtraceEvent* block_plug_;
  const ::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort_;
  const ::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete_;
  const ::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert_;
  const ::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap_;
  const ::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue_;
  const ::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq_;
  const ::perfetto::protos::BlockSplitFtraceEvent* block_split_;
  const ::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer_;
  const ::perfetto::protos::BlockUnplugFtraceEvent* block_unplug_;
  const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks_;
  const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks_;
  const ::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode_;
  const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate_;
  const ::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range_;
  const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space_;
  const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space_;
  const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space_;
  const ::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages_;
  const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent_;
  const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter_;
  const ::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit_;
  const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks_;
  const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations_;
  const ::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode_;
  const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent_;
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter_;
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit_;
  const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent_;
  const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter_;
  const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit_;
  const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent_;
  const ::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink_;
  const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count_;
  const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter_;
  const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit_;
  const ::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode_;
  const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter_;
  const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath_;
  const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents_;
  const ::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache_;
  const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent_;
  const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter_;
  const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit_;
  const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache_;
  const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space_;
  const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done_;
  const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx_;
  const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf_;
  const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent_;
  const ::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter_;
  const ::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit_;
  const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range_;
  const ::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget_;
  const ::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks_;
  const ::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode_;
  const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit_;
  const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc_;
  const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter_;
  const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit_;
  const ::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range_;
  const ::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage_;
  const ::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start_;
  const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved_;
  const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage_;
  const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end_;
  const ::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode_;
  const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap_;
  const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty_;
  const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load_;
  const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load_;
  const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations_;
  const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa_;
  const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa_;
  const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa_;
  const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa_;
  const ::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc_;
  const ::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard_;
  const ::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free_;
  const ::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc_;
  const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time_;
  const ::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole_;
  const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load_;
  const ::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage_;
  const ::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage_;
  const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks_;
  const ::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks_;
  const ::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode_;
  const ::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs_;
  const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free_;
  const ::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent_;
  const ::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter_;
  const ::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit_;
  const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter_;
  const ::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit_;
  const ::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin_;
  const ::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end_;
  const ::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage_;
  const ::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages_;
  const ::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result_;
  const ::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range_;
  const ::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask_;
  const ::perfetto::protos::TaskRenameFtraceEvent* task_rename_;
  const ::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec_;
  const ::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit_;
  const ::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork_;
  const ::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free_;
  const ::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang_;
  const ::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait_;
  const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio_;
  const ::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode_;
  const ::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate_;
  const ::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block_;
  const ::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim_;
  const ::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget_;
  const ::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit_;
  const ::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode_;
  const ::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage_;
  const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block_;
  const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty_;
  const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page_;
  const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter_;
  const ::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit_;
  const ::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs_;
  const ::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate_;
  const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter_;
  const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit_;
  const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range_;
  const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter_;
  const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit_;
  const ::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node_;
  const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter_;
  const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit_;
  const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes_;
  const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter_;
  const ::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit_;
  const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite_;
  const ::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin_;
  const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint_;
  const ::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end_;
  const ::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end_;
  const ::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail_;
  const ::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start_;
  const ::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end_;
  const ::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail_;
  const ::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start_;
  const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry_;
  const ::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range_;
  const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end_;
  const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start_;
  const ::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end_;
  const ::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail_;
  const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback_;
  const ::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start_;
  const ::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry_;
  const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end_;
  const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start_;
  const ::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching_;
  const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end_;
  const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start_;
  const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end_;
  const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start_;
  const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end_;
  const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start_;
  const ::perfetto::protos::KfreeFtraceEvent* kfree_;
  const ::perfetto::protos::KmallocFtraceEvent* kmalloc_;
  const ::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node_;
  const ::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc_;
  const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node_;
  const ::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free_;
  const ::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end_;
  const ::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start_;
  const ::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry_;
  const ::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc_;
  const ::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag_;
  const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked_;
  const ::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free_;
  const ::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched_;
  const ::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain_;
  const ::perfetto::protos::RssStatFtraceEvent* rss_stat_;
  const ::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink_;
  const ::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow_;
  const ::perfetto::protos::FenceInitFtraceEvent* fence_init_;
  const ::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy_;
  const ::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal_;
  const ::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled_;
  const ::perfetto::protos::ClkEnableFtraceEvent* clk_enable_;
  const ::perfetto::protos::ClkDisableFtraceEvent* clk_disable_;
  const ::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate_;
  const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf_;
  const ::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver_;
  const ::perfetto::protos::SignalGenerateFtraceEvent* signal_generate_;
  const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update_;
  const ::perfetto::protos::GenericFtraceEvent* generic_;
  const ::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record_;
  const ::perfetto::protos::SysEnterFtraceEvent* sys_enter_;
  const ::perfetto::protos::SysExitFtraceEvent* sys_exit_;
  const ::perfetto::protos::ZeroFtraceEvent* zero_;
  const ::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency_;
  const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write_;
  const ::perfetto::protos::MarkVictimFtraceEvent* mark_victim_;
  const ::perfetto::protos::IonStatFtraceEvent* ion_stat_;
  const ::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create_;
  const ::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy_;
  const ::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start_;
  const ::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end_;
  const ::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total_;
  const ::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature_;
  const ::perfetto::protos::CdevUpdateFtraceEvent* cdev_update_;
  const ::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit_;
  const ::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter_;
  const ::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter_;
  const ::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency_;
  const ::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat_;
  const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write_;
  const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write_;
  const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write_;
} _FtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::FtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<331> scc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 331, InitDefaultsscc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto}, {
      &scc_info_PrintFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_2eproto.base,
      &scc_info_SchedSwitchFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_CpuFrequencyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_CpuFrequencyLimitsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_CpuIdleFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_ClockEnableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_ClockDisableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_ClockSetRateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_SchedWakeupFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedBlockedReasonFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedCpuHotplugFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedWakingFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_IpiEntryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto.base,
      &scc_info_IpiExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto.base,
      &scc_info_IpiRaiseFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto.base,
      &scc_info_SoftirqEntryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto.base,
      &scc_info_SoftirqExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto.base,
      &scc_info_SoftirqRaiseFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto.base,
      &scc_info_I2cReadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_I2cWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_I2cResultFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_I2cReplyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_SmbusReadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_SmbusWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_SmbusResultFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_SmbusReplyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto.base,
      &scc_info_LowmemoryKillFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2flowmemorykiller_2eproto.base,
      &scc_info_IrqHandlerEntryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto.base,
      &scc_info_IrqHandlerExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto.base,
      &scc_info_SyncPtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto.base,
      &scc_info_SyncTimelineFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto.base,
      &scc_info_SyncWaitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto.base,
      &scc_info_Ext4DaWriteBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DaWriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4SyncFileEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4SyncFileExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_BlockRqIssueFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_MmVmscanDirectReclaimBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base,
      &scc_info_MmVmscanDirectReclaimEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base,
      &scc_info_MmVmscanKswapdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base,
      &scc_info_MmVmscanKswapdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base,
      &scc_info_BinderTransactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_BinderTransactionReceivedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_BinderSetPriorityFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_BinderLockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_BinderLockedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_BinderUnlockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_WorkqueueActivateWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base,
      &scc_info_WorkqueueExecuteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base,
      &scc_info_WorkqueueExecuteStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base,
      &scc_info_WorkqueueQueueWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base,
      &scc_info_RegulatorDisableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_RegulatorDisableCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_RegulatorEnableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_RegulatorEnableCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_RegulatorEnableDelayFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_RegulatorSetVoltageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_RegulatorSetVoltageCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto.base,
      &scc_info_CgroupAttachTaskFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupMkdirFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupRemountFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupRmdirFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupTransferTasksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupDestroyRootFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupReleaseFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupRenameFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_CgroupSetupRootFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto.base,
      &scc_info_MdpCmdKickoffFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpCommitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpPerfSetOtFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpSsppChangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_TracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpCmdPingpongDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpCompareBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpPerfSetPanicLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpSsppSetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpCmdReadptrDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpMisrCrcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpPerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpTraceCounterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpCmdReleaseBwFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpMixerUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpPerfSetWmLevelsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpVideoUnderrunDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpCmdWaitPingpongFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpPerfPrefillCalcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MdpPerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_RotatorBwAoAsContextFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto.base,
      &scc_info_MmFilemapAddToPageCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto.base,
      &scc_info_MmFilemapDeleteFromPageCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto.base,
      &scc_info_MmCompactionBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionDeferCompactionFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionDeferredFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionDeferResetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionFinishedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionIsolateFreepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionIsolateMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionKcompactdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionKcompactdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionMigratepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionSuitableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionTryToCompactPagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_MmCompactionWakeupKcompactdFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto.base,
      &scc_info_SuspendResumeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_SchedWakeupNewFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_BlockBioBackmergeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockBioBounceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockBioCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockBioFrontmergeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockBioQueueFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockBioRemapFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockDirtyBufferFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockGetrqFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockPlugFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockRqAbortFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockRqCompleteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockRqInsertFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockRqRemapFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockRqRequeueFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockSleeprqFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockSplitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockTouchBufferFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_BlockUnplugFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto.base,
      &scc_info_Ext4AllocDaBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4AllocateBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4AllocateInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4BeginOrderedTruncateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4CollapseRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DaReleaseSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DaReserveSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DaUpdateReserveSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DaWritePagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DaWritePagesExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DirectIOEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DirectIOExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DiscardBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DiscardPreallocationsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4DropInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsCacheExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsFindDelayedExtentRangeExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsInsertExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsLookupExtentEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsLookupExtentExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsRemoveExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsShrinkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsShrinkCountFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsShrinkScanEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EsShrinkScanExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4EvictInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtConvertToInitializedEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtConvertToInitializedFastpathFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtHandleUnwrittenExtentsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtInCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtLoadExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtMapBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtMapBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtPutInCacheFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtRemoveSpaceFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtRemoveSpaceDoneFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtRmIdxFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtRmLeafFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ExtShowExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4FallocateEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4FallocateExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4FindDelallocRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ForgetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4FreeBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4FreeInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4GetImpliedClusterAllocExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4GetReservedClusterAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4IndMapBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4IndMapBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4InsertRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4InvalidatepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4JournalStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4JournalStartReservedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4JournalledInvalidatepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4JournalledWriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4LoadInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4LoadInodeBitmapFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MarkInodeDirtyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbBitmapLoadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbBuddyBitmapLoadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbDiscardPreallocationsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbNewGroupPaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbNewInodePaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbReleaseGroupPaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MbReleaseInodePaFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MballocAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MballocDiscardFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MballocFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4MballocPreallocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4OtherInodeUpdateTimeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4PunchHoleFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ReadBlockBitmapLoadFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ReadpageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ReleasepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4RemoveBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4RequestBlocksFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4RequestInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4SyncFsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4TrimAllFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4TrimExtentFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4TruncateEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4TruncateExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4UnlinkEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4UnlinkExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4WriteBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4WriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4WritepageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4WritepagesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4WritepagesResultFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_Ext4ZeroRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto.base,
      &scc_info_TaskNewtaskFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto.base,
      &scc_info_TaskRenameFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto.base,
      &scc_info_SchedProcessExecFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedProcessExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedProcessForkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedProcessFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedProcessHangFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_SchedProcessWaitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto.base,
      &scc_info_F2fsDoSubmitBioFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsEvictInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsFallocateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsGetDataBlockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsGetVictimFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsIgetFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsIgetExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsNewInodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsReadpageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsReserveNewBlockFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsSetPageDirtyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsSubmitWritePageFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsSyncFileEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsSyncFileExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsSyncFsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateDataBlocksRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateInodeBlocksEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateInodeBlocksExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateNodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateNodesEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncateNodesExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsTruncatePartialNodesFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsUnlinkEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsUnlinkExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsVmPageMkwriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsWriteBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsWriteCheckpointFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_F2fsWriteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto.base,
      &scc_info_AllocPagesIommuEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_AllocPagesIommuFailFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_AllocPagesIommuStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_AllocPagesSysEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_AllocPagesSysFailFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_AllocPagesSysStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_DmaAllocContiguousRetryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IommuMapRangeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IommuSecPtblMapRangeEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IommuSecPtblMapRangeStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonAllocBufferEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonAllocBufferFailFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonAllocBufferFallbackFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonAllocBufferStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonCpAllocRetryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonCpSecureBufferEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonCpSecureBufferStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonPrefetchingFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonSecureCmaAddToPoolEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonSecureCmaAddToPoolStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonSecureCmaAllocateEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonSecureCmaAllocateStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonSecureCmaShrinkPoolEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonSecureCmaShrinkPoolStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_KfreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_KmallocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_KmallocNodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_KmemCacheAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_KmemCacheAllocNodeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_KmemCacheFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MigratePagesEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MigratePagesStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MigrateRetryFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MmPageAllocFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MmPageAllocExtfragFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MmPageAllocZoneLockedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MmPageFreeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MmPageFreeBatchedFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_MmPagePcpuDrainFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_RssStatFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonHeapShrinkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonHeapGrowFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_FenceInitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto.base,
      &scc_info_FenceDestroyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto.base,
      &scc_info_FenceEnableSignalFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto.base,
      &scc_info_FenceSignaledFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto.base,
      &scc_info_ClkEnableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto.base,
      &scc_info_ClkDisableFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto.base,
      &scc_info_ClkSetRateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto.base,
      &scc_info_BinderTransactionAllocBufFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto.base,
      &scc_info_SignalDeliverFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto.base,
      &scc_info_SignalGenerateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto.base,
      &scc_info_OomScoreAdjUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto.base,
      &scc_info_GenericFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fgeneric_2eproto.base,
      &scc_info_MmEventRecordFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmm_5fevent_2eproto.base,
      &scc_info_SysEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto.base,
      &scc_info_SysExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto.base,
      &scc_info_ZeroFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsystrace_2eproto.base,
      &scc_info_GpuFrequencyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto.base,
      &scc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base,
      &scc_info_MarkVictimFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto.base,
      &scc_info_IonStatFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fion_2eproto.base,
      &scc_info_IonBufferCreateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_IonBufferDestroyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto.base,
      &scc_info_ScmCallStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto.base,
      &scc_info_ScmCallEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto.base,
      &scc_info_GpuMemTotalFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fmem_2eproto.base,
      &scc_info_ThermalTemperatureFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto.base,
      &scc_info_CdevUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto.base,
      &scc_info_CpuhpExitFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto.base,
      &scc_info_CpuhpMultiEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto.base,
      &scc_info_CpuhpEnterFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto.base,
      &scc_info_CpuhpLatencyFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto.base,
      &scc_info_FastrpcDmaStatFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2ffastrpc_2eproto.base,
      &scc_info_DpuTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fdpu_2eproto.base,
      &scc_info_G2dTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fg2d_2eproto.base,
      &scc_info_MaliTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto.base,}};

namespace perfetto {
namespace protos {

// ===================================================================

void FtraceEvent::InitAsDefaultInstance() {
}
class FtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceEvent>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::PrintFtraceEvent& print(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedSwitchFtraceEvent& sched_switch(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuFrequencyFtraceEvent& cpu_frequency(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& cpu_frequency_limits(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuIdleFtraceEvent& cpu_idle(const FtraceEvent* msg);
  static const ::perfetto::protos::ClockEnableFtraceEvent& clock_enable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClockDisableFtraceEvent& clock_disable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClockSetRateFtraceEvent& clock_set_rate(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedWakeupFtraceEvent& sched_wakeup(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedBlockedReasonFtraceEvent& sched_blocked_reason(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedCpuHotplugFtraceEvent& sched_cpu_hotplug(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedWakingFtraceEvent& sched_waking(const FtraceEvent* msg);
  static const ::perfetto::protos::IpiEntryFtraceEvent& ipi_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::IpiExitFtraceEvent& ipi_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::IpiRaiseFtraceEvent& ipi_raise(const FtraceEvent* msg);
  static const ::perfetto::protos::SoftirqEntryFtraceEvent& softirq_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::SoftirqExitFtraceEvent& softirq_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::SoftirqRaiseFtraceEvent& softirq_raise(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cReadFtraceEvent& i2c_read(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cWriteFtraceEvent& i2c_write(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cResultFtraceEvent& i2c_result(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cReplyFtraceEvent& i2c_reply(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusReadFtraceEvent& smbus_read(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusWriteFtraceEvent& smbus_write(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusResultFtraceEvent& smbus_result(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusReplyFtraceEvent& smbus_reply(const FtraceEvent* msg);
  static const ::perfetto::protos::LowmemoryKillFtraceEvent& lowmemory_kill(const FtraceEvent* msg);
  static const ::perfetto::protos::IrqHandlerEntryFtraceEvent& irq_handler_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::IrqHandlerExitFtraceEvent& irq_handler_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::SyncPtFtraceEvent& sync_pt(const FtraceEvent* msg);
  static const ::perfetto::protos::SyncTimelineFtraceEvent& sync_timeline(const FtraceEvent* msg);
  static const ::perfetto::protos::SyncWaitFtraceEvent& sync_wait(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& ext4_da_write_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& ext4_da_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& ext4_sync_file_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& ext4_sync_file_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqIssueFtraceEvent& block_rq_issue(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& mm_vmscan_direct_reclaim_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& mm_vmscan_direct_reclaim_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& mm_vmscan_kswapd_wake(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& mm_vmscan_kswapd_sleep(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderTransactionFtraceEvent& binder_transaction(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& binder_transaction_received(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderSetPriorityFtraceEvent& binder_set_priority(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderLockFtraceEvent& binder_lock(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderLockedFtraceEvent& binder_locked(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderUnlockFtraceEvent& binder_unlock(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& workqueue_activate_work(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& workqueue_execute_end(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& workqueue_execute_start(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& workqueue_queue_work(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorDisableFtraceEvent& regulator_disable(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& regulator_disable_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorEnableFtraceEvent& regulator_enable(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& regulator_enable_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& regulator_enable_delay(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& regulator_set_voltage(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& regulator_set_voltage_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupAttachTaskFtraceEvent& cgroup_attach_task(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupMkdirFtraceEvent& cgroup_mkdir(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupRemountFtraceEvent& cgroup_remount(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupRmdirFtraceEvent& cgroup_rmdir(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupTransferTasksFtraceEvent& cgroup_transfer_tasks(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupDestroyRootFtraceEvent& cgroup_destroy_root(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupReleaseFtraceEvent& cgroup_release(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupRenameFtraceEvent& cgroup_rename(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupSetupRootFtraceEvent& cgroup_setup_root(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdKickoffFtraceEvent& mdp_cmd_kickoff(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCommitFtraceEvent& mdp_commit(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetOtFtraceEvent& mdp_perf_set_ot(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpSsppChangeFtraceEvent& mdp_sspp_change(const FtraceEvent* msg);
  static const ::perfetto::protos::TracingMarkWriteFtraceEvent& tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& mdp_cmd_pingpong_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCompareBwFtraceEvent& mdp_compare_bw(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& mdp_perf_set_panic_luts(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpSsppSetFtraceEvent& mdp_sspp_set(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& mdp_cmd_readptr_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpMisrCrcFtraceEvent& mdp_misr_crc(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& mdp_perf_set_qos_luts(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpTraceCounterFtraceEvent& mdp_trace_counter(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& mdp_cmd_release_bw(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpMixerUpdateFtraceEvent& mdp_mixer_update(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& mdp_perf_set_wm_levels(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& mdp_video_underrun_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& mdp_cmd_wait_pingpong(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& mdp_perf_prefill_calc(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& mdp_perf_update_bus(const FtraceEvent* msg);
  static const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& rotator_bw_ao_as_context(const FtraceEvent* msg);
  static const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& mm_filemap_add_to_page_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& mm_filemap_delete_from_page_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionBeginFtraceEvent& mm_compaction_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& mm_compaction_defer_compaction(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionDeferredFtraceEvent& mm_compaction_deferred(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& mm_compaction_defer_reset(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionEndFtraceEvent& mm_compaction_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionFinishedFtraceEvent& mm_compaction_finished(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& mm_compaction_isolate_freepages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& mm_compaction_isolate_migratepages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& mm_compaction_kcompactd_sleep(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& mm_compaction_kcompactd_wake(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& mm_compaction_migratepages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionSuitableFtraceEvent& mm_compaction_suitable(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& mm_compaction_try_to_compact_pages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& mm_compaction_wakeup_kcompactd(const FtraceEvent* msg);
  static const ::perfetto::protos::SuspendResumeFtraceEvent& suspend_resume(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedWakeupNewFtraceEvent& sched_wakeup_new(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioBackmergeFtraceEvent& block_bio_backmerge(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioBounceFtraceEvent& block_bio_bounce(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioCompleteFtraceEvent& block_bio_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& block_bio_frontmerge(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioQueueFtraceEvent& block_bio_queue(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioRemapFtraceEvent& block_bio_remap(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockDirtyBufferFtraceEvent& block_dirty_buffer(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockGetrqFtraceEvent& block_getrq(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockPlugFtraceEvent& block_plug(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqAbortFtraceEvent& block_rq_abort(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqCompleteFtraceEvent& block_rq_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqInsertFtraceEvent& block_rq_insert(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqRemapFtraceEvent& block_rq_remap(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqRequeueFtraceEvent& block_rq_requeue(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockSleeprqFtraceEvent& block_sleeprq(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockSplitFtraceEvent& block_split(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockTouchBufferFtraceEvent& block_touch_buffer(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockUnplugFtraceEvent& block_unplug(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& ext4_alloc_da_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& ext4_allocate_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& ext4_allocate_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& ext4_begin_ordered_truncate(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& ext4_collapse_range(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& ext4_da_release_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& ext4_da_reserve_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& ext4_da_update_reserve_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& ext4_da_write_pages(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& ext4_da_write_pages_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& ext4_direct_io_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& ext4_direct_io_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& ext4_discard_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& ext4_discard_preallocations(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DropInodeFtraceEvent& ext4_drop_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& ext4_es_cache_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& ext4_es_find_delayed_extent_range_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& ext4_es_find_delayed_extent_range_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& ext4_es_insert_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& ext4_es_lookup_extent_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& ext4_es_lookup_extent_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& ext4_es_remove_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkFtraceEvent& ext4_es_shrink(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& ext4_es_shrink_count(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& ext4_es_shrink_scan_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& ext4_es_shrink_scan_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EvictInodeFtraceEvent& ext4_evict_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& ext4_ext_convert_to_initialized_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& ext4_ext_convert_to_initialized_fastpath(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& ext4_ext_handle_unwritten_extents(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& ext4_ext_in_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& ext4_ext_load_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& ext4_ext_map_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& ext4_ext_map_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& ext4_ext_put_in_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& ext4_ext_remove_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& ext4_ext_remove_space_done(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& ext4_ext_rm_idx(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& ext4_ext_rm_leaf(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& ext4_ext_show_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& ext4_fallocate_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FallocateExitFtraceEvent& ext4_fallocate_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& ext4_find_delalloc_range(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ForgetFtraceEvent& ext4_forget(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& ext4_free_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FreeInodeFtraceEvent& ext4_free_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& ext4_get_implied_cluster_alloc_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& ext4_get_reserved_cluster_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& ext4_ind_map_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& ext4_ind_map_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4InsertRangeFtraceEvent& ext4_insert_range(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& ext4_invalidatepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalStartFtraceEvent& ext4_journal_start(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& ext4_journal_start_reserved(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& ext4_journalled_invalidatepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& ext4_journalled_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4LoadInodeFtraceEvent& ext4_load_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& ext4_load_inode_bitmap(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& ext4_mark_inode_dirty(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& ext4_mb_bitmap_load(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& ext4_mb_buddy_bitmap_load(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& ext4_mb_discard_preallocations(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& ext4_mb_new_group_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& ext4_mb_new_inode_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& ext4_mb_release_group_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& ext4_mb_release_inode_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocAllocFtraceEvent& ext4_mballoc_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& ext4_mballoc_discard(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocFreeFtraceEvent& ext4_mballoc_free(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& ext4_mballoc_prealloc(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& ext4_other_inode_update_time(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4PunchHoleFtraceEvent& ext4_punch_hole(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& ext4_read_block_bitmap_load(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ReadpageFtraceEvent& ext4_readpage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ReleasepageFtraceEvent& ext4_releasepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& ext4_remove_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& ext4_request_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4RequestInodeFtraceEvent& ext4_request_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4SyncFsFtraceEvent& ext4_sync_fs(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& ext4_trim_all_free(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TrimExtentFtraceEvent& ext4_trim_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& ext4_truncate_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TruncateExitFtraceEvent& ext4_truncate_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& ext4_unlink_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& ext4_unlink_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WriteBeginFtraceEvent& ext4_write_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WriteEndFtraceEvent& ext4_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WritepageFtraceEvent& ext4_writepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WritepagesFtraceEvent& ext4_writepages(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& ext4_writepages_result(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& ext4_zero_range(const FtraceEvent* msg);
  static const ::perfetto::protos::TaskNewtaskFtraceEvent& task_newtask(const FtraceEvent* msg);
  static const ::perfetto::protos::TaskRenameFtraceEvent& task_rename(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessExecFtraceEvent& sched_process_exec(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessExitFtraceEvent& sched_process_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessForkFtraceEvent& sched_process_fork(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessFreeFtraceEvent& sched_process_free(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessHangFtraceEvent& sched_process_hang(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessWaitFtraceEvent& sched_process_wait(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& f2fs_do_submit_bio(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsEvictInodeFtraceEvent& f2fs_evict_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsFallocateFtraceEvent& f2fs_fallocate(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& f2fs_get_data_block(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsGetVictimFtraceEvent& f2fs_get_victim(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsIgetFtraceEvent& f2fs_iget(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsIgetExitFtraceEvent& f2fs_iget_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsNewInodeFtraceEvent& f2fs_new_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsReadpageFtraceEvent& f2fs_readpage(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& f2fs_reserve_new_block(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& f2fs_set_page_dirty(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& f2fs_submit_write_page(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& f2fs_sync_file_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& f2fs_sync_file_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSyncFsFtraceEvent& f2fs_sync_fs(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateFtraceEvent& f2fs_truncate(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& f2fs_truncate_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& f2fs_truncate_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& f2fs_truncate_data_blocks_range(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& f2fs_truncate_inode_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& f2fs_truncate_inode_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& f2fs_truncate_node(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& f2fs_truncate_nodes_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& f2fs_truncate_nodes_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& f2fs_truncate_partial_nodes(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& f2fs_unlink_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& f2fs_unlink_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& f2fs_vm_page_mkwrite(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsWriteBeginFtraceEvent& f2fs_write_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& f2fs_write_checkpoint(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsWriteEndFtraceEvent& f2fs_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& alloc_pages_iommu_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& alloc_pages_iommu_fail(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& alloc_pages_iommu_start(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesSysEndFtraceEvent& alloc_pages_sys_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesSysFailFtraceEvent& alloc_pages_sys_fail(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesSysStartFtraceEvent& alloc_pages_sys_start(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& dma_alloc_contiguous_retry(const FtraceEvent* msg);
  static const ::perfetto::protos::IommuMapRangeFtraceEvent& iommu_map_range(const FtraceEvent* msg);
  static const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& iommu_sec_ptbl_map_range_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& iommu_sec_ptbl_map_range_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferEndFtraceEvent& ion_alloc_buffer_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferFailFtraceEvent& ion_alloc_buffer_fail(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& ion_alloc_buffer_fallback(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferStartFtraceEvent& ion_alloc_buffer_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonCpAllocRetryFtraceEvent& ion_cp_alloc_retry(const FtraceEvent* msg);
  static const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& ion_cp_secure_buffer_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& ion_cp_secure_buffer_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonPrefetchingFtraceEvent& ion_prefetching(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& ion_secure_cma_add_to_pool_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& ion_secure_cma_add_to_pool_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& ion_secure_cma_allocate_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& ion_secure_cma_allocate_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& ion_secure_cma_shrink_pool_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& ion_secure_cma_shrink_pool_start(const FtraceEvent* msg);
  static const ::perfetto::protos::KfreeFtraceEvent& kfree(const FtraceEvent* msg);
  static const ::perfetto::protos::KmallocFtraceEvent& kmalloc(const FtraceEvent* msg);
  static const ::perfetto::protos::KmallocNodeFtraceEvent& kmalloc_node(const FtraceEvent* msg);
  static const ::perfetto::protos::KmemCacheAllocFtraceEvent& kmem_cache_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& kmem_cache_alloc_node(const FtraceEvent* msg);
  static const ::perfetto::protos::KmemCacheFreeFtraceEvent& kmem_cache_free(const FtraceEvent* msg);
  static const ::perfetto::protos::MigratePagesEndFtraceEvent& migrate_pages_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MigratePagesStartFtraceEvent& migrate_pages_start(const FtraceEvent* msg);
  static const ::perfetto::protos::MigrateRetryFtraceEvent& migrate_retry(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageAllocFtraceEvent& mm_page_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& mm_page_alloc_extfrag(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& mm_page_alloc_zone_locked(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageFreeFtraceEvent& mm_page_free(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& mm_page_free_batched(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& mm_page_pcpu_drain(const FtraceEvent* msg);
  static const ::perfetto::protos::RssStatFtraceEvent& rss_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::IonHeapShrinkFtraceEvent& ion_heap_shrink(const FtraceEvent* msg);
  static const ::perfetto::protos::IonHeapGrowFtraceEvent& ion_heap_grow(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceInitFtraceEvent& fence_init(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceDestroyFtraceEvent& fence_destroy(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceEnableSignalFtraceEvent& fence_enable_signal(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceSignaledFtraceEvent& fence_signaled(const FtraceEvent* msg);
  static const ::perfetto::protos::ClkEnableFtraceEvent& clk_enable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClkDisableFtraceEvent& clk_disable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClkSetRateFtraceEvent& clk_set_rate(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& binder_transaction_alloc_buf(const FtraceEvent* msg);
  static const ::perfetto::protos::SignalDeliverFtraceEvent& signal_deliver(const FtraceEvent* msg);
  static const ::perfetto::protos::SignalGenerateFtraceEvent& signal_generate(const FtraceEvent* msg);
  static const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& oom_score_adj_update(const FtraceEvent* msg);
  static const ::perfetto::protos::GenericFtraceEvent& generic(const FtraceEvent* msg);
  static const ::perfetto::protos::MmEventRecordFtraceEvent& mm_event_record(const FtraceEvent* msg);
  static const ::perfetto::protos::SysEnterFtraceEvent& sys_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::SysExitFtraceEvent& sys_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::ZeroFtraceEvent& zero(const FtraceEvent* msg);
  static const ::perfetto::protos::GpuFrequencyFtraceEvent& gpu_frequency(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& sde_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::MarkVictimFtraceEvent& mark_victim(const FtraceEvent* msg);
  static const ::perfetto::protos::IonStatFtraceEvent& ion_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::IonBufferCreateFtraceEvent& ion_buffer_create(const FtraceEvent* msg);
  static const ::perfetto::protos::IonBufferDestroyFtraceEvent& ion_buffer_destroy(const FtraceEvent* msg);
  static const ::perfetto::protos::ScmCallStartFtraceEvent& scm_call_start(const FtraceEvent* msg);
  static const ::perfetto::protos::ScmCallEndFtraceEvent& scm_call_end(const FtraceEvent* msg);
  static const ::perfetto::protos::GpuMemTotalFtraceEvent& gpu_mem_total(const FtraceEvent* msg);
  static const ::perfetto::protos::ThermalTemperatureFtraceEvent& thermal_temperature(const FtraceEvent* msg);
  static const ::perfetto::protos::CdevUpdateFtraceEvent& cdev_update(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpExitFtraceEvent& cpuhp_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& cpuhp_multi_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpEnterFtraceEvent& cpuhp_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpLatencyFtraceEvent& cpuhp_latency(const FtraceEvent* msg);
  static const ::perfetto::protos::FastrpcDmaStatFtraceEvent& fastrpc_dma_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& dpu_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& g2d_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& mali_tracing_mark_write(const FtraceEvent* msg);
};

const ::perfetto::protos::PrintFtraceEvent&
FtraceEvent::_Internal::print(const FtraceEvent* msg) {
  return *msg->event_.print_;
}
const ::perfetto::protos::SchedSwitchFtraceEvent&
FtraceEvent::_Internal::sched_switch(const FtraceEvent* msg) {
  return *msg->event_.sched_switch_;
}
const ::perfetto::protos::CpuFrequencyFtraceEvent&
FtraceEvent::_Internal::cpu_frequency(const FtraceEvent* msg) {
  return *msg->event_.cpu_frequency_;
}
const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent&
FtraceEvent::_Internal::cpu_frequency_limits(const FtraceEvent* msg) {
  return *msg->event_.cpu_frequency_limits_;
}
const ::perfetto::protos::CpuIdleFtraceEvent&
FtraceEvent::_Internal::cpu_idle(const FtraceEvent* msg) {
  return *msg->event_.cpu_idle_;
}
const ::perfetto::protos::ClockEnableFtraceEvent&
FtraceEvent::_Internal::clock_enable(const FtraceEvent* msg) {
  return *msg->event_.clock_enable_;
}
const ::perfetto::protos::ClockDisableFtraceEvent&
FtraceEvent::_Internal::clock_disable(const FtraceEvent* msg) {
  return *msg->event_.clock_disable_;
}
const ::perfetto::protos::ClockSetRateFtraceEvent&
FtraceEvent::_Internal::clock_set_rate(const FtraceEvent* msg) {
  return *msg->event_.clock_set_rate_;
}
const ::perfetto::protos::SchedWakeupFtraceEvent&
FtraceEvent::_Internal::sched_wakeup(const FtraceEvent* msg) {
  return *msg->event_.sched_wakeup_;
}
const ::perfetto::protos::SchedBlockedReasonFtraceEvent&
FtraceEvent::_Internal::sched_blocked_reason(const FtraceEvent* msg) {
  return *msg->event_.sched_blocked_reason_;
}
const ::perfetto::protos::SchedCpuHotplugFtraceEvent&
FtraceEvent::_Internal::sched_cpu_hotplug(const FtraceEvent* msg) {
  return *msg->event_.sched_cpu_hotplug_;
}
const ::perfetto::protos::SchedWakingFtraceEvent&
FtraceEvent::_Internal::sched_waking(const FtraceEvent* msg) {
  return *msg->event_.sched_waking_;
}
const ::perfetto::protos::IpiEntryFtraceEvent&
FtraceEvent::_Internal::ipi_entry(const FtraceEvent* msg) {
  return *msg->event_.ipi_entry_;
}
const ::perfetto::protos::IpiExitFtraceEvent&
FtraceEvent::_Internal::ipi_exit(const FtraceEvent* msg) {
  return *msg->event_.ipi_exit_;
}
const ::perfetto::protos::IpiRaiseFtraceEvent&
FtraceEvent::_Internal::ipi_raise(const FtraceEvent* msg) {
  return *msg->event_.ipi_raise_;
}
const ::perfetto::protos::SoftirqEntryFtraceEvent&
FtraceEvent::_Internal::softirq_entry(const FtraceEvent* msg) {
  return *msg->event_.softirq_entry_;
}
const ::perfetto::protos::SoftirqExitFtraceEvent&
FtraceEvent::_Internal::softirq_exit(const FtraceEvent* msg) {
  return *msg->event_.softirq_exit_;
}
const ::perfetto::protos::SoftirqRaiseFtraceEvent&
FtraceEvent::_Internal::softirq_raise(const FtraceEvent* msg) {
  return *msg->event_.softirq_raise_;
}
const ::perfetto::protos::I2cReadFtraceEvent&
FtraceEvent::_Internal::i2c_read(const FtraceEvent* msg) {
  return *msg->event_.i2c_read_;
}
const ::perfetto::protos::I2cWriteFtraceEvent&
FtraceEvent::_Internal::i2c_write(const FtraceEvent* msg) {
  return *msg->event_.i2c_write_;
}
const ::perfetto::protos::I2cResultFtraceEvent&
FtraceEvent::_Internal::i2c_result(const FtraceEvent* msg) {
  return *msg->event_.i2c_result_;
}
const ::perfetto::protos::I2cReplyFtraceEvent&
FtraceEvent::_Internal::i2c_reply(const FtraceEvent* msg) {
  return *msg->event_.i2c_reply_;
}
const ::perfetto::protos::SmbusReadFtraceEvent&
FtraceEvent::_Internal::smbus_read(const FtraceEvent* msg) {
  return *msg->event_.smbus_read_;
}
const ::perfetto::protos::SmbusWriteFtraceEvent&
FtraceEvent::_Internal::smbus_write(const FtraceEvent* msg) {
  return *msg->event_.smbus_write_;
}
const ::perfetto::protos::SmbusResultFtraceEvent&
FtraceEvent::_Internal::smbus_result(const FtraceEvent* msg) {
  return *msg->event_.smbus_result_;
}
const ::perfetto::protos::SmbusReplyFtraceEvent&
FtraceEvent::_Internal::smbus_reply(const FtraceEvent* msg) {
  return *msg->event_.smbus_reply_;
}
const ::perfetto::protos::LowmemoryKillFtraceEvent&
FtraceEvent::_Internal::lowmemory_kill(const FtraceEvent* msg) {
  return *msg->event_.lowmemory_kill_;
}
const ::perfetto::protos::IrqHandlerEntryFtraceEvent&
FtraceEvent::_Internal::irq_handler_entry(const FtraceEvent* msg) {
  return *msg->event_.irq_handler_entry_;
}
const ::perfetto::protos::IrqHandlerExitFtraceEvent&
FtraceEvent::_Internal::irq_handler_exit(const FtraceEvent* msg) {
  return *msg->event_.irq_handler_exit_;
}
const ::perfetto::protos::SyncPtFtraceEvent&
FtraceEvent::_Internal::sync_pt(const FtraceEvent* msg) {
  return *msg->event_.sync_pt_;
}
const ::perfetto::protos::SyncTimelineFtraceEvent&
FtraceEvent::_Internal::sync_timeline(const FtraceEvent* msg) {
  return *msg->event_.sync_timeline_;
}
const ::perfetto::protos::SyncWaitFtraceEvent&
FtraceEvent::_Internal::sync_wait(const FtraceEvent* msg) {
  return *msg->event_.sync_wait_;
}
const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_begin(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_write_begin_;
}
const ::perfetto::protos::Ext4DaWriteEndFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_end(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_write_end_;
}
const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent&
FtraceEvent::_Internal::ext4_sync_file_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_sync_file_enter_;
}
const ::perfetto::protos::Ext4SyncFileExitFtraceEvent&
FtraceEvent::_Internal::ext4_sync_file_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_sync_file_exit_;
}
const ::perfetto::protos::BlockRqIssueFtraceEvent&
FtraceEvent::_Internal::block_rq_issue(const FtraceEvent* msg) {
  return *msg->event_.block_rq_issue_;
}
const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_direct_reclaim_begin(const FtraceEvent* msg) {
  return *msg->event_.mm_vmscan_direct_reclaim_begin_;
}
const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_direct_reclaim_end(const FtraceEvent* msg) {
  return *msg->event_.mm_vmscan_direct_reclaim_end_;
}
const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_kswapd_wake(const FtraceEvent* msg) {
  return *msg->event_.mm_vmscan_kswapd_wake_;
}
const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_kswapd_sleep(const FtraceEvent* msg) {
  return *msg->event_.mm_vmscan_kswapd_sleep_;
}
const ::perfetto::protos::BinderTransactionFtraceEvent&
FtraceEvent::_Internal::binder_transaction(const FtraceEvent* msg) {
  return *msg->event_.binder_transaction_;
}
const ::perfetto::protos::BinderTransactionReceivedFtraceEvent&
FtraceEvent::_Internal::binder_transaction_received(const FtraceEvent* msg) {
  return *msg->event_.binder_transaction_received_;
}
const ::perfetto::protos::BinderSetPriorityFtraceEvent&
FtraceEvent::_Internal::binder_set_priority(const FtraceEvent* msg) {
  return *msg->event_.binder_set_priority_;
}
const ::perfetto::protos::BinderLockFtraceEvent&
FtraceEvent::_Internal::binder_lock(const FtraceEvent* msg) {
  return *msg->event_.binder_lock_;
}
const ::perfetto::protos::BinderLockedFtraceEvent&
FtraceEvent::_Internal::binder_locked(const FtraceEvent* msg) {
  return *msg->event_.binder_locked_;
}
const ::perfetto::protos::BinderUnlockFtraceEvent&
FtraceEvent::_Internal::binder_unlock(const FtraceEvent* msg) {
  return *msg->event_.binder_unlock_;
}
const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent&
FtraceEvent::_Internal::workqueue_activate_work(const FtraceEvent* msg) {
  return *msg->event_.workqueue_activate_work_;
}
const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent&
FtraceEvent::_Internal::workqueue_execute_end(const FtraceEvent* msg) {
  return *msg->event_.workqueue_execute_end_;
}
const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent&
FtraceEvent::_Internal::workqueue_execute_start(const FtraceEvent* msg) {
  return *msg->event_.workqueue_execute_start_;
}
const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent&
FtraceEvent::_Internal::workqueue_queue_work(const FtraceEvent* msg) {
  return *msg->event_.workqueue_queue_work_;
}
const ::perfetto::protos::RegulatorDisableFtraceEvent&
FtraceEvent::_Internal::regulator_disable(const FtraceEvent* msg) {
  return *msg->event_.regulator_disable_;
}
const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent&
FtraceEvent::_Internal::regulator_disable_complete(const FtraceEvent* msg) {
  return *msg->event_.regulator_disable_complete_;
}
const ::perfetto::protos::RegulatorEnableFtraceEvent&
FtraceEvent::_Internal::regulator_enable(const FtraceEvent* msg) {
  return *msg->event_.regulator_enable_;
}
const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent&
FtraceEvent::_Internal::regulator_enable_complete(const FtraceEvent* msg) {
  return *msg->event_.regulator_enable_complete_;
}
const ::perfetto::protos::RegulatorEnableDelayFtraceEvent&
FtraceEvent::_Internal::regulator_enable_delay(const FtraceEvent* msg) {
  return *msg->event_.regulator_enable_delay_;
}
const ::perfetto::protos::RegulatorSetVoltageFtraceEvent&
FtraceEvent::_Internal::regulator_set_voltage(const FtraceEvent* msg) {
  return *msg->event_.regulator_set_voltage_;
}
const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent&
FtraceEvent::_Internal::regulator_set_voltage_complete(const FtraceEvent* msg) {
  return *msg->event_.regulator_set_voltage_complete_;
}
const ::perfetto::protos::CgroupAttachTaskFtraceEvent&
FtraceEvent::_Internal::cgroup_attach_task(const FtraceEvent* msg) {
  return *msg->event_.cgroup_attach_task_;
}
const ::perfetto::protos::CgroupMkdirFtraceEvent&
FtraceEvent::_Internal::cgroup_mkdir(const FtraceEvent* msg) {
  return *msg->event_.cgroup_mkdir_;
}
const ::perfetto::protos::CgroupRemountFtraceEvent&
FtraceEvent::_Internal::cgroup_remount(const FtraceEvent* msg) {
  return *msg->event_.cgroup_remount_;
}
const ::perfetto::protos::CgroupRmdirFtraceEvent&
FtraceEvent::_Internal::cgroup_rmdir(const FtraceEvent* msg) {
  return *msg->event_.cgroup_rmdir_;
}
const ::perfetto::protos::CgroupTransferTasksFtraceEvent&
FtraceEvent::_Internal::cgroup_transfer_tasks(const FtraceEvent* msg) {
  return *msg->event_.cgroup_transfer_tasks_;
}
const ::perfetto::protos::CgroupDestroyRootFtraceEvent&
FtraceEvent::_Internal::cgroup_destroy_root(const FtraceEvent* msg) {
  return *msg->event_.cgroup_destroy_root_;
}
const ::perfetto::protos::CgroupReleaseFtraceEvent&
FtraceEvent::_Internal::cgroup_release(const FtraceEvent* msg) {
  return *msg->event_.cgroup_release_;
}
const ::perfetto::protos::CgroupRenameFtraceEvent&
FtraceEvent::_Internal::cgroup_rename(const FtraceEvent* msg) {
  return *msg->event_.cgroup_rename_;
}
const ::perfetto::protos::CgroupSetupRootFtraceEvent&
FtraceEvent::_Internal::cgroup_setup_root(const FtraceEvent* msg) {
  return *msg->event_.cgroup_setup_root_;
}
const ::perfetto::protos::MdpCmdKickoffFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_kickoff(const FtraceEvent* msg) {
  return *msg->event_.mdp_cmd_kickoff_;
}
const ::perfetto::protos::MdpCommitFtraceEvent&
FtraceEvent::_Internal::mdp_commit(const FtraceEvent* msg) {
  return *msg->event_.mdp_commit_;
}
const ::perfetto::protos::MdpPerfSetOtFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_ot(const FtraceEvent* msg) {
  return *msg->event_.mdp_perf_set_ot_;
}
const ::perfetto::protos::MdpSsppChangeFtraceEvent&
FtraceEvent::_Internal::mdp_sspp_change(const FtraceEvent* msg) {
  return *msg->event_.mdp_sspp_change_;
}
const ::perfetto::protos::TracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::tracing_mark_write(const FtraceEvent* msg) {
  return *msg->event_.tracing_mark_write_;
}
const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_pingpong_done(const FtraceEvent* msg) {
  return *msg->event_.mdp_cmd_pingpong_done_;
}
const ::perfetto::protos::MdpCompareBwFtraceEvent&
FtraceEvent::_Internal::mdp_compare_bw(const FtraceEvent* msg) {
  return *msg->event_.mdp_compare_bw_;
}
const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_panic_luts(const FtraceEvent* msg) {
  return *msg->event_.mdp_perf_set_panic_luts_;
}
const ::perfetto::protos::MdpSsppSetFtraceEvent&
FtraceEvent::_Internal::mdp_sspp_set(const FtraceEvent* msg) {
  return *msg->event_.mdp_sspp_set_;
}
const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_readptr_done(const FtraceEvent* msg) {
  return *msg->event_.mdp_cmd_readptr_done_;
}
const ::perfetto::protos::MdpMisrCrcFtraceEvent&
FtraceEvent::_Internal::mdp_misr_crc(const FtraceEvent* msg) {
  return *msg->event_.mdp_misr_crc_;
}
const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_qos_luts(const FtraceEvent* msg) {
  return *msg->event_.mdp_perf_set_qos_luts_;
}
const ::perfetto::protos::MdpTraceCounterFtraceEvent&
FtraceEvent::_Internal::mdp_trace_counter(const FtraceEvent* msg) {
  return *msg->event_.mdp_trace_counter_;
}
const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_release_bw(const FtraceEvent* msg) {
  return *msg->event_.mdp_cmd_release_bw_;
}
const ::perfetto::protos::MdpMixerUpdateFtraceEvent&
FtraceEvent::_Internal::mdp_mixer_update(const FtraceEvent* msg) {
  return *msg->event_.mdp_mixer_update_;
}
const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_wm_levels(const FtraceEvent* msg) {
  return *msg->event_.mdp_perf_set_wm_levels_;
}
const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent&
FtraceEvent::_Internal::mdp_video_underrun_done(const FtraceEvent* msg) {
  return *msg->event_.mdp_video_underrun_done_;
}
const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_wait_pingpong(const FtraceEvent* msg) {
  return *msg->event_.mdp_cmd_wait_pingpong_;
}
const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent&
FtraceEvent::_Internal::mdp_perf_prefill_calc(const FtraceEvent* msg) {
  return *msg->event_.mdp_perf_prefill_calc_;
}
const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent&
FtraceEvent::_Internal::mdp_perf_update_bus(const FtraceEvent* msg) {
  return *msg->event_.mdp_perf_update_bus_;
}
const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent&
FtraceEvent::_Internal::rotator_bw_ao_as_context(const FtraceEvent* msg) {
  return *msg->event_.rotator_bw_ao_as_context_;
}
const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent&
FtraceEvent::_Internal::mm_filemap_add_to_page_cache(const FtraceEvent* msg) {
  return *msg->event_.mm_filemap_add_to_page_cache_;
}
const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent&
FtraceEvent::_Internal::mm_filemap_delete_from_page_cache(const FtraceEvent* msg) {
  return *msg->event_.mm_filemap_delete_from_page_cache_;
}
const ::perfetto::protos::MmCompactionBeginFtraceEvent&
FtraceEvent::_Internal::mm_compaction_begin(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_begin_;
}
const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent&
FtraceEvent::_Internal::mm_compaction_defer_compaction(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_defer_compaction_;
}
const ::perfetto::protos::MmCompactionDeferredFtraceEvent&
FtraceEvent::_Internal::mm_compaction_deferred(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_deferred_;
}
const ::perfetto::protos::MmCompactionDeferResetFtraceEvent&
FtraceEvent::_Internal::mm_compaction_defer_reset(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_defer_reset_;
}
const ::perfetto::protos::MmCompactionEndFtraceEvent&
FtraceEvent::_Internal::mm_compaction_end(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_end_;
}
const ::perfetto::protos::MmCompactionFinishedFtraceEvent&
FtraceEvent::_Internal::mm_compaction_finished(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_finished_;
}
const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_isolate_freepages(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_isolate_freepages_;
}
const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_isolate_migratepages(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_isolate_migratepages_;
}
const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent&
FtraceEvent::_Internal::mm_compaction_kcompactd_sleep(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_kcompactd_sleep_;
}
const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent&
FtraceEvent::_Internal::mm_compaction_kcompactd_wake(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_kcompactd_wake_;
}
const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_migratepages(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_migratepages_;
}
const ::perfetto::protos::MmCompactionSuitableFtraceEvent&
FtraceEvent::_Internal::mm_compaction_suitable(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_suitable_;
}
const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_try_to_compact_pages(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_try_to_compact_pages_;
}
const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent&
FtraceEvent::_Internal::mm_compaction_wakeup_kcompactd(const FtraceEvent* msg) {
  return *msg->event_.mm_compaction_wakeup_kcompactd_;
}
const ::perfetto::protos::SuspendResumeFtraceEvent&
FtraceEvent::_Internal::suspend_resume(const FtraceEvent* msg) {
  return *msg->event_.suspend_resume_;
}
const ::perfetto::protos::SchedWakeupNewFtraceEvent&
FtraceEvent::_Internal::sched_wakeup_new(const FtraceEvent* msg) {
  return *msg->event_.sched_wakeup_new_;
}
const ::perfetto::protos::BlockBioBackmergeFtraceEvent&
FtraceEvent::_Internal::block_bio_backmerge(const FtraceEvent* msg) {
  return *msg->event_.block_bio_backmerge_;
}
const ::perfetto::protos::BlockBioBounceFtraceEvent&
FtraceEvent::_Internal::block_bio_bounce(const FtraceEvent* msg) {
  return *msg->event_.block_bio_bounce_;
}
const ::perfetto::protos::BlockBioCompleteFtraceEvent&
FtraceEvent::_Internal::block_bio_complete(const FtraceEvent* msg) {
  return *msg->event_.block_bio_complete_;
}
const ::perfetto::protos::BlockBioFrontmergeFtraceEvent&
FtraceEvent::_Internal::block_bio_frontmerge(const FtraceEvent* msg) {
  return *msg->event_.block_bio_frontmerge_;
}
const ::perfetto::protos::BlockBioQueueFtraceEvent&
FtraceEvent::_Internal::block_bio_queue(const FtraceEvent* msg) {
  return *msg->event_.block_bio_queue_;
}
const ::perfetto::protos::BlockBioRemapFtraceEvent&
FtraceEvent::_Internal::block_bio_remap(const FtraceEvent* msg) {
  return *msg->event_.block_bio_remap_;
}
const ::perfetto::protos::BlockDirtyBufferFtraceEvent&
FtraceEvent::_Internal::block_dirty_buffer(const FtraceEvent* msg) {
  return *msg->event_.block_dirty_buffer_;
}
const ::perfetto::protos::BlockGetrqFtraceEvent&
FtraceEvent::_Internal::block_getrq(const FtraceEvent* msg) {
  return *msg->event_.block_getrq_;
}
const ::perfetto::protos::BlockPlugFtraceEvent&
FtraceEvent::_Internal::block_plug(const FtraceEvent* msg) {
  return *msg->event_.block_plug_;
}
const ::perfetto::protos::BlockRqAbortFtraceEvent&
FtraceEvent::_Internal::block_rq_abort(const FtraceEvent* msg) {
  return *msg->event_.block_rq_abort_;
}
const ::perfetto::protos::BlockRqCompleteFtraceEvent&
FtraceEvent::_Internal::block_rq_complete(const FtraceEvent* msg) {
  return *msg->event_.block_rq_complete_;
}
const ::perfetto::protos::BlockRqInsertFtraceEvent&
FtraceEvent::_Internal::block_rq_insert(const FtraceEvent* msg) {
  return *msg->event_.block_rq_insert_;
}
const ::perfetto::protos::BlockRqRemapFtraceEvent&
FtraceEvent::_Internal::block_rq_remap(const FtraceEvent* msg) {
  return *msg->event_.block_rq_remap_;
}
const ::perfetto::protos::BlockRqRequeueFtraceEvent&
FtraceEvent::_Internal::block_rq_requeue(const FtraceEvent* msg) {
  return *msg->event_.block_rq_requeue_;
}
const ::perfetto::protos::BlockSleeprqFtraceEvent&
FtraceEvent::_Internal::block_sleeprq(const FtraceEvent* msg) {
  return *msg->event_.block_sleeprq_;
}
const ::perfetto::protos::BlockSplitFtraceEvent&
FtraceEvent::_Internal::block_split(const FtraceEvent* msg) {
  return *msg->event_.block_split_;
}
const ::perfetto::protos::BlockTouchBufferFtraceEvent&
FtraceEvent::_Internal::block_touch_buffer(const FtraceEvent* msg) {
  return *msg->event_.block_touch_buffer_;
}
const ::perfetto::protos::BlockUnplugFtraceEvent&
FtraceEvent::_Internal::block_unplug(const FtraceEvent* msg) {
  return *msg->event_.block_unplug_;
}
const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_alloc_da_blocks(const FtraceEvent* msg) {
  return *msg->event_.ext4_alloc_da_blocks_;
}
const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_allocate_blocks(const FtraceEvent* msg) {
  return *msg->event_.ext4_allocate_blocks_;
}
const ::perfetto::protos::Ext4AllocateInodeFtraceEvent&
FtraceEvent::_Internal::ext4_allocate_inode(const FtraceEvent* msg) {
  return *msg->event_.ext4_allocate_inode_;
}
const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent&
FtraceEvent::_Internal::ext4_begin_ordered_truncate(const FtraceEvent* msg) {
  return *msg->event_.ext4_begin_ordered_truncate_;
}
const ::perfetto::protos::Ext4CollapseRangeFtraceEvent&
FtraceEvent::_Internal::ext4_collapse_range(const FtraceEvent* msg) {
  return *msg->event_.ext4_collapse_range_;
}
const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_da_release_space(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_release_space_;
}
const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_da_reserve_space(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_reserve_space_;
}
const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_da_update_reserve_space(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_update_reserve_space_;
}
const ::perfetto::protos::Ext4DaWritePagesFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_pages(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_write_pages_;
}
const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_pages_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_da_write_pages_extent_;
}
const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent&
FtraceEvent::_Internal::ext4_direct_io_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_direct_io_enter_;
}
const ::perfetto::protos::Ext4DirectIOExitFtraceEvent&
FtraceEvent::_Internal::ext4_direct_io_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_direct_io_exit_;
}
const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_discard_blocks(const FtraceEvent* msg) {
  return *msg->event_.ext4_discard_blocks_;
}
const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent&
FtraceEvent::_Internal::ext4_discard_preallocations(const FtraceEvent* msg) {
  return *msg->event_.ext4_discard_preallocations_;
}
const ::perfetto::protos::Ext4DropInodeFtraceEvent&
FtraceEvent::_Internal::ext4_drop_inode(const FtraceEvent* msg) {
  return *msg->event_.ext4_drop_inode_;
}
const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent&
FtraceEvent::_Internal::ext4_es_cache_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_cache_extent_;
}
const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent&
FtraceEvent::_Internal::ext4_es_find_delayed_extent_range_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_find_delayed_extent_range_enter_;
}
const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent&
FtraceEvent::_Internal::ext4_es_find_delayed_extent_range_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_find_delayed_extent_range_exit_;
}
const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent&
FtraceEvent::_Internal::ext4_es_insert_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_insert_extent_;
}
const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent&
FtraceEvent::_Internal::ext4_es_lookup_extent_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_lookup_extent_enter_;
}
const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent&
FtraceEvent::_Internal::ext4_es_lookup_extent_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_lookup_extent_exit_;
}
const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent&
FtraceEvent::_Internal::ext4_es_remove_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_remove_extent_;
}
const ::perfetto::protos::Ext4EsShrinkFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_shrink_;
}
const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink_count(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_shrink_count_;
}
const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink_scan_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_shrink_scan_enter_;
}
const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink_scan_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_es_shrink_scan_exit_;
}
const ::perfetto::protos::Ext4EvictInodeFtraceEvent&
FtraceEvent::_Internal::ext4_evict_inode(const FtraceEvent* msg) {
  return *msg->event_.ext4_evict_inode_;
}
const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent&
FtraceEvent::_Internal::ext4_ext_convert_to_initialized_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_convert_to_initialized_enter_;
}
const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent&
FtraceEvent::_Internal::ext4_ext_convert_to_initialized_fastpath(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_convert_to_initialized_fastpath_;
}
const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent&
FtraceEvent::_Internal::ext4_ext_handle_unwritten_extents(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_handle_unwritten_extents_;
}
const ::perfetto::protos::Ext4ExtInCacheFtraceEvent&
FtraceEvent::_Internal::ext4_ext_in_cache(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_in_cache_;
}
const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent&
FtraceEvent::_Internal::ext4_ext_load_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_load_extent_;
}
const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent&
FtraceEvent::_Internal::ext4_ext_map_blocks_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_map_blocks_enter_;
}
const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent&
FtraceEvent::_Internal::ext4_ext_map_blocks_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_map_blocks_exit_;
}
const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent&
FtraceEvent::_Internal::ext4_ext_put_in_cache(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_put_in_cache_;
}
const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_ext_remove_space(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_remove_space_;
}
const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent&
FtraceEvent::_Internal::ext4_ext_remove_space_done(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_remove_space_done_;
}
const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent&
FtraceEvent::_Internal::ext4_ext_rm_idx(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_rm_idx_;
}
const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent&
FtraceEvent::_Internal::ext4_ext_rm_leaf(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_rm_leaf_;
}
const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent&
FtraceEvent::_Internal::ext4_ext_show_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_ext_show_extent_;
}
const ::perfetto::protos::Ext4FallocateEnterFtraceEvent&
FtraceEvent::_Internal::ext4_fallocate_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_fallocate_enter_;
}
const ::perfetto::protos::Ext4FallocateExitFtraceEvent&
FtraceEvent::_Internal::ext4_fallocate_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_fallocate_exit_;
}
const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent&
FtraceEvent::_Internal::ext4_find_delalloc_range(const FtraceEvent* msg) {
  return *msg->event_.ext4_find_delalloc_range_;
}
const ::perfetto::protos::Ext4ForgetFtraceEvent&
FtraceEvent::_Internal::ext4_forget(const FtraceEvent* msg) {
  return *msg->event_.ext4_forget_;
}
const ::perfetto::protos::Ext4FreeBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_free_blocks(const FtraceEvent* msg) {
  return *msg->event_.ext4_free_blocks_;
}
const ::perfetto::protos::Ext4FreeInodeFtraceEvent&
FtraceEvent::_Internal::ext4_free_inode(const FtraceEvent* msg) {
  return *msg->event_.ext4_free_inode_;
}
const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent&
FtraceEvent::_Internal::ext4_get_implied_cluster_alloc_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_get_implied_cluster_alloc_exit_;
}
const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent&
FtraceEvent::_Internal::ext4_get_reserved_cluster_alloc(const FtraceEvent* msg) {
  return *msg->event_.ext4_get_reserved_cluster_alloc_;
}
const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent&
FtraceEvent::_Internal::ext4_ind_map_blocks_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_ind_map_blocks_enter_;
}
const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent&
FtraceEvent::_Internal::ext4_ind_map_blocks_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_ind_map_blocks_exit_;
}
const ::perfetto::protos::Ext4InsertRangeFtraceEvent&
FtraceEvent::_Internal::ext4_insert_range(const FtraceEvent* msg) {
  return *msg->event_.ext4_insert_range_;
}
const ::perfetto::protos::Ext4InvalidatepageFtraceEvent&
FtraceEvent::_Internal::ext4_invalidatepage(const FtraceEvent* msg) {
  return *msg->event_.ext4_invalidatepage_;
}
const ::perfetto::protos::Ext4JournalStartFtraceEvent&
FtraceEvent::_Internal::ext4_journal_start(const FtraceEvent* msg) {
  return *msg->event_.ext4_journal_start_;
}
const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent&
FtraceEvent::_Internal::ext4_journal_start_reserved(const FtraceEvent* msg) {
  return *msg->event_.ext4_journal_start_reserved_;
}
const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent&
FtraceEvent::_Internal::ext4_journalled_invalidatepage(const FtraceEvent* msg) {
  return *msg->event_.ext4_journalled_invalidatepage_;
}
const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent&
FtraceEvent::_Internal::ext4_journalled_write_end(const FtraceEvent* msg) {
  return *msg->event_.ext4_journalled_write_end_;
}
const ::perfetto::protos::Ext4LoadInodeFtraceEvent&
FtraceEvent::_Internal::ext4_load_inode(const FtraceEvent* msg) {
  return *msg->event_.ext4_load_inode_;
}
const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent&
FtraceEvent::_Internal::ext4_load_inode_bitmap(const FtraceEvent* msg) {
  return *msg->event_.ext4_load_inode_bitmap_;
}
const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent&
FtraceEvent::_Internal::ext4_mark_inode_dirty(const FtraceEvent* msg) {
  return *msg->event_.ext4_mark_inode_dirty_;
}
const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent&
FtraceEvent::_Internal::ext4_mb_bitmap_load(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_bitmap_load_;
}
const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent&
FtraceEvent::_Internal::ext4_mb_buddy_bitmap_load(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_buddy_bitmap_load_;
}
const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent&
FtraceEvent::_Internal::ext4_mb_discard_preallocations(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_discard_preallocations_;
}
const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_new_group_pa(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_new_group_pa_;
}
const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_new_inode_pa(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_new_inode_pa_;
}
const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_release_group_pa(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_release_group_pa_;
}
const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_release_inode_pa(const FtraceEvent* msg) {
  return *msg->event_.ext4_mb_release_inode_pa_;
}
const ::perfetto::protos::Ext4MballocAllocFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_alloc(const FtraceEvent* msg) {
  return *msg->event_.ext4_mballoc_alloc_;
}
const ::perfetto::protos::Ext4MballocDiscardFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_discard(const FtraceEvent* msg) {
  return *msg->event_.ext4_mballoc_discard_;
}
const ::perfetto::protos::Ext4MballocFreeFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_free(const FtraceEvent* msg) {
  return *msg->event_.ext4_mballoc_free_;
}
const ::perfetto::protos::Ext4MballocPreallocFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_prealloc(const FtraceEvent* msg) {
  return *msg->event_.ext4_mballoc_prealloc_;
}
const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent&
FtraceEvent::_Internal::ext4_other_inode_update_time(const FtraceEvent* msg) {
  return *msg->event_.ext4_other_inode_update_time_;
}
const ::perfetto::protos::Ext4PunchHoleFtraceEvent&
FtraceEvent::_Internal::ext4_punch_hole(const FtraceEvent* msg) {
  return *msg->event_.ext4_punch_hole_;
}
const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent&
FtraceEvent::_Internal::ext4_read_block_bitmap_load(const FtraceEvent* msg) {
  return *msg->event_.ext4_read_block_bitmap_load_;
}
const ::perfetto::protos::Ext4ReadpageFtraceEvent&
FtraceEvent::_Internal::ext4_readpage(const FtraceEvent* msg) {
  return *msg->event_.ext4_readpage_;
}
const ::perfetto::protos::Ext4ReleasepageFtraceEvent&
FtraceEvent::_Internal::ext4_releasepage(const FtraceEvent* msg) {
  return *msg->event_.ext4_releasepage_;
}
const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_remove_blocks(const FtraceEvent* msg) {
  return *msg->event_.ext4_remove_blocks_;
}
const ::perfetto::protos::Ext4RequestBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_request_blocks(const FtraceEvent* msg) {
  return *msg->event_.ext4_request_blocks_;
}
const ::perfetto::protos::Ext4RequestInodeFtraceEvent&
FtraceEvent::_Internal::ext4_request_inode(const FtraceEvent* msg) {
  return *msg->event_.ext4_request_inode_;
}
const ::perfetto::protos::Ext4SyncFsFtraceEvent&
FtraceEvent::_Internal::ext4_sync_fs(const FtraceEvent* msg) {
  return *msg->event_.ext4_sync_fs_;
}
const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent&
FtraceEvent::_Internal::ext4_trim_all_free(const FtraceEvent* msg) {
  return *msg->event_.ext4_trim_all_free_;
}
const ::perfetto::protos::Ext4TrimExtentFtraceEvent&
FtraceEvent::_Internal::ext4_trim_extent(const FtraceEvent* msg) {
  return *msg->event_.ext4_trim_extent_;
}
const ::perfetto::protos::Ext4TruncateEnterFtraceEvent&
FtraceEvent::_Internal::ext4_truncate_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_truncate_enter_;
}
const ::perfetto::protos::Ext4TruncateExitFtraceEvent&
FtraceEvent::_Internal::ext4_truncate_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_truncate_exit_;
}
const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent&
FtraceEvent::_Internal::ext4_unlink_enter(const FtraceEvent* msg) {
  return *msg->event_.ext4_unlink_enter_;
}
const ::perfetto::protos::Ext4UnlinkExitFtraceEvent&
FtraceEvent::_Internal::ext4_unlink_exit(const FtraceEvent* msg) {
  return *msg->event_.ext4_unlink_exit_;
}
const ::perfetto::protos::Ext4WriteBeginFtraceEvent&
FtraceEvent::_Internal::ext4_write_begin(const FtraceEvent* msg) {
  return *msg->event_.ext4_write_begin_;
}
const ::perfetto::protos::Ext4WriteEndFtraceEvent&
FtraceEvent::_Internal::ext4_write_end(const FtraceEvent* msg) {
  return *msg->event_.ext4_write_end_;
}
const ::perfetto::protos::Ext4WritepageFtraceEvent&
FtraceEvent::_Internal::ext4_writepage(const FtraceEvent* msg) {
  return *msg->event_.ext4_writepage_;
}
const ::perfetto::protos::Ext4WritepagesFtraceEvent&
FtraceEvent::_Internal::ext4_writepages(const FtraceEvent* msg) {
  return *msg->event_.ext4_writepages_;
}
const ::perfetto::protos::Ext4WritepagesResultFtraceEvent&
FtraceEvent::_Internal::ext4_writepages_result(const FtraceEvent* msg) {
  return *msg->event_.ext4_writepages_result_;
}
const ::perfetto::protos::Ext4ZeroRangeFtraceEvent&
FtraceEvent::_Internal::ext4_zero_range(const FtraceEvent* msg) {
  return *msg->event_.ext4_zero_range_;
}
const ::perfetto::protos::TaskNewtaskFtraceEvent&
FtraceEvent::_Internal::task_newtask(const FtraceEvent* msg) {
  return *msg->event_.task_newtask_;
}
const ::perfetto::protos::TaskRenameFtraceEvent&
FtraceEvent::_Internal::task_rename(const FtraceEvent* msg) {
  return *msg->event_.task_rename_;
}
const ::perfetto::protos::SchedProcessExecFtraceEvent&
FtraceEvent::_Internal::sched_process_exec(const FtraceEvent* msg) {
  return *msg->event_.sched_process_exec_;
}
const ::perfetto::protos::SchedProcessExitFtraceEvent&
FtraceEvent::_Internal::sched_process_exit(const FtraceEvent* msg) {
  return *msg->event_.sched_process_exit_;
}
const ::perfetto::protos::SchedProcessForkFtraceEvent&
FtraceEvent::_Internal::sched_process_fork(const FtraceEvent* msg) {
  return *msg->event_.sched_process_fork_;
}
const ::perfetto::protos::SchedProcessFreeFtraceEvent&
FtraceEvent::_Internal::sched_process_free(const FtraceEvent* msg) {
  return *msg->event_.sched_process_free_;
}
const ::perfetto::protos::SchedProcessHangFtraceEvent&
FtraceEvent::_Internal::sched_process_hang(const FtraceEvent* msg) {
  return *msg->event_.sched_process_hang_;
}
const ::perfetto::protos::SchedProcessWaitFtraceEvent&
FtraceEvent::_Internal::sched_process_wait(const FtraceEvent* msg) {
  return *msg->event_.sched_process_wait_;
}
const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent&
FtraceEvent::_Internal::f2fs_do_submit_bio(const FtraceEvent* msg) {
  return *msg->event_.f2fs_do_submit_bio_;
}
const ::perfetto::protos::F2fsEvictInodeFtraceEvent&
FtraceEvent::_Internal::f2fs_evict_inode(const FtraceEvent* msg) {
  return *msg->event_.f2fs_evict_inode_;
}
const ::perfetto::protos::F2fsFallocateFtraceEvent&
FtraceEvent::_Internal::f2fs_fallocate(const FtraceEvent* msg) {
  return *msg->event_.f2fs_fallocate_;
}
const ::perfetto::protos::F2fsGetDataBlockFtraceEvent&
FtraceEvent::_Internal::f2fs_get_data_block(const FtraceEvent* msg) {
  return *msg->event_.f2fs_get_data_block_;
}
const ::perfetto::protos::F2fsGetVictimFtraceEvent&
FtraceEvent::_Internal::f2fs_get_victim(const FtraceEvent* msg) {
  return *msg->event_.f2fs_get_victim_;
}
const ::perfetto::protos::F2fsIgetFtraceEvent&
FtraceEvent::_Internal::f2fs_iget(const FtraceEvent* msg) {
  return *msg->event_.f2fs_iget_;
}
const ::perfetto::protos::F2fsIgetExitFtraceEvent&
FtraceEvent::_Internal::f2fs_iget_exit(const FtraceEvent* msg) {
  return *msg->event_.f2fs_iget_exit_;
}
const ::perfetto::protos::F2fsNewInodeFtraceEvent&
FtraceEvent::_Internal::f2fs_new_inode(const FtraceEvent* msg) {
  return *msg->event_.f2fs_new_inode_;
}
const ::perfetto::protos::F2fsReadpageFtraceEvent&
FtraceEvent::_Internal::f2fs_readpage(const FtraceEvent* msg) {
  return *msg->event_.f2fs_readpage_;
}
const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent&
FtraceEvent::_Internal::f2fs_reserve_new_block(const FtraceEvent* msg) {
  return *msg->event_.f2fs_reserve_new_block_;
}
const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent&
FtraceEvent::_Internal::f2fs_set_page_dirty(const FtraceEvent* msg) {
  return *msg->event_.f2fs_set_page_dirty_;
}
const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent&
FtraceEvent::_Internal::f2fs_submit_write_page(const FtraceEvent* msg) {
  return *msg->event_.f2fs_submit_write_page_;
}
const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_sync_file_enter(const FtraceEvent* msg) {
  return *msg->event_.f2fs_sync_file_enter_;
}
const ::perfetto::protos::F2fsSyncFileExitFtraceEvent&
FtraceEvent::_Internal::f2fs_sync_file_exit(const FtraceEvent* msg) {
  return *msg->event_.f2fs_sync_file_exit_;
}
const ::perfetto::protos::F2fsSyncFsFtraceEvent&
FtraceEvent::_Internal::f2fs_sync_fs(const FtraceEvent* msg) {
  return *msg->event_.f2fs_sync_fs_;
}
const ::perfetto::protos::F2fsTruncateFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_;
}
const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_blocks_enter(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_blocks_enter_;
}
const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_blocks_exit(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_blocks_exit_;
}
const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_data_blocks_range(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_data_blocks_range_;
}
const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_inode_blocks_enter(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_inode_blocks_enter_;
}
const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_inode_blocks_exit(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_inode_blocks_exit_;
}
const ::perfetto::protos::F2fsTruncateNodeFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_node(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_node_;
}
const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_nodes_enter(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_nodes_enter_;
}
const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_nodes_exit(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_nodes_exit_;
}
const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_partial_nodes(const FtraceEvent* msg) {
  return *msg->event_.f2fs_truncate_partial_nodes_;
}
const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_unlink_enter(const FtraceEvent* msg) {
  return *msg->event_.f2fs_unlink_enter_;
}
const ::perfetto::protos::F2fsUnlinkExitFtraceEvent&
FtraceEvent::_Internal::f2fs_unlink_exit(const FtraceEvent* msg) {
  return *msg->event_.f2fs_unlink_exit_;
}
const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent&
FtraceEvent::_Internal::f2fs_vm_page_mkwrite(const FtraceEvent* msg) {
  return *msg->event_.f2fs_vm_page_mkwrite_;
}
const ::perfetto::protos::F2fsWriteBeginFtraceEvent&
FtraceEvent::_Internal::f2fs_write_begin(const FtraceEvent* msg) {
  return *msg->event_.f2fs_write_begin_;
}
const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent&
FtraceEvent::_Internal::f2fs_write_checkpoint(const FtraceEvent* msg) {
  return *msg->event_.f2fs_write_checkpoint_;
}
const ::perfetto::protos::F2fsWriteEndFtraceEvent&
FtraceEvent::_Internal::f2fs_write_end(const FtraceEvent* msg) {
  return *msg->event_.f2fs_write_end_;
}
const ::perfetto::protos::AllocPagesIommuEndFtraceEvent&
FtraceEvent::_Internal::alloc_pages_iommu_end(const FtraceEvent* msg) {
  return *msg->event_.alloc_pages_iommu_end_;
}
const ::perfetto::protos::AllocPagesIommuFailFtraceEvent&
FtraceEvent::_Internal::alloc_pages_iommu_fail(const FtraceEvent* msg) {
  return *msg->event_.alloc_pages_iommu_fail_;
}
const ::perfetto::protos::AllocPagesIommuStartFtraceEvent&
FtraceEvent::_Internal::alloc_pages_iommu_start(const FtraceEvent* msg) {
  return *msg->event_.alloc_pages_iommu_start_;
}
const ::perfetto::protos::AllocPagesSysEndFtraceEvent&
FtraceEvent::_Internal::alloc_pages_sys_end(const FtraceEvent* msg) {
  return *msg->event_.alloc_pages_sys_end_;
}
const ::perfetto::protos::AllocPagesSysFailFtraceEvent&
FtraceEvent::_Internal::alloc_pages_sys_fail(const FtraceEvent* msg) {
  return *msg->event_.alloc_pages_sys_fail_;
}
const ::perfetto::protos::AllocPagesSysStartFtraceEvent&
FtraceEvent::_Internal::alloc_pages_sys_start(const FtraceEvent* msg) {
  return *msg->event_.alloc_pages_sys_start_;
}
const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent&
FtraceEvent::_Internal::dma_alloc_contiguous_retry(const FtraceEvent* msg) {
  return *msg->event_.dma_alloc_contiguous_retry_;
}
const ::perfetto::protos::IommuMapRangeFtraceEvent&
FtraceEvent::_Internal::iommu_map_range(const FtraceEvent* msg) {
  return *msg->event_.iommu_map_range_;
}
const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent&
FtraceEvent::_Internal::iommu_sec_ptbl_map_range_end(const FtraceEvent* msg) {
  return *msg->event_.iommu_sec_ptbl_map_range_end_;
}
const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent&
FtraceEvent::_Internal::iommu_sec_ptbl_map_range_start(const FtraceEvent* msg) {
  return *msg->event_.iommu_sec_ptbl_map_range_start_;
}
const ::perfetto::protos::IonAllocBufferEndFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_end(const FtraceEvent* msg) {
  return *msg->event_.ion_alloc_buffer_end_;
}
const ::perfetto::protos::IonAllocBufferFailFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_fail(const FtraceEvent* msg) {
  return *msg->event_.ion_alloc_buffer_fail_;
}
const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_fallback(const FtraceEvent* msg) {
  return *msg->event_.ion_alloc_buffer_fallback_;
}
const ::perfetto::protos::IonAllocBufferStartFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_start(const FtraceEvent* msg) {
  return *msg->event_.ion_alloc_buffer_start_;
}
const ::perfetto::protos::IonCpAllocRetryFtraceEvent&
FtraceEvent::_Internal::ion_cp_alloc_retry(const FtraceEvent* msg) {
  return *msg->event_.ion_cp_alloc_retry_;
}
const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent&
FtraceEvent::_Internal::ion_cp_secure_buffer_end(const FtraceEvent* msg) {
  return *msg->event_.ion_cp_secure_buffer_end_;
}
const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent&
FtraceEvent::_Internal::ion_cp_secure_buffer_start(const FtraceEvent* msg) {
  return *msg->event_.ion_cp_secure_buffer_start_;
}
const ::perfetto::protos::IonPrefetchingFtraceEvent&
FtraceEvent::_Internal::ion_prefetching(const FtraceEvent* msg) {
  return *msg->event_.ion_prefetching_;
}
const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_add_to_pool_end(const FtraceEvent* msg) {
  return *msg->event_.ion_secure_cma_add_to_pool_end_;
}
const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_add_to_pool_start(const FtraceEvent* msg) {
  return *msg->event_.ion_secure_cma_add_to_pool_start_;
}
const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_allocate_end(const FtraceEvent* msg) {
  return *msg->event_.ion_secure_cma_allocate_end_;
}
const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_allocate_start(const FtraceEvent* msg) {
  return *msg->event_.ion_secure_cma_allocate_start_;
}
const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_shrink_pool_end(const FtraceEvent* msg) {
  return *msg->event_.ion_secure_cma_shrink_pool_end_;
}
const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_shrink_pool_start(const FtraceEvent* msg) {
  return *msg->event_.ion_secure_cma_shrink_pool_start_;
}
const ::perfetto::protos::KfreeFtraceEvent&
FtraceEvent::_Internal::kfree(const FtraceEvent* msg) {
  return *msg->event_.kfree_;
}
const ::perfetto::protos::KmallocFtraceEvent&
FtraceEvent::_Internal::kmalloc(const FtraceEvent* msg) {
  return *msg->event_.kmalloc_;
}
const ::perfetto::protos::KmallocNodeFtraceEvent&
FtraceEvent::_Internal::kmalloc_node(const FtraceEvent* msg) {
  return *msg->event_.kmalloc_node_;
}
const ::perfetto::protos::KmemCacheAllocFtraceEvent&
FtraceEvent::_Internal::kmem_cache_alloc(const FtraceEvent* msg) {
  return *msg->event_.kmem_cache_alloc_;
}
const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent&
FtraceEvent::_Internal::kmem_cache_alloc_node(const FtraceEvent* msg) {
  return *msg->event_.kmem_cache_alloc_node_;
}
const ::perfetto::protos::KmemCacheFreeFtraceEvent&
FtraceEvent::_Internal::kmem_cache_free(const FtraceEvent* msg) {
  return *msg->event_.kmem_cache_free_;
}
const ::perfetto::protos::MigratePagesEndFtraceEvent&
FtraceEvent::_Internal::migrate_pages_end(const FtraceEvent* msg) {
  return *msg->event_.migrate_pages_end_;
}
const ::perfetto::protos::MigratePagesStartFtraceEvent&
FtraceEvent::_Internal::migrate_pages_start(const FtraceEvent* msg) {
  return *msg->event_.migrate_pages_start_;
}
const ::perfetto::protos::MigrateRetryFtraceEvent&
FtraceEvent::_Internal::migrate_retry(const FtraceEvent* msg) {
  return *msg->event_.migrate_retry_;
}
const ::perfetto::protos::MmPageAllocFtraceEvent&
FtraceEvent::_Internal::mm_page_alloc(const FtraceEvent* msg) {
  return *msg->event_.mm_page_alloc_;
}
const ::perfetto::protos::MmPageAllocExtfragFtraceEvent&
FtraceEvent::_Internal::mm_page_alloc_extfrag(const FtraceEvent* msg) {
  return *msg->event_.mm_page_alloc_extfrag_;
}
const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent&
FtraceEvent::_Internal::mm_page_alloc_zone_locked(const FtraceEvent* msg) {
  return *msg->event_.mm_page_alloc_zone_locked_;
}
const ::perfetto::protos::MmPageFreeFtraceEvent&
FtraceEvent::_Internal::mm_page_free(const FtraceEvent* msg) {
  return *msg->event_.mm_page_free_;
}
const ::perfetto::protos::MmPageFreeBatchedFtraceEvent&
FtraceEvent::_Internal::mm_page_free_batched(const FtraceEvent* msg) {
  return *msg->event_.mm_page_free_batched_;
}
const ::perfetto::protos::MmPagePcpuDrainFtraceEvent&
FtraceEvent::_Internal::mm_page_pcpu_drain(const FtraceEvent* msg) {
  return *msg->event_.mm_page_pcpu_drain_;
}
const ::perfetto::protos::RssStatFtraceEvent&
FtraceEvent::_Internal::rss_stat(const FtraceEvent* msg) {
  return *msg->event_.rss_stat_;
}
const ::perfetto::protos::IonHeapShrinkFtraceEvent&
FtraceEvent::_Internal::ion_heap_shrink(const FtraceEvent* msg) {
  return *msg->event_.ion_heap_shrink_;
}
const ::perfetto::protos::IonHeapGrowFtraceEvent&
FtraceEvent::_Internal::ion_heap_grow(const FtraceEvent* msg) {
  return *msg->event_.ion_heap_grow_;
}
const ::perfetto::protos::FenceInitFtraceEvent&
FtraceEvent::_Internal::fence_init(const FtraceEvent* msg) {
  return *msg->event_.fence_init_;
}
const ::perfetto::protos::FenceDestroyFtraceEvent&
FtraceEvent::_Internal::fence_destroy(const FtraceEvent* msg) {
  return *msg->event_.fence_destroy_;
}
const ::perfetto::protos::FenceEnableSignalFtraceEvent&
FtraceEvent::_Internal::fence_enable_signal(const FtraceEvent* msg) {
  return *msg->event_.fence_enable_signal_;
}
const ::perfetto::protos::FenceSignaledFtraceEvent&
FtraceEvent::_Internal::fence_signaled(const FtraceEvent* msg) {
  return *msg->event_.fence_signaled_;
}
const ::perfetto::protos::ClkEnableFtraceEvent&
FtraceEvent::_Internal::clk_enable(const FtraceEvent* msg) {
  return *msg->event_.clk_enable_;
}
const ::perfetto::protos::ClkDisableFtraceEvent&
FtraceEvent::_Internal::clk_disable(const FtraceEvent* msg) {
  return *msg->event_.clk_disable_;
}
const ::perfetto::protos::ClkSetRateFtraceEvent&
FtraceEvent::_Internal::clk_set_rate(const FtraceEvent* msg) {
  return *msg->event_.clk_set_rate_;
}
const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent&
FtraceEvent::_Internal::binder_transaction_alloc_buf(const FtraceEvent* msg) {
  return *msg->event_.binder_transaction_alloc_buf_;
}
const ::perfetto::protos::SignalDeliverFtraceEvent&
FtraceEvent::_Internal::signal_deliver(const FtraceEvent* msg) {
  return *msg->event_.signal_deliver_;
}
const ::perfetto::protos::SignalGenerateFtraceEvent&
FtraceEvent::_Internal::signal_generate(const FtraceEvent* msg) {
  return *msg->event_.signal_generate_;
}
const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent&
FtraceEvent::_Internal::oom_score_adj_update(const FtraceEvent* msg) {
  return *msg->event_.oom_score_adj_update_;
}
const ::perfetto::protos::GenericFtraceEvent&
FtraceEvent::_Internal::generic(const FtraceEvent* msg) {
  return *msg->event_.generic_;
}
const ::perfetto::protos::MmEventRecordFtraceEvent&
FtraceEvent::_Internal::mm_event_record(const FtraceEvent* msg) {
  return *msg->event_.mm_event_record_;
}
const ::perfetto::protos::SysEnterFtraceEvent&
FtraceEvent::_Internal::sys_enter(const FtraceEvent* msg) {
  return *msg->event_.sys_enter_;
}
const ::perfetto::protos::SysExitFtraceEvent&
FtraceEvent::_Internal::sys_exit(const FtraceEvent* msg) {
  return *msg->event_.sys_exit_;
}
const ::perfetto::protos::ZeroFtraceEvent&
FtraceEvent::_Internal::zero(const FtraceEvent* msg) {
  return *msg->event_.zero_;
}
const ::perfetto::protos::GpuFrequencyFtraceEvent&
FtraceEvent::_Internal::gpu_frequency(const FtraceEvent* msg) {
  return *msg->event_.gpu_frequency_;
}
const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::sde_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->event_.sde_tracing_mark_write_;
}
const ::perfetto::protos::MarkVictimFtraceEvent&
FtraceEvent::_Internal::mark_victim(const FtraceEvent* msg) {
  return *msg->event_.mark_victim_;
}
const ::perfetto::protos::IonStatFtraceEvent&
FtraceEvent::_Internal::ion_stat(const FtraceEvent* msg) {
  return *msg->event_.ion_stat_;
}
const ::perfetto::protos::IonBufferCreateFtraceEvent&
FtraceEvent::_Internal::ion_buffer_create(const FtraceEvent* msg) {
  return *msg->event_.ion_buffer_create_;
}
const ::perfetto::protos::IonBufferDestroyFtraceEvent&
FtraceEvent::_Internal::ion_buffer_destroy(const FtraceEvent* msg) {
  return *msg->event_.ion_buffer_destroy_;
}
const ::perfetto::protos::ScmCallStartFtraceEvent&
FtraceEvent::_Internal::scm_call_start(const FtraceEvent* msg) {
  return *msg->event_.scm_call_start_;
}
const ::perfetto::protos::ScmCallEndFtraceEvent&
FtraceEvent::_Internal::scm_call_end(const FtraceEvent* msg) {
  return *msg->event_.scm_call_end_;
}
const ::perfetto::protos::GpuMemTotalFtraceEvent&
FtraceEvent::_Internal::gpu_mem_total(const FtraceEvent* msg) {
  return *msg->event_.gpu_mem_total_;
}
const ::perfetto::protos::ThermalTemperatureFtraceEvent&
FtraceEvent::_Internal::thermal_temperature(const FtraceEvent* msg) {
  return *msg->event_.thermal_temperature_;
}
const ::perfetto::protos::CdevUpdateFtraceEvent&
FtraceEvent::_Internal::cdev_update(const FtraceEvent* msg) {
  return *msg->event_.cdev_update_;
}
const ::perfetto::protos::CpuhpExitFtraceEvent&
FtraceEvent::_Internal::cpuhp_exit(const FtraceEvent* msg) {
  return *msg->event_.cpuhp_exit_;
}
const ::perfetto::protos::CpuhpMultiEnterFtraceEvent&
FtraceEvent::_Internal::cpuhp_multi_enter(const FtraceEvent* msg) {
  return *msg->event_.cpuhp_multi_enter_;
}
const ::perfetto::protos::CpuhpEnterFtraceEvent&
FtraceEvent::_Internal::cpuhp_enter(const FtraceEvent* msg) {
  return *msg->event_.cpuhp_enter_;
}
const ::perfetto::protos::CpuhpLatencyFtraceEvent&
FtraceEvent::_Internal::cpuhp_latency(const FtraceEvent* msg) {
  return *msg->event_.cpuhp_latency_;
}
const ::perfetto::protos::FastrpcDmaStatFtraceEvent&
FtraceEvent::_Internal::fastrpc_dma_stat(const FtraceEvent* msg) {
  return *msg->event_.fastrpc_dma_stat_;
}
const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::dpu_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->event_.dpu_tracing_mark_write_;
}
const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::g2d_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->event_.g2d_tracing_mark_write_;
}
const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::mali_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->event_.mali_tracing_mark_write_;
}
void FtraceEvent::set_allocated_print(::perfetto::protos::PrintFtraceEvent* print) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (print) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      print = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print, submessage_arena);
    }
    set_has_print();
    event_.print_ = print;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.print)
}
void FtraceEvent::clear_print() {
  if (has_print()) {
    delete event_.print_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_switch(::perfetto::protos::SchedSwitchFtraceEvent* sched_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_switch, submessage_arena);
    }
    set_has_sched_switch();
    event_.sched_switch_ = sched_switch;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_switch)
}
void FtraceEvent::clear_sched_switch() {
  if (has_sched_switch()) {
    delete event_.sched_switch_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpu_frequency(::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpu_frequency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu_frequency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_frequency, submessage_arena);
    }
    set_has_cpu_frequency();
    event_.cpu_frequency_ = cpu_frequency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpu_frequency)
}
void FtraceEvent::clear_cpu_frequency() {
  if (has_cpu_frequency()) {
    delete event_.cpu_frequency_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpu_frequency_limits(::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpu_frequency_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu_frequency_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_frequency_limits, submessage_arena);
    }
    set_has_cpu_frequency_limits();
    event_.cpu_frequency_limits_ = cpu_frequency_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpu_frequency_limits)
}
void FtraceEvent::clear_cpu_frequency_limits() {
  if (has_cpu_frequency_limits()) {
    delete event_.cpu_frequency_limits_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpu_idle(::perfetto::protos::CpuIdleFtraceEvent* cpu_idle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpu_idle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu_idle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_idle, submessage_arena);
    }
    set_has_cpu_idle();
    event_.cpu_idle_ = cpu_idle;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpu_idle)
}
void FtraceEvent::clear_cpu_idle() {
  if (has_cpu_idle()) {
    delete event_.cpu_idle_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clock_enable(::perfetto::protos::ClockEnableFtraceEvent* clock_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (clock_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clock_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_enable, submessage_arena);
    }
    set_has_clock_enable();
    event_.clock_enable_ = clock_enable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clock_enable)
}
void FtraceEvent::clear_clock_enable() {
  if (has_clock_enable()) {
    delete event_.clock_enable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clock_disable(::perfetto::protos::ClockDisableFtraceEvent* clock_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (clock_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clock_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_disable, submessage_arena);
    }
    set_has_clock_disable();
    event_.clock_disable_ = clock_disable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clock_disable)
}
void FtraceEvent::clear_clock_disable() {
  if (has_clock_disable()) {
    delete event_.clock_disable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clock_set_rate(::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (clock_set_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clock_set_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_set_rate, submessage_arena);
    }
    set_has_clock_set_rate();
    event_.clock_set_rate_ = clock_set_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clock_set_rate)
}
void FtraceEvent::clear_clock_set_rate() {
  if (has_clock_set_rate()) {
    delete event_.clock_set_rate_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_wakeup(::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_wakeup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_wakeup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_wakeup, submessage_arena);
    }
    set_has_sched_wakeup();
    event_.sched_wakeup_ = sched_wakeup;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_wakeup)
}
void FtraceEvent::clear_sched_wakeup() {
  if (has_sched_wakeup()) {
    delete event_.sched_wakeup_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_blocked_reason(::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_blocked_reason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_blocked_reason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_blocked_reason, submessage_arena);
    }
    set_has_sched_blocked_reason();
    event_.sched_blocked_reason_ = sched_blocked_reason;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_blocked_reason)
}
void FtraceEvent::clear_sched_blocked_reason() {
  if (has_sched_blocked_reason()) {
    delete event_.sched_blocked_reason_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_cpu_hotplug(::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_cpu_hotplug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_cpu_hotplug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_cpu_hotplug, submessage_arena);
    }
    set_has_sched_cpu_hotplug();
    event_.sched_cpu_hotplug_ = sched_cpu_hotplug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
}
void FtraceEvent::clear_sched_cpu_hotplug() {
  if (has_sched_cpu_hotplug()) {
    delete event_.sched_cpu_hotplug_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_waking(::perfetto::protos::SchedWakingFtraceEvent* sched_waking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_waking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_waking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_waking, submessage_arena);
    }
    set_has_sched_waking();
    event_.sched_waking_ = sched_waking;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_waking)
}
void FtraceEvent::clear_sched_waking() {
  if (has_sched_waking()) {
    delete event_.sched_waking_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ipi_entry(::perfetto::protos::IpiEntryFtraceEvent* ipi_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ipi_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ipi_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipi_entry, submessage_arena);
    }
    set_has_ipi_entry();
    event_.ipi_entry_ = ipi_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ipi_entry)
}
void FtraceEvent::clear_ipi_entry() {
  if (has_ipi_entry()) {
    delete event_.ipi_entry_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ipi_exit(::perfetto::protos::IpiExitFtraceEvent* ipi_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ipi_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ipi_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipi_exit, submessage_arena);
    }
    set_has_ipi_exit();
    event_.ipi_exit_ = ipi_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ipi_exit)
}
void FtraceEvent::clear_ipi_exit() {
  if (has_ipi_exit()) {
    delete event_.ipi_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ipi_raise(::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ipi_raise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ipi_raise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipi_raise, submessage_arena);
    }
    set_has_ipi_raise();
    event_.ipi_raise_ = ipi_raise;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ipi_raise)
}
void FtraceEvent::clear_ipi_raise() {
  if (has_ipi_raise()) {
    delete event_.ipi_raise_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_softirq_entry(::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (softirq_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      softirq_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softirq_entry, submessage_arena);
    }
    set_has_softirq_entry();
    event_.softirq_entry_ = softirq_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.softirq_entry)
}
void FtraceEvent::clear_softirq_entry() {
  if (has_softirq_entry()) {
    delete event_.softirq_entry_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_softirq_exit(::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (softirq_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      softirq_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softirq_exit, submessage_arena);
    }
    set_has_softirq_exit();
    event_.softirq_exit_ = softirq_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.softirq_exit)
}
void FtraceEvent::clear_softirq_exit() {
  if (has_softirq_exit()) {
    delete event_.softirq_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_softirq_raise(::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (softirq_raise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      softirq_raise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softirq_raise, submessage_arena);
    }
    set_has_softirq_raise();
    event_.softirq_raise_ = softirq_raise;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.softirq_raise)
}
void FtraceEvent::clear_softirq_raise() {
  if (has_softirq_raise()) {
    delete event_.softirq_raise_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_read(::perfetto::protos::I2cReadFtraceEvent* i2c_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (i2c_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      i2c_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_read, submessage_arena);
    }
    set_has_i2c_read();
    event_.i2c_read_ = i2c_read;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_read)
}
void FtraceEvent::clear_i2c_read() {
  if (has_i2c_read()) {
    delete event_.i2c_read_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_write(::perfetto::protos::I2cWriteFtraceEvent* i2c_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (i2c_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      i2c_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_write, submessage_arena);
    }
    set_has_i2c_write();
    event_.i2c_write_ = i2c_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_write)
}
void FtraceEvent::clear_i2c_write() {
  if (has_i2c_write()) {
    delete event_.i2c_write_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_result(::perfetto::protos::I2cResultFtraceEvent* i2c_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (i2c_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      i2c_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_result, submessage_arena);
    }
    set_has_i2c_result();
    event_.i2c_result_ = i2c_result;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_result)
}
void FtraceEvent::clear_i2c_result() {
  if (has_i2c_result()) {
    delete event_.i2c_result_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_reply(::perfetto::protos::I2cReplyFtraceEvent* i2c_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (i2c_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      i2c_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_reply, submessage_arena);
    }
    set_has_i2c_reply();
    event_.i2c_reply_ = i2c_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_reply)
}
void FtraceEvent::clear_i2c_reply() {
  if (has_i2c_reply()) {
    delete event_.i2c_reply_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_read(::perfetto::protos::SmbusReadFtraceEvent* smbus_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (smbus_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smbus_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_read, submessage_arena);
    }
    set_has_smbus_read();
    event_.smbus_read_ = smbus_read;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_read)
}
void FtraceEvent::clear_smbus_read() {
  if (has_smbus_read()) {
    delete event_.smbus_read_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_write(::perfetto::protos::SmbusWriteFtraceEvent* smbus_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (smbus_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smbus_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_write, submessage_arena);
    }
    set_has_smbus_write();
    event_.smbus_write_ = smbus_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_write)
}
void FtraceEvent::clear_smbus_write() {
  if (has_smbus_write()) {
    delete event_.smbus_write_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_result(::perfetto::protos::SmbusResultFtraceEvent* smbus_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (smbus_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smbus_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_result, submessage_arena);
    }
    set_has_smbus_result();
    event_.smbus_result_ = smbus_result;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_result)
}
void FtraceEvent::clear_smbus_result() {
  if (has_smbus_result()) {
    delete event_.smbus_result_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_reply(::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (smbus_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smbus_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_reply, submessage_arena);
    }
    set_has_smbus_reply();
    event_.smbus_reply_ = smbus_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_reply)
}
void FtraceEvent::clear_smbus_reply() {
  if (has_smbus_reply()) {
    delete event_.smbus_reply_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_lowmemory_kill(::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (lowmemory_kill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lowmemory_kill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowmemory_kill, submessage_arena);
    }
    set_has_lowmemory_kill();
    event_.lowmemory_kill_ = lowmemory_kill;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.lowmemory_kill)
}
void FtraceEvent::clear_lowmemory_kill() {
  if (has_lowmemory_kill()) {
    delete event_.lowmemory_kill_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_irq_handler_entry(::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (irq_handler_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      irq_handler_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, irq_handler_entry, submessage_arena);
    }
    set_has_irq_handler_entry();
    event_.irq_handler_entry_ = irq_handler_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.irq_handler_entry)
}
void FtraceEvent::clear_irq_handler_entry() {
  if (has_irq_handler_entry()) {
    delete event_.irq_handler_entry_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_irq_handler_exit(::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (irq_handler_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      irq_handler_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, irq_handler_exit, submessage_arena);
    }
    set_has_irq_handler_exit();
    event_.irq_handler_exit_ = irq_handler_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.irq_handler_exit)
}
void FtraceEvent::clear_irq_handler_exit() {
  if (has_irq_handler_exit()) {
    delete event_.irq_handler_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sync_pt(::perfetto::protos::SyncPtFtraceEvent* sync_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sync_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_pt, submessage_arena);
    }
    set_has_sync_pt();
    event_.sync_pt_ = sync_pt;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sync_pt)
}
void FtraceEvent::clear_sync_pt() {
  if (has_sync_pt()) {
    delete event_.sync_pt_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sync_timeline(::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sync_timeline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_timeline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_timeline, submessage_arena);
    }
    set_has_sync_timeline();
    event_.sync_timeline_ = sync_timeline;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sync_timeline)
}
void FtraceEvent::clear_sync_timeline() {
  if (has_sync_timeline()) {
    delete event_.sync_timeline_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sync_wait(::perfetto::protos::SyncWaitFtraceEvent* sync_wait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sync_wait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_wait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_wait, submessage_arena);
    }
    set_has_sync_wait();
    event_.sync_wait_ = sync_wait;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sync_wait)
}
void FtraceEvent::clear_sync_wait() {
  if (has_sync_wait()) {
    delete event_.sync_wait_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_begin(::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_write_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_write_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_begin, submessage_arena);
    }
    set_has_ext4_da_write_begin();
    event_.ext4_da_write_begin_ = ext4_da_write_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_begin)
}
void FtraceEvent::clear_ext4_da_write_begin() {
  if (has_ext4_da_write_begin()) {
    delete event_.ext4_da_write_begin_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_end(::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_end, submessage_arena);
    }
    set_has_ext4_da_write_end();
    event_.ext4_da_write_end_ = ext4_da_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_end)
}
void FtraceEvent::clear_ext4_da_write_end() {
  if (has_ext4_da_write_end()) {
    delete event_.ext4_da_write_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_sync_file_enter(::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_sync_file_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_sync_file_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_sync_file_enter, submessage_arena);
    }
    set_has_ext4_sync_file_enter();
    event_.ext4_sync_file_enter_ = ext4_sync_file_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
}
void FtraceEvent::clear_ext4_sync_file_enter() {
  if (has_ext4_sync_file_enter()) {
    delete event_.ext4_sync_file_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_sync_file_exit(::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_sync_file_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_sync_file_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_sync_file_exit, submessage_arena);
    }
    set_has_ext4_sync_file_exit();
    event_.ext4_sync_file_exit_ = ext4_sync_file_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
}
void FtraceEvent::clear_ext4_sync_file_exit() {
  if (has_ext4_sync_file_exit()) {
    delete event_.ext4_sync_file_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_issue(::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_rq_issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_rq_issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_issue, submessage_arena);
    }
    set_has_block_rq_issue();
    event_.block_rq_issue_ = block_rq_issue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_issue)
}
void FtraceEvent::clear_block_rq_issue() {
  if (has_block_rq_issue()) {
    delete event_.block_rq_issue_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_direct_reclaim_begin(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_vmscan_direct_reclaim_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_vmscan_direct_reclaim_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_direct_reclaim_begin, submessage_arena);
    }
    set_has_mm_vmscan_direct_reclaim_begin();
    event_.mm_vmscan_direct_reclaim_begin_ = mm_vmscan_direct_reclaim_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
}
void FtraceEvent::clear_mm_vmscan_direct_reclaim_begin() {
  if (has_mm_vmscan_direct_reclaim_begin()) {
    delete event_.mm_vmscan_direct_reclaim_begin_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_direct_reclaim_end(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_vmscan_direct_reclaim_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_vmscan_direct_reclaim_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_direct_reclaim_end, submessage_arena);
    }
    set_has_mm_vmscan_direct_reclaim_end();
    event_.mm_vmscan_direct_reclaim_end_ = mm_vmscan_direct_reclaim_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
}
void FtraceEvent::clear_mm_vmscan_direct_reclaim_end() {
  if (has_mm_vmscan_direct_reclaim_end()) {
    delete event_.mm_vmscan_direct_reclaim_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_kswapd_wake(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_vmscan_kswapd_wake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_vmscan_kswapd_wake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_kswapd_wake, submessage_arena);
    }
    set_has_mm_vmscan_kswapd_wake();
    event_.mm_vmscan_kswapd_wake_ = mm_vmscan_kswapd_wake;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
}
void FtraceEvent::clear_mm_vmscan_kswapd_wake() {
  if (has_mm_vmscan_kswapd_wake()) {
    delete event_.mm_vmscan_kswapd_wake_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_kswapd_sleep(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_vmscan_kswapd_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_vmscan_kswapd_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_kswapd_sleep, submessage_arena);
    }
    set_has_mm_vmscan_kswapd_sleep();
    event_.mm_vmscan_kswapd_sleep_ = mm_vmscan_kswapd_sleep;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
}
void FtraceEvent::clear_mm_vmscan_kswapd_sleep() {
  if (has_mm_vmscan_kswapd_sleep()) {
    delete event_.mm_vmscan_kswapd_sleep_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_transaction(::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_transaction, submessage_arena);
    }
    set_has_binder_transaction();
    event_.binder_transaction_ = binder_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_transaction)
}
void FtraceEvent::clear_binder_transaction() {
  if (has_binder_transaction()) {
    delete event_.binder_transaction_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_transaction_received(::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_transaction_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_transaction_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_transaction_received, submessage_arena);
    }
    set_has_binder_transaction_received();
    event_.binder_transaction_received_ = binder_transaction_received;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_transaction_received)
}
void FtraceEvent::clear_binder_transaction_received() {
  if (has_binder_transaction_received()) {
    delete event_.binder_transaction_received_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_set_priority(::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_set_priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_set_priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_set_priority, submessage_arena);
    }
    set_has_binder_set_priority();
    event_.binder_set_priority_ = binder_set_priority;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_set_priority)
}
void FtraceEvent::clear_binder_set_priority() {
  if (has_binder_set_priority()) {
    delete event_.binder_set_priority_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_lock(::perfetto::protos::BinderLockFtraceEvent* binder_lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_lock, submessage_arena);
    }
    set_has_binder_lock();
    event_.binder_lock_ = binder_lock;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_lock)
}
void FtraceEvent::clear_binder_lock() {
  if (has_binder_lock()) {
    delete event_.binder_lock_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_locked(::perfetto::protos::BinderLockedFtraceEvent* binder_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_locked, submessage_arena);
    }
    set_has_binder_locked();
    event_.binder_locked_ = binder_locked;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_locked)
}
void FtraceEvent::clear_binder_locked() {
  if (has_binder_locked()) {
    delete event_.binder_locked_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_unlock(::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_unlock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_unlock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_unlock, submessage_arena);
    }
    set_has_binder_unlock();
    event_.binder_unlock_ = binder_unlock;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_unlock)
}
void FtraceEvent::clear_binder_unlock() {
  if (has_binder_unlock()) {
    delete event_.binder_unlock_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_activate_work(::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (workqueue_activate_work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workqueue_activate_work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_activate_work, submessage_arena);
    }
    set_has_workqueue_activate_work();
    event_.workqueue_activate_work_ = workqueue_activate_work;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_activate_work)
}
void FtraceEvent::clear_workqueue_activate_work() {
  if (has_workqueue_activate_work()) {
    delete event_.workqueue_activate_work_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_execute_end(::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (workqueue_execute_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workqueue_execute_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_execute_end, submessage_arena);
    }
    set_has_workqueue_execute_end();
    event_.workqueue_execute_end_ = workqueue_execute_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_execute_end)
}
void FtraceEvent::clear_workqueue_execute_end() {
  if (has_workqueue_execute_end()) {
    delete event_.workqueue_execute_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_execute_start(::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (workqueue_execute_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workqueue_execute_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_execute_start, submessage_arena);
    }
    set_has_workqueue_execute_start();
    event_.workqueue_execute_start_ = workqueue_execute_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_execute_start)
}
void FtraceEvent::clear_workqueue_execute_start() {
  if (has_workqueue_execute_start()) {
    delete event_.workqueue_execute_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_queue_work(::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (workqueue_queue_work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workqueue_queue_work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_queue_work, submessage_arena);
    }
    set_has_workqueue_queue_work();
    event_.workqueue_queue_work_ = workqueue_queue_work;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_queue_work)
}
void FtraceEvent::clear_workqueue_queue_work() {
  if (has_workqueue_queue_work()) {
    delete event_.workqueue_queue_work_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_disable(::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_disable, submessage_arena);
    }
    set_has_regulator_disable();
    event_.regulator_disable_ = regulator_disable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_disable)
}
void FtraceEvent::clear_regulator_disable() {
  if (has_regulator_disable()) {
    delete event_.regulator_disable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_disable_complete(::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_disable_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_disable_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_disable_complete, submessage_arena);
    }
    set_has_regulator_disable_complete();
    event_.regulator_disable_complete_ = regulator_disable_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_disable_complete)
}
void FtraceEvent::clear_regulator_disable_complete() {
  if (has_regulator_disable_complete()) {
    delete event_.regulator_disable_complete_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_enable(::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_enable, submessage_arena);
    }
    set_has_regulator_enable();
    event_.regulator_enable_ = regulator_enable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_enable)
}
void FtraceEvent::clear_regulator_enable() {
  if (has_regulator_enable()) {
    delete event_.regulator_enable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_enable_complete(::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_enable_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_enable_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_enable_complete, submessage_arena);
    }
    set_has_regulator_enable_complete();
    event_.regulator_enable_complete_ = regulator_enable_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_enable_complete)
}
void FtraceEvent::clear_regulator_enable_complete() {
  if (has_regulator_enable_complete()) {
    delete event_.regulator_enable_complete_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_enable_delay(::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_enable_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_enable_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_enable_delay, submessage_arena);
    }
    set_has_regulator_enable_delay();
    event_.regulator_enable_delay_ = regulator_enable_delay;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_enable_delay)
}
void FtraceEvent::clear_regulator_enable_delay() {
  if (has_regulator_enable_delay()) {
    delete event_.regulator_enable_delay_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_set_voltage(::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_set_voltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_set_voltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_set_voltage, submessage_arena);
    }
    set_has_regulator_set_voltage();
    event_.regulator_set_voltage_ = regulator_set_voltage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_set_voltage)
}
void FtraceEvent::clear_regulator_set_voltage() {
  if (has_regulator_set_voltage()) {
    delete event_.regulator_set_voltage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_set_voltage_complete(::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (regulator_set_voltage_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regulator_set_voltage_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_set_voltage_complete, submessage_arena);
    }
    set_has_regulator_set_voltage_complete();
    event_.regulator_set_voltage_complete_ = regulator_set_voltage_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
}
void FtraceEvent::clear_regulator_set_voltage_complete() {
  if (has_regulator_set_voltage_complete()) {
    delete event_.regulator_set_voltage_complete_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_attach_task(::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_attach_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_attach_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_attach_task, submessage_arena);
    }
    set_has_cgroup_attach_task();
    event_.cgroup_attach_task_ = cgroup_attach_task;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_attach_task)
}
void FtraceEvent::clear_cgroup_attach_task() {
  if (has_cgroup_attach_task()) {
    delete event_.cgroup_attach_task_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_mkdir(::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_mkdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_mkdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_mkdir, submessage_arena);
    }
    set_has_cgroup_mkdir();
    event_.cgroup_mkdir_ = cgroup_mkdir;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_mkdir)
}
void FtraceEvent::clear_cgroup_mkdir() {
  if (has_cgroup_mkdir()) {
    delete event_.cgroup_mkdir_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_remount(::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_remount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_remount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_remount, submessage_arena);
    }
    set_has_cgroup_remount();
    event_.cgroup_remount_ = cgroup_remount;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_remount)
}
void FtraceEvent::clear_cgroup_remount() {
  if (has_cgroup_remount()) {
    delete event_.cgroup_remount_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_rmdir(::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_rmdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_rmdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_rmdir, submessage_arena);
    }
    set_has_cgroup_rmdir();
    event_.cgroup_rmdir_ = cgroup_rmdir;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_rmdir)
}
void FtraceEvent::clear_cgroup_rmdir() {
  if (has_cgroup_rmdir()) {
    delete event_.cgroup_rmdir_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_transfer_tasks(::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_transfer_tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_transfer_tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_transfer_tasks, submessage_arena);
    }
    set_has_cgroup_transfer_tasks();
    event_.cgroup_transfer_tasks_ = cgroup_transfer_tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
}
void FtraceEvent::clear_cgroup_transfer_tasks() {
  if (has_cgroup_transfer_tasks()) {
    delete event_.cgroup_transfer_tasks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_destroy_root(::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_destroy_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_destroy_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_destroy_root, submessage_arena);
    }
    set_has_cgroup_destroy_root();
    event_.cgroup_destroy_root_ = cgroup_destroy_root;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_destroy_root)
}
void FtraceEvent::clear_cgroup_destroy_root() {
  if (has_cgroup_destroy_root()) {
    delete event_.cgroup_destroy_root_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_release(::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_release, submessage_arena);
    }
    set_has_cgroup_release();
    event_.cgroup_release_ = cgroup_release;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_release)
}
void FtraceEvent::clear_cgroup_release() {
  if (has_cgroup_release()) {
    delete event_.cgroup_release_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_rename(::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_rename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_rename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_rename, submessage_arena);
    }
    set_has_cgroup_rename();
    event_.cgroup_rename_ = cgroup_rename;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_rename)
}
void FtraceEvent::clear_cgroup_rename() {
  if (has_cgroup_rename()) {
    delete event_.cgroup_rename_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_setup_root(::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cgroup_setup_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cgroup_setup_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_setup_root, submessage_arena);
    }
    set_has_cgroup_setup_root();
    event_.cgroup_setup_root_ = cgroup_setup_root;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_setup_root)
}
void FtraceEvent::clear_cgroup_setup_root() {
  if (has_cgroup_setup_root()) {
    delete event_.cgroup_setup_root_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_kickoff(::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_cmd_kickoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_cmd_kickoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_kickoff, submessage_arena);
    }
    set_has_mdp_cmd_kickoff();
    event_.mdp_cmd_kickoff_ = mdp_cmd_kickoff;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
}
void FtraceEvent::clear_mdp_cmd_kickoff() {
  if (has_mdp_cmd_kickoff()) {
    delete event_.mdp_cmd_kickoff_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_commit(::perfetto::protos::MdpCommitFtraceEvent* mdp_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_commit, submessage_arena);
    }
    set_has_mdp_commit();
    event_.mdp_commit_ = mdp_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_commit)
}
void FtraceEvent::clear_mdp_commit() {
  if (has_mdp_commit()) {
    delete event_.mdp_commit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_ot(::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_perf_set_ot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_perf_set_ot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_ot, submessage_arena);
    }
    set_has_mdp_perf_set_ot();
    event_.mdp_perf_set_ot_ = mdp_perf_set_ot;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
}
void FtraceEvent::clear_mdp_perf_set_ot() {
  if (has_mdp_perf_set_ot()) {
    delete event_.mdp_perf_set_ot_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_sspp_change(::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_sspp_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_sspp_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_sspp_change, submessage_arena);
    }
    set_has_mdp_sspp_change();
    event_.mdp_sspp_change_ = mdp_sspp_change;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_sspp_change)
}
void FtraceEvent::clear_mdp_sspp_change() {
  if (has_mdp_sspp_change()) {
    delete event_.mdp_sspp_change_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_tracing_mark_write(::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracing_mark_write, submessage_arena);
    }
    set_has_tracing_mark_write();
    event_.tracing_mark_write_ = tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.tracing_mark_write)
}
void FtraceEvent::clear_tracing_mark_write() {
  if (has_tracing_mark_write()) {
    delete event_.tracing_mark_write_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_pingpong_done(::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_cmd_pingpong_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_cmd_pingpong_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_pingpong_done, submessage_arena);
    }
    set_has_mdp_cmd_pingpong_done();
    event_.mdp_cmd_pingpong_done_ = mdp_cmd_pingpong_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
}
void FtraceEvent::clear_mdp_cmd_pingpong_done() {
  if (has_mdp_cmd_pingpong_done()) {
    delete event_.mdp_cmd_pingpong_done_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_compare_bw(::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_compare_bw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_compare_bw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_compare_bw, submessage_arena);
    }
    set_has_mdp_compare_bw();
    event_.mdp_compare_bw_ = mdp_compare_bw;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_compare_bw)
}
void FtraceEvent::clear_mdp_compare_bw() {
  if (has_mdp_compare_bw()) {
    delete event_.mdp_compare_bw_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_panic_luts(::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_perf_set_panic_luts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_perf_set_panic_luts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_panic_luts, submessage_arena);
    }
    set_has_mdp_perf_set_panic_luts();
    event_.mdp_perf_set_panic_luts_ = mdp_perf_set_panic_luts;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
}
void FtraceEvent::clear_mdp_perf_set_panic_luts() {
  if (has_mdp_perf_set_panic_luts()) {
    delete event_.mdp_perf_set_panic_luts_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_sspp_set(::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_sspp_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_sspp_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_sspp_set, submessage_arena);
    }
    set_has_mdp_sspp_set();
    event_.mdp_sspp_set_ = mdp_sspp_set;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_sspp_set)
}
void FtraceEvent::clear_mdp_sspp_set() {
  if (has_mdp_sspp_set()) {
    delete event_.mdp_sspp_set_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_readptr_done(::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_cmd_readptr_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_cmd_readptr_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_readptr_done, submessage_arena);
    }
    set_has_mdp_cmd_readptr_done();
    event_.mdp_cmd_readptr_done_ = mdp_cmd_readptr_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
}
void FtraceEvent::clear_mdp_cmd_readptr_done() {
  if (has_mdp_cmd_readptr_done()) {
    delete event_.mdp_cmd_readptr_done_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_misr_crc(::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_misr_crc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_misr_crc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_misr_crc, submessage_arena);
    }
    set_has_mdp_misr_crc();
    event_.mdp_misr_crc_ = mdp_misr_crc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_misr_crc)
}
void FtraceEvent::clear_mdp_misr_crc() {
  if (has_mdp_misr_crc()) {
    delete event_.mdp_misr_crc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_qos_luts(::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_perf_set_qos_luts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_perf_set_qos_luts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_qos_luts, submessage_arena);
    }
    set_has_mdp_perf_set_qos_luts();
    event_.mdp_perf_set_qos_luts_ = mdp_perf_set_qos_luts;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
}
void FtraceEvent::clear_mdp_perf_set_qos_luts() {
  if (has_mdp_perf_set_qos_luts()) {
    delete event_.mdp_perf_set_qos_luts_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_trace_counter(::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_trace_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_trace_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_trace_counter, submessage_arena);
    }
    set_has_mdp_trace_counter();
    event_.mdp_trace_counter_ = mdp_trace_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_trace_counter)
}
void FtraceEvent::clear_mdp_trace_counter() {
  if (has_mdp_trace_counter()) {
    delete event_.mdp_trace_counter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_release_bw(::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_cmd_release_bw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_cmd_release_bw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_release_bw, submessage_arena);
    }
    set_has_mdp_cmd_release_bw();
    event_.mdp_cmd_release_bw_ = mdp_cmd_release_bw;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
}
void FtraceEvent::clear_mdp_cmd_release_bw() {
  if (has_mdp_cmd_release_bw()) {
    delete event_.mdp_cmd_release_bw_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_mixer_update(::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_mixer_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_mixer_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_mixer_update, submessage_arena);
    }
    set_has_mdp_mixer_update();
    event_.mdp_mixer_update_ = mdp_mixer_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_mixer_update)
}
void FtraceEvent::clear_mdp_mixer_update() {
  if (has_mdp_mixer_update()) {
    delete event_.mdp_mixer_update_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_wm_levels(::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_perf_set_wm_levels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_perf_set_wm_levels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_wm_levels, submessage_arena);
    }
    set_has_mdp_perf_set_wm_levels();
    event_.mdp_perf_set_wm_levels_ = mdp_perf_set_wm_levels;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
}
void FtraceEvent::clear_mdp_perf_set_wm_levels() {
  if (has_mdp_perf_set_wm_levels()) {
    delete event_.mdp_perf_set_wm_levels_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_video_underrun_done(::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_video_underrun_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_video_underrun_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_video_underrun_done, submessage_arena);
    }
    set_has_mdp_video_underrun_done();
    event_.mdp_video_underrun_done_ = mdp_video_underrun_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
}
void FtraceEvent::clear_mdp_video_underrun_done() {
  if (has_mdp_video_underrun_done()) {
    delete event_.mdp_video_underrun_done_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_wait_pingpong(::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_cmd_wait_pingpong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_cmd_wait_pingpong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_wait_pingpong, submessage_arena);
    }
    set_has_mdp_cmd_wait_pingpong();
    event_.mdp_cmd_wait_pingpong_ = mdp_cmd_wait_pingpong;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
}
void FtraceEvent::clear_mdp_cmd_wait_pingpong() {
  if (has_mdp_cmd_wait_pingpong()) {
    delete event_.mdp_cmd_wait_pingpong_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_prefill_calc(::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_perf_prefill_calc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_perf_prefill_calc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_prefill_calc, submessage_arena);
    }
    set_has_mdp_perf_prefill_calc();
    event_.mdp_perf_prefill_calc_ = mdp_perf_prefill_calc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
}
void FtraceEvent::clear_mdp_perf_prefill_calc() {
  if (has_mdp_perf_prefill_calc()) {
    delete event_.mdp_perf_prefill_calc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_update_bus(::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mdp_perf_update_bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdp_perf_update_bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_update_bus, submessage_arena);
    }
    set_has_mdp_perf_update_bus();
    event_.mdp_perf_update_bus_ = mdp_perf_update_bus;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
}
void FtraceEvent::clear_mdp_perf_update_bus() {
  if (has_mdp_perf_update_bus()) {
    delete event_.mdp_perf_update_bus_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_rotator_bw_ao_as_context(::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (rotator_bw_ao_as_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotator_bw_ao_as_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotator_bw_ao_as_context, submessage_arena);
    }
    set_has_rotator_bw_ao_as_context();
    event_.rotator_bw_ao_as_context_ = rotator_bw_ao_as_context;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
}
void FtraceEvent::clear_rotator_bw_ao_as_context() {
  if (has_rotator_bw_ao_as_context()) {
    delete event_.rotator_bw_ao_as_context_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_filemap_add_to_page_cache(::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_filemap_add_to_page_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_filemap_add_to_page_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_filemap_add_to_page_cache, submessage_arena);
    }
    set_has_mm_filemap_add_to_page_cache();
    event_.mm_filemap_add_to_page_cache_ = mm_filemap_add_to_page_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
}
void FtraceEvent::clear_mm_filemap_add_to_page_cache() {
  if (has_mm_filemap_add_to_page_cache()) {
    delete event_.mm_filemap_add_to_page_cache_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_filemap_delete_from_page_cache(::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_filemap_delete_from_page_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_filemap_delete_from_page_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_filemap_delete_from_page_cache, submessage_arena);
    }
    set_has_mm_filemap_delete_from_page_cache();
    event_.mm_filemap_delete_from_page_cache_ = mm_filemap_delete_from_page_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
}
void FtraceEvent::clear_mm_filemap_delete_from_page_cache() {
  if (has_mm_filemap_delete_from_page_cache()) {
    delete event_.mm_filemap_delete_from_page_cache_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_begin(::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_begin, submessage_arena);
    }
    set_has_mm_compaction_begin();
    event_.mm_compaction_begin_ = mm_compaction_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_begin)
}
void FtraceEvent::clear_mm_compaction_begin() {
  if (has_mm_compaction_begin()) {
    delete event_.mm_compaction_begin_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_defer_compaction(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_defer_compaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_defer_compaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_defer_compaction, submessage_arena);
    }
    set_has_mm_compaction_defer_compaction();
    event_.mm_compaction_defer_compaction_ = mm_compaction_defer_compaction;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
}
void FtraceEvent::clear_mm_compaction_defer_compaction() {
  if (has_mm_compaction_defer_compaction()) {
    delete event_.mm_compaction_defer_compaction_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_deferred(::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_deferred) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_deferred = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_deferred, submessage_arena);
    }
    set_has_mm_compaction_deferred();
    event_.mm_compaction_deferred_ = mm_compaction_deferred;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_deferred)
}
void FtraceEvent::clear_mm_compaction_deferred() {
  if (has_mm_compaction_deferred()) {
    delete event_.mm_compaction_deferred_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_defer_reset(::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_defer_reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_defer_reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_defer_reset, submessage_arena);
    }
    set_has_mm_compaction_defer_reset();
    event_.mm_compaction_defer_reset_ = mm_compaction_defer_reset;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
}
void FtraceEvent::clear_mm_compaction_defer_reset() {
  if (has_mm_compaction_defer_reset()) {
    delete event_.mm_compaction_defer_reset_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_end(::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_end, submessage_arena);
    }
    set_has_mm_compaction_end();
    event_.mm_compaction_end_ = mm_compaction_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_end)
}
void FtraceEvent::clear_mm_compaction_end() {
  if (has_mm_compaction_end()) {
    delete event_.mm_compaction_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_finished(::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_finished, submessage_arena);
    }
    set_has_mm_compaction_finished();
    event_.mm_compaction_finished_ = mm_compaction_finished;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_finished)
}
void FtraceEvent::clear_mm_compaction_finished() {
  if (has_mm_compaction_finished()) {
    delete event_.mm_compaction_finished_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_isolate_freepages(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_isolate_freepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_isolate_freepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_isolate_freepages, submessage_arena);
    }
    set_has_mm_compaction_isolate_freepages();
    event_.mm_compaction_isolate_freepages_ = mm_compaction_isolate_freepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
}
void FtraceEvent::clear_mm_compaction_isolate_freepages() {
  if (has_mm_compaction_isolate_freepages()) {
    delete event_.mm_compaction_isolate_freepages_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_isolate_migratepages(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_isolate_migratepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_isolate_migratepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_isolate_migratepages, submessage_arena);
    }
    set_has_mm_compaction_isolate_migratepages();
    event_.mm_compaction_isolate_migratepages_ = mm_compaction_isolate_migratepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
}
void FtraceEvent::clear_mm_compaction_isolate_migratepages() {
  if (has_mm_compaction_isolate_migratepages()) {
    delete event_.mm_compaction_isolate_migratepages_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_kcompactd_sleep(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_kcompactd_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_kcompactd_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_kcompactd_sleep, submessage_arena);
    }
    set_has_mm_compaction_kcompactd_sleep();
    event_.mm_compaction_kcompactd_sleep_ = mm_compaction_kcompactd_sleep;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
}
void FtraceEvent::clear_mm_compaction_kcompactd_sleep() {
  if (has_mm_compaction_kcompactd_sleep()) {
    delete event_.mm_compaction_kcompactd_sleep_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_kcompactd_wake(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_kcompactd_wake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_kcompactd_wake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_kcompactd_wake, submessage_arena);
    }
    set_has_mm_compaction_kcompactd_wake();
    event_.mm_compaction_kcompactd_wake_ = mm_compaction_kcompactd_wake;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
}
void FtraceEvent::clear_mm_compaction_kcompactd_wake() {
  if (has_mm_compaction_kcompactd_wake()) {
    delete event_.mm_compaction_kcompactd_wake_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_migratepages(::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_migratepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_migratepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_migratepages, submessage_arena);
    }
    set_has_mm_compaction_migratepages();
    event_.mm_compaction_migratepages_ = mm_compaction_migratepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
}
void FtraceEvent::clear_mm_compaction_migratepages() {
  if (has_mm_compaction_migratepages()) {
    delete event_.mm_compaction_migratepages_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_suitable(::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_suitable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_suitable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_suitable, submessage_arena);
    }
    set_has_mm_compaction_suitable();
    event_.mm_compaction_suitable_ = mm_compaction_suitable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_suitable)
}
void FtraceEvent::clear_mm_compaction_suitable() {
  if (has_mm_compaction_suitable()) {
    delete event_.mm_compaction_suitable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_try_to_compact_pages(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_try_to_compact_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_try_to_compact_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_try_to_compact_pages, submessage_arena);
    }
    set_has_mm_compaction_try_to_compact_pages();
    event_.mm_compaction_try_to_compact_pages_ = mm_compaction_try_to_compact_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
}
void FtraceEvent::clear_mm_compaction_try_to_compact_pages() {
  if (has_mm_compaction_try_to_compact_pages()) {
    delete event_.mm_compaction_try_to_compact_pages_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_wakeup_kcompactd(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_compaction_wakeup_kcompactd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_compaction_wakeup_kcompactd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_wakeup_kcompactd, submessage_arena);
    }
    set_has_mm_compaction_wakeup_kcompactd();
    event_.mm_compaction_wakeup_kcompactd_ = mm_compaction_wakeup_kcompactd;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
}
void FtraceEvent::clear_mm_compaction_wakeup_kcompactd() {
  if (has_mm_compaction_wakeup_kcompactd()) {
    delete event_.mm_compaction_wakeup_kcompactd_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_suspend_resume(::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (suspend_resume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suspend_resume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspend_resume, submessage_arena);
    }
    set_has_suspend_resume();
    event_.suspend_resume_ = suspend_resume;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.suspend_resume)
}
void FtraceEvent::clear_suspend_resume() {
  if (has_suspend_resume()) {
    delete event_.suspend_resume_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_wakeup_new(::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_wakeup_new) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_wakeup_new = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_wakeup_new, submessage_arena);
    }
    set_has_sched_wakeup_new();
    event_.sched_wakeup_new_ = sched_wakeup_new;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_wakeup_new)
}
void FtraceEvent::clear_sched_wakeup_new() {
  if (has_sched_wakeup_new()) {
    delete event_.sched_wakeup_new_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_backmerge(::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_bio_backmerge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_bio_backmerge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_backmerge, submessage_arena);
    }
    set_has_block_bio_backmerge();
    event_.block_bio_backmerge_ = block_bio_backmerge;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_backmerge)
}
void FtraceEvent::clear_block_bio_backmerge() {
  if (has_block_bio_backmerge()) {
    delete event_.block_bio_backmerge_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_bounce(::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_bio_bounce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_bio_bounce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_bounce, submessage_arena);
    }
    set_has_block_bio_bounce();
    event_.block_bio_bounce_ = block_bio_bounce;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_bounce)
}
void FtraceEvent::clear_block_bio_bounce() {
  if (has_block_bio_bounce()) {
    delete event_.block_bio_bounce_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_complete(::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_bio_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_bio_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_complete, submessage_arena);
    }
    set_has_block_bio_complete();
    event_.block_bio_complete_ = block_bio_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_complete)
}
void FtraceEvent::clear_block_bio_complete() {
  if (has_block_bio_complete()) {
    delete event_.block_bio_complete_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_frontmerge(::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_bio_frontmerge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_bio_frontmerge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_frontmerge, submessage_arena);
    }
    set_has_block_bio_frontmerge();
    event_.block_bio_frontmerge_ = block_bio_frontmerge;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_frontmerge)
}
void FtraceEvent::clear_block_bio_frontmerge() {
  if (has_block_bio_frontmerge()) {
    delete event_.block_bio_frontmerge_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_queue(::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_bio_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_bio_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_queue, submessage_arena);
    }
    set_has_block_bio_queue();
    event_.block_bio_queue_ = block_bio_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_queue)
}
void FtraceEvent::clear_block_bio_queue() {
  if (has_block_bio_queue()) {
    delete event_.block_bio_queue_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_remap(::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_bio_remap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_bio_remap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_remap, submessage_arena);
    }
    set_has_block_bio_remap();
    event_.block_bio_remap_ = block_bio_remap;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_remap)
}
void FtraceEvent::clear_block_bio_remap() {
  if (has_block_bio_remap()) {
    delete event_.block_bio_remap_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_dirty_buffer(::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_dirty_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_dirty_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_dirty_buffer, submessage_arena);
    }
    set_has_block_dirty_buffer();
    event_.block_dirty_buffer_ = block_dirty_buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_dirty_buffer)
}
void FtraceEvent::clear_block_dirty_buffer() {
  if (has_block_dirty_buffer()) {
    delete event_.block_dirty_buffer_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_getrq(::perfetto::protos::BlockGetrqFtraceEvent* block_getrq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_getrq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_getrq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_getrq, submessage_arena);
    }
    set_has_block_getrq();
    event_.block_getrq_ = block_getrq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_getrq)
}
void FtraceEvent::clear_block_getrq() {
  if (has_block_getrq()) {
    delete event_.block_getrq_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_plug(::perfetto::protos::BlockPlugFtraceEvent* block_plug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_plug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_plug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_plug, submessage_arena);
    }
    set_has_block_plug();
    event_.block_plug_ = block_plug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_plug)
}
void FtraceEvent::clear_block_plug() {
  if (has_block_plug()) {
    delete event_.block_plug_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_abort(::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_rq_abort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_rq_abort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_abort, submessage_arena);
    }
    set_has_block_rq_abort();
    event_.block_rq_abort_ = block_rq_abort;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_abort)
}
void FtraceEvent::clear_block_rq_abort() {
  if (has_block_rq_abort()) {
    delete event_.block_rq_abort_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_complete(::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_rq_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_rq_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_complete, submessage_arena);
    }
    set_has_block_rq_complete();
    event_.block_rq_complete_ = block_rq_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_complete)
}
void FtraceEvent::clear_block_rq_complete() {
  if (has_block_rq_complete()) {
    delete event_.block_rq_complete_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_insert(::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_rq_insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_rq_insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_insert, submessage_arena);
    }
    set_has_block_rq_insert();
    event_.block_rq_insert_ = block_rq_insert;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_insert)
}
void FtraceEvent::clear_block_rq_insert() {
  if (has_block_rq_insert()) {
    delete event_.block_rq_insert_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_remap(::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_rq_remap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_rq_remap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_remap, submessage_arena);
    }
    set_has_block_rq_remap();
    event_.block_rq_remap_ = block_rq_remap;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_remap)
}
void FtraceEvent::clear_block_rq_remap() {
  if (has_block_rq_remap()) {
    delete event_.block_rq_remap_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_requeue(::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_rq_requeue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_rq_requeue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_requeue, submessage_arena);
    }
    set_has_block_rq_requeue();
    event_.block_rq_requeue_ = block_rq_requeue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_requeue)
}
void FtraceEvent::clear_block_rq_requeue() {
  if (has_block_rq_requeue()) {
    delete event_.block_rq_requeue_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_sleeprq(::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_sleeprq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_sleeprq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_sleeprq, submessage_arena);
    }
    set_has_block_sleeprq();
    event_.block_sleeprq_ = block_sleeprq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_sleeprq)
}
void FtraceEvent::clear_block_sleeprq() {
  if (has_block_sleeprq()) {
    delete event_.block_sleeprq_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_split(::perfetto::protos::BlockSplitFtraceEvent* block_split) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_split) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_split = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_split, submessage_arena);
    }
    set_has_block_split();
    event_.block_split_ = block_split;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_split)
}
void FtraceEvent::clear_block_split() {
  if (has_block_split()) {
    delete event_.block_split_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_touch_buffer(::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_touch_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_touch_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_touch_buffer, submessage_arena);
    }
    set_has_block_touch_buffer();
    event_.block_touch_buffer_ = block_touch_buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_touch_buffer)
}
void FtraceEvent::clear_block_touch_buffer() {
  if (has_block_touch_buffer()) {
    delete event_.block_touch_buffer_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_unplug(::perfetto::protos::BlockUnplugFtraceEvent* block_unplug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (block_unplug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_unplug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_unplug, submessage_arena);
    }
    set_has_block_unplug();
    event_.block_unplug_ = block_unplug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_unplug)
}
void FtraceEvent::clear_block_unplug() {
  if (has_block_unplug()) {
    delete event_.block_unplug_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_alloc_da_blocks(::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_alloc_da_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_alloc_da_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_alloc_da_blocks, submessage_arena);
    }
    set_has_ext4_alloc_da_blocks();
    event_.ext4_alloc_da_blocks_ = ext4_alloc_da_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
}
void FtraceEvent::clear_ext4_alloc_da_blocks() {
  if (has_ext4_alloc_da_blocks()) {
    delete event_.ext4_alloc_da_blocks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_allocate_blocks(::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_allocate_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_allocate_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_allocate_blocks, submessage_arena);
    }
    set_has_ext4_allocate_blocks();
    event_.ext4_allocate_blocks_ = ext4_allocate_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
}
void FtraceEvent::clear_ext4_allocate_blocks() {
  if (has_ext4_allocate_blocks()) {
    delete event_.ext4_allocate_blocks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_allocate_inode(::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_allocate_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_allocate_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_allocate_inode, submessage_arena);
    }
    set_has_ext4_allocate_inode();
    event_.ext4_allocate_inode_ = ext4_allocate_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_allocate_inode)
}
void FtraceEvent::clear_ext4_allocate_inode() {
  if (has_ext4_allocate_inode()) {
    delete event_.ext4_allocate_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_begin_ordered_truncate(::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_begin_ordered_truncate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_begin_ordered_truncate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_begin_ordered_truncate, submessage_arena);
    }
    set_has_ext4_begin_ordered_truncate();
    event_.ext4_begin_ordered_truncate_ = ext4_begin_ordered_truncate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
}
void FtraceEvent::clear_ext4_begin_ordered_truncate() {
  if (has_ext4_begin_ordered_truncate()) {
    delete event_.ext4_begin_ordered_truncate_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_collapse_range(::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_collapse_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_collapse_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_collapse_range, submessage_arena);
    }
    set_has_ext4_collapse_range();
    event_.ext4_collapse_range_ = ext4_collapse_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_collapse_range)
}
void FtraceEvent::clear_ext4_collapse_range() {
  if (has_ext4_collapse_range()) {
    delete event_.ext4_collapse_range_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_release_space(::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_release_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_release_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_release_space, submessage_arena);
    }
    set_has_ext4_da_release_space();
    event_.ext4_da_release_space_ = ext4_da_release_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_release_space)
}
void FtraceEvent::clear_ext4_da_release_space() {
  if (has_ext4_da_release_space()) {
    delete event_.ext4_da_release_space_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_reserve_space(::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_reserve_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_reserve_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_reserve_space, submessage_arena);
    }
    set_has_ext4_da_reserve_space();
    event_.ext4_da_reserve_space_ = ext4_da_reserve_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
}
void FtraceEvent::clear_ext4_da_reserve_space() {
  if (has_ext4_da_reserve_space()) {
    delete event_.ext4_da_reserve_space_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_update_reserve_space(::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_update_reserve_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_update_reserve_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_update_reserve_space, submessage_arena);
    }
    set_has_ext4_da_update_reserve_space();
    event_.ext4_da_update_reserve_space_ = ext4_da_update_reserve_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
}
void FtraceEvent::clear_ext4_da_update_reserve_space() {
  if (has_ext4_da_update_reserve_space()) {
    delete event_.ext4_da_update_reserve_space_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_pages(::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_write_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_write_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_pages, submessage_arena);
    }
    set_has_ext4_da_write_pages();
    event_.ext4_da_write_pages_ = ext4_da_write_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_pages)
}
void FtraceEvent::clear_ext4_da_write_pages() {
  if (has_ext4_da_write_pages()) {
    delete event_.ext4_da_write_pages_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_pages_extent(::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_da_write_pages_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_da_write_pages_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_pages_extent, submessage_arena);
    }
    set_has_ext4_da_write_pages_extent();
    event_.ext4_da_write_pages_extent_ = ext4_da_write_pages_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
}
void FtraceEvent::clear_ext4_da_write_pages_extent() {
  if (has_ext4_da_write_pages_extent()) {
    delete event_.ext4_da_write_pages_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_direct_io_enter(::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_direct_io_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_direct_io_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_direct_io_enter, submessage_arena);
    }
    set_has_ext4_direct_io_enter();
    event_.ext4_direct_io_enter_ = ext4_direct_io_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
}
void FtraceEvent::clear_ext4_direct_io_enter() {
  if (has_ext4_direct_io_enter()) {
    delete event_.ext4_direct_io_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_direct_io_exit(::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_direct_io_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_direct_io_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_direct_io_exit, submessage_arena);
    }
    set_has_ext4_direct_io_exit();
    event_.ext4_direct_io_exit_ = ext4_direct_io_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
}
void FtraceEvent::clear_ext4_direct_io_exit() {
  if (has_ext4_direct_io_exit()) {
    delete event_.ext4_direct_io_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_discard_blocks(::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_discard_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_discard_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_discard_blocks, submessage_arena);
    }
    set_has_ext4_discard_blocks();
    event_.ext4_discard_blocks_ = ext4_discard_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_discard_blocks)
}
void FtraceEvent::clear_ext4_discard_blocks() {
  if (has_ext4_discard_blocks()) {
    delete event_.ext4_discard_blocks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_discard_preallocations(::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_discard_preallocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_discard_preallocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_discard_preallocations, submessage_arena);
    }
    set_has_ext4_discard_preallocations();
    event_.ext4_discard_preallocations_ = ext4_discard_preallocations;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
}
void FtraceEvent::clear_ext4_discard_preallocations() {
  if (has_ext4_discard_preallocations()) {
    delete event_.ext4_discard_preallocations_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_drop_inode(::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_drop_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_drop_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_drop_inode, submessage_arena);
    }
    set_has_ext4_drop_inode();
    event_.ext4_drop_inode_ = ext4_drop_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_drop_inode)
}
void FtraceEvent::clear_ext4_drop_inode() {
  if (has_ext4_drop_inode()) {
    delete event_.ext4_drop_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_cache_extent(::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_cache_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_cache_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_cache_extent, submessage_arena);
    }
    set_has_ext4_es_cache_extent();
    event_.ext4_es_cache_extent_ = ext4_es_cache_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
}
void FtraceEvent::clear_ext4_es_cache_extent() {
  if (has_ext4_es_cache_extent()) {
    delete event_.ext4_es_cache_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_find_delayed_extent_range_enter(::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_find_delayed_extent_range_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_find_delayed_extent_range_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_find_delayed_extent_range_enter, submessage_arena);
    }
    set_has_ext4_es_find_delayed_extent_range_enter();
    event_.ext4_es_find_delayed_extent_range_enter_ = ext4_es_find_delayed_extent_range_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
}
void FtraceEvent::clear_ext4_es_find_delayed_extent_range_enter() {
  if (has_ext4_es_find_delayed_extent_range_enter()) {
    delete event_.ext4_es_find_delayed_extent_range_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_find_delayed_extent_range_exit(::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_find_delayed_extent_range_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_find_delayed_extent_range_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_find_delayed_extent_range_exit, submessage_arena);
    }
    set_has_ext4_es_find_delayed_extent_range_exit();
    event_.ext4_es_find_delayed_extent_range_exit_ = ext4_es_find_delayed_extent_range_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
}
void FtraceEvent::clear_ext4_es_find_delayed_extent_range_exit() {
  if (has_ext4_es_find_delayed_extent_range_exit()) {
    delete event_.ext4_es_find_delayed_extent_range_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_insert_extent(::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_insert_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_insert_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_insert_extent, submessage_arena);
    }
    set_has_ext4_es_insert_extent();
    event_.ext4_es_insert_extent_ = ext4_es_insert_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
}
void FtraceEvent::clear_ext4_es_insert_extent() {
  if (has_ext4_es_insert_extent()) {
    delete event_.ext4_es_insert_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_lookup_extent_enter(::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_lookup_extent_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_lookup_extent_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_lookup_extent_enter, submessage_arena);
    }
    set_has_ext4_es_lookup_extent_enter();
    event_.ext4_es_lookup_extent_enter_ = ext4_es_lookup_extent_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
}
void FtraceEvent::clear_ext4_es_lookup_extent_enter() {
  if (has_ext4_es_lookup_extent_enter()) {
    delete event_.ext4_es_lookup_extent_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_lookup_extent_exit(::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_lookup_extent_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_lookup_extent_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_lookup_extent_exit, submessage_arena);
    }
    set_has_ext4_es_lookup_extent_exit();
    event_.ext4_es_lookup_extent_exit_ = ext4_es_lookup_extent_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
}
void FtraceEvent::clear_ext4_es_lookup_extent_exit() {
  if (has_ext4_es_lookup_extent_exit()) {
    delete event_.ext4_es_lookup_extent_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_remove_extent(::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_remove_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_remove_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_remove_extent, submessage_arena);
    }
    set_has_ext4_es_remove_extent();
    event_.ext4_es_remove_extent_ = ext4_es_remove_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
}
void FtraceEvent::clear_ext4_es_remove_extent() {
  if (has_ext4_es_remove_extent()) {
    delete event_.ext4_es_remove_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink(::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_shrink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_shrink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink, submessage_arena);
    }
    set_has_ext4_es_shrink();
    event_.ext4_es_shrink_ = ext4_es_shrink;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink)
}
void FtraceEvent::clear_ext4_es_shrink() {
  if (has_ext4_es_shrink()) {
    delete event_.ext4_es_shrink_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink_count(::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_shrink_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_shrink_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink_count, submessage_arena);
    }
    set_has_ext4_es_shrink_count();
    event_.ext4_es_shrink_count_ = ext4_es_shrink_count;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
}
void FtraceEvent::clear_ext4_es_shrink_count() {
  if (has_ext4_es_shrink_count()) {
    delete event_.ext4_es_shrink_count_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink_scan_enter(::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_shrink_scan_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_shrink_scan_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink_scan_enter, submessage_arena);
    }
    set_has_ext4_es_shrink_scan_enter();
    event_.ext4_es_shrink_scan_enter_ = ext4_es_shrink_scan_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
}
void FtraceEvent::clear_ext4_es_shrink_scan_enter() {
  if (has_ext4_es_shrink_scan_enter()) {
    delete event_.ext4_es_shrink_scan_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink_scan_exit(::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_es_shrink_scan_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_es_shrink_scan_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink_scan_exit, submessage_arena);
    }
    set_has_ext4_es_shrink_scan_exit();
    event_.ext4_es_shrink_scan_exit_ = ext4_es_shrink_scan_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
}
void FtraceEvent::clear_ext4_es_shrink_scan_exit() {
  if (has_ext4_es_shrink_scan_exit()) {
    delete event_.ext4_es_shrink_scan_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_evict_inode(::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_evict_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_evict_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_evict_inode, submessage_arena);
    }
    set_has_ext4_evict_inode();
    event_.ext4_evict_inode_ = ext4_evict_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_evict_inode)
}
void FtraceEvent::clear_ext4_evict_inode() {
  if (has_ext4_evict_inode()) {
    delete event_.ext4_evict_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_convert_to_initialized_enter(::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_convert_to_initialized_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_convert_to_initialized_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_convert_to_initialized_enter, submessage_arena);
    }
    set_has_ext4_ext_convert_to_initialized_enter();
    event_.ext4_ext_convert_to_initialized_enter_ = ext4_ext_convert_to_initialized_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
}
void FtraceEvent::clear_ext4_ext_convert_to_initialized_enter() {
  if (has_ext4_ext_convert_to_initialized_enter()) {
    delete event_.ext4_ext_convert_to_initialized_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_convert_to_initialized_fastpath(::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_convert_to_initialized_fastpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_convert_to_initialized_fastpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_convert_to_initialized_fastpath, submessage_arena);
    }
    set_has_ext4_ext_convert_to_initialized_fastpath();
    event_.ext4_ext_convert_to_initialized_fastpath_ = ext4_ext_convert_to_initialized_fastpath;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
}
void FtraceEvent::clear_ext4_ext_convert_to_initialized_fastpath() {
  if (has_ext4_ext_convert_to_initialized_fastpath()) {
    delete event_.ext4_ext_convert_to_initialized_fastpath_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_handle_unwritten_extents(::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_handle_unwritten_extents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_handle_unwritten_extents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_handle_unwritten_extents, submessage_arena);
    }
    set_has_ext4_ext_handle_unwritten_extents();
    event_.ext4_ext_handle_unwritten_extents_ = ext4_ext_handle_unwritten_extents;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
}
void FtraceEvent::clear_ext4_ext_handle_unwritten_extents() {
  if (has_ext4_ext_handle_unwritten_extents()) {
    delete event_.ext4_ext_handle_unwritten_extents_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_in_cache(::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_in_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_in_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_in_cache, submessage_arena);
    }
    set_has_ext4_ext_in_cache();
    event_.ext4_ext_in_cache_ = ext4_ext_in_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
}
void FtraceEvent::clear_ext4_ext_in_cache() {
  if (has_ext4_ext_in_cache()) {
    delete event_.ext4_ext_in_cache_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_load_extent(::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_load_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_load_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_load_extent, submessage_arena);
    }
    set_has_ext4_ext_load_extent();
    event_.ext4_ext_load_extent_ = ext4_ext_load_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
}
void FtraceEvent::clear_ext4_ext_load_extent() {
  if (has_ext4_ext_load_extent()) {
    delete event_.ext4_ext_load_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_map_blocks_enter(::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_map_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_map_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_map_blocks_enter, submessage_arena);
    }
    set_has_ext4_ext_map_blocks_enter();
    event_.ext4_ext_map_blocks_enter_ = ext4_ext_map_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
}
void FtraceEvent::clear_ext4_ext_map_blocks_enter() {
  if (has_ext4_ext_map_blocks_enter()) {
    delete event_.ext4_ext_map_blocks_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_map_blocks_exit(::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_map_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_map_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_map_blocks_exit, submessage_arena);
    }
    set_has_ext4_ext_map_blocks_exit();
    event_.ext4_ext_map_blocks_exit_ = ext4_ext_map_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
}
void FtraceEvent::clear_ext4_ext_map_blocks_exit() {
  if (has_ext4_ext_map_blocks_exit()) {
    delete event_.ext4_ext_map_blocks_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_put_in_cache(::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_put_in_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_put_in_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_put_in_cache, submessage_arena);
    }
    set_has_ext4_ext_put_in_cache();
    event_.ext4_ext_put_in_cache_ = ext4_ext_put_in_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
}
void FtraceEvent::clear_ext4_ext_put_in_cache() {
  if (has_ext4_ext_put_in_cache()) {
    delete event_.ext4_ext_put_in_cache_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_remove_space(::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_remove_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_remove_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_remove_space, submessage_arena);
    }
    set_has_ext4_ext_remove_space();
    event_.ext4_ext_remove_space_ = ext4_ext_remove_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
}
void FtraceEvent::clear_ext4_ext_remove_space() {
  if (has_ext4_ext_remove_space()) {
    delete event_.ext4_ext_remove_space_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_remove_space_done(::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_remove_space_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_remove_space_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_remove_space_done, submessage_arena);
    }
    set_has_ext4_ext_remove_space_done();
    event_.ext4_ext_remove_space_done_ = ext4_ext_remove_space_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
}
void FtraceEvent::clear_ext4_ext_remove_space_done() {
  if (has_ext4_ext_remove_space_done()) {
    delete event_.ext4_ext_remove_space_done_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_rm_idx(::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_rm_idx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_rm_idx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_rm_idx, submessage_arena);
    }
    set_has_ext4_ext_rm_idx();
    event_.ext4_ext_rm_idx_ = ext4_ext_rm_idx;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
}
void FtraceEvent::clear_ext4_ext_rm_idx() {
  if (has_ext4_ext_rm_idx()) {
    delete event_.ext4_ext_rm_idx_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_rm_leaf(::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_rm_leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_rm_leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_rm_leaf, submessage_arena);
    }
    set_has_ext4_ext_rm_leaf();
    event_.ext4_ext_rm_leaf_ = ext4_ext_rm_leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
}
void FtraceEvent::clear_ext4_ext_rm_leaf() {
  if (has_ext4_ext_rm_leaf()) {
    delete event_.ext4_ext_rm_leaf_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_show_extent(::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ext_show_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ext_show_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_show_extent, submessage_arena);
    }
    set_has_ext4_ext_show_extent();
    event_.ext4_ext_show_extent_ = ext4_ext_show_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
}
void FtraceEvent::clear_ext4_ext_show_extent() {
  if (has_ext4_ext_show_extent()) {
    delete event_.ext4_ext_show_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_fallocate_enter(::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_fallocate_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_fallocate_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_fallocate_enter, submessage_arena);
    }
    set_has_ext4_fallocate_enter();
    event_.ext4_fallocate_enter_ = ext4_fallocate_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
}
void FtraceEvent::clear_ext4_fallocate_enter() {
  if (has_ext4_fallocate_enter()) {
    delete event_.ext4_fallocate_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_fallocate_exit(::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_fallocate_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_fallocate_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_fallocate_exit, submessage_arena);
    }
    set_has_ext4_fallocate_exit();
    event_.ext4_fallocate_exit_ = ext4_fallocate_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
}
void FtraceEvent::clear_ext4_fallocate_exit() {
  if (has_ext4_fallocate_exit()) {
    delete event_.ext4_fallocate_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_find_delalloc_range(::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_find_delalloc_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_find_delalloc_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_find_delalloc_range, submessage_arena);
    }
    set_has_ext4_find_delalloc_range();
    event_.ext4_find_delalloc_range_ = ext4_find_delalloc_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
}
void FtraceEvent::clear_ext4_find_delalloc_range() {
  if (has_ext4_find_delalloc_range()) {
    delete event_.ext4_find_delalloc_range_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_forget(::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_forget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_forget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_forget, submessage_arena);
    }
    set_has_ext4_forget();
    event_.ext4_forget_ = ext4_forget;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_forget)
}
void FtraceEvent::clear_ext4_forget() {
  if (has_ext4_forget()) {
    delete event_.ext4_forget_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_free_blocks(::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_free_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_free_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_free_blocks, submessage_arena);
    }
    set_has_ext4_free_blocks();
    event_.ext4_free_blocks_ = ext4_free_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_free_blocks)
}
void FtraceEvent::clear_ext4_free_blocks() {
  if (has_ext4_free_blocks()) {
    delete event_.ext4_free_blocks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_free_inode(::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_free_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_free_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_free_inode, submessage_arena);
    }
    set_has_ext4_free_inode();
    event_.ext4_free_inode_ = ext4_free_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_free_inode)
}
void FtraceEvent::clear_ext4_free_inode() {
  if (has_ext4_free_inode()) {
    delete event_.ext4_free_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_get_implied_cluster_alloc_exit(::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_get_implied_cluster_alloc_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_get_implied_cluster_alloc_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_get_implied_cluster_alloc_exit, submessage_arena);
    }
    set_has_ext4_get_implied_cluster_alloc_exit();
    event_.ext4_get_implied_cluster_alloc_exit_ = ext4_get_implied_cluster_alloc_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
}
void FtraceEvent::clear_ext4_get_implied_cluster_alloc_exit() {
  if (has_ext4_get_implied_cluster_alloc_exit()) {
    delete event_.ext4_get_implied_cluster_alloc_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_get_reserved_cluster_alloc(::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_get_reserved_cluster_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_get_reserved_cluster_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_get_reserved_cluster_alloc, submessage_arena);
    }
    set_has_ext4_get_reserved_cluster_alloc();
    event_.ext4_get_reserved_cluster_alloc_ = ext4_get_reserved_cluster_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
}
void FtraceEvent::clear_ext4_get_reserved_cluster_alloc() {
  if (has_ext4_get_reserved_cluster_alloc()) {
    delete event_.ext4_get_reserved_cluster_alloc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ind_map_blocks_enter(::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ind_map_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ind_map_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ind_map_blocks_enter, submessage_arena);
    }
    set_has_ext4_ind_map_blocks_enter();
    event_.ext4_ind_map_blocks_enter_ = ext4_ind_map_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
}
void FtraceEvent::clear_ext4_ind_map_blocks_enter() {
  if (has_ext4_ind_map_blocks_enter()) {
    delete event_.ext4_ind_map_blocks_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ind_map_blocks_exit(::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_ind_map_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_ind_map_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ind_map_blocks_exit, submessage_arena);
    }
    set_has_ext4_ind_map_blocks_exit();
    event_.ext4_ind_map_blocks_exit_ = ext4_ind_map_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
}
void FtraceEvent::clear_ext4_ind_map_blocks_exit() {
  if (has_ext4_ind_map_blocks_exit()) {
    delete event_.ext4_ind_map_blocks_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_insert_range(::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_insert_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_insert_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_insert_range, submessage_arena);
    }
    set_has_ext4_insert_range();
    event_.ext4_insert_range_ = ext4_insert_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_insert_range)
}
void FtraceEvent::clear_ext4_insert_range() {
  if (has_ext4_insert_range()) {
    delete event_.ext4_insert_range_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_invalidatepage(::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_invalidatepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_invalidatepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_invalidatepage, submessage_arena);
    }
    set_has_ext4_invalidatepage();
    event_.ext4_invalidatepage_ = ext4_invalidatepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_invalidatepage)
}
void FtraceEvent::clear_ext4_invalidatepage() {
  if (has_ext4_invalidatepage()) {
    delete event_.ext4_invalidatepage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journal_start(::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_journal_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_journal_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journal_start, submessage_arena);
    }
    set_has_ext4_journal_start();
    event_.ext4_journal_start_ = ext4_journal_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journal_start)
}
void FtraceEvent::clear_ext4_journal_start() {
  if (has_ext4_journal_start()) {
    delete event_.ext4_journal_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journal_start_reserved(::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_journal_start_reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_journal_start_reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journal_start_reserved, submessage_arena);
    }
    set_has_ext4_journal_start_reserved();
    event_.ext4_journal_start_reserved_ = ext4_journal_start_reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
}
void FtraceEvent::clear_ext4_journal_start_reserved() {
  if (has_ext4_journal_start_reserved()) {
    delete event_.ext4_journal_start_reserved_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journalled_invalidatepage(::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_journalled_invalidatepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_journalled_invalidatepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journalled_invalidatepage, submessage_arena);
    }
    set_has_ext4_journalled_invalidatepage();
    event_.ext4_journalled_invalidatepage_ = ext4_journalled_invalidatepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
}
void FtraceEvent::clear_ext4_journalled_invalidatepage() {
  if (has_ext4_journalled_invalidatepage()) {
    delete event_.ext4_journalled_invalidatepage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journalled_write_end(::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_journalled_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_journalled_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journalled_write_end, submessage_arena);
    }
    set_has_ext4_journalled_write_end();
    event_.ext4_journalled_write_end_ = ext4_journalled_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
}
void FtraceEvent::clear_ext4_journalled_write_end() {
  if (has_ext4_journalled_write_end()) {
    delete event_.ext4_journalled_write_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_load_inode(::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_load_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_load_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_load_inode, submessage_arena);
    }
    set_has_ext4_load_inode();
    event_.ext4_load_inode_ = ext4_load_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_load_inode)
}
void FtraceEvent::clear_ext4_load_inode() {
  if (has_ext4_load_inode()) {
    delete event_.ext4_load_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_load_inode_bitmap(::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_load_inode_bitmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_load_inode_bitmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_load_inode_bitmap, submessage_arena);
    }
    set_has_ext4_load_inode_bitmap();
    event_.ext4_load_inode_bitmap_ = ext4_load_inode_bitmap;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
}
void FtraceEvent::clear_ext4_load_inode_bitmap() {
  if (has_ext4_load_inode_bitmap()) {
    delete event_.ext4_load_inode_bitmap_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mark_inode_dirty(::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mark_inode_dirty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mark_inode_dirty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mark_inode_dirty, submessage_arena);
    }
    set_has_ext4_mark_inode_dirty();
    event_.ext4_mark_inode_dirty_ = ext4_mark_inode_dirty;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
}
void FtraceEvent::clear_ext4_mark_inode_dirty() {
  if (has_ext4_mark_inode_dirty()) {
    delete event_.ext4_mark_inode_dirty_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_bitmap_load(::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_bitmap_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_bitmap_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_bitmap_load, submessage_arena);
    }
    set_has_ext4_mb_bitmap_load();
    event_.ext4_mb_bitmap_load_ = ext4_mb_bitmap_load;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
}
void FtraceEvent::clear_ext4_mb_bitmap_load() {
  if (has_ext4_mb_bitmap_load()) {
    delete event_.ext4_mb_bitmap_load_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_buddy_bitmap_load(::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_buddy_bitmap_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_buddy_bitmap_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_buddy_bitmap_load, submessage_arena);
    }
    set_has_ext4_mb_buddy_bitmap_load();
    event_.ext4_mb_buddy_bitmap_load_ = ext4_mb_buddy_bitmap_load;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
}
void FtraceEvent::clear_ext4_mb_buddy_bitmap_load() {
  if (has_ext4_mb_buddy_bitmap_load()) {
    delete event_.ext4_mb_buddy_bitmap_load_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_discard_preallocations(::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_discard_preallocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_discard_preallocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_discard_preallocations, submessage_arena);
    }
    set_has_ext4_mb_discard_preallocations();
    event_.ext4_mb_discard_preallocations_ = ext4_mb_discard_preallocations;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
}
void FtraceEvent::clear_ext4_mb_discard_preallocations() {
  if (has_ext4_mb_discard_preallocations()) {
    delete event_.ext4_mb_discard_preallocations_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_new_group_pa(::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_new_group_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_new_group_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_new_group_pa, submessage_arena);
    }
    set_has_ext4_mb_new_group_pa();
    event_.ext4_mb_new_group_pa_ = ext4_mb_new_group_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
}
void FtraceEvent::clear_ext4_mb_new_group_pa() {
  if (has_ext4_mb_new_group_pa()) {
    delete event_.ext4_mb_new_group_pa_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_new_inode_pa(::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_new_inode_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_new_inode_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_new_inode_pa, submessage_arena);
    }
    set_has_ext4_mb_new_inode_pa();
    event_.ext4_mb_new_inode_pa_ = ext4_mb_new_inode_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
}
void FtraceEvent::clear_ext4_mb_new_inode_pa() {
  if (has_ext4_mb_new_inode_pa()) {
    delete event_.ext4_mb_new_inode_pa_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_release_group_pa(::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_release_group_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_release_group_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_release_group_pa, submessage_arena);
    }
    set_has_ext4_mb_release_group_pa();
    event_.ext4_mb_release_group_pa_ = ext4_mb_release_group_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
}
void FtraceEvent::clear_ext4_mb_release_group_pa() {
  if (has_ext4_mb_release_group_pa()) {
    delete event_.ext4_mb_release_group_pa_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_release_inode_pa(::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mb_release_inode_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mb_release_inode_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_release_inode_pa, submessage_arena);
    }
    set_has_ext4_mb_release_inode_pa();
    event_.ext4_mb_release_inode_pa_ = ext4_mb_release_inode_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
}
void FtraceEvent::clear_ext4_mb_release_inode_pa() {
  if (has_ext4_mb_release_inode_pa()) {
    delete event_.ext4_mb_release_inode_pa_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_alloc(::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mballoc_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mballoc_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_alloc, submessage_arena);
    }
    set_has_ext4_mballoc_alloc();
    event_.ext4_mballoc_alloc_ = ext4_mballoc_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
}
void FtraceEvent::clear_ext4_mballoc_alloc() {
  if (has_ext4_mballoc_alloc()) {
    delete event_.ext4_mballoc_alloc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_discard(::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mballoc_discard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mballoc_discard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_discard, submessage_arena);
    }
    set_has_ext4_mballoc_discard();
    event_.ext4_mballoc_discard_ = ext4_mballoc_discard;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
}
void FtraceEvent::clear_ext4_mballoc_discard() {
  if (has_ext4_mballoc_discard()) {
    delete event_.ext4_mballoc_discard_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_free(::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mballoc_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mballoc_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_free, submessage_arena);
    }
    set_has_ext4_mballoc_free();
    event_.ext4_mballoc_free_ = ext4_mballoc_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_free)
}
void FtraceEvent::clear_ext4_mballoc_free() {
  if (has_ext4_mballoc_free()) {
    delete event_.ext4_mballoc_free_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_prealloc(::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_mballoc_prealloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_mballoc_prealloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_prealloc, submessage_arena);
    }
    set_has_ext4_mballoc_prealloc();
    event_.ext4_mballoc_prealloc_ = ext4_mballoc_prealloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
}
void FtraceEvent::clear_ext4_mballoc_prealloc() {
  if (has_ext4_mballoc_prealloc()) {
    delete event_.ext4_mballoc_prealloc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_other_inode_update_time(::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_other_inode_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_other_inode_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_other_inode_update_time, submessage_arena);
    }
    set_has_ext4_other_inode_update_time();
    event_.ext4_other_inode_update_time_ = ext4_other_inode_update_time;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
}
void FtraceEvent::clear_ext4_other_inode_update_time() {
  if (has_ext4_other_inode_update_time()) {
    delete event_.ext4_other_inode_update_time_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_punch_hole(::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_punch_hole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_punch_hole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_punch_hole, submessage_arena);
    }
    set_has_ext4_punch_hole();
    event_.ext4_punch_hole_ = ext4_punch_hole;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_punch_hole)
}
void FtraceEvent::clear_ext4_punch_hole() {
  if (has_ext4_punch_hole()) {
    delete event_.ext4_punch_hole_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_read_block_bitmap_load(::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_read_block_bitmap_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_read_block_bitmap_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_read_block_bitmap_load, submessage_arena);
    }
    set_has_ext4_read_block_bitmap_load();
    event_.ext4_read_block_bitmap_load_ = ext4_read_block_bitmap_load;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
}
void FtraceEvent::clear_ext4_read_block_bitmap_load() {
  if (has_ext4_read_block_bitmap_load()) {
    delete event_.ext4_read_block_bitmap_load_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_readpage(::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_readpage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_readpage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_readpage, submessage_arena);
    }
    set_has_ext4_readpage();
    event_.ext4_readpage_ = ext4_readpage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_readpage)
}
void FtraceEvent::clear_ext4_readpage() {
  if (has_ext4_readpage()) {
    delete event_.ext4_readpage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_releasepage(::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_releasepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_releasepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_releasepage, submessage_arena);
    }
    set_has_ext4_releasepage();
    event_.ext4_releasepage_ = ext4_releasepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_releasepage)
}
void FtraceEvent::clear_ext4_releasepage() {
  if (has_ext4_releasepage()) {
    delete event_.ext4_releasepage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_remove_blocks(::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_remove_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_remove_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_remove_blocks, submessage_arena);
    }
    set_has_ext4_remove_blocks();
    event_.ext4_remove_blocks_ = ext4_remove_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_remove_blocks)
}
void FtraceEvent::clear_ext4_remove_blocks() {
  if (has_ext4_remove_blocks()) {
    delete event_.ext4_remove_blocks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_request_blocks(::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_request_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_request_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_request_blocks, submessage_arena);
    }
    set_has_ext4_request_blocks();
    event_.ext4_request_blocks_ = ext4_request_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_request_blocks)
}
void FtraceEvent::clear_ext4_request_blocks() {
  if (has_ext4_request_blocks()) {
    delete event_.ext4_request_blocks_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_request_inode(::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_request_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_request_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_request_inode, submessage_arena);
    }
    set_has_ext4_request_inode();
    event_.ext4_request_inode_ = ext4_request_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_request_inode)
}
void FtraceEvent::clear_ext4_request_inode() {
  if (has_ext4_request_inode()) {
    delete event_.ext4_request_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_sync_fs(::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_sync_fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_sync_fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_sync_fs, submessage_arena);
    }
    set_has_ext4_sync_fs();
    event_.ext4_sync_fs_ = ext4_sync_fs;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_fs)
}
void FtraceEvent::clear_ext4_sync_fs() {
  if (has_ext4_sync_fs()) {
    delete event_.ext4_sync_fs_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_trim_all_free(::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_trim_all_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_trim_all_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_trim_all_free, submessage_arena);
    }
    set_has_ext4_trim_all_free();
    event_.ext4_trim_all_free_ = ext4_trim_all_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_trim_all_free)
}
void FtraceEvent::clear_ext4_trim_all_free() {
  if (has_ext4_trim_all_free()) {
    delete event_.ext4_trim_all_free_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_trim_extent(::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_trim_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_trim_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_trim_extent, submessage_arena);
    }
    set_has_ext4_trim_extent();
    event_.ext4_trim_extent_ = ext4_trim_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_trim_extent)
}
void FtraceEvent::clear_ext4_trim_extent() {
  if (has_ext4_trim_extent()) {
    delete event_.ext4_trim_extent_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_truncate_enter(::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_truncate_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_truncate_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_truncate_enter, submessage_arena);
    }
    set_has_ext4_truncate_enter();
    event_.ext4_truncate_enter_ = ext4_truncate_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_truncate_enter)
}
void FtraceEvent::clear_ext4_truncate_enter() {
  if (has_ext4_truncate_enter()) {
    delete event_.ext4_truncate_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_truncate_exit(::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_truncate_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_truncate_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_truncate_exit, submessage_arena);
    }
    set_has_ext4_truncate_exit();
    event_.ext4_truncate_exit_ = ext4_truncate_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_truncate_exit)
}
void FtraceEvent::clear_ext4_truncate_exit() {
  if (has_ext4_truncate_exit()) {
    delete event_.ext4_truncate_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_unlink_enter(::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_unlink_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_unlink_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_unlink_enter, submessage_arena);
    }
    set_has_ext4_unlink_enter();
    event_.ext4_unlink_enter_ = ext4_unlink_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_unlink_enter)
}
void FtraceEvent::clear_ext4_unlink_enter() {
  if (has_ext4_unlink_enter()) {
    delete event_.ext4_unlink_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_unlink_exit(::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_unlink_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_unlink_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_unlink_exit, submessage_arena);
    }
    set_has_ext4_unlink_exit();
    event_.ext4_unlink_exit_ = ext4_unlink_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_unlink_exit)
}
void FtraceEvent::clear_ext4_unlink_exit() {
  if (has_ext4_unlink_exit()) {
    delete event_.ext4_unlink_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_write_begin(::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_write_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_write_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_write_begin, submessage_arena);
    }
    set_has_ext4_write_begin();
    event_.ext4_write_begin_ = ext4_write_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_write_begin)
}
void FtraceEvent::clear_ext4_write_begin() {
  if (has_ext4_write_begin()) {
    delete event_.ext4_write_begin_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_write_end(::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_write_end, submessage_arena);
    }
    set_has_ext4_write_end();
    event_.ext4_write_end_ = ext4_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_write_end)
}
void FtraceEvent::clear_ext4_write_end() {
  if (has_ext4_write_end()) {
    delete event_.ext4_write_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_writepage(::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_writepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_writepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_writepage, submessage_arena);
    }
    set_has_ext4_writepage();
    event_.ext4_writepage_ = ext4_writepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_writepage)
}
void FtraceEvent::clear_ext4_writepage() {
  if (has_ext4_writepage()) {
    delete event_.ext4_writepage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_writepages(::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_writepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_writepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_writepages, submessage_arena);
    }
    set_has_ext4_writepages();
    event_.ext4_writepages_ = ext4_writepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_writepages)
}
void FtraceEvent::clear_ext4_writepages() {
  if (has_ext4_writepages()) {
    delete event_.ext4_writepages_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_writepages_result(::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_writepages_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_writepages_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_writepages_result, submessage_arena);
    }
    set_has_ext4_writepages_result();
    event_.ext4_writepages_result_ = ext4_writepages_result;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_writepages_result)
}
void FtraceEvent::clear_ext4_writepages_result() {
  if (has_ext4_writepages_result()) {
    delete event_.ext4_writepages_result_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_zero_range(::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ext4_zero_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext4_zero_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_zero_range, submessage_arena);
    }
    set_has_ext4_zero_range();
    event_.ext4_zero_range_ = ext4_zero_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_zero_range)
}
void FtraceEvent::clear_ext4_zero_range() {
  if (has_ext4_zero_range()) {
    delete event_.ext4_zero_range_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_task_newtask(::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (task_newtask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_newtask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_newtask, submessage_arena);
    }
    set_has_task_newtask();
    event_.task_newtask_ = task_newtask;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.task_newtask)
}
void FtraceEvent::clear_task_newtask() {
  if (has_task_newtask()) {
    delete event_.task_newtask_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_task_rename(::perfetto::protos::TaskRenameFtraceEvent* task_rename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (task_rename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_rename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_rename, submessage_arena);
    }
    set_has_task_rename();
    event_.task_rename_ = task_rename;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.task_rename)
}
void FtraceEvent::clear_task_rename() {
  if (has_task_rename()) {
    delete event_.task_rename_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_exec(::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_process_exec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_process_exec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_exec, submessage_arena);
    }
    set_has_sched_process_exec();
    event_.sched_process_exec_ = sched_process_exec;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_exec)
}
void FtraceEvent::clear_sched_process_exec() {
  if (has_sched_process_exec()) {
    delete event_.sched_process_exec_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_exit(::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_process_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_process_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_exit, submessage_arena);
    }
    set_has_sched_process_exit();
    event_.sched_process_exit_ = sched_process_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_exit)
}
void FtraceEvent::clear_sched_process_exit() {
  if (has_sched_process_exit()) {
    delete event_.sched_process_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_fork(::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_process_fork) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_process_fork = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_fork, submessage_arena);
    }
    set_has_sched_process_fork();
    event_.sched_process_fork_ = sched_process_fork;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_fork)
}
void FtraceEvent::clear_sched_process_fork() {
  if (has_sched_process_fork()) {
    delete event_.sched_process_fork_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_free(::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_process_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_process_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_free, submessage_arena);
    }
    set_has_sched_process_free();
    event_.sched_process_free_ = sched_process_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_free)
}
void FtraceEvent::clear_sched_process_free() {
  if (has_sched_process_free()) {
    delete event_.sched_process_free_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_hang(::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_process_hang) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_process_hang = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_hang, submessage_arena);
    }
    set_has_sched_process_hang();
    event_.sched_process_hang_ = sched_process_hang;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_hang)
}
void FtraceEvent::clear_sched_process_hang() {
  if (has_sched_process_hang()) {
    delete event_.sched_process_hang_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_wait(::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sched_process_wait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sched_process_wait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_wait, submessage_arena);
    }
    set_has_sched_process_wait();
    event_.sched_process_wait_ = sched_process_wait;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_wait)
}
void FtraceEvent::clear_sched_process_wait() {
  if (has_sched_process_wait()) {
    delete event_.sched_process_wait_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_do_submit_bio(::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_do_submit_bio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_do_submit_bio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_do_submit_bio, submessage_arena);
    }
    set_has_f2fs_do_submit_bio();
    event_.f2fs_do_submit_bio_ = f2fs_do_submit_bio;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
}
void FtraceEvent::clear_f2fs_do_submit_bio() {
  if (has_f2fs_do_submit_bio()) {
    delete event_.f2fs_do_submit_bio_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_evict_inode(::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_evict_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_evict_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_evict_inode, submessage_arena);
    }
    set_has_f2fs_evict_inode();
    event_.f2fs_evict_inode_ = f2fs_evict_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_evict_inode)
}
void FtraceEvent::clear_f2fs_evict_inode() {
  if (has_f2fs_evict_inode()) {
    delete event_.f2fs_evict_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_fallocate(::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_fallocate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_fallocate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_fallocate, submessage_arena);
    }
    set_has_f2fs_fallocate();
    event_.f2fs_fallocate_ = f2fs_fallocate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_fallocate)
}
void FtraceEvent::clear_f2fs_fallocate() {
  if (has_f2fs_fallocate()) {
    delete event_.f2fs_fallocate_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_get_data_block(::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_get_data_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_get_data_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_get_data_block, submessage_arena);
    }
    set_has_f2fs_get_data_block();
    event_.f2fs_get_data_block_ = f2fs_get_data_block;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_get_data_block)
}
void FtraceEvent::clear_f2fs_get_data_block() {
  if (has_f2fs_get_data_block()) {
    delete event_.f2fs_get_data_block_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_get_victim(::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_get_victim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_get_victim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_get_victim, submessage_arena);
    }
    set_has_f2fs_get_victim();
    event_.f2fs_get_victim_ = f2fs_get_victim;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_get_victim)
}
void FtraceEvent::clear_f2fs_get_victim() {
  if (has_f2fs_get_victim()) {
    delete event_.f2fs_get_victim_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_iget(::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_iget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_iget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_iget, submessage_arena);
    }
    set_has_f2fs_iget();
    event_.f2fs_iget_ = f2fs_iget;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_iget)
}
void FtraceEvent::clear_f2fs_iget() {
  if (has_f2fs_iget()) {
    delete event_.f2fs_iget_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_iget_exit(::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_iget_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_iget_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_iget_exit, submessage_arena);
    }
    set_has_f2fs_iget_exit();
    event_.f2fs_iget_exit_ = f2fs_iget_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_iget_exit)
}
void FtraceEvent::clear_f2fs_iget_exit() {
  if (has_f2fs_iget_exit()) {
    delete event_.f2fs_iget_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_new_inode(::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_new_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_new_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_new_inode, submessage_arena);
    }
    set_has_f2fs_new_inode();
    event_.f2fs_new_inode_ = f2fs_new_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_new_inode)
}
void FtraceEvent::clear_f2fs_new_inode() {
  if (has_f2fs_new_inode()) {
    delete event_.f2fs_new_inode_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_readpage(::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_readpage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_readpage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_readpage, submessage_arena);
    }
    set_has_f2fs_readpage();
    event_.f2fs_readpage_ = f2fs_readpage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_readpage)
}
void FtraceEvent::clear_f2fs_readpage() {
  if (has_f2fs_readpage()) {
    delete event_.f2fs_readpage_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_reserve_new_block(::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_reserve_new_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_reserve_new_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_reserve_new_block, submessage_arena);
    }
    set_has_f2fs_reserve_new_block();
    event_.f2fs_reserve_new_block_ = f2fs_reserve_new_block;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
}
void FtraceEvent::clear_f2fs_reserve_new_block() {
  if (has_f2fs_reserve_new_block()) {
    delete event_.f2fs_reserve_new_block_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_set_page_dirty(::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_set_page_dirty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_set_page_dirty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_set_page_dirty, submessage_arena);
    }
    set_has_f2fs_set_page_dirty();
    event_.f2fs_set_page_dirty_ = f2fs_set_page_dirty;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
}
void FtraceEvent::clear_f2fs_set_page_dirty() {
  if (has_f2fs_set_page_dirty()) {
    delete event_.f2fs_set_page_dirty_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_submit_write_page(::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_submit_write_page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_submit_write_page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_submit_write_page, submessage_arena);
    }
    set_has_f2fs_submit_write_page();
    event_.f2fs_submit_write_page_ = f2fs_submit_write_page;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
}
void FtraceEvent::clear_f2fs_submit_write_page() {
  if (has_f2fs_submit_write_page()) {
    delete event_.f2fs_submit_write_page_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_sync_file_enter(::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_sync_file_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_sync_file_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_sync_file_enter, submessage_arena);
    }
    set_has_f2fs_sync_file_enter();
    event_.f2fs_sync_file_enter_ = f2fs_sync_file_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
}
void FtraceEvent::clear_f2fs_sync_file_enter() {
  if (has_f2fs_sync_file_enter()) {
    delete event_.f2fs_sync_file_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_sync_file_exit(::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_sync_file_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_sync_file_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_sync_file_exit, submessage_arena);
    }
    set_has_f2fs_sync_file_exit();
    event_.f2fs_sync_file_exit_ = f2fs_sync_file_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
}
void FtraceEvent::clear_f2fs_sync_file_exit() {
  if (has_f2fs_sync_file_exit()) {
    delete event_.f2fs_sync_file_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_sync_fs(::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_sync_fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_sync_fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_sync_fs, submessage_arena);
    }
    set_has_f2fs_sync_fs();
    event_.f2fs_sync_fs_ = f2fs_sync_fs;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_fs)
}
void FtraceEvent::clear_f2fs_sync_fs() {
  if (has_f2fs_sync_fs()) {
    delete event_.f2fs_sync_fs_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate(::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate, submessage_arena);
    }
    set_has_f2fs_truncate();
    event_.f2fs_truncate_ = f2fs_truncate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate)
}
void FtraceEvent::clear_f2fs_truncate() {
  if (has_f2fs_truncate()) {
    delete event_.f2fs_truncate_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_blocks_enter(::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_blocks_enter, submessage_arena);
    }
    set_has_f2fs_truncate_blocks_enter();
    event_.f2fs_truncate_blocks_enter_ = f2fs_truncate_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
}
void FtraceEvent::clear_f2fs_truncate_blocks_enter() {
  if (has_f2fs_truncate_blocks_enter()) {
    delete event_.f2fs_truncate_blocks_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_blocks_exit(::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_blocks_exit, submessage_arena);
    }
    set_has_f2fs_truncate_blocks_exit();
    event_.f2fs_truncate_blocks_exit_ = f2fs_truncate_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
}
void FtraceEvent::clear_f2fs_truncate_blocks_exit() {
  if (has_f2fs_truncate_blocks_exit()) {
    delete event_.f2fs_truncate_blocks_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_data_blocks_range(::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_data_blocks_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_data_blocks_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_data_blocks_range, submessage_arena);
    }
    set_has_f2fs_truncate_data_blocks_range();
    event_.f2fs_truncate_data_blocks_range_ = f2fs_truncate_data_blocks_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
}
void FtraceEvent::clear_f2fs_truncate_data_blocks_range() {
  if (has_f2fs_truncate_data_blocks_range()) {
    delete event_.f2fs_truncate_data_blocks_range_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_inode_blocks_enter(::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_inode_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_inode_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_inode_blocks_enter, submessage_arena);
    }
    set_has_f2fs_truncate_inode_blocks_enter();
    event_.f2fs_truncate_inode_blocks_enter_ = f2fs_truncate_inode_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
}
void FtraceEvent::clear_f2fs_truncate_inode_blocks_enter() {
  if (has_f2fs_truncate_inode_blocks_enter()) {
    delete event_.f2fs_truncate_inode_blocks_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_inode_blocks_exit(::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_inode_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_inode_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_inode_blocks_exit, submessage_arena);
    }
    set_has_f2fs_truncate_inode_blocks_exit();
    event_.f2fs_truncate_inode_blocks_exit_ = f2fs_truncate_inode_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
}
void FtraceEvent::clear_f2fs_truncate_inode_blocks_exit() {
  if (has_f2fs_truncate_inode_blocks_exit()) {
    delete event_.f2fs_truncate_inode_blocks_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_node(::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_node, submessage_arena);
    }
    set_has_f2fs_truncate_node();
    event_.f2fs_truncate_node_ = f2fs_truncate_node;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_node)
}
void FtraceEvent::clear_f2fs_truncate_node() {
  if (has_f2fs_truncate_node()) {
    delete event_.f2fs_truncate_node_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_nodes_enter(::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_nodes_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_nodes_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_nodes_enter, submessage_arena);
    }
    set_has_f2fs_truncate_nodes_enter();
    event_.f2fs_truncate_nodes_enter_ = f2fs_truncate_nodes_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
}
void FtraceEvent::clear_f2fs_truncate_nodes_enter() {
  if (has_f2fs_truncate_nodes_enter()) {
    delete event_.f2fs_truncate_nodes_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_nodes_exit(::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_nodes_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_nodes_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_nodes_exit, submessage_arena);
    }
    set_has_f2fs_truncate_nodes_exit();
    event_.f2fs_truncate_nodes_exit_ = f2fs_truncate_nodes_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
}
void FtraceEvent::clear_f2fs_truncate_nodes_exit() {
  if (has_f2fs_truncate_nodes_exit()) {
    delete event_.f2fs_truncate_nodes_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_partial_nodes(::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_truncate_partial_nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_truncate_partial_nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_partial_nodes, submessage_arena);
    }
    set_has_f2fs_truncate_partial_nodes();
    event_.f2fs_truncate_partial_nodes_ = f2fs_truncate_partial_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
}
void FtraceEvent::clear_f2fs_truncate_partial_nodes() {
  if (has_f2fs_truncate_partial_nodes()) {
    delete event_.f2fs_truncate_partial_nodes_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_unlink_enter(::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_unlink_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_unlink_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_unlink_enter, submessage_arena);
    }
    set_has_f2fs_unlink_enter();
    event_.f2fs_unlink_enter_ = f2fs_unlink_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
}
void FtraceEvent::clear_f2fs_unlink_enter() {
  if (has_f2fs_unlink_enter()) {
    delete event_.f2fs_unlink_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_unlink_exit(::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_unlink_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_unlink_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_unlink_exit, submessage_arena);
    }
    set_has_f2fs_unlink_exit();
    event_.f2fs_unlink_exit_ = f2fs_unlink_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
}
void FtraceEvent::clear_f2fs_unlink_exit() {
  if (has_f2fs_unlink_exit()) {
    delete event_.f2fs_unlink_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_vm_page_mkwrite(::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_vm_page_mkwrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_vm_page_mkwrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_vm_page_mkwrite, submessage_arena);
    }
    set_has_f2fs_vm_page_mkwrite();
    event_.f2fs_vm_page_mkwrite_ = f2fs_vm_page_mkwrite;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
}
void FtraceEvent::clear_f2fs_vm_page_mkwrite() {
  if (has_f2fs_vm_page_mkwrite()) {
    delete event_.f2fs_vm_page_mkwrite_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_write_begin(::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_write_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_write_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_write_begin, submessage_arena);
    }
    set_has_f2fs_write_begin();
    event_.f2fs_write_begin_ = f2fs_write_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_begin)
}
void FtraceEvent::clear_f2fs_write_begin() {
  if (has_f2fs_write_begin()) {
    delete event_.f2fs_write_begin_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_write_checkpoint(::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_write_checkpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_write_checkpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_write_checkpoint, submessage_arena);
    }
    set_has_f2fs_write_checkpoint();
    event_.f2fs_write_checkpoint_ = f2fs_write_checkpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
}
void FtraceEvent::clear_f2fs_write_checkpoint() {
  if (has_f2fs_write_checkpoint()) {
    delete event_.f2fs_write_checkpoint_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_write_end(::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (f2fs_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f2fs_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_write_end, submessage_arena);
    }
    set_has_f2fs_write_end();
    event_.f2fs_write_end_ = f2fs_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_end)
}
void FtraceEvent::clear_f2fs_write_end() {
  if (has_f2fs_write_end()) {
    delete event_.f2fs_write_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_iommu_end(::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (alloc_pages_iommu_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alloc_pages_iommu_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_iommu_end, submessage_arena);
    }
    set_has_alloc_pages_iommu_end();
    event_.alloc_pages_iommu_end_ = alloc_pages_iommu_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
}
void FtraceEvent::clear_alloc_pages_iommu_end() {
  if (has_alloc_pages_iommu_end()) {
    delete event_.alloc_pages_iommu_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_iommu_fail(::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (alloc_pages_iommu_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alloc_pages_iommu_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_iommu_fail, submessage_arena);
    }
    set_has_alloc_pages_iommu_fail();
    event_.alloc_pages_iommu_fail_ = alloc_pages_iommu_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
}
void FtraceEvent::clear_alloc_pages_iommu_fail() {
  if (has_alloc_pages_iommu_fail()) {
    delete event_.alloc_pages_iommu_fail_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_iommu_start(::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (alloc_pages_iommu_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alloc_pages_iommu_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_iommu_start, submessage_arena);
    }
    set_has_alloc_pages_iommu_start();
    event_.alloc_pages_iommu_start_ = alloc_pages_iommu_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
}
void FtraceEvent::clear_alloc_pages_iommu_start() {
  if (has_alloc_pages_iommu_start()) {
    delete event_.alloc_pages_iommu_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_sys_end(::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (alloc_pages_sys_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alloc_pages_sys_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_sys_end, submessage_arena);
    }
    set_has_alloc_pages_sys_end();
    event_.alloc_pages_sys_end_ = alloc_pages_sys_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
}
void FtraceEvent::clear_alloc_pages_sys_end() {
  if (has_alloc_pages_sys_end()) {
    delete event_.alloc_pages_sys_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_sys_fail(::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (alloc_pages_sys_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alloc_pages_sys_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_sys_fail, submessage_arena);
    }
    set_has_alloc_pages_sys_fail();
    event_.alloc_pages_sys_fail_ = alloc_pages_sys_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
}
void FtraceEvent::clear_alloc_pages_sys_fail() {
  if (has_alloc_pages_sys_fail()) {
    delete event_.alloc_pages_sys_fail_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_sys_start(::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (alloc_pages_sys_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alloc_pages_sys_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_sys_start, submessage_arena);
    }
    set_has_alloc_pages_sys_start();
    event_.alloc_pages_sys_start_ = alloc_pages_sys_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
}
void FtraceEvent::clear_alloc_pages_sys_start() {
  if (has_alloc_pages_sys_start()) {
    delete event_.alloc_pages_sys_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_alloc_contiguous_retry(::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (dma_alloc_contiguous_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dma_alloc_contiguous_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_alloc_contiguous_retry, submessage_arena);
    }
    set_has_dma_alloc_contiguous_retry();
    event_.dma_alloc_contiguous_retry_ = dma_alloc_contiguous_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
}
void FtraceEvent::clear_dma_alloc_contiguous_retry() {
  if (has_dma_alloc_contiguous_retry()) {
    delete event_.dma_alloc_contiguous_retry_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_iommu_map_range(::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (iommu_map_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iommu_map_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iommu_map_range, submessage_arena);
    }
    set_has_iommu_map_range();
    event_.iommu_map_range_ = iommu_map_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.iommu_map_range)
}
void FtraceEvent::clear_iommu_map_range() {
  if (has_iommu_map_range()) {
    delete event_.iommu_map_range_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_iommu_sec_ptbl_map_range_end(::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (iommu_sec_ptbl_map_range_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iommu_sec_ptbl_map_range_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iommu_sec_ptbl_map_range_end, submessage_arena);
    }
    set_has_iommu_sec_ptbl_map_range_end();
    event_.iommu_sec_ptbl_map_range_end_ = iommu_sec_ptbl_map_range_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
}
void FtraceEvent::clear_iommu_sec_ptbl_map_range_end() {
  if (has_iommu_sec_ptbl_map_range_end()) {
    delete event_.iommu_sec_ptbl_map_range_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_iommu_sec_ptbl_map_range_start(::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (iommu_sec_ptbl_map_range_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iommu_sec_ptbl_map_range_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iommu_sec_ptbl_map_range_start, submessage_arena);
    }
    set_has_iommu_sec_ptbl_map_range_start();
    event_.iommu_sec_ptbl_map_range_start_ = iommu_sec_ptbl_map_range_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
}
void FtraceEvent::clear_iommu_sec_ptbl_map_range_start() {
  if (has_iommu_sec_ptbl_map_range_start()) {
    delete event_.iommu_sec_ptbl_map_range_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_end(::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_alloc_buffer_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_end, submessage_arena);
    }
    set_has_ion_alloc_buffer_end();
    event_.ion_alloc_buffer_end_ = ion_alloc_buffer_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
}
void FtraceEvent::clear_ion_alloc_buffer_end() {
  if (has_ion_alloc_buffer_end()) {
    delete event_.ion_alloc_buffer_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_fail(::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_alloc_buffer_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_fail, submessage_arena);
    }
    set_has_ion_alloc_buffer_fail();
    event_.ion_alloc_buffer_fail_ = ion_alloc_buffer_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
}
void FtraceEvent::clear_ion_alloc_buffer_fail() {
  if (has_ion_alloc_buffer_fail()) {
    delete event_.ion_alloc_buffer_fail_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_fallback(::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_alloc_buffer_fallback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_fallback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_fallback, submessage_arena);
    }
    set_has_ion_alloc_buffer_fallback();
    event_.ion_alloc_buffer_fallback_ = ion_alloc_buffer_fallback;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
}
void FtraceEvent::clear_ion_alloc_buffer_fallback() {
  if (has_ion_alloc_buffer_fallback()) {
    delete event_.ion_alloc_buffer_fallback_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_start(::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_alloc_buffer_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_start, submessage_arena);
    }
    set_has_ion_alloc_buffer_start();
    event_.ion_alloc_buffer_start_ = ion_alloc_buffer_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
}
void FtraceEvent::clear_ion_alloc_buffer_start() {
  if (has_ion_alloc_buffer_start()) {
    delete event_.ion_alloc_buffer_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_cp_alloc_retry(::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_cp_alloc_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_cp_alloc_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_cp_alloc_retry, submessage_arena);
    }
    set_has_ion_cp_alloc_retry();
    event_.ion_cp_alloc_retry_ = ion_cp_alloc_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
}
void FtraceEvent::clear_ion_cp_alloc_retry() {
  if (has_ion_cp_alloc_retry()) {
    delete event_.ion_cp_alloc_retry_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_cp_secure_buffer_end(::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_cp_secure_buffer_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_cp_secure_buffer_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_cp_secure_buffer_end, submessage_arena);
    }
    set_has_ion_cp_secure_buffer_end();
    event_.ion_cp_secure_buffer_end_ = ion_cp_secure_buffer_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
}
void FtraceEvent::clear_ion_cp_secure_buffer_end() {
  if (has_ion_cp_secure_buffer_end()) {
    delete event_.ion_cp_secure_buffer_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_cp_secure_buffer_start(::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_cp_secure_buffer_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_cp_secure_buffer_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_cp_secure_buffer_start, submessage_arena);
    }
    set_has_ion_cp_secure_buffer_start();
    event_.ion_cp_secure_buffer_start_ = ion_cp_secure_buffer_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
}
void FtraceEvent::clear_ion_cp_secure_buffer_start() {
  if (has_ion_cp_secure_buffer_start()) {
    delete event_.ion_cp_secure_buffer_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_prefetching(::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_prefetching) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_prefetching = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_prefetching, submessage_arena);
    }
    set_has_ion_prefetching();
    event_.ion_prefetching_ = ion_prefetching;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_prefetching)
}
void FtraceEvent::clear_ion_prefetching() {
  if (has_ion_prefetching()) {
    delete event_.ion_prefetching_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_add_to_pool_end(::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_secure_cma_add_to_pool_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_secure_cma_add_to_pool_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_add_to_pool_end, submessage_arena);
    }
    set_has_ion_secure_cma_add_to_pool_end();
    event_.ion_secure_cma_add_to_pool_end_ = ion_secure_cma_add_to_pool_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
}
void FtraceEvent::clear_ion_secure_cma_add_to_pool_end() {
  if (has_ion_secure_cma_add_to_pool_end()) {
    delete event_.ion_secure_cma_add_to_pool_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_add_to_pool_start(::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_secure_cma_add_to_pool_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_secure_cma_add_to_pool_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_add_to_pool_start, submessage_arena);
    }
    set_has_ion_secure_cma_add_to_pool_start();
    event_.ion_secure_cma_add_to_pool_start_ = ion_secure_cma_add_to_pool_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
}
void FtraceEvent::clear_ion_secure_cma_add_to_pool_start() {
  if (has_ion_secure_cma_add_to_pool_start()) {
    delete event_.ion_secure_cma_add_to_pool_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_allocate_end(::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_secure_cma_allocate_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_secure_cma_allocate_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_allocate_end, submessage_arena);
    }
    set_has_ion_secure_cma_allocate_end();
    event_.ion_secure_cma_allocate_end_ = ion_secure_cma_allocate_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
}
void FtraceEvent::clear_ion_secure_cma_allocate_end() {
  if (has_ion_secure_cma_allocate_end()) {
    delete event_.ion_secure_cma_allocate_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_allocate_start(::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_secure_cma_allocate_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_secure_cma_allocate_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_allocate_start, submessage_arena);
    }
    set_has_ion_secure_cma_allocate_start();
    event_.ion_secure_cma_allocate_start_ = ion_secure_cma_allocate_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
}
void FtraceEvent::clear_ion_secure_cma_allocate_start() {
  if (has_ion_secure_cma_allocate_start()) {
    delete event_.ion_secure_cma_allocate_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_shrink_pool_end(::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_secure_cma_shrink_pool_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_secure_cma_shrink_pool_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_shrink_pool_end, submessage_arena);
    }
    set_has_ion_secure_cma_shrink_pool_end();
    event_.ion_secure_cma_shrink_pool_end_ = ion_secure_cma_shrink_pool_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
}
void FtraceEvent::clear_ion_secure_cma_shrink_pool_end() {
  if (has_ion_secure_cma_shrink_pool_end()) {
    delete event_.ion_secure_cma_shrink_pool_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_shrink_pool_start(::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_secure_cma_shrink_pool_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_secure_cma_shrink_pool_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_shrink_pool_start, submessage_arena);
    }
    set_has_ion_secure_cma_shrink_pool_start();
    event_.ion_secure_cma_shrink_pool_start_ = ion_secure_cma_shrink_pool_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
}
void FtraceEvent::clear_ion_secure_cma_shrink_pool_start() {
  if (has_ion_secure_cma_shrink_pool_start()) {
    delete event_.ion_secure_cma_shrink_pool_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kfree(::perfetto::protos::KfreeFtraceEvent* kfree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kfree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kfree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kfree, submessage_arena);
    }
    set_has_kfree();
    event_.kfree_ = kfree;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kfree)
}
void FtraceEvent::clear_kfree() {
  if (has_kfree()) {
    delete event_.kfree_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmalloc(::perfetto::protos::KmallocFtraceEvent* kmalloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kmalloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kmalloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmalloc, submessage_arena);
    }
    set_has_kmalloc();
    event_.kmalloc_ = kmalloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmalloc)
}
void FtraceEvent::clear_kmalloc() {
  if (has_kmalloc()) {
    delete event_.kmalloc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmalloc_node(::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kmalloc_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kmalloc_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmalloc_node, submessage_arena);
    }
    set_has_kmalloc_node();
    event_.kmalloc_node_ = kmalloc_node;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmalloc_node)
}
void FtraceEvent::clear_kmalloc_node() {
  if (has_kmalloc_node()) {
    delete event_.kmalloc_node_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmem_cache_alloc(::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kmem_cache_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kmem_cache_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmem_cache_alloc, submessage_arena);
    }
    set_has_kmem_cache_alloc();
    event_.kmem_cache_alloc_ = kmem_cache_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_alloc)
}
void FtraceEvent::clear_kmem_cache_alloc() {
  if (has_kmem_cache_alloc()) {
    delete event_.kmem_cache_alloc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmem_cache_alloc_node(::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kmem_cache_alloc_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kmem_cache_alloc_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmem_cache_alloc_node, submessage_arena);
    }
    set_has_kmem_cache_alloc_node();
    event_.kmem_cache_alloc_node_ = kmem_cache_alloc_node;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
}
void FtraceEvent::clear_kmem_cache_alloc_node() {
  if (has_kmem_cache_alloc_node()) {
    delete event_.kmem_cache_alloc_node_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmem_cache_free(::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (kmem_cache_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kmem_cache_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmem_cache_free, submessage_arena);
    }
    set_has_kmem_cache_free();
    event_.kmem_cache_free_ = kmem_cache_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_free)
}
void FtraceEvent::clear_kmem_cache_free() {
  if (has_kmem_cache_free()) {
    delete event_.kmem_cache_free_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_migrate_pages_end(::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (migrate_pages_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      migrate_pages_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_pages_end, submessage_arena);
    }
    set_has_migrate_pages_end();
    event_.migrate_pages_end_ = migrate_pages_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.migrate_pages_end)
}
void FtraceEvent::clear_migrate_pages_end() {
  if (has_migrate_pages_end()) {
    delete event_.migrate_pages_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_migrate_pages_start(::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (migrate_pages_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      migrate_pages_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_pages_start, submessage_arena);
    }
    set_has_migrate_pages_start();
    event_.migrate_pages_start_ = migrate_pages_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.migrate_pages_start)
}
void FtraceEvent::clear_migrate_pages_start() {
  if (has_migrate_pages_start()) {
    delete event_.migrate_pages_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_migrate_retry(::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (migrate_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      migrate_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_retry, submessage_arena);
    }
    set_has_migrate_retry();
    event_.migrate_retry_ = migrate_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.migrate_retry)
}
void FtraceEvent::clear_migrate_retry() {
  if (has_migrate_retry()) {
    delete event_.migrate_retry_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_alloc(::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_page_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_page_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_alloc, submessage_arena);
    }
    set_has_mm_page_alloc();
    event_.mm_page_alloc_ = mm_page_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc)
}
void FtraceEvent::clear_mm_page_alloc() {
  if (has_mm_page_alloc()) {
    delete event_.mm_page_alloc_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_alloc_extfrag(::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_page_alloc_extfrag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_page_alloc_extfrag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_alloc_extfrag, submessage_arena);
    }
    set_has_mm_page_alloc_extfrag();
    event_.mm_page_alloc_extfrag_ = mm_page_alloc_extfrag;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
}
void FtraceEvent::clear_mm_page_alloc_extfrag() {
  if (has_mm_page_alloc_extfrag()) {
    delete event_.mm_page_alloc_extfrag_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_alloc_zone_locked(::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_page_alloc_zone_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_page_alloc_zone_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_alloc_zone_locked, submessage_arena);
    }
    set_has_mm_page_alloc_zone_locked();
    event_.mm_page_alloc_zone_locked_ = mm_page_alloc_zone_locked;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
}
void FtraceEvent::clear_mm_page_alloc_zone_locked() {
  if (has_mm_page_alloc_zone_locked()) {
    delete event_.mm_page_alloc_zone_locked_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_free(::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_page_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_page_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_free, submessage_arena);
    }
    set_has_mm_page_free();
    event_.mm_page_free_ = mm_page_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_free)
}
void FtraceEvent::clear_mm_page_free() {
  if (has_mm_page_free()) {
    delete event_.mm_page_free_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_free_batched(::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_page_free_batched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_page_free_batched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_free_batched, submessage_arena);
    }
    set_has_mm_page_free_batched();
    event_.mm_page_free_batched_ = mm_page_free_batched;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_free_batched)
}
void FtraceEvent::clear_mm_page_free_batched() {
  if (has_mm_page_free_batched()) {
    delete event_.mm_page_free_batched_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_pcpu_drain(::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_page_pcpu_drain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_page_pcpu_drain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_pcpu_drain, submessage_arena);
    }
    set_has_mm_page_pcpu_drain();
    event_.mm_page_pcpu_drain_ = mm_page_pcpu_drain;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
}
void FtraceEvent::clear_mm_page_pcpu_drain() {
  if (has_mm_page_pcpu_drain()) {
    delete event_.mm_page_pcpu_drain_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_rss_stat(::perfetto::protos::RssStatFtraceEvent* rss_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (rss_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rss_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rss_stat, submessage_arena);
    }
    set_has_rss_stat();
    event_.rss_stat_ = rss_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.rss_stat)
}
void FtraceEvent::clear_rss_stat() {
  if (has_rss_stat()) {
    delete event_.rss_stat_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_heap_shrink(::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_heap_shrink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_heap_shrink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_heap_shrink, submessage_arena);
    }
    set_has_ion_heap_shrink();
    event_.ion_heap_shrink_ = ion_heap_shrink;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_heap_shrink)
}
void FtraceEvent::clear_ion_heap_shrink() {
  if (has_ion_heap_shrink()) {
    delete event_.ion_heap_shrink_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_heap_grow(::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_heap_grow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_heap_grow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_heap_grow, submessage_arena);
    }
    set_has_ion_heap_grow();
    event_.ion_heap_grow_ = ion_heap_grow;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_heap_grow)
}
void FtraceEvent::clear_ion_heap_grow() {
  if (has_ion_heap_grow()) {
    delete event_.ion_heap_grow_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_init(::perfetto::protos::FenceInitFtraceEvent* fence_init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (fence_init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fence_init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_init, submessage_arena);
    }
    set_has_fence_init();
    event_.fence_init_ = fence_init;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_init)
}
void FtraceEvent::clear_fence_init() {
  if (has_fence_init()) {
    delete event_.fence_init_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_destroy(::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (fence_destroy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fence_destroy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_destroy, submessage_arena);
    }
    set_has_fence_destroy();
    event_.fence_destroy_ = fence_destroy;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_destroy)
}
void FtraceEvent::clear_fence_destroy() {
  if (has_fence_destroy()) {
    delete event_.fence_destroy_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_enable_signal(::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (fence_enable_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fence_enable_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_enable_signal, submessage_arena);
    }
    set_has_fence_enable_signal();
    event_.fence_enable_signal_ = fence_enable_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_enable_signal)
}
void FtraceEvent::clear_fence_enable_signal() {
  if (has_fence_enable_signal()) {
    delete event_.fence_enable_signal_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_signaled(::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (fence_signaled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fence_signaled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_signaled, submessage_arena);
    }
    set_has_fence_signaled();
    event_.fence_signaled_ = fence_signaled;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_signaled)
}
void FtraceEvent::clear_fence_signaled() {
  if (has_fence_signaled()) {
    delete event_.fence_signaled_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clk_enable(::perfetto::protos::ClkEnableFtraceEvent* clk_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (clk_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clk_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk_enable, submessage_arena);
    }
    set_has_clk_enable();
    event_.clk_enable_ = clk_enable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clk_enable)
}
void FtraceEvent::clear_clk_enable() {
  if (has_clk_enable()) {
    delete event_.clk_enable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clk_disable(::perfetto::protos::ClkDisableFtraceEvent* clk_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (clk_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clk_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk_disable, submessage_arena);
    }
    set_has_clk_disable();
    event_.clk_disable_ = clk_disable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clk_disable)
}
void FtraceEvent::clear_clk_disable() {
  if (has_clk_disable()) {
    delete event_.clk_disable_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clk_set_rate(::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (clk_set_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clk_set_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk_set_rate, submessage_arena);
    }
    set_has_clk_set_rate();
    event_.clk_set_rate_ = clk_set_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clk_set_rate)
}
void FtraceEvent::clear_clk_set_rate() {
  if (has_clk_set_rate()) {
    delete event_.clk_set_rate_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_transaction_alloc_buf(::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (binder_transaction_alloc_buf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binder_transaction_alloc_buf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_transaction_alloc_buf, submessage_arena);
    }
    set_has_binder_transaction_alloc_buf();
    event_.binder_transaction_alloc_buf_ = binder_transaction_alloc_buf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
}
void FtraceEvent::clear_binder_transaction_alloc_buf() {
  if (has_binder_transaction_alloc_buf()) {
    delete event_.binder_transaction_alloc_buf_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_signal_deliver(::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (signal_deliver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal_deliver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_deliver, submessage_arena);
    }
    set_has_signal_deliver();
    event_.signal_deliver_ = signal_deliver;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.signal_deliver)
}
void FtraceEvent::clear_signal_deliver() {
  if (has_signal_deliver()) {
    delete event_.signal_deliver_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_signal_generate(::perfetto::protos::SignalGenerateFtraceEvent* signal_generate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (signal_generate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal_generate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_generate, submessage_arena);
    }
    set_has_signal_generate();
    event_.signal_generate_ = signal_generate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.signal_generate)
}
void FtraceEvent::clear_signal_generate() {
  if (has_signal_generate()) {
    delete event_.signal_generate_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_oom_score_adj_update(::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (oom_score_adj_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oom_score_adj_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oom_score_adj_update, submessage_arena);
    }
    set_has_oom_score_adj_update();
    event_.oom_score_adj_update_ = oom_score_adj_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.oom_score_adj_update)
}
void FtraceEvent::clear_oom_score_adj_update() {
  if (has_oom_score_adj_update()) {
    delete event_.oom_score_adj_update_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_generic(::perfetto::protos::GenericFtraceEvent* generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic, submessage_arena);
    }
    set_has_generic();
    event_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.generic)
}
void FtraceEvent::clear_generic() {
  if (has_generic()) {
    delete event_.generic_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_event_record(::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mm_event_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mm_event_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_event_record, submessage_arena);
    }
    set_has_mm_event_record();
    event_.mm_event_record_ = mm_event_record;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_event_record)
}
void FtraceEvent::clear_mm_event_record() {
  if (has_mm_event_record()) {
    delete event_.mm_event_record_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sys_enter(::perfetto::protos::SysEnterFtraceEvent* sys_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sys_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sys_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_enter, submessage_arena);
    }
    set_has_sys_enter();
    event_.sys_enter_ = sys_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sys_enter)
}
void FtraceEvent::clear_sys_enter() {
  if (has_sys_enter()) {
    delete event_.sys_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sys_exit(::perfetto::protos::SysExitFtraceEvent* sys_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sys_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sys_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_exit, submessage_arena);
    }
    set_has_sys_exit();
    event_.sys_exit_ = sys_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sys_exit)
}
void FtraceEvent::clear_sys_exit() {
  if (has_sys_exit()) {
    delete event_.sys_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_zero(::perfetto::protos::ZeroFtraceEvent* zero) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (zero) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zero = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zero, submessage_arena);
    }
    set_has_zero();
    event_.zero_ = zero;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.zero)
}
void FtraceEvent::clear_zero() {
  if (has_zero()) {
    delete event_.zero_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_gpu_frequency(::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (gpu_frequency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_frequency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_frequency, submessage_arena);
    }
    set_has_gpu_frequency();
    event_.gpu_frequency_ = gpu_frequency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.gpu_frequency)
}
void FtraceEvent::clear_gpu_frequency() {
  if (has_gpu_frequency()) {
    delete event_.gpu_frequency_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_tracing_mark_write(::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (sde_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sde_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_tracing_mark_write, submessage_arena);
    }
    set_has_sde_tracing_mark_write();
    event_.sde_tracing_mark_write_ = sde_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
}
void FtraceEvent::clear_sde_tracing_mark_write() {
  if (has_sde_tracing_mark_write()) {
    delete event_.sde_tracing_mark_write_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mark_victim(::perfetto::protos::MarkVictimFtraceEvent* mark_victim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mark_victim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mark_victim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mark_victim, submessage_arena);
    }
    set_has_mark_victim();
    event_.mark_victim_ = mark_victim;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mark_victim)
}
void FtraceEvent::clear_mark_victim() {
  if (has_mark_victim()) {
    delete event_.mark_victim_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_stat(::perfetto::protos::IonStatFtraceEvent* ion_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_stat, submessage_arena);
    }
    set_has_ion_stat();
    event_.ion_stat_ = ion_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_stat)
}
void FtraceEvent::clear_ion_stat() {
  if (has_ion_stat()) {
    delete event_.ion_stat_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_buffer_create(::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_buffer_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_buffer_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_buffer_create, submessage_arena);
    }
    set_has_ion_buffer_create();
    event_.ion_buffer_create_ = ion_buffer_create;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_buffer_create)
}
void FtraceEvent::clear_ion_buffer_create() {
  if (has_ion_buffer_create()) {
    delete event_.ion_buffer_create_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_buffer_destroy(::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ion_buffer_destroy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ion_buffer_destroy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_buffer_destroy, submessage_arena);
    }
    set_has_ion_buffer_destroy();
    event_.ion_buffer_destroy_ = ion_buffer_destroy;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_buffer_destroy)
}
void FtraceEvent::clear_ion_buffer_destroy() {
  if (has_ion_buffer_destroy()) {
    delete event_.ion_buffer_destroy_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_scm_call_start(::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (scm_call_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scm_call_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scm_call_start, submessage_arena);
    }
    set_has_scm_call_start();
    event_.scm_call_start_ = scm_call_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.scm_call_start)
}
void FtraceEvent::clear_scm_call_start() {
  if (has_scm_call_start()) {
    delete event_.scm_call_start_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_scm_call_end(::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (scm_call_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scm_call_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scm_call_end, submessage_arena);
    }
    set_has_scm_call_end();
    event_.scm_call_end_ = scm_call_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.scm_call_end)
}
void FtraceEvent::clear_scm_call_end() {
  if (has_scm_call_end()) {
    delete event_.scm_call_end_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_gpu_mem_total(::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (gpu_mem_total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_mem_total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_mem_total, submessage_arena);
    }
    set_has_gpu_mem_total();
    event_.gpu_mem_total_ = gpu_mem_total;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.gpu_mem_total)
}
void FtraceEvent::clear_gpu_mem_total() {
  if (has_gpu_mem_total()) {
    delete event_.gpu_mem_total_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_thermal_temperature(::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (thermal_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thermal_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thermal_temperature, submessage_arena);
    }
    set_has_thermal_temperature();
    event_.thermal_temperature_ = thermal_temperature;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.thermal_temperature)
}
void FtraceEvent::clear_thermal_temperature() {
  if (has_thermal_temperature()) {
    delete event_.thermal_temperature_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cdev_update(::perfetto::protos::CdevUpdateFtraceEvent* cdev_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cdev_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdev_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdev_update, submessage_arena);
    }
    set_has_cdev_update();
    event_.cdev_update_ = cdev_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cdev_update)
}
void FtraceEvent::clear_cdev_update() {
  if (has_cdev_update()) {
    delete event_.cdev_update_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_exit(::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpuhp_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpuhp_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_exit, submessage_arena);
    }
    set_has_cpuhp_exit();
    event_.cpuhp_exit_ = cpuhp_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_exit)
}
void FtraceEvent::clear_cpuhp_exit() {
  if (has_cpuhp_exit()) {
    delete event_.cpuhp_exit_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_multi_enter(::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpuhp_multi_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpuhp_multi_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_multi_enter, submessage_arena);
    }
    set_has_cpuhp_multi_enter();
    event_.cpuhp_multi_enter_ = cpuhp_multi_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
}
void FtraceEvent::clear_cpuhp_multi_enter() {
  if (has_cpuhp_multi_enter()) {
    delete event_.cpuhp_multi_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_enter(::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpuhp_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpuhp_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_enter, submessage_arena);
    }
    set_has_cpuhp_enter();
    event_.cpuhp_enter_ = cpuhp_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_enter)
}
void FtraceEvent::clear_cpuhp_enter() {
  if (has_cpuhp_enter()) {
    delete event_.cpuhp_enter_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_latency(::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (cpuhp_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpuhp_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_latency, submessage_arena);
    }
    set_has_cpuhp_latency();
    event_.cpuhp_latency_ = cpuhp_latency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_latency)
}
void FtraceEvent::clear_cpuhp_latency() {
  if (has_cpuhp_latency()) {
    delete event_.cpuhp_latency_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fastrpc_dma_stat(::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (fastrpc_dma_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fastrpc_dma_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fastrpc_dma_stat, submessage_arena);
    }
    set_has_fastrpc_dma_stat();
    event_.fastrpc_dma_stat_ = fastrpc_dma_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
}
void FtraceEvent::clear_fastrpc_dma_stat() {
  if (has_fastrpc_dma_stat()) {
    delete event_.fastrpc_dma_stat_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dpu_tracing_mark_write(::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (dpu_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dpu_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dpu_tracing_mark_write, submessage_arena);
    }
    set_has_dpu_tracing_mark_write();
    event_.dpu_tracing_mark_write_ = dpu_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
}
void FtraceEvent::clear_dpu_tracing_mark_write() {
  if (has_dpu_tracing_mark_write()) {
    delete event_.dpu_tracing_mark_write_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_g2d_tracing_mark_write(::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (g2d_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      g2d_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g2d_tracing_mark_write, submessage_arena);
    }
    set_has_g2d_tracing_mark_write();
    event_.g2d_tracing_mark_write_ = g2d_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
}
void FtraceEvent::clear_g2d_tracing_mark_write() {
  if (has_g2d_tracing_mark_write()) {
    delete event_.g2d_tracing_mark_write_;
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_tracing_mark_write(::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (mali_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mali_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_tracing_mark_write, submessage_arena);
    }
    set_has_mali_tracing_mark_write();
    event_.mali_tracing_mark_write_ = mali_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
}
void FtraceEvent::clear_mali_tracing_mark_write() {
  if (has_mali_tracing_mark_write()) {
    delete event_.mali_tracing_mark_write_;
    clear_has_event();
  }
}
FtraceEvent::FtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceEvent)
}
FtraceEvent::FtraceEvent(const FtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(pid_));
  clear_has_event();
  switch (from.event_case()) {
    case kPrint: {
      mutable_print()->::perfetto::protos::PrintFtraceEvent::MergeFrom(from.print());
      break;
    }
    case kSchedSwitch: {
      mutable_sched_switch()->::perfetto::protos::SchedSwitchFtraceEvent::MergeFrom(from.sched_switch());
      break;
    }
    case kCpuFrequency: {
      mutable_cpu_frequency()->::perfetto::protos::CpuFrequencyFtraceEvent::MergeFrom(from.cpu_frequency());
      break;
    }
    case kCpuFrequencyLimits: {
      mutable_cpu_frequency_limits()->::perfetto::protos::CpuFrequencyLimitsFtraceEvent::MergeFrom(from.cpu_frequency_limits());
      break;
    }
    case kCpuIdle: {
      mutable_cpu_idle()->::perfetto::protos::CpuIdleFtraceEvent::MergeFrom(from.cpu_idle());
      break;
    }
    case kClockEnable: {
      mutable_clock_enable()->::perfetto::protos::ClockEnableFtraceEvent::MergeFrom(from.clock_enable());
      break;
    }
    case kClockDisable: {
      mutable_clock_disable()->::perfetto::protos::ClockDisableFtraceEvent::MergeFrom(from.clock_disable());
      break;
    }
    case kClockSetRate: {
      mutable_clock_set_rate()->::perfetto::protos::ClockSetRateFtraceEvent::MergeFrom(from.clock_set_rate());
      break;
    }
    case kSchedWakeup: {
      mutable_sched_wakeup()->::perfetto::protos::SchedWakeupFtraceEvent::MergeFrom(from.sched_wakeup());
      break;
    }
    case kSchedBlockedReason: {
      mutable_sched_blocked_reason()->::perfetto::protos::SchedBlockedReasonFtraceEvent::MergeFrom(from.sched_blocked_reason());
      break;
    }
    case kSchedCpuHotplug: {
      mutable_sched_cpu_hotplug()->::perfetto::protos::SchedCpuHotplugFtraceEvent::MergeFrom(from.sched_cpu_hotplug());
      break;
    }
    case kSchedWaking: {
      mutable_sched_waking()->::perfetto::protos::SchedWakingFtraceEvent::MergeFrom(from.sched_waking());
      break;
    }
    case kIpiEntry: {
      mutable_ipi_entry()->::perfetto::protos::IpiEntryFtraceEvent::MergeFrom(from.ipi_entry());
      break;
    }
    case kIpiExit: {
      mutable_ipi_exit()->::perfetto::protos::IpiExitFtraceEvent::MergeFrom(from.ipi_exit());
      break;
    }
    case kIpiRaise: {
      mutable_ipi_raise()->::perfetto::protos::IpiRaiseFtraceEvent::MergeFrom(from.ipi_raise());
      break;
    }
    case kSoftirqEntry: {
      mutable_softirq_entry()->::perfetto::protos::SoftirqEntryFtraceEvent::MergeFrom(from.softirq_entry());
      break;
    }
    case kSoftirqExit: {
      mutable_softirq_exit()->::perfetto::protos::SoftirqExitFtraceEvent::MergeFrom(from.softirq_exit());
      break;
    }
    case kSoftirqRaise: {
      mutable_softirq_raise()->::perfetto::protos::SoftirqRaiseFtraceEvent::MergeFrom(from.softirq_raise());
      break;
    }
    case kI2CRead: {
      mutable_i2c_read()->::perfetto::protos::I2cReadFtraceEvent::MergeFrom(from.i2c_read());
      break;
    }
    case kI2CWrite: {
      mutable_i2c_write()->::perfetto::protos::I2cWriteFtraceEvent::MergeFrom(from.i2c_write());
      break;
    }
    case kI2CResult: {
      mutable_i2c_result()->::perfetto::protos::I2cResultFtraceEvent::MergeFrom(from.i2c_result());
      break;
    }
    case kI2CReply: {
      mutable_i2c_reply()->::perfetto::protos::I2cReplyFtraceEvent::MergeFrom(from.i2c_reply());
      break;
    }
    case kSmbusRead: {
      mutable_smbus_read()->::perfetto::protos::SmbusReadFtraceEvent::MergeFrom(from.smbus_read());
      break;
    }
    case kSmbusWrite: {
      mutable_smbus_write()->::perfetto::protos::SmbusWriteFtraceEvent::MergeFrom(from.smbus_write());
      break;
    }
    case kSmbusResult: {
      mutable_smbus_result()->::perfetto::protos::SmbusResultFtraceEvent::MergeFrom(from.smbus_result());
      break;
    }
    case kSmbusReply: {
      mutable_smbus_reply()->::perfetto::protos::SmbusReplyFtraceEvent::MergeFrom(from.smbus_reply());
      break;
    }
    case kLowmemoryKill: {
      mutable_lowmemory_kill()->::perfetto::protos::LowmemoryKillFtraceEvent::MergeFrom(from.lowmemory_kill());
      break;
    }
    case kIrqHandlerEntry: {
      mutable_irq_handler_entry()->::perfetto::protos::IrqHandlerEntryFtraceEvent::MergeFrom(from.irq_handler_entry());
      break;
    }
    case kIrqHandlerExit: {
      mutable_irq_handler_exit()->::perfetto::protos::IrqHandlerExitFtraceEvent::MergeFrom(from.irq_handler_exit());
      break;
    }
    case kSyncPt: {
      mutable_sync_pt()->::perfetto::protos::SyncPtFtraceEvent::MergeFrom(from.sync_pt());
      break;
    }
    case kSyncTimeline: {
      mutable_sync_timeline()->::perfetto::protos::SyncTimelineFtraceEvent::MergeFrom(from.sync_timeline());
      break;
    }
    case kSyncWait: {
      mutable_sync_wait()->::perfetto::protos::SyncWaitFtraceEvent::MergeFrom(from.sync_wait());
      break;
    }
    case kExt4DaWriteBegin: {
      mutable_ext4_da_write_begin()->::perfetto::protos::Ext4DaWriteBeginFtraceEvent::MergeFrom(from.ext4_da_write_begin());
      break;
    }
    case kExt4DaWriteEnd: {
      mutable_ext4_da_write_end()->::perfetto::protos::Ext4DaWriteEndFtraceEvent::MergeFrom(from.ext4_da_write_end());
      break;
    }
    case kExt4SyncFileEnter: {
      mutable_ext4_sync_file_enter()->::perfetto::protos::Ext4SyncFileEnterFtraceEvent::MergeFrom(from.ext4_sync_file_enter());
      break;
    }
    case kExt4SyncFileExit: {
      mutable_ext4_sync_file_exit()->::perfetto::protos::Ext4SyncFileExitFtraceEvent::MergeFrom(from.ext4_sync_file_exit());
      break;
    }
    case kBlockRqIssue: {
      mutable_block_rq_issue()->::perfetto::protos::BlockRqIssueFtraceEvent::MergeFrom(from.block_rq_issue());
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      mutable_mm_vmscan_direct_reclaim_begin()->::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent::MergeFrom(from.mm_vmscan_direct_reclaim_begin());
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      mutable_mm_vmscan_direct_reclaim_end()->::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent::MergeFrom(from.mm_vmscan_direct_reclaim_end());
      break;
    }
    case kMmVmscanKswapdWake: {
      mutable_mm_vmscan_kswapd_wake()->::perfetto::protos::MmVmscanKswapdWakeFtraceEvent::MergeFrom(from.mm_vmscan_kswapd_wake());
      break;
    }
    case kMmVmscanKswapdSleep: {
      mutable_mm_vmscan_kswapd_sleep()->::perfetto::protos::MmVmscanKswapdSleepFtraceEvent::MergeFrom(from.mm_vmscan_kswapd_sleep());
      break;
    }
    case kBinderTransaction: {
      mutable_binder_transaction()->::perfetto::protos::BinderTransactionFtraceEvent::MergeFrom(from.binder_transaction());
      break;
    }
    case kBinderTransactionReceived: {
      mutable_binder_transaction_received()->::perfetto::protos::BinderTransactionReceivedFtraceEvent::MergeFrom(from.binder_transaction_received());
      break;
    }
    case kBinderSetPriority: {
      mutable_binder_set_priority()->::perfetto::protos::BinderSetPriorityFtraceEvent::MergeFrom(from.binder_set_priority());
      break;
    }
    case kBinderLock: {
      mutable_binder_lock()->::perfetto::protos::BinderLockFtraceEvent::MergeFrom(from.binder_lock());
      break;
    }
    case kBinderLocked: {
      mutable_binder_locked()->::perfetto::protos::BinderLockedFtraceEvent::MergeFrom(from.binder_locked());
      break;
    }
    case kBinderUnlock: {
      mutable_binder_unlock()->::perfetto::protos::BinderUnlockFtraceEvent::MergeFrom(from.binder_unlock());
      break;
    }
    case kWorkqueueActivateWork: {
      mutable_workqueue_activate_work()->::perfetto::protos::WorkqueueActivateWorkFtraceEvent::MergeFrom(from.workqueue_activate_work());
      break;
    }
    case kWorkqueueExecuteEnd: {
      mutable_workqueue_execute_end()->::perfetto::protos::WorkqueueExecuteEndFtraceEvent::MergeFrom(from.workqueue_execute_end());
      break;
    }
    case kWorkqueueExecuteStart: {
      mutable_workqueue_execute_start()->::perfetto::protos::WorkqueueExecuteStartFtraceEvent::MergeFrom(from.workqueue_execute_start());
      break;
    }
    case kWorkqueueQueueWork: {
      mutable_workqueue_queue_work()->::perfetto::protos::WorkqueueQueueWorkFtraceEvent::MergeFrom(from.workqueue_queue_work());
      break;
    }
    case kRegulatorDisable: {
      mutable_regulator_disable()->::perfetto::protos::RegulatorDisableFtraceEvent::MergeFrom(from.regulator_disable());
      break;
    }
    case kRegulatorDisableComplete: {
      mutable_regulator_disable_complete()->::perfetto::protos::RegulatorDisableCompleteFtraceEvent::MergeFrom(from.regulator_disable_complete());
      break;
    }
    case kRegulatorEnable: {
      mutable_regulator_enable()->::perfetto::protos::RegulatorEnableFtraceEvent::MergeFrom(from.regulator_enable());
      break;
    }
    case kRegulatorEnableComplete: {
      mutable_regulator_enable_complete()->::perfetto::protos::RegulatorEnableCompleteFtraceEvent::MergeFrom(from.regulator_enable_complete());
      break;
    }
    case kRegulatorEnableDelay: {
      mutable_regulator_enable_delay()->::perfetto::protos::RegulatorEnableDelayFtraceEvent::MergeFrom(from.regulator_enable_delay());
      break;
    }
    case kRegulatorSetVoltage: {
      mutable_regulator_set_voltage()->::perfetto::protos::RegulatorSetVoltageFtraceEvent::MergeFrom(from.regulator_set_voltage());
      break;
    }
    case kRegulatorSetVoltageComplete: {
      mutable_regulator_set_voltage_complete()->::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent::MergeFrom(from.regulator_set_voltage_complete());
      break;
    }
    case kCgroupAttachTask: {
      mutable_cgroup_attach_task()->::perfetto::protos::CgroupAttachTaskFtraceEvent::MergeFrom(from.cgroup_attach_task());
      break;
    }
    case kCgroupMkdir: {
      mutable_cgroup_mkdir()->::perfetto::protos::CgroupMkdirFtraceEvent::MergeFrom(from.cgroup_mkdir());
      break;
    }
    case kCgroupRemount: {
      mutable_cgroup_remount()->::perfetto::protos::CgroupRemountFtraceEvent::MergeFrom(from.cgroup_remount());
      break;
    }
    case kCgroupRmdir: {
      mutable_cgroup_rmdir()->::perfetto::protos::CgroupRmdirFtraceEvent::MergeFrom(from.cgroup_rmdir());
      break;
    }
    case kCgroupTransferTasks: {
      mutable_cgroup_transfer_tasks()->::perfetto::protos::CgroupTransferTasksFtraceEvent::MergeFrom(from.cgroup_transfer_tasks());
      break;
    }
    case kCgroupDestroyRoot: {
      mutable_cgroup_destroy_root()->::perfetto::protos::CgroupDestroyRootFtraceEvent::MergeFrom(from.cgroup_destroy_root());
      break;
    }
    case kCgroupRelease: {
      mutable_cgroup_release()->::perfetto::protos::CgroupReleaseFtraceEvent::MergeFrom(from.cgroup_release());
      break;
    }
    case kCgroupRename: {
      mutable_cgroup_rename()->::perfetto::protos::CgroupRenameFtraceEvent::MergeFrom(from.cgroup_rename());
      break;
    }
    case kCgroupSetupRoot: {
      mutable_cgroup_setup_root()->::perfetto::protos::CgroupSetupRootFtraceEvent::MergeFrom(from.cgroup_setup_root());
      break;
    }
    case kMdpCmdKickoff: {
      mutable_mdp_cmd_kickoff()->::perfetto::protos::MdpCmdKickoffFtraceEvent::MergeFrom(from.mdp_cmd_kickoff());
      break;
    }
    case kMdpCommit: {
      mutable_mdp_commit()->::perfetto::protos::MdpCommitFtraceEvent::MergeFrom(from.mdp_commit());
      break;
    }
    case kMdpPerfSetOt: {
      mutable_mdp_perf_set_ot()->::perfetto::protos::MdpPerfSetOtFtraceEvent::MergeFrom(from.mdp_perf_set_ot());
      break;
    }
    case kMdpSsppChange: {
      mutable_mdp_sspp_change()->::perfetto::protos::MdpSsppChangeFtraceEvent::MergeFrom(from.mdp_sspp_change());
      break;
    }
    case kTracingMarkWrite: {
      mutable_tracing_mark_write()->::perfetto::protos::TracingMarkWriteFtraceEvent::MergeFrom(from.tracing_mark_write());
      break;
    }
    case kMdpCmdPingpongDone: {
      mutable_mdp_cmd_pingpong_done()->::perfetto::protos::MdpCmdPingpongDoneFtraceEvent::MergeFrom(from.mdp_cmd_pingpong_done());
      break;
    }
    case kMdpCompareBw: {
      mutable_mdp_compare_bw()->::perfetto::protos::MdpCompareBwFtraceEvent::MergeFrom(from.mdp_compare_bw());
      break;
    }
    case kMdpPerfSetPanicLuts: {
      mutable_mdp_perf_set_panic_luts()->::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent::MergeFrom(from.mdp_perf_set_panic_luts());
      break;
    }
    case kMdpSsppSet: {
      mutable_mdp_sspp_set()->::perfetto::protos::MdpSsppSetFtraceEvent::MergeFrom(from.mdp_sspp_set());
      break;
    }
    case kMdpCmdReadptrDone: {
      mutable_mdp_cmd_readptr_done()->::perfetto::protos::MdpCmdReadptrDoneFtraceEvent::MergeFrom(from.mdp_cmd_readptr_done());
      break;
    }
    case kMdpMisrCrc: {
      mutable_mdp_misr_crc()->::perfetto::protos::MdpMisrCrcFtraceEvent::MergeFrom(from.mdp_misr_crc());
      break;
    }
    case kMdpPerfSetQosLuts: {
      mutable_mdp_perf_set_qos_luts()->::perfetto::protos::MdpPerfSetQosLutsFtraceEvent::MergeFrom(from.mdp_perf_set_qos_luts());
      break;
    }
    case kMdpTraceCounter: {
      mutable_mdp_trace_counter()->::perfetto::protos::MdpTraceCounterFtraceEvent::MergeFrom(from.mdp_trace_counter());
      break;
    }
    case kMdpCmdReleaseBw: {
      mutable_mdp_cmd_release_bw()->::perfetto::protos::MdpCmdReleaseBwFtraceEvent::MergeFrom(from.mdp_cmd_release_bw());
      break;
    }
    case kMdpMixerUpdate: {
      mutable_mdp_mixer_update()->::perfetto::protos::MdpMixerUpdateFtraceEvent::MergeFrom(from.mdp_mixer_update());
      break;
    }
    case kMdpPerfSetWmLevels: {
      mutable_mdp_perf_set_wm_levels()->::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent::MergeFrom(from.mdp_perf_set_wm_levels());
      break;
    }
    case kMdpVideoUnderrunDone: {
      mutable_mdp_video_underrun_done()->::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent::MergeFrom(from.mdp_video_underrun_done());
      break;
    }
    case kMdpCmdWaitPingpong: {
      mutable_mdp_cmd_wait_pingpong()->::perfetto::protos::MdpCmdWaitPingpongFtraceEvent::MergeFrom(from.mdp_cmd_wait_pingpong());
      break;
    }
    case kMdpPerfPrefillCalc: {
      mutable_mdp_perf_prefill_calc()->::perfetto::protos::MdpPerfPrefillCalcFtraceEvent::MergeFrom(from.mdp_perf_prefill_calc());
      break;
    }
    case kMdpPerfUpdateBus: {
      mutable_mdp_perf_update_bus()->::perfetto::protos::MdpPerfUpdateBusFtraceEvent::MergeFrom(from.mdp_perf_update_bus());
      break;
    }
    case kRotatorBwAoAsContext: {
      mutable_rotator_bw_ao_as_context()->::perfetto::protos::RotatorBwAoAsContextFtraceEvent::MergeFrom(from.rotator_bw_ao_as_context());
      break;
    }
    case kMmFilemapAddToPageCache: {
      mutable_mm_filemap_add_to_page_cache()->::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent::MergeFrom(from.mm_filemap_add_to_page_cache());
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      mutable_mm_filemap_delete_from_page_cache()->::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent::MergeFrom(from.mm_filemap_delete_from_page_cache());
      break;
    }
    case kMmCompactionBegin: {
      mutable_mm_compaction_begin()->::perfetto::protos::MmCompactionBeginFtraceEvent::MergeFrom(from.mm_compaction_begin());
      break;
    }
    case kMmCompactionDeferCompaction: {
      mutable_mm_compaction_defer_compaction()->::perfetto::protos::MmCompactionDeferCompactionFtraceEvent::MergeFrom(from.mm_compaction_defer_compaction());
      break;
    }
    case kMmCompactionDeferred: {
      mutable_mm_compaction_deferred()->::perfetto::protos::MmCompactionDeferredFtraceEvent::MergeFrom(from.mm_compaction_deferred());
      break;
    }
    case kMmCompactionDeferReset: {
      mutable_mm_compaction_defer_reset()->::perfetto::protos::MmCompactionDeferResetFtraceEvent::MergeFrom(from.mm_compaction_defer_reset());
      break;
    }
    case kMmCompactionEnd: {
      mutable_mm_compaction_end()->::perfetto::protos::MmCompactionEndFtraceEvent::MergeFrom(from.mm_compaction_end());
      break;
    }
    case kMmCompactionFinished: {
      mutable_mm_compaction_finished()->::perfetto::protos::MmCompactionFinishedFtraceEvent::MergeFrom(from.mm_compaction_finished());
      break;
    }
    case kMmCompactionIsolateFreepages: {
      mutable_mm_compaction_isolate_freepages()->::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent::MergeFrom(from.mm_compaction_isolate_freepages());
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      mutable_mm_compaction_isolate_migratepages()->::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent::MergeFrom(from.mm_compaction_isolate_migratepages());
      break;
    }
    case kMmCompactionKcompactdSleep: {
      mutable_mm_compaction_kcompactd_sleep()->::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent::MergeFrom(from.mm_compaction_kcompactd_sleep());
      break;
    }
    case kMmCompactionKcompactdWake: {
      mutable_mm_compaction_kcompactd_wake()->::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent::MergeFrom(from.mm_compaction_kcompactd_wake());
      break;
    }
    case kMmCompactionMigratepages: {
      mutable_mm_compaction_migratepages()->::perfetto::protos::MmCompactionMigratepagesFtraceEvent::MergeFrom(from.mm_compaction_migratepages());
      break;
    }
    case kMmCompactionSuitable: {
      mutable_mm_compaction_suitable()->::perfetto::protos::MmCompactionSuitableFtraceEvent::MergeFrom(from.mm_compaction_suitable());
      break;
    }
    case kMmCompactionTryToCompactPages: {
      mutable_mm_compaction_try_to_compact_pages()->::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent::MergeFrom(from.mm_compaction_try_to_compact_pages());
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      mutable_mm_compaction_wakeup_kcompactd()->::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent::MergeFrom(from.mm_compaction_wakeup_kcompactd());
      break;
    }
    case kSuspendResume: {
      mutable_suspend_resume()->::perfetto::protos::SuspendResumeFtraceEvent::MergeFrom(from.suspend_resume());
      break;
    }
    case kSchedWakeupNew: {
      mutable_sched_wakeup_new()->::perfetto::protos::SchedWakeupNewFtraceEvent::MergeFrom(from.sched_wakeup_new());
      break;
    }
    case kBlockBioBackmerge: {
      mutable_block_bio_backmerge()->::perfetto::protos::BlockBioBackmergeFtraceEvent::MergeFrom(from.block_bio_backmerge());
      break;
    }
    case kBlockBioBounce: {
      mutable_block_bio_bounce()->::perfetto::protos::BlockBioBounceFtraceEvent::MergeFrom(from.block_bio_bounce());
      break;
    }
    case kBlockBioComplete: {
      mutable_block_bio_complete()->::perfetto::protos::BlockBioCompleteFtraceEvent::MergeFrom(from.block_bio_complete());
      break;
    }
    case kBlockBioFrontmerge: {
      mutable_block_bio_frontmerge()->::perfetto::protos::BlockBioFrontmergeFtraceEvent::MergeFrom(from.block_bio_frontmerge());
      break;
    }
    case kBlockBioQueue: {
      mutable_block_bio_queue()->::perfetto::protos::BlockBioQueueFtraceEvent::MergeFrom(from.block_bio_queue());
      break;
    }
    case kBlockBioRemap: {
      mutable_block_bio_remap()->::perfetto::protos::BlockBioRemapFtraceEvent::MergeFrom(from.block_bio_remap());
      break;
    }
    case kBlockDirtyBuffer: {
      mutable_block_dirty_buffer()->::perfetto::protos::BlockDirtyBufferFtraceEvent::MergeFrom(from.block_dirty_buffer());
      break;
    }
    case kBlockGetrq: {
      mutable_block_getrq()->::perfetto::protos::BlockGetrqFtraceEvent::MergeFrom(from.block_getrq());
      break;
    }
    case kBlockPlug: {
      mutable_block_plug()->::perfetto::protos::BlockPlugFtraceEvent::MergeFrom(from.block_plug());
      break;
    }
    case kBlockRqAbort: {
      mutable_block_rq_abort()->::perfetto::protos::BlockRqAbortFtraceEvent::MergeFrom(from.block_rq_abort());
      break;
    }
    case kBlockRqComplete: {
      mutable_block_rq_complete()->::perfetto::protos::BlockRqCompleteFtraceEvent::MergeFrom(from.block_rq_complete());
      break;
    }
    case kBlockRqInsert: {
      mutable_block_rq_insert()->::perfetto::protos::BlockRqInsertFtraceEvent::MergeFrom(from.block_rq_insert());
      break;
    }
    case kBlockRqRemap: {
      mutable_block_rq_remap()->::perfetto::protos::BlockRqRemapFtraceEvent::MergeFrom(from.block_rq_remap());
      break;
    }
    case kBlockRqRequeue: {
      mutable_block_rq_requeue()->::perfetto::protos::BlockRqRequeueFtraceEvent::MergeFrom(from.block_rq_requeue());
      break;
    }
    case kBlockSleeprq: {
      mutable_block_sleeprq()->::perfetto::protos::BlockSleeprqFtraceEvent::MergeFrom(from.block_sleeprq());
      break;
    }
    case kBlockSplit: {
      mutable_block_split()->::perfetto::protos::BlockSplitFtraceEvent::MergeFrom(from.block_split());
      break;
    }
    case kBlockTouchBuffer: {
      mutable_block_touch_buffer()->::perfetto::protos::BlockTouchBufferFtraceEvent::MergeFrom(from.block_touch_buffer());
      break;
    }
    case kBlockUnplug: {
      mutable_block_unplug()->::perfetto::protos::BlockUnplugFtraceEvent::MergeFrom(from.block_unplug());
      break;
    }
    case kExt4AllocDaBlocks: {
      mutable_ext4_alloc_da_blocks()->::perfetto::protos::Ext4AllocDaBlocksFtraceEvent::MergeFrom(from.ext4_alloc_da_blocks());
      break;
    }
    case kExt4AllocateBlocks: {
      mutable_ext4_allocate_blocks()->::perfetto::protos::Ext4AllocateBlocksFtraceEvent::MergeFrom(from.ext4_allocate_blocks());
      break;
    }
    case kExt4AllocateInode: {
      mutable_ext4_allocate_inode()->::perfetto::protos::Ext4AllocateInodeFtraceEvent::MergeFrom(from.ext4_allocate_inode());
      break;
    }
    case kExt4BeginOrderedTruncate: {
      mutable_ext4_begin_ordered_truncate()->::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent::MergeFrom(from.ext4_begin_ordered_truncate());
      break;
    }
    case kExt4CollapseRange: {
      mutable_ext4_collapse_range()->::perfetto::protos::Ext4CollapseRangeFtraceEvent::MergeFrom(from.ext4_collapse_range());
      break;
    }
    case kExt4DaReleaseSpace: {
      mutable_ext4_da_release_space()->::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent::MergeFrom(from.ext4_da_release_space());
      break;
    }
    case kExt4DaReserveSpace: {
      mutable_ext4_da_reserve_space()->::perfetto::protos::Ext4DaReserveSpaceFtraceEvent::MergeFrom(from.ext4_da_reserve_space());
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      mutable_ext4_da_update_reserve_space()->::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent::MergeFrom(from.ext4_da_update_reserve_space());
      break;
    }
    case kExt4DaWritePages: {
      mutable_ext4_da_write_pages()->::perfetto::protos::Ext4DaWritePagesFtraceEvent::MergeFrom(from.ext4_da_write_pages());
      break;
    }
    case kExt4DaWritePagesExtent: {
      mutable_ext4_da_write_pages_extent()->::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent::MergeFrom(from.ext4_da_write_pages_extent());
      break;
    }
    case kExt4DirectIOEnter: {
      mutable_ext4_direct_io_enter()->::perfetto::protos::Ext4DirectIOEnterFtraceEvent::MergeFrom(from.ext4_direct_io_enter());
      break;
    }
    case kExt4DirectIOExit: {
      mutable_ext4_direct_io_exit()->::perfetto::protos::Ext4DirectIOExitFtraceEvent::MergeFrom(from.ext4_direct_io_exit());
      break;
    }
    case kExt4DiscardBlocks: {
      mutable_ext4_discard_blocks()->::perfetto::protos::Ext4DiscardBlocksFtraceEvent::MergeFrom(from.ext4_discard_blocks());
      break;
    }
    case kExt4DiscardPreallocations: {
      mutable_ext4_discard_preallocations()->::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent::MergeFrom(from.ext4_discard_preallocations());
      break;
    }
    case kExt4DropInode: {
      mutable_ext4_drop_inode()->::perfetto::protos::Ext4DropInodeFtraceEvent::MergeFrom(from.ext4_drop_inode());
      break;
    }
    case kExt4EsCacheExtent: {
      mutable_ext4_es_cache_extent()->::perfetto::protos::Ext4EsCacheExtentFtraceEvent::MergeFrom(from.ext4_es_cache_extent());
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      mutable_ext4_es_find_delayed_extent_range_enter()->::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent::MergeFrom(from.ext4_es_find_delayed_extent_range_enter());
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      mutable_ext4_es_find_delayed_extent_range_exit()->::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent::MergeFrom(from.ext4_es_find_delayed_extent_range_exit());
      break;
    }
    case kExt4EsInsertExtent: {
      mutable_ext4_es_insert_extent()->::perfetto::protos::Ext4EsInsertExtentFtraceEvent::MergeFrom(from.ext4_es_insert_extent());
      break;
    }
    case kExt4EsLookupExtentEnter: {
      mutable_ext4_es_lookup_extent_enter()->::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent::MergeFrom(from.ext4_es_lookup_extent_enter());
      break;
    }
    case kExt4EsLookupExtentExit: {
      mutable_ext4_es_lookup_extent_exit()->::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent::MergeFrom(from.ext4_es_lookup_extent_exit());
      break;
    }
    case kExt4EsRemoveExtent: {
      mutable_ext4_es_remove_extent()->::perfetto::protos::Ext4EsRemoveExtentFtraceEvent::MergeFrom(from.ext4_es_remove_extent());
      break;
    }
    case kExt4EsShrink: {
      mutable_ext4_es_shrink()->::perfetto::protos::Ext4EsShrinkFtraceEvent::MergeFrom(from.ext4_es_shrink());
      break;
    }
    case kExt4EsShrinkCount: {
      mutable_ext4_es_shrink_count()->::perfetto::protos::Ext4EsShrinkCountFtraceEvent::MergeFrom(from.ext4_es_shrink_count());
      break;
    }
    case kExt4EsShrinkScanEnter: {
      mutable_ext4_es_shrink_scan_enter()->::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent::MergeFrom(from.ext4_es_shrink_scan_enter());
      break;
    }
    case kExt4EsShrinkScanExit: {
      mutable_ext4_es_shrink_scan_exit()->::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent::MergeFrom(from.ext4_es_shrink_scan_exit());
      break;
    }
    case kExt4EvictInode: {
      mutable_ext4_evict_inode()->::perfetto::protos::Ext4EvictInodeFtraceEvent::MergeFrom(from.ext4_evict_inode());
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      mutable_ext4_ext_convert_to_initialized_enter()->::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent::MergeFrom(from.ext4_ext_convert_to_initialized_enter());
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      mutable_ext4_ext_convert_to_initialized_fastpath()->::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent::MergeFrom(from.ext4_ext_convert_to_initialized_fastpath());
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      mutable_ext4_ext_handle_unwritten_extents()->::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent::MergeFrom(from.ext4_ext_handle_unwritten_extents());
      break;
    }
    case kExt4ExtInCache: {
      mutable_ext4_ext_in_cache()->::perfetto::protos::Ext4ExtInCacheFtraceEvent::MergeFrom(from.ext4_ext_in_cache());
      break;
    }
    case kExt4ExtLoadExtent: {
      mutable_ext4_ext_load_extent()->::perfetto::protos::Ext4ExtLoadExtentFtraceEvent::MergeFrom(from.ext4_ext_load_extent());
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      mutable_ext4_ext_map_blocks_enter()->::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent::MergeFrom(from.ext4_ext_map_blocks_enter());
      break;
    }
    case kExt4ExtMapBlocksExit: {
      mutable_ext4_ext_map_blocks_exit()->::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent::MergeFrom(from.ext4_ext_map_blocks_exit());
      break;
    }
    case kExt4ExtPutInCache: {
      mutable_ext4_ext_put_in_cache()->::perfetto::protos::Ext4ExtPutInCacheFtraceEvent::MergeFrom(from.ext4_ext_put_in_cache());
      break;
    }
    case kExt4ExtRemoveSpace: {
      mutable_ext4_ext_remove_space()->::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent::MergeFrom(from.ext4_ext_remove_space());
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      mutable_ext4_ext_remove_space_done()->::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent::MergeFrom(from.ext4_ext_remove_space_done());
      break;
    }
    case kExt4ExtRmIdx: {
      mutable_ext4_ext_rm_idx()->::perfetto::protos::Ext4ExtRmIdxFtraceEvent::MergeFrom(from.ext4_ext_rm_idx());
      break;
    }
    case kExt4ExtRmLeaf: {
      mutable_ext4_ext_rm_leaf()->::perfetto::protos::Ext4ExtRmLeafFtraceEvent::MergeFrom(from.ext4_ext_rm_leaf());
      break;
    }
    case kExt4ExtShowExtent: {
      mutable_ext4_ext_show_extent()->::perfetto::protos::Ext4ExtShowExtentFtraceEvent::MergeFrom(from.ext4_ext_show_extent());
      break;
    }
    case kExt4FallocateEnter: {
      mutable_ext4_fallocate_enter()->::perfetto::protos::Ext4FallocateEnterFtraceEvent::MergeFrom(from.ext4_fallocate_enter());
      break;
    }
    case kExt4FallocateExit: {
      mutable_ext4_fallocate_exit()->::perfetto::protos::Ext4FallocateExitFtraceEvent::MergeFrom(from.ext4_fallocate_exit());
      break;
    }
    case kExt4FindDelallocRange: {
      mutable_ext4_find_delalloc_range()->::perfetto::protos::Ext4FindDelallocRangeFtraceEvent::MergeFrom(from.ext4_find_delalloc_range());
      break;
    }
    case kExt4Forget: {
      mutable_ext4_forget()->::perfetto::protos::Ext4ForgetFtraceEvent::MergeFrom(from.ext4_forget());
      break;
    }
    case kExt4FreeBlocks: {
      mutable_ext4_free_blocks()->::perfetto::protos::Ext4FreeBlocksFtraceEvent::MergeFrom(from.ext4_free_blocks());
      break;
    }
    case kExt4FreeInode: {
      mutable_ext4_free_inode()->::perfetto::protos::Ext4FreeInodeFtraceEvent::MergeFrom(from.ext4_free_inode());
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      mutable_ext4_get_implied_cluster_alloc_exit()->::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent::MergeFrom(from.ext4_get_implied_cluster_alloc_exit());
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      mutable_ext4_get_reserved_cluster_alloc()->::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent::MergeFrom(from.ext4_get_reserved_cluster_alloc());
      break;
    }
    case kExt4IndMapBlocksEnter: {
      mutable_ext4_ind_map_blocks_enter()->::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent::MergeFrom(from.ext4_ind_map_blocks_enter());
      break;
    }
    case kExt4IndMapBlocksExit: {
      mutable_ext4_ind_map_blocks_exit()->::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent::MergeFrom(from.ext4_ind_map_blocks_exit());
      break;
    }
    case kExt4InsertRange: {
      mutable_ext4_insert_range()->::perfetto::protos::Ext4InsertRangeFtraceEvent::MergeFrom(from.ext4_insert_range());
      break;
    }
    case kExt4Invalidatepage: {
      mutable_ext4_invalidatepage()->::perfetto::protos::Ext4InvalidatepageFtraceEvent::MergeFrom(from.ext4_invalidatepage());
      break;
    }
    case kExt4JournalStart: {
      mutable_ext4_journal_start()->::perfetto::protos::Ext4JournalStartFtraceEvent::MergeFrom(from.ext4_journal_start());
      break;
    }
    case kExt4JournalStartReserved: {
      mutable_ext4_journal_start_reserved()->::perfetto::protos::Ext4JournalStartReservedFtraceEvent::MergeFrom(from.ext4_journal_start_reserved());
      break;
    }
    case kExt4JournalledInvalidatepage: {
      mutable_ext4_journalled_invalidatepage()->::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent::MergeFrom(from.ext4_journalled_invalidatepage());
      break;
    }
    case kExt4JournalledWriteEnd: {
      mutable_ext4_journalled_write_end()->::perfetto::protos::Ext4JournalledWriteEndFtraceEvent::MergeFrom(from.ext4_journalled_write_end());
      break;
    }
    case kExt4LoadInode: {
      mutable_ext4_load_inode()->::perfetto::protos::Ext4LoadInodeFtraceEvent::MergeFrom(from.ext4_load_inode());
      break;
    }
    case kExt4LoadInodeBitmap: {
      mutable_ext4_load_inode_bitmap()->::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent::MergeFrom(from.ext4_load_inode_bitmap());
      break;
    }
    case kExt4MarkInodeDirty: {
      mutable_ext4_mark_inode_dirty()->::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent::MergeFrom(from.ext4_mark_inode_dirty());
      break;
    }
    case kExt4MbBitmapLoad: {
      mutable_ext4_mb_bitmap_load()->::perfetto::protos::Ext4MbBitmapLoadFtraceEvent::MergeFrom(from.ext4_mb_bitmap_load());
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      mutable_ext4_mb_buddy_bitmap_load()->::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent::MergeFrom(from.ext4_mb_buddy_bitmap_load());
      break;
    }
    case kExt4MbDiscardPreallocations: {
      mutable_ext4_mb_discard_preallocations()->::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent::MergeFrom(from.ext4_mb_discard_preallocations());
      break;
    }
    case kExt4MbNewGroupPa: {
      mutable_ext4_mb_new_group_pa()->::perfetto::protos::Ext4MbNewGroupPaFtraceEvent::MergeFrom(from.ext4_mb_new_group_pa());
      break;
    }
    case kExt4MbNewInodePa: {
      mutable_ext4_mb_new_inode_pa()->::perfetto::protos::Ext4MbNewInodePaFtraceEvent::MergeFrom(from.ext4_mb_new_inode_pa());
      break;
    }
    case kExt4MbReleaseGroupPa: {
      mutable_ext4_mb_release_group_pa()->::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent::MergeFrom(from.ext4_mb_release_group_pa());
      break;
    }
    case kExt4MbReleaseInodePa: {
      mutable_ext4_mb_release_inode_pa()->::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent::MergeFrom(from.ext4_mb_release_inode_pa());
      break;
    }
    case kExt4MballocAlloc: {
      mutable_ext4_mballoc_alloc()->::perfetto::protos::Ext4MballocAllocFtraceEvent::MergeFrom(from.ext4_mballoc_alloc());
      break;
    }
    case kExt4MballocDiscard: {
      mutable_ext4_mballoc_discard()->::perfetto::protos::Ext4MballocDiscardFtraceEvent::MergeFrom(from.ext4_mballoc_discard());
      break;
    }
    case kExt4MballocFree: {
      mutable_ext4_mballoc_free()->::perfetto::protos::Ext4MballocFreeFtraceEvent::MergeFrom(from.ext4_mballoc_free());
      break;
    }
    case kExt4MballocPrealloc: {
      mutable_ext4_mballoc_prealloc()->::perfetto::protos::Ext4MballocPreallocFtraceEvent::MergeFrom(from.ext4_mballoc_prealloc());
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      mutable_ext4_other_inode_update_time()->::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent::MergeFrom(from.ext4_other_inode_update_time());
      break;
    }
    case kExt4PunchHole: {
      mutable_ext4_punch_hole()->::perfetto::protos::Ext4PunchHoleFtraceEvent::MergeFrom(from.ext4_punch_hole());
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      mutable_ext4_read_block_bitmap_load()->::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent::MergeFrom(from.ext4_read_block_bitmap_load());
      break;
    }
    case kExt4Readpage: {
      mutable_ext4_readpage()->::perfetto::protos::Ext4ReadpageFtraceEvent::MergeFrom(from.ext4_readpage());
      break;
    }
    case kExt4Releasepage: {
      mutable_ext4_releasepage()->::perfetto::protos::Ext4ReleasepageFtraceEvent::MergeFrom(from.ext4_releasepage());
      break;
    }
    case kExt4RemoveBlocks: {
      mutable_ext4_remove_blocks()->::perfetto::protos::Ext4RemoveBlocksFtraceEvent::MergeFrom(from.ext4_remove_blocks());
      break;
    }
    case kExt4RequestBlocks: {
      mutable_ext4_request_blocks()->::perfetto::protos::Ext4RequestBlocksFtraceEvent::MergeFrom(from.ext4_request_blocks());
      break;
    }
    case kExt4RequestInode: {
      mutable_ext4_request_inode()->::perfetto::protos::Ext4RequestInodeFtraceEvent::MergeFrom(from.ext4_request_inode());
      break;
    }
    case kExt4SyncFs: {
      mutable_ext4_sync_fs()->::perfetto::protos::Ext4SyncFsFtraceEvent::MergeFrom(from.ext4_sync_fs());
      break;
    }
    case kExt4TrimAllFree: {
      mutable_ext4_trim_all_free()->::perfetto::protos::Ext4TrimAllFreeFtraceEvent::MergeFrom(from.ext4_trim_all_free());
      break;
    }
    case kExt4TrimExtent: {
      mutable_ext4_trim_extent()->::perfetto::protos::Ext4TrimExtentFtraceEvent::MergeFrom(from.ext4_trim_extent());
      break;
    }
    case kExt4TruncateEnter: {
      mutable_ext4_truncate_enter()->::perfetto::protos::Ext4TruncateEnterFtraceEvent::MergeFrom(from.ext4_truncate_enter());
      break;
    }
    case kExt4TruncateExit: {
      mutable_ext4_truncate_exit()->::perfetto::protos::Ext4TruncateExitFtraceEvent::MergeFrom(from.ext4_truncate_exit());
      break;
    }
    case kExt4UnlinkEnter: {
      mutable_ext4_unlink_enter()->::perfetto::protos::Ext4UnlinkEnterFtraceEvent::MergeFrom(from.ext4_unlink_enter());
      break;
    }
    case kExt4UnlinkExit: {
      mutable_ext4_unlink_exit()->::perfetto::protos::Ext4UnlinkExitFtraceEvent::MergeFrom(from.ext4_unlink_exit());
      break;
    }
    case kExt4WriteBegin: {
      mutable_ext4_write_begin()->::perfetto::protos::Ext4WriteBeginFtraceEvent::MergeFrom(from.ext4_write_begin());
      break;
    }
    case kExt4WriteEnd: {
      mutable_ext4_write_end()->::perfetto::protos::Ext4WriteEndFtraceEvent::MergeFrom(from.ext4_write_end());
      break;
    }
    case kExt4Writepage: {
      mutable_ext4_writepage()->::perfetto::protos::Ext4WritepageFtraceEvent::MergeFrom(from.ext4_writepage());
      break;
    }
    case kExt4Writepages: {
      mutable_ext4_writepages()->::perfetto::protos::Ext4WritepagesFtraceEvent::MergeFrom(from.ext4_writepages());
      break;
    }
    case kExt4WritepagesResult: {
      mutable_ext4_writepages_result()->::perfetto::protos::Ext4WritepagesResultFtraceEvent::MergeFrom(from.ext4_writepages_result());
      break;
    }
    case kExt4ZeroRange: {
      mutable_ext4_zero_range()->::perfetto::protos::Ext4ZeroRangeFtraceEvent::MergeFrom(from.ext4_zero_range());
      break;
    }
    case kTaskNewtask: {
      mutable_task_newtask()->::perfetto::protos::TaskNewtaskFtraceEvent::MergeFrom(from.task_newtask());
      break;
    }
    case kTaskRename: {
      mutable_task_rename()->::perfetto::protos::TaskRenameFtraceEvent::MergeFrom(from.task_rename());
      break;
    }
    case kSchedProcessExec: {
      mutable_sched_process_exec()->::perfetto::protos::SchedProcessExecFtraceEvent::MergeFrom(from.sched_process_exec());
      break;
    }
    case kSchedProcessExit: {
      mutable_sched_process_exit()->::perfetto::protos::SchedProcessExitFtraceEvent::MergeFrom(from.sched_process_exit());
      break;
    }
    case kSchedProcessFork: {
      mutable_sched_process_fork()->::perfetto::protos::SchedProcessForkFtraceEvent::MergeFrom(from.sched_process_fork());
      break;
    }
    case kSchedProcessFree: {
      mutable_sched_process_free()->::perfetto::protos::SchedProcessFreeFtraceEvent::MergeFrom(from.sched_process_free());
      break;
    }
    case kSchedProcessHang: {
      mutable_sched_process_hang()->::perfetto::protos::SchedProcessHangFtraceEvent::MergeFrom(from.sched_process_hang());
      break;
    }
    case kSchedProcessWait: {
      mutable_sched_process_wait()->::perfetto::protos::SchedProcessWaitFtraceEvent::MergeFrom(from.sched_process_wait());
      break;
    }
    case kF2FsDoSubmitBio: {
      mutable_f2fs_do_submit_bio()->::perfetto::protos::F2fsDoSubmitBioFtraceEvent::MergeFrom(from.f2fs_do_submit_bio());
      break;
    }
    case kF2FsEvictInode: {
      mutable_f2fs_evict_inode()->::perfetto::protos::F2fsEvictInodeFtraceEvent::MergeFrom(from.f2fs_evict_inode());
      break;
    }
    case kF2FsFallocate: {
      mutable_f2fs_fallocate()->::perfetto::protos::F2fsFallocateFtraceEvent::MergeFrom(from.f2fs_fallocate());
      break;
    }
    case kF2FsGetDataBlock: {
      mutable_f2fs_get_data_block()->::perfetto::protos::F2fsGetDataBlockFtraceEvent::MergeFrom(from.f2fs_get_data_block());
      break;
    }
    case kF2FsGetVictim: {
      mutable_f2fs_get_victim()->::perfetto::protos::F2fsGetVictimFtraceEvent::MergeFrom(from.f2fs_get_victim());
      break;
    }
    case kF2FsIget: {
      mutable_f2fs_iget()->::perfetto::protos::F2fsIgetFtraceEvent::MergeFrom(from.f2fs_iget());
      break;
    }
    case kF2FsIgetExit: {
      mutable_f2fs_iget_exit()->::perfetto::protos::F2fsIgetExitFtraceEvent::MergeFrom(from.f2fs_iget_exit());
      break;
    }
    case kF2FsNewInode: {
      mutable_f2fs_new_inode()->::perfetto::protos::F2fsNewInodeFtraceEvent::MergeFrom(from.f2fs_new_inode());
      break;
    }
    case kF2FsReadpage: {
      mutable_f2fs_readpage()->::perfetto::protos::F2fsReadpageFtraceEvent::MergeFrom(from.f2fs_readpage());
      break;
    }
    case kF2FsReserveNewBlock: {
      mutable_f2fs_reserve_new_block()->::perfetto::protos::F2fsReserveNewBlockFtraceEvent::MergeFrom(from.f2fs_reserve_new_block());
      break;
    }
    case kF2FsSetPageDirty: {
      mutable_f2fs_set_page_dirty()->::perfetto::protos::F2fsSetPageDirtyFtraceEvent::MergeFrom(from.f2fs_set_page_dirty());
      break;
    }
    case kF2FsSubmitWritePage: {
      mutable_f2fs_submit_write_page()->::perfetto::protos::F2fsSubmitWritePageFtraceEvent::MergeFrom(from.f2fs_submit_write_page());
      break;
    }
    case kF2FsSyncFileEnter: {
      mutable_f2fs_sync_file_enter()->::perfetto::protos::F2fsSyncFileEnterFtraceEvent::MergeFrom(from.f2fs_sync_file_enter());
      break;
    }
    case kF2FsSyncFileExit: {
      mutable_f2fs_sync_file_exit()->::perfetto::protos::F2fsSyncFileExitFtraceEvent::MergeFrom(from.f2fs_sync_file_exit());
      break;
    }
    case kF2FsSyncFs: {
      mutable_f2fs_sync_fs()->::perfetto::protos::F2fsSyncFsFtraceEvent::MergeFrom(from.f2fs_sync_fs());
      break;
    }
    case kF2FsTruncate: {
      mutable_f2fs_truncate()->::perfetto::protos::F2fsTruncateFtraceEvent::MergeFrom(from.f2fs_truncate());
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      mutable_f2fs_truncate_blocks_enter()->::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent::MergeFrom(from.f2fs_truncate_blocks_enter());
      break;
    }
    case kF2FsTruncateBlocksExit: {
      mutable_f2fs_truncate_blocks_exit()->::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent::MergeFrom(from.f2fs_truncate_blocks_exit());
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      mutable_f2fs_truncate_data_blocks_range()->::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent::MergeFrom(from.f2fs_truncate_data_blocks_range());
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      mutable_f2fs_truncate_inode_blocks_enter()->::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent::MergeFrom(from.f2fs_truncate_inode_blocks_enter());
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      mutable_f2fs_truncate_inode_blocks_exit()->::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent::MergeFrom(from.f2fs_truncate_inode_blocks_exit());
      break;
    }
    case kF2FsTruncateNode: {
      mutable_f2fs_truncate_node()->::perfetto::protos::F2fsTruncateNodeFtraceEvent::MergeFrom(from.f2fs_truncate_node());
      break;
    }
    case kF2FsTruncateNodesEnter: {
      mutable_f2fs_truncate_nodes_enter()->::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent::MergeFrom(from.f2fs_truncate_nodes_enter());
      break;
    }
    case kF2FsTruncateNodesExit: {
      mutable_f2fs_truncate_nodes_exit()->::perfetto::protos::F2fsTruncateNodesExitFtraceEvent::MergeFrom(from.f2fs_truncate_nodes_exit());
      break;
    }
    case kF2FsTruncatePartialNodes: {
      mutable_f2fs_truncate_partial_nodes()->::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent::MergeFrom(from.f2fs_truncate_partial_nodes());
      break;
    }
    case kF2FsUnlinkEnter: {
      mutable_f2fs_unlink_enter()->::perfetto::protos::F2fsUnlinkEnterFtraceEvent::MergeFrom(from.f2fs_unlink_enter());
      break;
    }
    case kF2FsUnlinkExit: {
      mutable_f2fs_unlink_exit()->::perfetto::protos::F2fsUnlinkExitFtraceEvent::MergeFrom(from.f2fs_unlink_exit());
      break;
    }
    case kF2FsVmPageMkwrite: {
      mutable_f2fs_vm_page_mkwrite()->::perfetto::protos::F2fsVmPageMkwriteFtraceEvent::MergeFrom(from.f2fs_vm_page_mkwrite());
      break;
    }
    case kF2FsWriteBegin: {
      mutable_f2fs_write_begin()->::perfetto::protos::F2fsWriteBeginFtraceEvent::MergeFrom(from.f2fs_write_begin());
      break;
    }
    case kF2FsWriteCheckpoint: {
      mutable_f2fs_write_checkpoint()->::perfetto::protos::F2fsWriteCheckpointFtraceEvent::MergeFrom(from.f2fs_write_checkpoint());
      break;
    }
    case kF2FsWriteEnd: {
      mutable_f2fs_write_end()->::perfetto::protos::F2fsWriteEndFtraceEvent::MergeFrom(from.f2fs_write_end());
      break;
    }
    case kAllocPagesIommuEnd: {
      mutable_alloc_pages_iommu_end()->::perfetto::protos::AllocPagesIommuEndFtraceEvent::MergeFrom(from.alloc_pages_iommu_end());
      break;
    }
    case kAllocPagesIommuFail: {
      mutable_alloc_pages_iommu_fail()->::perfetto::protos::AllocPagesIommuFailFtraceEvent::MergeFrom(from.alloc_pages_iommu_fail());
      break;
    }
    case kAllocPagesIommuStart: {
      mutable_alloc_pages_iommu_start()->::perfetto::protos::AllocPagesIommuStartFtraceEvent::MergeFrom(from.alloc_pages_iommu_start());
      break;
    }
    case kAllocPagesSysEnd: {
      mutable_alloc_pages_sys_end()->::perfetto::protos::AllocPagesSysEndFtraceEvent::MergeFrom(from.alloc_pages_sys_end());
      break;
    }
    case kAllocPagesSysFail: {
      mutable_alloc_pages_sys_fail()->::perfetto::protos::AllocPagesSysFailFtraceEvent::MergeFrom(from.alloc_pages_sys_fail());
      break;
    }
    case kAllocPagesSysStart: {
      mutable_alloc_pages_sys_start()->::perfetto::protos::AllocPagesSysStartFtraceEvent::MergeFrom(from.alloc_pages_sys_start());
      break;
    }
    case kDmaAllocContiguousRetry: {
      mutable_dma_alloc_contiguous_retry()->::perfetto::protos::DmaAllocContiguousRetryFtraceEvent::MergeFrom(from.dma_alloc_contiguous_retry());
      break;
    }
    case kIommuMapRange: {
      mutable_iommu_map_range()->::perfetto::protos::IommuMapRangeFtraceEvent::MergeFrom(from.iommu_map_range());
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      mutable_iommu_sec_ptbl_map_range_end()->::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent::MergeFrom(from.iommu_sec_ptbl_map_range_end());
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      mutable_iommu_sec_ptbl_map_range_start()->::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent::MergeFrom(from.iommu_sec_ptbl_map_range_start());
      break;
    }
    case kIonAllocBufferEnd: {
      mutable_ion_alloc_buffer_end()->::perfetto::protos::IonAllocBufferEndFtraceEvent::MergeFrom(from.ion_alloc_buffer_end());
      break;
    }
    case kIonAllocBufferFail: {
      mutable_ion_alloc_buffer_fail()->::perfetto::protos::IonAllocBufferFailFtraceEvent::MergeFrom(from.ion_alloc_buffer_fail());
      break;
    }
    case kIonAllocBufferFallback: {
      mutable_ion_alloc_buffer_fallback()->::perfetto::protos::IonAllocBufferFallbackFtraceEvent::MergeFrom(from.ion_alloc_buffer_fallback());
      break;
    }
    case kIonAllocBufferStart: {
      mutable_ion_alloc_buffer_start()->::perfetto::protos::IonAllocBufferStartFtraceEvent::MergeFrom(from.ion_alloc_buffer_start());
      break;
    }
    case kIonCpAllocRetry: {
      mutable_ion_cp_alloc_retry()->::perfetto::protos::IonCpAllocRetryFtraceEvent::MergeFrom(from.ion_cp_alloc_retry());
      break;
    }
    case kIonCpSecureBufferEnd: {
      mutable_ion_cp_secure_buffer_end()->::perfetto::protos::IonCpSecureBufferEndFtraceEvent::MergeFrom(from.ion_cp_secure_buffer_end());
      break;
    }
    case kIonCpSecureBufferStart: {
      mutable_ion_cp_secure_buffer_start()->::perfetto::protos::IonCpSecureBufferStartFtraceEvent::MergeFrom(from.ion_cp_secure_buffer_start());
      break;
    }
    case kIonPrefetching: {
      mutable_ion_prefetching()->::perfetto::protos::IonPrefetchingFtraceEvent::MergeFrom(from.ion_prefetching());
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      mutable_ion_secure_cma_add_to_pool_end()->::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent::MergeFrom(from.ion_secure_cma_add_to_pool_end());
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      mutable_ion_secure_cma_add_to_pool_start()->::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent::MergeFrom(from.ion_secure_cma_add_to_pool_start());
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      mutable_ion_secure_cma_allocate_end()->::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent::MergeFrom(from.ion_secure_cma_allocate_end());
      break;
    }
    case kIonSecureCmaAllocateStart: {
      mutable_ion_secure_cma_allocate_start()->::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent::MergeFrom(from.ion_secure_cma_allocate_start());
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      mutable_ion_secure_cma_shrink_pool_end()->::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent::MergeFrom(from.ion_secure_cma_shrink_pool_end());
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      mutable_ion_secure_cma_shrink_pool_start()->::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent::MergeFrom(from.ion_secure_cma_shrink_pool_start());
      break;
    }
    case kKfree: {
      mutable_kfree()->::perfetto::protos::KfreeFtraceEvent::MergeFrom(from.kfree());
      break;
    }
    case kKmalloc: {
      mutable_kmalloc()->::perfetto::protos::KmallocFtraceEvent::MergeFrom(from.kmalloc());
      break;
    }
    case kKmallocNode: {
      mutable_kmalloc_node()->::perfetto::protos::KmallocNodeFtraceEvent::MergeFrom(from.kmalloc_node());
      break;
    }
    case kKmemCacheAlloc: {
      mutable_kmem_cache_alloc()->::perfetto::protos::KmemCacheAllocFtraceEvent::MergeFrom(from.kmem_cache_alloc());
      break;
    }
    case kKmemCacheAllocNode: {
      mutable_kmem_cache_alloc_node()->::perfetto::protos::KmemCacheAllocNodeFtraceEvent::MergeFrom(from.kmem_cache_alloc_node());
      break;
    }
    case kKmemCacheFree: {
      mutable_kmem_cache_free()->::perfetto::protos::KmemCacheFreeFtraceEvent::MergeFrom(from.kmem_cache_free());
      break;
    }
    case kMigratePagesEnd: {
      mutable_migrate_pages_end()->::perfetto::protos::MigratePagesEndFtraceEvent::MergeFrom(from.migrate_pages_end());
      break;
    }
    case kMigratePagesStart: {
      mutable_migrate_pages_start()->::perfetto::protos::MigratePagesStartFtraceEvent::MergeFrom(from.migrate_pages_start());
      break;
    }
    case kMigrateRetry: {
      mutable_migrate_retry()->::perfetto::protos::MigrateRetryFtraceEvent::MergeFrom(from.migrate_retry());
      break;
    }
    case kMmPageAlloc: {
      mutable_mm_page_alloc()->::perfetto::protos::MmPageAllocFtraceEvent::MergeFrom(from.mm_page_alloc());
      break;
    }
    case kMmPageAllocExtfrag: {
      mutable_mm_page_alloc_extfrag()->::perfetto::protos::MmPageAllocExtfragFtraceEvent::MergeFrom(from.mm_page_alloc_extfrag());
      break;
    }
    case kMmPageAllocZoneLocked: {
      mutable_mm_page_alloc_zone_locked()->::perfetto::protos::MmPageAllocZoneLockedFtraceEvent::MergeFrom(from.mm_page_alloc_zone_locked());
      break;
    }
    case kMmPageFree: {
      mutable_mm_page_free()->::perfetto::protos::MmPageFreeFtraceEvent::MergeFrom(from.mm_page_free());
      break;
    }
    case kMmPageFreeBatched: {
      mutable_mm_page_free_batched()->::perfetto::protos::MmPageFreeBatchedFtraceEvent::MergeFrom(from.mm_page_free_batched());
      break;
    }
    case kMmPagePcpuDrain: {
      mutable_mm_page_pcpu_drain()->::perfetto::protos::MmPagePcpuDrainFtraceEvent::MergeFrom(from.mm_page_pcpu_drain());
      break;
    }
    case kRssStat: {
      mutable_rss_stat()->::perfetto::protos::RssStatFtraceEvent::MergeFrom(from.rss_stat());
      break;
    }
    case kIonHeapShrink: {
      mutable_ion_heap_shrink()->::perfetto::protos::IonHeapShrinkFtraceEvent::MergeFrom(from.ion_heap_shrink());
      break;
    }
    case kIonHeapGrow: {
      mutable_ion_heap_grow()->::perfetto::protos::IonHeapGrowFtraceEvent::MergeFrom(from.ion_heap_grow());
      break;
    }
    case kFenceInit: {
      mutable_fence_init()->::perfetto::protos::FenceInitFtraceEvent::MergeFrom(from.fence_init());
      break;
    }
    case kFenceDestroy: {
      mutable_fence_destroy()->::perfetto::protos::FenceDestroyFtraceEvent::MergeFrom(from.fence_destroy());
      break;
    }
    case kFenceEnableSignal: {
      mutable_fence_enable_signal()->::perfetto::protos::FenceEnableSignalFtraceEvent::MergeFrom(from.fence_enable_signal());
      break;
    }
    case kFenceSignaled: {
      mutable_fence_signaled()->::perfetto::protos::FenceSignaledFtraceEvent::MergeFrom(from.fence_signaled());
      break;
    }
    case kClkEnable: {
      mutable_clk_enable()->::perfetto::protos::ClkEnableFtraceEvent::MergeFrom(from.clk_enable());
      break;
    }
    case kClkDisable: {
      mutable_clk_disable()->::perfetto::protos::ClkDisableFtraceEvent::MergeFrom(from.clk_disable());
      break;
    }
    case kClkSetRate: {
      mutable_clk_set_rate()->::perfetto::protos::ClkSetRateFtraceEvent::MergeFrom(from.clk_set_rate());
      break;
    }
    case kBinderTransactionAllocBuf: {
      mutable_binder_transaction_alloc_buf()->::perfetto::protos::BinderTransactionAllocBufFtraceEvent::MergeFrom(from.binder_transaction_alloc_buf());
      break;
    }
    case kSignalDeliver: {
      mutable_signal_deliver()->::perfetto::protos::SignalDeliverFtraceEvent::MergeFrom(from.signal_deliver());
      break;
    }
    case kSignalGenerate: {
      mutable_signal_generate()->::perfetto::protos::SignalGenerateFtraceEvent::MergeFrom(from.signal_generate());
      break;
    }
    case kOomScoreAdjUpdate: {
      mutable_oom_score_adj_update()->::perfetto::protos::OomScoreAdjUpdateFtraceEvent::MergeFrom(from.oom_score_adj_update());
      break;
    }
    case kGeneric: {
      mutable_generic()->::perfetto::protos::GenericFtraceEvent::MergeFrom(from.generic());
      break;
    }
    case kMmEventRecord: {
      mutable_mm_event_record()->::perfetto::protos::MmEventRecordFtraceEvent::MergeFrom(from.mm_event_record());
      break;
    }
    case kSysEnter: {
      mutable_sys_enter()->::perfetto::protos::SysEnterFtraceEvent::MergeFrom(from.sys_enter());
      break;
    }
    case kSysExit: {
      mutable_sys_exit()->::perfetto::protos::SysExitFtraceEvent::MergeFrom(from.sys_exit());
      break;
    }
    case kZero: {
      mutable_zero()->::perfetto::protos::ZeroFtraceEvent::MergeFrom(from.zero());
      break;
    }
    case kGpuFrequency: {
      mutable_gpu_frequency()->::perfetto::protos::GpuFrequencyFtraceEvent::MergeFrom(from.gpu_frequency());
      break;
    }
    case kSdeTracingMarkWrite: {
      mutable_sde_tracing_mark_write()->::perfetto::protos::SdeTracingMarkWriteFtraceEvent::MergeFrom(from.sde_tracing_mark_write());
      break;
    }
    case kMarkVictim: {
      mutable_mark_victim()->::perfetto::protos::MarkVictimFtraceEvent::MergeFrom(from.mark_victim());
      break;
    }
    case kIonStat: {
      mutable_ion_stat()->::perfetto::protos::IonStatFtraceEvent::MergeFrom(from.ion_stat());
      break;
    }
    case kIonBufferCreate: {
      mutable_ion_buffer_create()->::perfetto::protos::IonBufferCreateFtraceEvent::MergeFrom(from.ion_buffer_create());
      break;
    }
    case kIonBufferDestroy: {
      mutable_ion_buffer_destroy()->::perfetto::protos::IonBufferDestroyFtraceEvent::MergeFrom(from.ion_buffer_destroy());
      break;
    }
    case kScmCallStart: {
      mutable_scm_call_start()->::perfetto::protos::ScmCallStartFtraceEvent::MergeFrom(from.scm_call_start());
      break;
    }
    case kScmCallEnd: {
      mutable_scm_call_end()->::perfetto::protos::ScmCallEndFtraceEvent::MergeFrom(from.scm_call_end());
      break;
    }
    case kGpuMemTotal: {
      mutable_gpu_mem_total()->::perfetto::protos::GpuMemTotalFtraceEvent::MergeFrom(from.gpu_mem_total());
      break;
    }
    case kThermalTemperature: {
      mutable_thermal_temperature()->::perfetto::protos::ThermalTemperatureFtraceEvent::MergeFrom(from.thermal_temperature());
      break;
    }
    case kCdevUpdate: {
      mutable_cdev_update()->::perfetto::protos::CdevUpdateFtraceEvent::MergeFrom(from.cdev_update());
      break;
    }
    case kCpuhpExit: {
      mutable_cpuhp_exit()->::perfetto::protos::CpuhpExitFtraceEvent::MergeFrom(from.cpuhp_exit());
      break;
    }
    case kCpuhpMultiEnter: {
      mutable_cpuhp_multi_enter()->::perfetto::protos::CpuhpMultiEnterFtraceEvent::MergeFrom(from.cpuhp_multi_enter());
      break;
    }
    case kCpuhpEnter: {
      mutable_cpuhp_enter()->::perfetto::protos::CpuhpEnterFtraceEvent::MergeFrom(from.cpuhp_enter());
      break;
    }
    case kCpuhpLatency: {
      mutable_cpuhp_latency()->::perfetto::protos::CpuhpLatencyFtraceEvent::MergeFrom(from.cpuhp_latency());
      break;
    }
    case kFastrpcDmaStat: {
      mutable_fastrpc_dma_stat()->::perfetto::protos::FastrpcDmaStatFtraceEvent::MergeFrom(from.fastrpc_dma_stat());
      break;
    }
    case kDpuTracingMarkWrite: {
      mutable_dpu_tracing_mark_write()->::perfetto::protos::DpuTracingMarkWriteFtraceEvent::MergeFrom(from.dpu_tracing_mark_write());
      break;
    }
    case kG2DTracingMarkWrite: {
      mutable_g2d_tracing_mark_write()->::perfetto::protos::G2dTracingMarkWriteFtraceEvent::MergeFrom(from.g2d_tracing_mark_write());
      break;
    }
    case kMaliTracingMarkWrite: {
      mutable_mali_tracing_mark_write()->::perfetto::protos::MaliTracingMarkWriteFtraceEvent::MergeFrom(from.mali_tracing_mark_write());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEvent)
}

void FtraceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pid_));
  clear_has_event();
}

FtraceEvent::~FtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEvent)
  SharedDtor();
}

void FtraceEvent::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void FtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceEvent& FtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FtraceEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FtraceEvent)
  switch (event_case()) {
    case kPrint: {
      delete event_.print_;
      break;
    }
    case kSchedSwitch: {
      delete event_.sched_switch_;
      break;
    }
    case kCpuFrequency: {
      delete event_.cpu_frequency_;
      break;
    }
    case kCpuFrequencyLimits: {
      delete event_.cpu_frequency_limits_;
      break;
    }
    case kCpuIdle: {
      delete event_.cpu_idle_;
      break;
    }
    case kClockEnable: {
      delete event_.clock_enable_;
      break;
    }
    case kClockDisable: {
      delete event_.clock_disable_;
      break;
    }
    case kClockSetRate: {
      delete event_.clock_set_rate_;
      break;
    }
    case kSchedWakeup: {
      delete event_.sched_wakeup_;
      break;
    }
    case kSchedBlockedReason: {
      delete event_.sched_blocked_reason_;
      break;
    }
    case kSchedCpuHotplug: {
      delete event_.sched_cpu_hotplug_;
      break;
    }
    case kSchedWaking: {
      delete event_.sched_waking_;
      break;
    }
    case kIpiEntry: {
      delete event_.ipi_entry_;
      break;
    }
    case kIpiExit: {
      delete event_.ipi_exit_;
      break;
    }
    case kIpiRaise: {
      delete event_.ipi_raise_;
      break;
    }
    case kSoftirqEntry: {
      delete event_.softirq_entry_;
      break;
    }
    case kSoftirqExit: {
      delete event_.softirq_exit_;
      break;
    }
    case kSoftirqRaise: {
      delete event_.softirq_raise_;
      break;
    }
    case kI2CRead: {
      delete event_.i2c_read_;
      break;
    }
    case kI2CWrite: {
      delete event_.i2c_write_;
      break;
    }
    case kI2CResult: {
      delete event_.i2c_result_;
      break;
    }
    case kI2CReply: {
      delete event_.i2c_reply_;
      break;
    }
    case kSmbusRead: {
      delete event_.smbus_read_;
      break;
    }
    case kSmbusWrite: {
      delete event_.smbus_write_;
      break;
    }
    case kSmbusResult: {
      delete event_.smbus_result_;
      break;
    }
    case kSmbusReply: {
      delete event_.smbus_reply_;
      break;
    }
    case kLowmemoryKill: {
      delete event_.lowmemory_kill_;
      break;
    }
    case kIrqHandlerEntry: {
      delete event_.irq_handler_entry_;
      break;
    }
    case kIrqHandlerExit: {
      delete event_.irq_handler_exit_;
      break;
    }
    case kSyncPt: {
      delete event_.sync_pt_;
      break;
    }
    case kSyncTimeline: {
      delete event_.sync_timeline_;
      break;
    }
    case kSyncWait: {
      delete event_.sync_wait_;
      break;
    }
    case kExt4DaWriteBegin: {
      delete event_.ext4_da_write_begin_;
      break;
    }
    case kExt4DaWriteEnd: {
      delete event_.ext4_da_write_end_;
      break;
    }
    case kExt4SyncFileEnter: {
      delete event_.ext4_sync_file_enter_;
      break;
    }
    case kExt4SyncFileExit: {
      delete event_.ext4_sync_file_exit_;
      break;
    }
    case kBlockRqIssue: {
      delete event_.block_rq_issue_;
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      delete event_.mm_vmscan_direct_reclaim_begin_;
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      delete event_.mm_vmscan_direct_reclaim_end_;
      break;
    }
    case kMmVmscanKswapdWake: {
      delete event_.mm_vmscan_kswapd_wake_;
      break;
    }
    case kMmVmscanKswapdSleep: {
      delete event_.mm_vmscan_kswapd_sleep_;
      break;
    }
    case kBinderTransaction: {
      delete event_.binder_transaction_;
      break;
    }
    case kBinderTransactionReceived: {
      delete event_.binder_transaction_received_;
      break;
    }
    case kBinderSetPriority: {
      delete event_.binder_set_priority_;
      break;
    }
    case kBinderLock: {
      delete event_.binder_lock_;
      break;
    }
    case kBinderLocked: {
      delete event_.binder_locked_;
      break;
    }
    case kBinderUnlock: {
      delete event_.binder_unlock_;
      break;
    }
    case kWorkqueueActivateWork: {
      delete event_.workqueue_activate_work_;
      break;
    }
    case kWorkqueueExecuteEnd: {
      delete event_.workqueue_execute_end_;
      break;
    }
    case kWorkqueueExecuteStart: {
      delete event_.workqueue_execute_start_;
      break;
    }
    case kWorkqueueQueueWork: {
      delete event_.workqueue_queue_work_;
      break;
    }
    case kRegulatorDisable: {
      delete event_.regulator_disable_;
      break;
    }
    case kRegulatorDisableComplete: {
      delete event_.regulator_disable_complete_;
      break;
    }
    case kRegulatorEnable: {
      delete event_.regulator_enable_;
      break;
    }
    case kRegulatorEnableComplete: {
      delete event_.regulator_enable_complete_;
      break;
    }
    case kRegulatorEnableDelay: {
      delete event_.regulator_enable_delay_;
      break;
    }
    case kRegulatorSetVoltage: {
      delete event_.regulator_set_voltage_;
      break;
    }
    case kRegulatorSetVoltageComplete: {
      delete event_.regulator_set_voltage_complete_;
      break;
    }
    case kCgroupAttachTask: {
      delete event_.cgroup_attach_task_;
      break;
    }
    case kCgroupMkdir: {
      delete event_.cgroup_mkdir_;
      break;
    }
    case kCgroupRemount: {
      delete event_.cgroup_remount_;
      break;
    }
    case kCgroupRmdir: {
      delete event_.cgroup_rmdir_;
      break;
    }
    case kCgroupTransferTasks: {
      delete event_.cgroup_transfer_tasks_;
      break;
    }
    case kCgroupDestroyRoot: {
      delete event_.cgroup_destroy_root_;
      break;
    }
    case kCgroupRelease: {
      delete event_.cgroup_release_;
      break;
    }
    case kCgroupRename: {
      delete event_.cgroup_rename_;
      break;
    }
    case kCgroupSetupRoot: {
      delete event_.cgroup_setup_root_;
      break;
    }
    case kMdpCmdKickoff: {
      delete event_.mdp_cmd_kickoff_;
      break;
    }
    case kMdpCommit: {
      delete event_.mdp_commit_;
      break;
    }
    case kMdpPerfSetOt: {
      delete event_.mdp_perf_set_ot_;
      break;
    }
    case kMdpSsppChange: {
      delete event_.mdp_sspp_change_;
      break;
    }
    case kTracingMarkWrite: {
      delete event_.tracing_mark_write_;
      break;
    }
    case kMdpCmdPingpongDone: {
      delete event_.mdp_cmd_pingpong_done_;
      break;
    }
    case kMdpCompareBw: {
      delete event_.mdp_compare_bw_;
      break;
    }
    case kMdpPerfSetPanicLuts: {
      delete event_.mdp_perf_set_panic_luts_;
      break;
    }
    case kMdpSsppSet: {
      delete event_.mdp_sspp_set_;
      break;
    }
    case kMdpCmdReadptrDone: {
      delete event_.mdp_cmd_readptr_done_;
      break;
    }
    case kMdpMisrCrc: {
      delete event_.mdp_misr_crc_;
      break;
    }
    case kMdpPerfSetQosLuts: {
      delete event_.mdp_perf_set_qos_luts_;
      break;
    }
    case kMdpTraceCounter: {
      delete event_.mdp_trace_counter_;
      break;
    }
    case kMdpCmdReleaseBw: {
      delete event_.mdp_cmd_release_bw_;
      break;
    }
    case kMdpMixerUpdate: {
      delete event_.mdp_mixer_update_;
      break;
    }
    case kMdpPerfSetWmLevels: {
      delete event_.mdp_perf_set_wm_levels_;
      break;
    }
    case kMdpVideoUnderrunDone: {
      delete event_.mdp_video_underrun_done_;
      break;
    }
    case kMdpCmdWaitPingpong: {
      delete event_.mdp_cmd_wait_pingpong_;
      break;
    }
    case kMdpPerfPrefillCalc: {
      delete event_.mdp_perf_prefill_calc_;
      break;
    }
    case kMdpPerfUpdateBus: {
      delete event_.mdp_perf_update_bus_;
      break;
    }
    case kRotatorBwAoAsContext: {
      delete event_.rotator_bw_ao_as_context_;
      break;
    }
    case kMmFilemapAddToPageCache: {
      delete event_.mm_filemap_add_to_page_cache_;
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      delete event_.mm_filemap_delete_from_page_cache_;
      break;
    }
    case kMmCompactionBegin: {
      delete event_.mm_compaction_begin_;
      break;
    }
    case kMmCompactionDeferCompaction: {
      delete event_.mm_compaction_defer_compaction_;
      break;
    }
    case kMmCompactionDeferred: {
      delete event_.mm_compaction_deferred_;
      break;
    }
    case kMmCompactionDeferReset: {
      delete event_.mm_compaction_defer_reset_;
      break;
    }
    case kMmCompactionEnd: {
      delete event_.mm_compaction_end_;
      break;
    }
    case kMmCompactionFinished: {
      delete event_.mm_compaction_finished_;
      break;
    }
    case kMmCompactionIsolateFreepages: {
      delete event_.mm_compaction_isolate_freepages_;
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      delete event_.mm_compaction_isolate_migratepages_;
      break;
    }
    case kMmCompactionKcompactdSleep: {
      delete event_.mm_compaction_kcompactd_sleep_;
      break;
    }
    case kMmCompactionKcompactdWake: {
      delete event_.mm_compaction_kcompactd_wake_;
      break;
    }
    case kMmCompactionMigratepages: {
      delete event_.mm_compaction_migratepages_;
      break;
    }
    case kMmCompactionSuitable: {
      delete event_.mm_compaction_suitable_;
      break;
    }
    case kMmCompactionTryToCompactPages: {
      delete event_.mm_compaction_try_to_compact_pages_;
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      delete event_.mm_compaction_wakeup_kcompactd_;
      break;
    }
    case kSuspendResume: {
      delete event_.suspend_resume_;
      break;
    }
    case kSchedWakeupNew: {
      delete event_.sched_wakeup_new_;
      break;
    }
    case kBlockBioBackmerge: {
      delete event_.block_bio_backmerge_;
      break;
    }
    case kBlockBioBounce: {
      delete event_.block_bio_bounce_;
      break;
    }
    case kBlockBioComplete: {
      delete event_.block_bio_complete_;
      break;
    }
    case kBlockBioFrontmerge: {
      delete event_.block_bio_frontmerge_;
      break;
    }
    case kBlockBioQueue: {
      delete event_.block_bio_queue_;
      break;
    }
    case kBlockBioRemap: {
      delete event_.block_bio_remap_;
      break;
    }
    case kBlockDirtyBuffer: {
      delete event_.block_dirty_buffer_;
      break;
    }
    case kBlockGetrq: {
      delete event_.block_getrq_;
      break;
    }
    case kBlockPlug: {
      delete event_.block_plug_;
      break;
    }
    case kBlockRqAbort: {
      delete event_.block_rq_abort_;
      break;
    }
    case kBlockRqComplete: {
      delete event_.block_rq_complete_;
      break;
    }
    case kBlockRqInsert: {
      delete event_.block_rq_insert_;
      break;
    }
    case kBlockRqRemap: {
      delete event_.block_rq_remap_;
      break;
    }
    case kBlockRqRequeue: {
      delete event_.block_rq_requeue_;
      break;
    }
    case kBlockSleeprq: {
      delete event_.block_sleeprq_;
      break;
    }
    case kBlockSplit: {
      delete event_.block_split_;
      break;
    }
    case kBlockTouchBuffer: {
      delete event_.block_touch_buffer_;
      break;
    }
    case kBlockUnplug: {
      delete event_.block_unplug_;
      break;
    }
    case kExt4AllocDaBlocks: {
      delete event_.ext4_alloc_da_blocks_;
      break;
    }
    case kExt4AllocateBlocks: {
      delete event_.ext4_allocate_blocks_;
      break;
    }
    case kExt4AllocateInode: {
      delete event_.ext4_allocate_inode_;
      break;
    }
    case kExt4BeginOrderedTruncate: {
      delete event_.ext4_begin_ordered_truncate_;
      break;
    }
    case kExt4CollapseRange: {
      delete event_.ext4_collapse_range_;
      break;
    }
    case kExt4DaReleaseSpace: {
      delete event_.ext4_da_release_space_;
      break;
    }
    case kExt4DaReserveSpace: {
      delete event_.ext4_da_reserve_space_;
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      delete event_.ext4_da_update_reserve_space_;
      break;
    }
    case kExt4DaWritePages: {
      delete event_.ext4_da_write_pages_;
      break;
    }
    case kExt4DaWritePagesExtent: {
      delete event_.ext4_da_write_pages_extent_;
      break;
    }
    case kExt4DirectIOEnter: {
      delete event_.ext4_direct_io_enter_;
      break;
    }
    case kExt4DirectIOExit: {
      delete event_.ext4_direct_io_exit_;
      break;
    }
    case kExt4DiscardBlocks: {
      delete event_.ext4_discard_blocks_;
      break;
    }
    case kExt4DiscardPreallocations: {
      delete event_.ext4_discard_preallocations_;
      break;
    }
    case kExt4DropInode: {
      delete event_.ext4_drop_inode_;
      break;
    }
    case kExt4EsCacheExtent: {
      delete event_.ext4_es_cache_extent_;
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      delete event_.ext4_es_find_delayed_extent_range_enter_;
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      delete event_.ext4_es_find_delayed_extent_range_exit_;
      break;
    }
    case kExt4EsInsertExtent: {
      delete event_.ext4_es_insert_extent_;
      break;
    }
    case kExt4EsLookupExtentEnter: {
      delete event_.ext4_es_lookup_extent_enter_;
      break;
    }
    case kExt4EsLookupExtentExit: {
      delete event_.ext4_es_lookup_extent_exit_;
      break;
    }
    case kExt4EsRemoveExtent: {
      delete event_.ext4_es_remove_extent_;
      break;
    }
    case kExt4EsShrink: {
      delete event_.ext4_es_shrink_;
      break;
    }
    case kExt4EsShrinkCount: {
      delete event_.ext4_es_shrink_count_;
      break;
    }
    case kExt4EsShrinkScanEnter: {
      delete event_.ext4_es_shrink_scan_enter_;
      break;
    }
    case kExt4EsShrinkScanExit: {
      delete event_.ext4_es_shrink_scan_exit_;
      break;
    }
    case kExt4EvictInode: {
      delete event_.ext4_evict_inode_;
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      delete event_.ext4_ext_convert_to_initialized_enter_;
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      delete event_.ext4_ext_convert_to_initialized_fastpath_;
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      delete event_.ext4_ext_handle_unwritten_extents_;
      break;
    }
    case kExt4ExtInCache: {
      delete event_.ext4_ext_in_cache_;
      break;
    }
    case kExt4ExtLoadExtent: {
      delete event_.ext4_ext_load_extent_;
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      delete event_.ext4_ext_map_blocks_enter_;
      break;
    }
    case kExt4ExtMapBlocksExit: {
      delete event_.ext4_ext_map_blocks_exit_;
      break;
    }
    case kExt4ExtPutInCache: {
      delete event_.ext4_ext_put_in_cache_;
      break;
    }
    case kExt4ExtRemoveSpace: {
      delete event_.ext4_ext_remove_space_;
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      delete event_.ext4_ext_remove_space_done_;
      break;
    }
    case kExt4ExtRmIdx: {
      delete event_.ext4_ext_rm_idx_;
      break;
    }
    case kExt4ExtRmLeaf: {
      delete event_.ext4_ext_rm_leaf_;
      break;
    }
    case kExt4ExtShowExtent: {
      delete event_.ext4_ext_show_extent_;
      break;
    }
    case kExt4FallocateEnter: {
      delete event_.ext4_fallocate_enter_;
      break;
    }
    case kExt4FallocateExit: {
      delete event_.ext4_fallocate_exit_;
      break;
    }
    case kExt4FindDelallocRange: {
      delete event_.ext4_find_delalloc_range_;
      break;
    }
    case kExt4Forget: {
      delete event_.ext4_forget_;
      break;
    }
    case kExt4FreeBlocks: {
      delete event_.ext4_free_blocks_;
      break;
    }
    case kExt4FreeInode: {
      delete event_.ext4_free_inode_;
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      delete event_.ext4_get_implied_cluster_alloc_exit_;
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      delete event_.ext4_get_reserved_cluster_alloc_;
      break;
    }
    case kExt4IndMapBlocksEnter: {
      delete event_.ext4_ind_map_blocks_enter_;
      break;
    }
    case kExt4IndMapBlocksExit: {
      delete event_.ext4_ind_map_blocks_exit_;
      break;
    }
    case kExt4InsertRange: {
      delete event_.ext4_insert_range_;
      break;
    }
    case kExt4Invalidatepage: {
      delete event_.ext4_invalidatepage_;
      break;
    }
    case kExt4JournalStart: {
      delete event_.ext4_journal_start_;
      break;
    }
    case kExt4JournalStartReserved: {
      delete event_.ext4_journal_start_reserved_;
      break;
    }
    case kExt4JournalledInvalidatepage: {
      delete event_.ext4_journalled_invalidatepage_;
      break;
    }
    case kExt4JournalledWriteEnd: {
      delete event_.ext4_journalled_write_end_;
      break;
    }
    case kExt4LoadInode: {
      delete event_.ext4_load_inode_;
      break;
    }
    case kExt4LoadInodeBitmap: {
      delete event_.ext4_load_inode_bitmap_;
      break;
    }
    case kExt4MarkInodeDirty: {
      delete event_.ext4_mark_inode_dirty_;
      break;
    }
    case kExt4MbBitmapLoad: {
      delete event_.ext4_mb_bitmap_load_;
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      delete event_.ext4_mb_buddy_bitmap_load_;
      break;
    }
    case kExt4MbDiscardPreallocations: {
      delete event_.ext4_mb_discard_preallocations_;
      break;
    }
    case kExt4MbNewGroupPa: {
      delete event_.ext4_mb_new_group_pa_;
      break;
    }
    case kExt4MbNewInodePa: {
      delete event_.ext4_mb_new_inode_pa_;
      break;
    }
    case kExt4MbReleaseGroupPa: {
      delete event_.ext4_mb_release_group_pa_;
      break;
    }
    case kExt4MbReleaseInodePa: {
      delete event_.ext4_mb_release_inode_pa_;
      break;
    }
    case kExt4MballocAlloc: {
      delete event_.ext4_mballoc_alloc_;
      break;
    }
    case kExt4MballocDiscard: {
      delete event_.ext4_mballoc_discard_;
      break;
    }
    case kExt4MballocFree: {
      delete event_.ext4_mballoc_free_;
      break;
    }
    case kExt4MballocPrealloc: {
      delete event_.ext4_mballoc_prealloc_;
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      delete event_.ext4_other_inode_update_time_;
      break;
    }
    case kExt4PunchHole: {
      delete event_.ext4_punch_hole_;
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      delete event_.ext4_read_block_bitmap_load_;
      break;
    }
    case kExt4Readpage: {
      delete event_.ext4_readpage_;
      break;
    }
    case kExt4Releasepage: {
      delete event_.ext4_releasepage_;
      break;
    }
    case kExt4RemoveBlocks: {
      delete event_.ext4_remove_blocks_;
      break;
    }
    case kExt4RequestBlocks: {
      delete event_.ext4_request_blocks_;
      break;
    }
    case kExt4RequestInode: {
      delete event_.ext4_request_inode_;
      break;
    }
    case kExt4SyncFs: {
      delete event_.ext4_sync_fs_;
      break;
    }
    case kExt4TrimAllFree: {
      delete event_.ext4_trim_all_free_;
      break;
    }
    case kExt4TrimExtent: {
      delete event_.ext4_trim_extent_;
      break;
    }
    case kExt4TruncateEnter: {
      delete event_.ext4_truncate_enter_;
      break;
    }
    case kExt4TruncateExit: {
      delete event_.ext4_truncate_exit_;
      break;
    }
    case kExt4UnlinkEnter: {
      delete event_.ext4_unlink_enter_;
      break;
    }
    case kExt4UnlinkExit: {
      delete event_.ext4_unlink_exit_;
      break;
    }
    case kExt4WriteBegin: {
      delete event_.ext4_write_begin_;
      break;
    }
    case kExt4WriteEnd: {
      delete event_.ext4_write_end_;
      break;
    }
    case kExt4Writepage: {
      delete event_.ext4_writepage_;
      break;
    }
    case kExt4Writepages: {
      delete event_.ext4_writepages_;
      break;
    }
    case kExt4WritepagesResult: {
      delete event_.ext4_writepages_result_;
      break;
    }
    case kExt4ZeroRange: {
      delete event_.ext4_zero_range_;
      break;
    }
    case kTaskNewtask: {
      delete event_.task_newtask_;
      break;
    }
    case kTaskRename: {
      delete event_.task_rename_;
      break;
    }
    case kSchedProcessExec: {
      delete event_.sched_process_exec_;
      break;
    }
    case kSchedProcessExit: {
      delete event_.sched_process_exit_;
      break;
    }
    case kSchedProcessFork: {
      delete event_.sched_process_fork_;
      break;
    }
    case kSchedProcessFree: {
      delete event_.sched_process_free_;
      break;
    }
    case kSchedProcessHang: {
      delete event_.sched_process_hang_;
      break;
    }
    case kSchedProcessWait: {
      delete event_.sched_process_wait_;
      break;
    }
    case kF2FsDoSubmitBio: {
      delete event_.f2fs_do_submit_bio_;
      break;
    }
    case kF2FsEvictInode: {
      delete event_.f2fs_evict_inode_;
      break;
    }
    case kF2FsFallocate: {
      delete event_.f2fs_fallocate_;
      break;
    }
    case kF2FsGetDataBlock: {
      delete event_.f2fs_get_data_block_;
      break;
    }
    case kF2FsGetVictim: {
      delete event_.f2fs_get_victim_;
      break;
    }
    case kF2FsIget: {
      delete event_.f2fs_iget_;
      break;
    }
    case kF2FsIgetExit: {
      delete event_.f2fs_iget_exit_;
      break;
    }
    case kF2FsNewInode: {
      delete event_.f2fs_new_inode_;
      break;
    }
    case kF2FsReadpage: {
      delete event_.f2fs_readpage_;
      break;
    }
    case kF2FsReserveNewBlock: {
      delete event_.f2fs_reserve_new_block_;
      break;
    }
    case kF2FsSetPageDirty: {
      delete event_.f2fs_set_page_dirty_;
      break;
    }
    case kF2FsSubmitWritePage: {
      delete event_.f2fs_submit_write_page_;
      break;
    }
    case kF2FsSyncFileEnter: {
      delete event_.f2fs_sync_file_enter_;
      break;
    }
    case kF2FsSyncFileExit: {
      delete event_.f2fs_sync_file_exit_;
      break;
    }
    case kF2FsSyncFs: {
      delete event_.f2fs_sync_fs_;
      break;
    }
    case kF2FsTruncate: {
      delete event_.f2fs_truncate_;
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      delete event_.f2fs_truncate_blocks_enter_;
      break;
    }
    case kF2FsTruncateBlocksExit: {
      delete event_.f2fs_truncate_blocks_exit_;
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      delete event_.f2fs_truncate_data_blocks_range_;
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      delete event_.f2fs_truncate_inode_blocks_enter_;
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      delete event_.f2fs_truncate_inode_blocks_exit_;
      break;
    }
    case kF2FsTruncateNode: {
      delete event_.f2fs_truncate_node_;
      break;
    }
    case kF2FsTruncateNodesEnter: {
      delete event_.f2fs_truncate_nodes_enter_;
      break;
    }
    case kF2FsTruncateNodesExit: {
      delete event_.f2fs_truncate_nodes_exit_;
      break;
    }
    case kF2FsTruncatePartialNodes: {
      delete event_.f2fs_truncate_partial_nodes_;
      break;
    }
    case kF2FsUnlinkEnter: {
      delete event_.f2fs_unlink_enter_;
      break;
    }
    case kF2FsUnlinkExit: {
      delete event_.f2fs_unlink_exit_;
      break;
    }
    case kF2FsVmPageMkwrite: {
      delete event_.f2fs_vm_page_mkwrite_;
      break;
    }
    case kF2FsWriteBegin: {
      delete event_.f2fs_write_begin_;
      break;
    }
    case kF2FsWriteCheckpoint: {
      delete event_.f2fs_write_checkpoint_;
      break;
    }
    case kF2FsWriteEnd: {
      delete event_.f2fs_write_end_;
      break;
    }
    case kAllocPagesIommuEnd: {
      delete event_.alloc_pages_iommu_end_;
      break;
    }
    case kAllocPagesIommuFail: {
      delete event_.alloc_pages_iommu_fail_;
      break;
    }
    case kAllocPagesIommuStart: {
      delete event_.alloc_pages_iommu_start_;
      break;
    }
    case kAllocPagesSysEnd: {
      delete event_.alloc_pages_sys_end_;
      break;
    }
    case kAllocPagesSysFail: {
      delete event_.alloc_pages_sys_fail_;
      break;
    }
    case kAllocPagesSysStart: {
      delete event_.alloc_pages_sys_start_;
      break;
    }
    case kDmaAllocContiguousRetry: {
      delete event_.dma_alloc_contiguous_retry_;
      break;
    }
    case kIommuMapRange: {
      delete event_.iommu_map_range_;
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      delete event_.iommu_sec_ptbl_map_range_end_;
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      delete event_.iommu_sec_ptbl_map_range_start_;
      break;
    }
    case kIonAllocBufferEnd: {
      delete event_.ion_alloc_buffer_end_;
      break;
    }
    case kIonAllocBufferFail: {
      delete event_.ion_alloc_buffer_fail_;
      break;
    }
    case kIonAllocBufferFallback: {
      delete event_.ion_alloc_buffer_fallback_;
      break;
    }
    case kIonAllocBufferStart: {
      delete event_.ion_alloc_buffer_start_;
      break;
    }
    case kIonCpAllocRetry: {
      delete event_.ion_cp_alloc_retry_;
      break;
    }
    case kIonCpSecureBufferEnd: {
      delete event_.ion_cp_secure_buffer_end_;
      break;
    }
    case kIonCpSecureBufferStart: {
      delete event_.ion_cp_secure_buffer_start_;
      break;
    }
    case kIonPrefetching: {
      delete event_.ion_prefetching_;
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      delete event_.ion_secure_cma_add_to_pool_end_;
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      delete event_.ion_secure_cma_add_to_pool_start_;
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      delete event_.ion_secure_cma_allocate_end_;
      break;
    }
    case kIonSecureCmaAllocateStart: {
      delete event_.ion_secure_cma_allocate_start_;
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      delete event_.ion_secure_cma_shrink_pool_end_;
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      delete event_.ion_secure_cma_shrink_pool_start_;
      break;
    }
    case kKfree: {
      delete event_.kfree_;
      break;
    }
    case kKmalloc: {
      delete event_.kmalloc_;
      break;
    }
    case kKmallocNode: {
      delete event_.kmalloc_node_;
      break;
    }
    case kKmemCacheAlloc: {
      delete event_.kmem_cache_alloc_;
      break;
    }
    case kKmemCacheAllocNode: {
      delete event_.kmem_cache_alloc_node_;
      break;
    }
    case kKmemCacheFree: {
      delete event_.kmem_cache_free_;
      break;
    }
    case kMigratePagesEnd: {
      delete event_.migrate_pages_end_;
      break;
    }
    case kMigratePagesStart: {
      delete event_.migrate_pages_start_;
      break;
    }
    case kMigrateRetry: {
      delete event_.migrate_retry_;
      break;
    }
    case kMmPageAlloc: {
      delete event_.mm_page_alloc_;
      break;
    }
    case kMmPageAllocExtfrag: {
      delete event_.mm_page_alloc_extfrag_;
      break;
    }
    case kMmPageAllocZoneLocked: {
      delete event_.mm_page_alloc_zone_locked_;
      break;
    }
    case kMmPageFree: {
      delete event_.mm_page_free_;
      break;
    }
    case kMmPageFreeBatched: {
      delete event_.mm_page_free_batched_;
      break;
    }
    case kMmPagePcpuDrain: {
      delete event_.mm_page_pcpu_drain_;
      break;
    }
    case kRssStat: {
      delete event_.rss_stat_;
      break;
    }
    case kIonHeapShrink: {
      delete event_.ion_heap_shrink_;
      break;
    }
    case kIonHeapGrow: {
      delete event_.ion_heap_grow_;
      break;
    }
    case kFenceInit: {
      delete event_.fence_init_;
      break;
    }
    case kFenceDestroy: {
      delete event_.fence_destroy_;
      break;
    }
    case kFenceEnableSignal: {
      delete event_.fence_enable_signal_;
      break;
    }
    case kFenceSignaled: {
      delete event_.fence_signaled_;
      break;
    }
    case kClkEnable: {
      delete event_.clk_enable_;
      break;
    }
    case kClkDisable: {
      delete event_.clk_disable_;
      break;
    }
    case kClkSetRate: {
      delete event_.clk_set_rate_;
      break;
    }
    case kBinderTransactionAllocBuf: {
      delete event_.binder_transaction_alloc_buf_;
      break;
    }
    case kSignalDeliver: {
      delete event_.signal_deliver_;
      break;
    }
    case kSignalGenerate: {
      delete event_.signal_generate_;
      break;
    }
    case kOomScoreAdjUpdate: {
      delete event_.oom_score_adj_update_;
      break;
    }
    case kGeneric: {
      delete event_.generic_;
      break;
    }
    case kMmEventRecord: {
      delete event_.mm_event_record_;
      break;
    }
    case kSysEnter: {
      delete event_.sys_enter_;
      break;
    }
    case kSysExit: {
      delete event_.sys_exit_;
      break;
    }
    case kZero: {
      delete event_.zero_;
      break;
    }
    case kGpuFrequency: {
      delete event_.gpu_frequency_;
      break;
    }
    case kSdeTracingMarkWrite: {
      delete event_.sde_tracing_mark_write_;
      break;
    }
    case kMarkVictim: {
      delete event_.mark_victim_;
      break;
    }
    case kIonStat: {
      delete event_.ion_stat_;
      break;
    }
    case kIonBufferCreate: {
      delete event_.ion_buffer_create_;
      break;
    }
    case kIonBufferDestroy: {
      delete event_.ion_buffer_destroy_;
      break;
    }
    case kScmCallStart: {
      delete event_.scm_call_start_;
      break;
    }
    case kScmCallEnd: {
      delete event_.scm_call_end_;
      break;
    }
    case kGpuMemTotal: {
      delete event_.gpu_mem_total_;
      break;
    }
    case kThermalTemperature: {
      delete event_.thermal_temperature_;
      break;
    }
    case kCdevUpdate: {
      delete event_.cdev_update_;
      break;
    }
    case kCpuhpExit: {
      delete event_.cpuhp_exit_;
      break;
    }
    case kCpuhpMultiEnter: {
      delete event_.cpuhp_multi_enter_;
      break;
    }
    case kCpuhpEnter: {
      delete event_.cpuhp_enter_;
      break;
    }
    case kCpuhpLatency: {
      delete event_.cpuhp_latency_;
      break;
    }
    case kFastrpcDmaStat: {
      delete event_.fastrpc_dma_stat_;
      break;
    }
    case kDpuTracingMarkWrite: {
      delete event_.dpu_tracing_mark_write_;
      break;
    }
    case kG2DTracingMarkWrite: {
      delete event_.g2d_tracing_mark_write_;
      break;
    }
    case kMaliTracingMarkWrite: {
      delete event_.mali_tracing_mark_write_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void FtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(pid_));
  }
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PrintFtraceEvent print = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_print(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sched_switch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_cpu_frequency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_cpu_frequency_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_cpu_idle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_clock_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_clock_disable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_clock_set_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_sched_wakeup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_sched_blocked_reason(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_sched_cpu_hotplug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_sched_waking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_ipi_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_ipi_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_ipi_raise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_softirq_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_softirq_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_softirq_raise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_i2c_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_i2c_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_i2c_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_i2c_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_smbus_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_smbus_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_smbus_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_smbus_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_lowmemory_kill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_irq_handler_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_irq_handler_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_sync_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sync_timeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sync_wait(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_write_begin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_write_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ext4_sync_file_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_ext4_sync_file_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_block_rq_issue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mm_vmscan_direct_reclaim_begin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_mm_vmscan_direct_reclaim_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_mm_vmscan_kswapd_wake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_mm_vmscan_kswapd_sleep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_binder_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_binder_transaction_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_binder_set_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_binder_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_binder_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_binder_unlock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_workqueue_activate_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_workqueue_execute_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_workqueue_execute_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_workqueue_queue_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_regulator_disable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_regulator_disable_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_regulator_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_regulator_enable_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_regulator_enable_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_regulator_set_voltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_regulator_set_voltage_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cgroup_attach_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_cgroup_mkdir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cgroup_remount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_cgroup_rmdir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_cgroup_transfer_tasks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_cgroup_destroy_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_cgroup_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_cgroup_rename(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_cgroup_setup_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_mdp_cmd_kickoff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_mdp_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mdp_perf_set_ot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_mdp_sspp_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_mdp_cmd_pingpong_done(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_mdp_compare_bw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_mdp_perf_set_panic_luts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_mdp_sspp_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_mdp_cmd_readptr_done(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_mdp_misr_crc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_mdp_perf_set_qos_luts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_mdp_trace_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_mdp_cmd_release_bw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_mdp_mixer_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_mdp_perf_set_wm_levels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_mdp_video_underrun_done(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_mdp_cmd_wait_pingpong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_mdp_perf_prefill_calc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_mdp_perf_update_bus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_rotator_bw_ao_as_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mm_filemap_add_to_page_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mm_filemap_delete_from_page_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_begin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_defer_compaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_deferred(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_defer_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_finished(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_isolate_freepages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_isolate_migratepages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_kcompactd_sleep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_kcompactd_wake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_migratepages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_suitable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_try_to_compact_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_mm_compaction_wakeup_kcompactd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_suspend_resume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_sched_wakeup_new(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_block_bio_backmerge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_block_bio_bounce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_block_bio_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_block_bio_frontmerge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_block_bio_queue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_block_bio_remap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_block_dirty_buffer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_block_getrq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_block_plug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_block_rq_abort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_block_rq_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_block_rq_insert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_block_rq_remap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_block_rq_requeue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_block_sleeprq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_block_split(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_block_touch_buffer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_block_unplug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ext4_alloc_da_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ext4_allocate_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ext4_allocate_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ext4_begin_ordered_truncate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ext4_collapse_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_release_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_reserve_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_update_reserve_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_write_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_ext4_da_write_pages_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_ext4_direct_io_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_ext4_direct_io_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_ext4_discard_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_ext4_discard_preallocations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_ext4_drop_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_cache_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_find_delayed_extent_range_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_find_delayed_extent_range_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_insert_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_lookup_extent_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_lookup_extent_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_remove_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_shrink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_shrink_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_shrink_scan_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_ext4_es_shrink_scan_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_ext4_evict_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_convert_to_initialized_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_convert_to_initialized_fastpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_handle_unwritten_extents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_in_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_load_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_map_blocks_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_map_blocks_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_put_in_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_remove_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_remove_space_done(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_rm_idx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_rm_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_ext4_ext_show_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_ext4_fallocate_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_ext4_fallocate_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_ext4_find_delalloc_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_ext4_forget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_ext4_free_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_ext4_free_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_ext4_get_implied_cluster_alloc_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_ext4_get_reserved_cluster_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_ext4_ind_map_blocks_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_ext4_ind_map_blocks_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_ext4_insert_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_ext4_invalidatepage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_ext4_journal_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_ext4_journal_start_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_ext4_journalled_invalidatepage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_ext4_journalled_write_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_ext4_load_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_ext4_load_inode_bitmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_ext4_mark_inode_dirty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_bitmap_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_buddy_bitmap_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_discard_preallocations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_new_group_pa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_new_inode_pa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_release_group_pa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ext4_mb_release_inode_pa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ext4_mballoc_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ext4_mballoc_discard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ext4_mballoc_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ext4_mballoc_prealloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_ext4_other_inode_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_ext4_punch_hole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_ext4_read_block_bitmap_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_ext4_readpage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_ext4_releasepage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_ext4_remove_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_ext4_request_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_ext4_request_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_ext4_sync_fs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_ext4_trim_all_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_ext4_trim_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_ext4_truncate_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_ext4_truncate_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_ext4_unlink_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_ext4_unlink_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_ext4_write_begin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ext4_write_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ext4_writepage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ext4_writepages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
      case 233:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ext4_writepages_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
      case 234:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ext4_zero_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
      case 235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_task_newtask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
      case 236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_task_rename(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
      case 237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_sched_process_exec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
      case 238:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_sched_process_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
      case 239:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_sched_process_fork(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
      case 240:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_sched_process_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
      case 241:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_sched_process_hang(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
      case 242:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_sched_process_wait(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
      case 243:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_f2fs_do_submit_bio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
      case 244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_f2fs_evict_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
      case 245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_f2fs_fallocate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
      case 246:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_f2fs_get_data_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
      case 247:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_f2fs_get_victim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
      case 248:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_f2fs_iget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
      case 249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_f2fs_iget_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
      case 250:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_f2fs_new_inode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
      case 251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_f2fs_readpage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
      case 252:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_f2fs_reserve_new_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
      case 253:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_f2fs_set_page_dirty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_f2fs_submit_write_page(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_f2fs_sync_file_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
      case 256:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_f2fs_sync_file_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
      case 257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_f2fs_sync_fs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
      case 258:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
      case 259:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_blocks_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
      case 260:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_blocks_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
      case 261:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_data_blocks_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_inode_blocks_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
      case 263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_inode_blocks_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
      case 264:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
      case 265:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_nodes_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
      case 266:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_nodes_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
      case 267:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_f2fs_truncate_partial_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
      case 268:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_f2fs_unlink_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
      case 269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_f2fs_unlink_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
      case 270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_f2fs_vm_page_mkwrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
      case 271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_f2fs_write_begin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
      case 272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_f2fs_write_checkpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
      case 273:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_f2fs_write_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
      case 274:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_alloc_pages_iommu_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
      case 275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_alloc_pages_iommu_fail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
      case 276:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_alloc_pages_iommu_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
      case 277:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_alloc_pages_sys_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
      case 278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_alloc_pages_sys_fail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
      case 279:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_alloc_pages_sys_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
      case 280:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_dma_alloc_contiguous_retry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
      case 281:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_iommu_map_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
      case 282:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_iommu_sec_ptbl_map_range_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
      case 283:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_iommu_sec_ptbl_map_range_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
      case 284:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_ion_alloc_buffer_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
      case 285:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_ion_alloc_buffer_fail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
      case 286:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_ion_alloc_buffer_fallback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
      case 287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_ion_alloc_buffer_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_ion_cp_alloc_retry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
      case 289:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ion_cp_secure_buffer_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
      case 290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ion_cp_secure_buffer_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
      case 291:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ion_prefetching(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
      case 292:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ion_secure_cma_add_to_pool_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
      case 293:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_ion_secure_cma_add_to_pool_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
      case 294:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ion_secure_cma_allocate_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
      case 295:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ion_secure_cma_allocate_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
      case 296:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ion_secure_cma_shrink_pool_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
      case 297:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ion_secure_cma_shrink_pool_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.KfreeFtraceEvent kfree = 298;
      case 298:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_kfree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
      case 299:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_kmalloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_kmalloc_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_kmem_cache_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_kmem_cache_alloc_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_kmem_cache_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_migrate_pages_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_migrate_pages_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_migrate_retry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_mm_page_alloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_mm_page_alloc_extfrag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_mm_page_alloc_zone_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_mm_page_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_mm_page_free_batched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_mm_page_pcpu_drain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_rss_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
      case 314:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_ion_heap_shrink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
      case 315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_ion_heap_grow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_fence_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
      case 317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_fence_destroy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_fence_enable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
      case 319:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_fence_signaled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_clk_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_clk_disable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_clk_set_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_binder_transaction_alloc_buf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_signal_deliver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
      case 325:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_signal_generate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_oom_score_adj_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GenericFtraceEvent generic = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_generic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
      case 328:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_mm_event_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
      case 329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_sys_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_sys_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ZeroFtraceEvent zero = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_zero(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_gpu_frequency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_sde_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
      case 334:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mark_victim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_ion_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_ion_buffer_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
      case 337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_ion_buffer_destroy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
      case 338:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_scm_call_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
      case 339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_scm_call_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
      case 340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_gpu_mem_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
      case 341:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_thermal_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
      case 342:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_cdev_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
      case 343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_cpuhp_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
      case 344:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_cpuhp_multi_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
      case 345:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_cpuhp_enter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
      case 346:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_cpuhp_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
      case 347:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_fastrpc_dma_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
      case 348:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_dpu_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
      case 349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_g2d_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_mali_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PrintFtraceEvent print = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_print()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_switch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_frequency_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_idle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clock_enable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clock_disable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clock_set_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_wakeup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_blocked_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_cpu_hotplug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_waking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ipi_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ipi_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ipi_raise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_softirq_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_softirq_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_softirq_raise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_i2c_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_i2c_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_i2c_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_i2c_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smbus_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smbus_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smbus_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smbus_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lowmemory_kill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_irq_handler_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_irq_handler_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_pt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_timeline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_wait()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_write_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_write_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_sync_file_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_sync_file_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_rq_issue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_vmscan_direct_reclaim_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_vmscan_direct_reclaim_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_vmscan_kswapd_wake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_vmscan_kswapd_sleep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_transaction_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_set_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_unlock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_workqueue_activate_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_workqueue_execute_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_workqueue_execute_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_workqueue_queue_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
      case 60: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_disable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
      case 61: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_disable_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
      case 62: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_enable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
      case 63: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_enable_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
      case 64: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_enable_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
      case 65: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (522 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_set_voltage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
      case 66: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regulator_set_voltage_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
      case 67: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_attach_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
      case 68: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_mkdir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_remount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_rmdir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
      case 71: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_transfer_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
      case 72: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_destroy_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_release()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_rename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
      case 75: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cgroup_setup_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
      case 76: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_cmd_kickoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
      case 77: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
      case 78: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_perf_set_ot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
      case 79: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_sspp_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
      case 80: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tracing_mark_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
      case 81: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_cmd_pingpong_done()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
      case 82: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_compare_bw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
      case 83: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_perf_set_panic_luts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
      case 84: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_sspp_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
      case 85: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_cmd_readptr_done()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
      case 86: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_misr_crc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
      case 87: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_perf_set_qos_luts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
      case 88: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_trace_counter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
      case 89: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_cmd_release_bw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
      case 90: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_mixer_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
      case 91: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_perf_set_wm_levels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
      case 92: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (738 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_video_underrun_done()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
      case 93: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_cmd_wait_pingpong()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
      case 94: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (754 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_perf_prefill_calc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
      case 95: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (762 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdp_perf_update_bus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
      case 96: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (770 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotator_bw_ao_as_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
      case 97: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (778 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_filemap_add_to_page_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
      case 98: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (786 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_filemap_delete_from_page_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
      case 99: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_defer_compaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_deferred()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_defer_reset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_finished()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_isolate_freepages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_isolate_migratepages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_kcompactd_sleep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
      case 108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_kcompactd_wake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
      case 109: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (874 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_migratepages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_suitable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
      case 111: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_try_to_compact_pages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
      case 112: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_compaction_wakeup_kcompactd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
      case 113: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (906 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_suspend_resume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
      case 114: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_wakeup_new()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
      case 115: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (922 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_bio_backmerge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
      case 116: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (930 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_bio_bounce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
      case 117: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (938 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_bio_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_bio_frontmerge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
      case 119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_bio_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
      case 120: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_bio_remap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
      case 121: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (970 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_dirty_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
      case 122: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_getrq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
      case 123: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_plug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
      case 124: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (994 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_rq_abort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
      case 125: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_rq_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
      case 126: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_rq_insert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
      case 128: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_rq_remap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
      case 129: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_rq_requeue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
      case 130: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_sleeprq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
      case 131: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
      case 132: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1058 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_touch_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
      case 133: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1066 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_unplug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
      case 134: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1074 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_alloc_da_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
      case 135: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1082 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_allocate_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
      case 136: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1090 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_allocate_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
      case 137: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1098 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_begin_ordered_truncate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
      case 138: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_collapse_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
      case 139: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_release_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
      case 140: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_reserve_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
      case 141: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_update_reserve_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
      case 142: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_write_pages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
      case 143: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_da_write_pages_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
      case 144: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_direct_io_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
      case 145: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_direct_io_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
      case 146: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_discard_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
      case 147: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_discard_preallocations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
      case 148: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_drop_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
      case 149: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_cache_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
      case 150: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_find_delayed_extent_range_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
      case 151: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_find_delayed_extent_range_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
      case 152: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_insert_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
      case 153: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_lookup_extent_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
      case 154: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_lookup_extent_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
      case 155: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_remove_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
      case 156: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_shrink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
      case 157: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_shrink_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
      case 158: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_shrink_scan_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
      case 159: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_es_shrink_scan_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
      case 160: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_evict_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
      case 161: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_convert_to_initialized_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
      case 162: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_convert_to_initialized_fastpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
      case 163: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_handle_unwritten_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
      case 164: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_in_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
      case 165: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_load_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
      case 166: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_map_blocks_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
      case 167: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_map_blocks_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
      case 168: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_put_in_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
      case 169: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_remove_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
      case 170: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_remove_space_done()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
      case 171: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_rm_idx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
      case 172: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_rm_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
      case 173: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ext_show_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
      case 174: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_fallocate_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
      case 175: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_fallocate_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
      case 176: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_find_delalloc_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
      case 177: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_forget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
      case 178: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_free_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
      case 179: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_free_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
      case 180: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_get_implied_cluster_alloc_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
      case 181: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_get_reserved_cluster_alloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
      case 182: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ind_map_blocks_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
      case 183: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_ind_map_blocks_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
      case 184: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_insert_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
      case 185: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_invalidatepage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
      case 186: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_journal_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
      case 187: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_journal_start_reserved()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
      case 188: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_journalled_invalidatepage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
      case 189: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_journalled_write_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
      case 190: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1522 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_load_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
      case 191: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_load_inode_bitmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
      case 192: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mark_inode_dirty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
      case 193: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_bitmap_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
      case 194: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_buddy_bitmap_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
      case 195: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_discard_preallocations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
      case 196: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_new_group_pa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
      case 197: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_new_inode_pa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
      case 198: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_release_group_pa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
      case 199: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mb_release_inode_pa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
      case 200: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mballoc_alloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
      case 201: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mballoc_discard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
      case 202: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mballoc_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
      case 203: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_mballoc_prealloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
      case 204: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_other_inode_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
      case 205: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_punch_hole()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
      case 206: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_read_block_bitmap_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
      case 207: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_readpage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
      case 208: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_releasepage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
      case 209: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_remove_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
      case 210: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_request_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
      case 211: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_request_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
      case 212: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_sync_fs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
      case 213: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_trim_all_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
      case 214: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_trim_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
      case 215: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_truncate_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
      case 216: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_truncate_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
      case 217: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1738 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_unlink_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
      case 218: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_unlink_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
      case 219: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1754 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_write_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
      case 230: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_write_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
      case 231: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_writepage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
      case 232: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_writepages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
      case 233: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_writepages_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
      case 234: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1874 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ext4_zero_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
      case 235: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_task_newtask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
      case 236: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_task_rename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
      case 237: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_process_exec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
      case 238: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1906 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_process_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
      case 239: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_process_fork()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
      case 240: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1922 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_process_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
      case 241: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1930 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_process_hang()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
      case 242: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1938 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sched_process_wait()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
      case 243: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_do_submit_bio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
      case 244: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_evict_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
      case 245: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_fallocate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
      case 246: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1970 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_get_data_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
      case 247: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_get_victim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
      case 248: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_iget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
      case 249: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1994 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_iget_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
      case 250: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_new_inode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
      case 251: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_readpage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
      case 252: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2018 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_reserve_new_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
      case 253: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_set_page_dirty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
      case 254: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_submit_write_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
      case 255: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_sync_file_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
      case 256: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_sync_file_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
      case 257: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2058 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_sync_fs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
      case 258: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2066 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
      case 259: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2074 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_blocks_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
      case 260: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2082 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_blocks_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
      case 261: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2090 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_data_blocks_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
      case 262: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2098 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_inode_blocks_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
      case 263: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_inode_blocks_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
      case 264: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
      case 265: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_nodes_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
      case 266: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_nodes_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
      case 267: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_truncate_partial_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
      case 268: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_unlink_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
      case 269: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_unlink_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
      case 270: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_vm_page_mkwrite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
      case 271: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_write_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
      case 272: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_write_checkpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
      case 273: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_f2fs_write_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
      case 274: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloc_pages_iommu_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
      case 275: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloc_pages_iommu_fail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
      case 276: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloc_pages_iommu_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
      case 277: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloc_pages_sys_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
      case 278: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloc_pages_sys_fail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
      case 279: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloc_pages_sys_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
      case 280: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dma_alloc_contiguous_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
      case 281: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_iommu_map_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
      case 282: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_iommu_sec_ptbl_map_range_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
      case 283: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_iommu_sec_ptbl_map_range_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
      case 284: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_alloc_buffer_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
      case 285: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_alloc_buffer_fail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
      case 286: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_alloc_buffer_fallback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
      case 287: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_alloc_buffer_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
      case 288: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_cp_alloc_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
      case 289: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_cp_secure_buffer_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
      case 290: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_cp_secure_buffer_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
      case 291: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_prefetching()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
      case 292: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_secure_cma_add_to_pool_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
      case 293: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_secure_cma_add_to_pool_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
      case 294: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_secure_cma_allocate_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
      case 295: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_secure_cma_allocate_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
      case 296: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_secure_cma_shrink_pool_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
      case 297: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_secure_cma_shrink_pool_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.KfreeFtraceEvent kfree = 298;
      case 298: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kfree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
      case 299: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kmalloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
      case 300: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kmalloc_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
      case 301: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kmem_cache_alloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
      case 302: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kmem_cache_alloc_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
      case 303: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kmem_cache_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
      case 304: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_migrate_pages_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
      case 305: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_migrate_pages_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
      case 306: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_migrate_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
      case 307: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_page_alloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
      case 308: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_page_alloc_extfrag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
      case 309: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_page_alloc_zone_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
      case 310: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_page_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
      case 311: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_page_free_batched()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
      case 312: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_page_pcpu_drain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
      case 313: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rss_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
      case 314: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_heap_shrink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
      case 315: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2522 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_heap_grow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
      case 316: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_init()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
      case 317: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_destroy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
      case 318: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_enable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
      case 319: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_signaled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
      case 320: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clk_enable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
      case 321: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clk_disable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
      case 322: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clk_set_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
      case 323: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binder_transaction_alloc_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
      case 324: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_deliver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
      case 325: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_generate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
      case 326: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_oom_score_adj_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GenericFtraceEvent generic = 327;
      case 327: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
      case 328: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mm_event_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
      case 329: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sys_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
      case 330: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sys_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ZeroFtraceEvent zero = 331;
      case 331: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_zero()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
      case 332: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
      case 333: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sde_tracing_mark_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
      case 334: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mark_victim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
      case 335: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
      case 336: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_buffer_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
      case 337: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ion_buffer_destroy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
      case 338: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scm_call_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
      case 339: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scm_call_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
      case 340: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_mem_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
      case 341: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thermal_temperature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
      case 342: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2738 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdev_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
      case 343: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpuhp_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
      case 344: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2754 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpuhp_multi_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
      case 345: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2762 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpuhp_enter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
      case 346: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2770 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpuhp_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
      case 347: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2778 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fastrpc_dma_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
      case 348: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2786 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dpu_tracing_mark_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
      case 349: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_g2d_tracing_mark_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
      case 350: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mali_tracing_mark_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  switch (event_case()) {
    case kPrint:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::print(this), output);
      break;
    case kSchedSwitch:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::sched_switch(this), output);
      break;
    case kCpuFrequency:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        11, _Internal::cpu_frequency(this), output);
      break;
    case kCpuFrequencyLimits:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        12, _Internal::cpu_frequency_limits(this), output);
      break;
    case kCpuIdle:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        13, _Internal::cpu_idle(this), output);
      break;
    case kClockEnable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        14, _Internal::clock_enable(this), output);
      break;
    case kClockDisable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        15, _Internal::clock_disable(this), output);
      break;
    case kClockSetRate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        16, _Internal::clock_set_rate(this), output);
      break;
    case kSchedWakeup:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        17, _Internal::sched_wakeup(this), output);
      break;
    case kSchedBlockedReason:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        18, _Internal::sched_blocked_reason(this), output);
      break;
    case kSchedCpuHotplug:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        19, _Internal::sched_cpu_hotplug(this), output);
      break;
    case kSchedWaking:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        20, _Internal::sched_waking(this), output);
      break;
    case kIpiEntry:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        21, _Internal::ipi_entry(this), output);
      break;
    case kIpiExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        22, _Internal::ipi_exit(this), output);
      break;
    case kIpiRaise:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        23, _Internal::ipi_raise(this), output);
      break;
    case kSoftirqEntry:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        24, _Internal::softirq_entry(this), output);
      break;
    case kSoftirqExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        25, _Internal::softirq_exit(this), output);
      break;
    case kSoftirqRaise:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        26, _Internal::softirq_raise(this), output);
      break;
    case kI2CRead:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        27, _Internal::i2c_read(this), output);
      break;
    case kI2CWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        28, _Internal::i2c_write(this), output);
      break;
    case kI2CResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        29, _Internal::i2c_result(this), output);
      break;
    case kI2CReply:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        30, _Internal::i2c_reply(this), output);
      break;
    case kSmbusRead:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        31, _Internal::smbus_read(this), output);
      break;
    case kSmbusWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        32, _Internal::smbus_write(this), output);
      break;
    case kSmbusResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        33, _Internal::smbus_result(this), output);
      break;
    case kSmbusReply:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        34, _Internal::smbus_reply(this), output);
      break;
    case kLowmemoryKill:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        35, _Internal::lowmemory_kill(this), output);
      break;
    case kIrqHandlerEntry:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        36, _Internal::irq_handler_entry(this), output);
      break;
    case kIrqHandlerExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        37, _Internal::irq_handler_exit(this), output);
      break;
    case kSyncPt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        38, _Internal::sync_pt(this), output);
      break;
    case kSyncTimeline:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        39, _Internal::sync_timeline(this), output);
      break;
    case kSyncWait:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        40, _Internal::sync_wait(this), output);
      break;
    case kExt4DaWriteBegin:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        41, _Internal::ext4_da_write_begin(this), output);
      break;
    case kExt4DaWriteEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        42, _Internal::ext4_da_write_end(this), output);
      break;
    case kExt4SyncFileEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        43, _Internal::ext4_sync_file_enter(this), output);
      break;
    case kExt4SyncFileExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        44, _Internal::ext4_sync_file_exit(this), output);
      break;
    case kBlockRqIssue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        45, _Internal::block_rq_issue(this), output);
      break;
    case kMmVmscanDirectReclaimBegin:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        46, _Internal::mm_vmscan_direct_reclaim_begin(this), output);
      break;
    case kMmVmscanDirectReclaimEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        47, _Internal::mm_vmscan_direct_reclaim_end(this), output);
      break;
    case kMmVmscanKswapdWake:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        48, _Internal::mm_vmscan_kswapd_wake(this), output);
      break;
    case kMmVmscanKswapdSleep:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        49, _Internal::mm_vmscan_kswapd_sleep(this), output);
      break;
    case kBinderTransaction:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        50, _Internal::binder_transaction(this), output);
      break;
    case kBinderTransactionReceived:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        51, _Internal::binder_transaction_received(this), output);
      break;
    case kBinderSetPriority:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        52, _Internal::binder_set_priority(this), output);
      break;
    case kBinderLock:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        53, _Internal::binder_lock(this), output);
      break;
    case kBinderLocked:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        54, _Internal::binder_locked(this), output);
      break;
    case kBinderUnlock:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        55, _Internal::binder_unlock(this), output);
      break;
    case kWorkqueueActivateWork:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        56, _Internal::workqueue_activate_work(this), output);
      break;
    case kWorkqueueExecuteEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        57, _Internal::workqueue_execute_end(this), output);
      break;
    case kWorkqueueExecuteStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        58, _Internal::workqueue_execute_start(this), output);
      break;
    case kWorkqueueQueueWork:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        59, _Internal::workqueue_queue_work(this), output);
      break;
    case kRegulatorDisable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        60, _Internal::regulator_disable(this), output);
      break;
    case kRegulatorDisableComplete:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        61, _Internal::regulator_disable_complete(this), output);
      break;
    case kRegulatorEnable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        62, _Internal::regulator_enable(this), output);
      break;
    case kRegulatorEnableComplete:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        63, _Internal::regulator_enable_complete(this), output);
      break;
    case kRegulatorEnableDelay:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        64, _Internal::regulator_enable_delay(this), output);
      break;
    case kRegulatorSetVoltage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        65, _Internal::regulator_set_voltage(this), output);
      break;
    case kRegulatorSetVoltageComplete:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        66, _Internal::regulator_set_voltage_complete(this), output);
      break;
    case kCgroupAttachTask:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        67, _Internal::cgroup_attach_task(this), output);
      break;
    case kCgroupMkdir:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        68, _Internal::cgroup_mkdir(this), output);
      break;
    case kCgroupRemount:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        69, _Internal::cgroup_remount(this), output);
      break;
    case kCgroupRmdir:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        70, _Internal::cgroup_rmdir(this), output);
      break;
    case kCgroupTransferTasks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        71, _Internal::cgroup_transfer_tasks(this), output);
      break;
    case kCgroupDestroyRoot:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        72, _Internal::cgroup_destroy_root(this), output);
      break;
    case kCgroupRelease:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        73, _Internal::cgroup_release(this), output);
      break;
    case kCgroupRename:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        74, _Internal::cgroup_rename(this), output);
      break;
    case kCgroupSetupRoot:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        75, _Internal::cgroup_setup_root(this), output);
      break;
    case kMdpCmdKickoff:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        76, _Internal::mdp_cmd_kickoff(this), output);
      break;
    case kMdpCommit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        77, _Internal::mdp_commit(this), output);
      break;
    case kMdpPerfSetOt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        78, _Internal::mdp_perf_set_ot(this), output);
      break;
    case kMdpSsppChange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        79, _Internal::mdp_sspp_change(this), output);
      break;
    case kTracingMarkWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        80, _Internal::tracing_mark_write(this), output);
      break;
    case kMdpCmdPingpongDone:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        81, _Internal::mdp_cmd_pingpong_done(this), output);
      break;
    case kMdpCompareBw:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        82, _Internal::mdp_compare_bw(this), output);
      break;
    case kMdpPerfSetPanicLuts:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        83, _Internal::mdp_perf_set_panic_luts(this), output);
      break;
    case kMdpSsppSet:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        84, _Internal::mdp_sspp_set(this), output);
      break;
    case kMdpCmdReadptrDone:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        85, _Internal::mdp_cmd_readptr_done(this), output);
      break;
    case kMdpMisrCrc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        86, _Internal::mdp_misr_crc(this), output);
      break;
    case kMdpPerfSetQosLuts:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        87, _Internal::mdp_perf_set_qos_luts(this), output);
      break;
    case kMdpTraceCounter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        88, _Internal::mdp_trace_counter(this), output);
      break;
    case kMdpCmdReleaseBw:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        89, _Internal::mdp_cmd_release_bw(this), output);
      break;
    case kMdpMixerUpdate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        90, _Internal::mdp_mixer_update(this), output);
      break;
    case kMdpPerfSetWmLevels:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        91, _Internal::mdp_perf_set_wm_levels(this), output);
      break;
    case kMdpVideoUnderrunDone:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        92, _Internal::mdp_video_underrun_done(this), output);
      break;
    case kMdpCmdWaitPingpong:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        93, _Internal::mdp_cmd_wait_pingpong(this), output);
      break;
    case kMdpPerfPrefillCalc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        94, _Internal::mdp_perf_prefill_calc(this), output);
      break;
    case kMdpPerfUpdateBus:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        95, _Internal::mdp_perf_update_bus(this), output);
      break;
    case kRotatorBwAoAsContext:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        96, _Internal::rotator_bw_ao_as_context(this), output);
      break;
    case kMmFilemapAddToPageCache:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        97, _Internal::mm_filemap_add_to_page_cache(this), output);
      break;
    case kMmFilemapDeleteFromPageCache:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        98, _Internal::mm_filemap_delete_from_page_cache(this), output);
      break;
    case kMmCompactionBegin:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        99, _Internal::mm_compaction_begin(this), output);
      break;
    case kMmCompactionDeferCompaction:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        100, _Internal::mm_compaction_defer_compaction(this), output);
      break;
    case kMmCompactionDeferred:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        101, _Internal::mm_compaction_deferred(this), output);
      break;
    case kMmCompactionDeferReset:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        102, _Internal::mm_compaction_defer_reset(this), output);
      break;
    case kMmCompactionEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        103, _Internal::mm_compaction_end(this), output);
      break;
    case kMmCompactionFinished:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        104, _Internal::mm_compaction_finished(this), output);
      break;
    case kMmCompactionIsolateFreepages:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        105, _Internal::mm_compaction_isolate_freepages(this), output);
      break;
    case kMmCompactionIsolateMigratepages:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        106, _Internal::mm_compaction_isolate_migratepages(this), output);
      break;
    case kMmCompactionKcompactdSleep:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        107, _Internal::mm_compaction_kcompactd_sleep(this), output);
      break;
    case kMmCompactionKcompactdWake:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        108, _Internal::mm_compaction_kcompactd_wake(this), output);
      break;
    case kMmCompactionMigratepages:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        109, _Internal::mm_compaction_migratepages(this), output);
      break;
    case kMmCompactionSuitable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        110, _Internal::mm_compaction_suitable(this), output);
      break;
    case kMmCompactionTryToCompactPages:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        111, _Internal::mm_compaction_try_to_compact_pages(this), output);
      break;
    case kMmCompactionWakeupKcompactd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        112, _Internal::mm_compaction_wakeup_kcompactd(this), output);
      break;
    case kSuspendResume:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        113, _Internal::suspend_resume(this), output);
      break;
    case kSchedWakeupNew:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        114, _Internal::sched_wakeup_new(this), output);
      break;
    case kBlockBioBackmerge:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        115, _Internal::block_bio_backmerge(this), output);
      break;
    case kBlockBioBounce:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        116, _Internal::block_bio_bounce(this), output);
      break;
    case kBlockBioComplete:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        117, _Internal::block_bio_complete(this), output);
      break;
    case kBlockBioFrontmerge:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        118, _Internal::block_bio_frontmerge(this), output);
      break;
    case kBlockBioQueue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        119, _Internal::block_bio_queue(this), output);
      break;
    case kBlockBioRemap:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        120, _Internal::block_bio_remap(this), output);
      break;
    case kBlockDirtyBuffer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        121, _Internal::block_dirty_buffer(this), output);
      break;
    case kBlockGetrq:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        122, _Internal::block_getrq(this), output);
      break;
    case kBlockPlug:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        123, _Internal::block_plug(this), output);
      break;
    case kBlockRqAbort:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        124, _Internal::block_rq_abort(this), output);
      break;
    case kBlockRqComplete:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        125, _Internal::block_rq_complete(this), output);
      break;
    case kBlockRqInsert:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        126, _Internal::block_rq_insert(this), output);
      break;
    case kBlockRqRemap:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        128, _Internal::block_rq_remap(this), output);
      break;
    case kBlockRqRequeue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        129, _Internal::block_rq_requeue(this), output);
      break;
    case kBlockSleeprq:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        130, _Internal::block_sleeprq(this), output);
      break;
    case kBlockSplit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        131, _Internal::block_split(this), output);
      break;
    case kBlockTouchBuffer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        132, _Internal::block_touch_buffer(this), output);
      break;
    case kBlockUnplug:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        133, _Internal::block_unplug(this), output);
      break;
    case kExt4AllocDaBlocks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        134, _Internal::ext4_alloc_da_blocks(this), output);
      break;
    case kExt4AllocateBlocks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        135, _Internal::ext4_allocate_blocks(this), output);
      break;
    case kExt4AllocateInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        136, _Internal::ext4_allocate_inode(this), output);
      break;
    case kExt4BeginOrderedTruncate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        137, _Internal::ext4_begin_ordered_truncate(this), output);
      break;
    case kExt4CollapseRange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        138, _Internal::ext4_collapse_range(this), output);
      break;
    case kExt4DaReleaseSpace:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        139, _Internal::ext4_da_release_space(this), output);
      break;
    case kExt4DaReserveSpace:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        140, _Internal::ext4_da_reserve_space(this), output);
      break;
    case kExt4DaUpdateReserveSpace:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        141, _Internal::ext4_da_update_reserve_space(this), output);
      break;
    case kExt4DaWritePages:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        142, _Internal::ext4_da_write_pages(this), output);
      break;
    case kExt4DaWritePagesExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        143, _Internal::ext4_da_write_pages_extent(this), output);
      break;
    case kExt4DirectIOEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        144, _Internal::ext4_direct_io_enter(this), output);
      break;
    case kExt4DirectIOExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        145, _Internal::ext4_direct_io_exit(this), output);
      break;
    case kExt4DiscardBlocks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        146, _Internal::ext4_discard_blocks(this), output);
      break;
    case kExt4DiscardPreallocations:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        147, _Internal::ext4_discard_preallocations(this), output);
      break;
    case kExt4DropInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        148, _Internal::ext4_drop_inode(this), output);
      break;
    case kExt4EsCacheExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        149, _Internal::ext4_es_cache_extent(this), output);
      break;
    case kExt4EsFindDelayedExtentRangeEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        150, _Internal::ext4_es_find_delayed_extent_range_enter(this), output);
      break;
    case kExt4EsFindDelayedExtentRangeExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        151, _Internal::ext4_es_find_delayed_extent_range_exit(this), output);
      break;
    case kExt4EsInsertExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        152, _Internal::ext4_es_insert_extent(this), output);
      break;
    case kExt4EsLookupExtentEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        153, _Internal::ext4_es_lookup_extent_enter(this), output);
      break;
    case kExt4EsLookupExtentExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        154, _Internal::ext4_es_lookup_extent_exit(this), output);
      break;
    case kExt4EsRemoveExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        155, _Internal::ext4_es_remove_extent(this), output);
      break;
    case kExt4EsShrink:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        156, _Internal::ext4_es_shrink(this), output);
      break;
    case kExt4EsShrinkCount:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        157, _Internal::ext4_es_shrink_count(this), output);
      break;
    case kExt4EsShrinkScanEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        158, _Internal::ext4_es_shrink_scan_enter(this), output);
      break;
    case kExt4EsShrinkScanExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        159, _Internal::ext4_es_shrink_scan_exit(this), output);
      break;
    case kExt4EvictInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        160, _Internal::ext4_evict_inode(this), output);
      break;
    case kExt4ExtConvertToInitializedEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        161, _Internal::ext4_ext_convert_to_initialized_enter(this), output);
      break;
    case kExt4ExtConvertToInitializedFastpath:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        162, _Internal::ext4_ext_convert_to_initialized_fastpath(this), output);
      break;
    case kExt4ExtHandleUnwrittenExtents:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        163, _Internal::ext4_ext_handle_unwritten_extents(this), output);
      break;
    case kExt4ExtInCache:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        164, _Internal::ext4_ext_in_cache(this), output);
      break;
    case kExt4ExtLoadExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        165, _Internal::ext4_ext_load_extent(this), output);
      break;
    case kExt4ExtMapBlocksEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        166, _Internal::ext4_ext_map_blocks_enter(this), output);
      break;
    case kExt4ExtMapBlocksExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        167, _Internal::ext4_ext_map_blocks_exit(this), output);
      break;
    case kExt4ExtPutInCache:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        168, _Internal::ext4_ext_put_in_cache(this), output);
      break;
    case kExt4ExtRemoveSpace:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        169, _Internal::ext4_ext_remove_space(this), output);
      break;
    case kExt4ExtRemoveSpaceDone:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        170, _Internal::ext4_ext_remove_space_done(this), output);
      break;
    case kExt4ExtRmIdx:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        171, _Internal::ext4_ext_rm_idx(this), output);
      break;
    case kExt4ExtRmLeaf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        172, _Internal::ext4_ext_rm_leaf(this), output);
      break;
    case kExt4ExtShowExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        173, _Internal::ext4_ext_show_extent(this), output);
      break;
    case kExt4FallocateEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        174, _Internal::ext4_fallocate_enter(this), output);
      break;
    case kExt4FallocateExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        175, _Internal::ext4_fallocate_exit(this), output);
      break;
    case kExt4FindDelallocRange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        176, _Internal::ext4_find_delalloc_range(this), output);
      break;
    case kExt4Forget:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        177, _Internal::ext4_forget(this), output);
      break;
    case kExt4FreeBlocks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        178, _Internal::ext4_free_blocks(this), output);
      break;
    case kExt4FreeInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        179, _Internal::ext4_free_inode(this), output);
      break;
    case kExt4GetImpliedClusterAllocExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        180, _Internal::ext4_get_implied_cluster_alloc_exit(this), output);
      break;
    case kExt4GetReservedClusterAlloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        181, _Internal::ext4_get_reserved_cluster_alloc(this), output);
      break;
    case kExt4IndMapBlocksEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        182, _Internal::ext4_ind_map_blocks_enter(this), output);
      break;
    case kExt4IndMapBlocksExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        183, _Internal::ext4_ind_map_blocks_exit(this), output);
      break;
    case kExt4InsertRange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        184, _Internal::ext4_insert_range(this), output);
      break;
    case kExt4Invalidatepage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        185, _Internal::ext4_invalidatepage(this), output);
      break;
    case kExt4JournalStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        186, _Internal::ext4_journal_start(this), output);
      break;
    case kExt4JournalStartReserved:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        187, _Internal::ext4_journal_start_reserved(this), output);
      break;
    case kExt4JournalledInvalidatepage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        188, _Internal::ext4_journalled_invalidatepage(this), output);
      break;
    case kExt4JournalledWriteEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        189, _Internal::ext4_journalled_write_end(this), output);
      break;
    case kExt4LoadInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        190, _Internal::ext4_load_inode(this), output);
      break;
    case kExt4LoadInodeBitmap:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        191, _Internal::ext4_load_inode_bitmap(this), output);
      break;
    case kExt4MarkInodeDirty:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        192, _Internal::ext4_mark_inode_dirty(this), output);
      break;
    case kExt4MbBitmapLoad:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        193, _Internal::ext4_mb_bitmap_load(this), output);
      break;
    case kExt4MbBuddyBitmapLoad:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        194, _Internal::ext4_mb_buddy_bitmap_load(this), output);
      break;
    case kExt4MbDiscardPreallocations:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        195, _Internal::ext4_mb_discard_preallocations(this), output);
      break;
    case kExt4MbNewGroupPa:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        196, _Internal::ext4_mb_new_group_pa(this), output);
      break;
    case kExt4MbNewInodePa:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        197, _Internal::ext4_mb_new_inode_pa(this), output);
      break;
    case kExt4MbReleaseGroupPa:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        198, _Internal::ext4_mb_release_group_pa(this), output);
      break;
    case kExt4MbReleaseInodePa:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        199, _Internal::ext4_mb_release_inode_pa(this), output);
      break;
    case kExt4MballocAlloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        200, _Internal::ext4_mballoc_alloc(this), output);
      break;
    case kExt4MballocDiscard:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        201, _Internal::ext4_mballoc_discard(this), output);
      break;
    case kExt4MballocFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        202, _Internal::ext4_mballoc_free(this), output);
      break;
    case kExt4MballocPrealloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        203, _Internal::ext4_mballoc_prealloc(this), output);
      break;
    case kExt4OtherInodeUpdateTime:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        204, _Internal::ext4_other_inode_update_time(this), output);
      break;
    case kExt4PunchHole:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        205, _Internal::ext4_punch_hole(this), output);
      break;
    case kExt4ReadBlockBitmapLoad:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        206, _Internal::ext4_read_block_bitmap_load(this), output);
      break;
    case kExt4Readpage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        207, _Internal::ext4_readpage(this), output);
      break;
    case kExt4Releasepage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        208, _Internal::ext4_releasepage(this), output);
      break;
    case kExt4RemoveBlocks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        209, _Internal::ext4_remove_blocks(this), output);
      break;
    case kExt4RequestBlocks:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        210, _Internal::ext4_request_blocks(this), output);
      break;
    case kExt4RequestInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        211, _Internal::ext4_request_inode(this), output);
      break;
    case kExt4SyncFs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        212, _Internal::ext4_sync_fs(this), output);
      break;
    case kExt4TrimAllFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        213, _Internal::ext4_trim_all_free(this), output);
      break;
    case kExt4TrimExtent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        214, _Internal::ext4_trim_extent(this), output);
      break;
    case kExt4TruncateEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        215, _Internal::ext4_truncate_enter(this), output);
      break;
    case kExt4TruncateExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        216, _Internal::ext4_truncate_exit(this), output);
      break;
    case kExt4UnlinkEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        217, _Internal::ext4_unlink_enter(this), output);
      break;
    case kExt4UnlinkExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        218, _Internal::ext4_unlink_exit(this), output);
      break;
    case kExt4WriteBegin:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        219, _Internal::ext4_write_begin(this), output);
      break;
    case kExt4WriteEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        230, _Internal::ext4_write_end(this), output);
      break;
    case kExt4Writepage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        231, _Internal::ext4_writepage(this), output);
      break;
    case kExt4Writepages:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        232, _Internal::ext4_writepages(this), output);
      break;
    case kExt4WritepagesResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        233, _Internal::ext4_writepages_result(this), output);
      break;
    case kExt4ZeroRange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        234, _Internal::ext4_zero_range(this), output);
      break;
    case kTaskNewtask:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        235, _Internal::task_newtask(this), output);
      break;
    case kTaskRename:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        236, _Internal::task_rename(this), output);
      break;
    case kSchedProcessExec:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        237, _Internal::sched_process_exec(this), output);
      break;
    case kSchedProcessExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        238, _Internal::sched_process_exit(this), output);
      break;
    case kSchedProcessFork:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        239, _Internal::sched_process_fork(this), output);
      break;
    case kSchedProcessFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        240, _Internal::sched_process_free(this), output);
      break;
    case kSchedProcessHang:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        241, _Internal::sched_process_hang(this), output);
      break;
    case kSchedProcessWait:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        242, _Internal::sched_process_wait(this), output);
      break;
    case kF2FsDoSubmitBio:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        243, _Internal::f2fs_do_submit_bio(this), output);
      break;
    case kF2FsEvictInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        244, _Internal::f2fs_evict_inode(this), output);
      break;
    case kF2FsFallocate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        245, _Internal::f2fs_fallocate(this), output);
      break;
    case kF2FsGetDataBlock:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        246, _Internal::f2fs_get_data_block(this), output);
      break;
    case kF2FsGetVictim:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        247, _Internal::f2fs_get_victim(this), output);
      break;
    case kF2FsIget:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        248, _Internal::f2fs_iget(this), output);
      break;
    case kF2FsIgetExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        249, _Internal::f2fs_iget_exit(this), output);
      break;
    case kF2FsNewInode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        250, _Internal::f2fs_new_inode(this), output);
      break;
    case kF2FsReadpage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        251, _Internal::f2fs_readpage(this), output);
      break;
    case kF2FsReserveNewBlock:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        252, _Internal::f2fs_reserve_new_block(this), output);
      break;
    case kF2FsSetPageDirty:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        253, _Internal::f2fs_set_page_dirty(this), output);
      break;
    case kF2FsSubmitWritePage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        254, _Internal::f2fs_submit_write_page(this), output);
      break;
    case kF2FsSyncFileEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        255, _Internal::f2fs_sync_file_enter(this), output);
      break;
    case kF2FsSyncFileExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        256, _Internal::f2fs_sync_file_exit(this), output);
      break;
    case kF2FsSyncFs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        257, _Internal::f2fs_sync_fs(this), output);
      break;
    case kF2FsTruncate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        258, _Internal::f2fs_truncate(this), output);
      break;
    case kF2FsTruncateBlocksEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        259, _Internal::f2fs_truncate_blocks_enter(this), output);
      break;
    case kF2FsTruncateBlocksExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        260, _Internal::f2fs_truncate_blocks_exit(this), output);
      break;
    case kF2FsTruncateDataBlocksRange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        261, _Internal::f2fs_truncate_data_blocks_range(this), output);
      break;
    case kF2FsTruncateInodeBlocksEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        262, _Internal::f2fs_truncate_inode_blocks_enter(this), output);
      break;
    case kF2FsTruncateInodeBlocksExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        263, _Internal::f2fs_truncate_inode_blocks_exit(this), output);
      break;
    case kF2FsTruncateNode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        264, _Internal::f2fs_truncate_node(this), output);
      break;
    case kF2FsTruncateNodesEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        265, _Internal::f2fs_truncate_nodes_enter(this), output);
      break;
    case kF2FsTruncateNodesExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        266, _Internal::f2fs_truncate_nodes_exit(this), output);
      break;
    case kF2FsTruncatePartialNodes:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        267, _Internal::f2fs_truncate_partial_nodes(this), output);
      break;
    case kF2FsUnlinkEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        268, _Internal::f2fs_unlink_enter(this), output);
      break;
    case kF2FsUnlinkExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        269, _Internal::f2fs_unlink_exit(this), output);
      break;
    case kF2FsVmPageMkwrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        270, _Internal::f2fs_vm_page_mkwrite(this), output);
      break;
    case kF2FsWriteBegin:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        271, _Internal::f2fs_write_begin(this), output);
      break;
    case kF2FsWriteCheckpoint:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        272, _Internal::f2fs_write_checkpoint(this), output);
      break;
    case kF2FsWriteEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        273, _Internal::f2fs_write_end(this), output);
      break;
    case kAllocPagesIommuEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        274, _Internal::alloc_pages_iommu_end(this), output);
      break;
    case kAllocPagesIommuFail:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        275, _Internal::alloc_pages_iommu_fail(this), output);
      break;
    case kAllocPagesIommuStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        276, _Internal::alloc_pages_iommu_start(this), output);
      break;
    case kAllocPagesSysEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        277, _Internal::alloc_pages_sys_end(this), output);
      break;
    case kAllocPagesSysFail:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        278, _Internal::alloc_pages_sys_fail(this), output);
      break;
    case kAllocPagesSysStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        279, _Internal::alloc_pages_sys_start(this), output);
      break;
    case kDmaAllocContiguousRetry:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        280, _Internal::dma_alloc_contiguous_retry(this), output);
      break;
    case kIommuMapRange:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        281, _Internal::iommu_map_range(this), output);
      break;
    case kIommuSecPtblMapRangeEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        282, _Internal::iommu_sec_ptbl_map_range_end(this), output);
      break;
    case kIommuSecPtblMapRangeStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        283, _Internal::iommu_sec_ptbl_map_range_start(this), output);
      break;
    case kIonAllocBufferEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        284, _Internal::ion_alloc_buffer_end(this), output);
      break;
    case kIonAllocBufferFail:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        285, _Internal::ion_alloc_buffer_fail(this), output);
      break;
    case kIonAllocBufferFallback:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        286, _Internal::ion_alloc_buffer_fallback(this), output);
      break;
    case kIonAllocBufferStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        287, _Internal::ion_alloc_buffer_start(this), output);
      break;
    case kIonCpAllocRetry:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        288, _Internal::ion_cp_alloc_retry(this), output);
      break;
    case kIonCpSecureBufferEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        289, _Internal::ion_cp_secure_buffer_end(this), output);
      break;
    case kIonCpSecureBufferStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        290, _Internal::ion_cp_secure_buffer_start(this), output);
      break;
    case kIonPrefetching:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        291, _Internal::ion_prefetching(this), output);
      break;
    case kIonSecureCmaAddToPoolEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        292, _Internal::ion_secure_cma_add_to_pool_end(this), output);
      break;
    case kIonSecureCmaAddToPoolStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        293, _Internal::ion_secure_cma_add_to_pool_start(this), output);
      break;
    case kIonSecureCmaAllocateEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        294, _Internal::ion_secure_cma_allocate_end(this), output);
      break;
    case kIonSecureCmaAllocateStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        295, _Internal::ion_secure_cma_allocate_start(this), output);
      break;
    case kIonSecureCmaShrinkPoolEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        296, _Internal::ion_secure_cma_shrink_pool_end(this), output);
      break;
    case kIonSecureCmaShrinkPoolStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        297, _Internal::ion_secure_cma_shrink_pool_start(this), output);
      break;
    case kKfree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        298, _Internal::kfree(this), output);
      break;
    case kKmalloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        299, _Internal::kmalloc(this), output);
      break;
    case kKmallocNode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        300, _Internal::kmalloc_node(this), output);
      break;
    case kKmemCacheAlloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        301, _Internal::kmem_cache_alloc(this), output);
      break;
    case kKmemCacheAllocNode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        302, _Internal::kmem_cache_alloc_node(this), output);
      break;
    case kKmemCacheFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        303, _Internal::kmem_cache_free(this), output);
      break;
    case kMigratePagesEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        304, _Internal::migrate_pages_end(this), output);
      break;
    case kMigratePagesStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        305, _Internal::migrate_pages_start(this), output);
      break;
    case kMigrateRetry:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        306, _Internal::migrate_retry(this), output);
      break;
    case kMmPageAlloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        307, _Internal::mm_page_alloc(this), output);
      break;
    case kMmPageAllocExtfrag:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        308, _Internal::mm_page_alloc_extfrag(this), output);
      break;
    case kMmPageAllocZoneLocked:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        309, _Internal::mm_page_alloc_zone_locked(this), output);
      break;
    case kMmPageFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        310, _Internal::mm_page_free(this), output);
      break;
    case kMmPageFreeBatched:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        311, _Internal::mm_page_free_batched(this), output);
      break;
    case kMmPagePcpuDrain:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        312, _Internal::mm_page_pcpu_drain(this), output);
      break;
    case kRssStat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        313, _Internal::rss_stat(this), output);
      break;
    case kIonHeapShrink:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        314, _Internal::ion_heap_shrink(this), output);
      break;
    case kIonHeapGrow:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        315, _Internal::ion_heap_grow(this), output);
      break;
    case kFenceInit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        316, _Internal::fence_init(this), output);
      break;
    case kFenceDestroy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        317, _Internal::fence_destroy(this), output);
      break;
    case kFenceEnableSignal:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        318, _Internal::fence_enable_signal(this), output);
      break;
    case kFenceSignaled:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        319, _Internal::fence_signaled(this), output);
      break;
    case kClkEnable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        320, _Internal::clk_enable(this), output);
      break;
    case kClkDisable:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        321, _Internal::clk_disable(this), output);
      break;
    case kClkSetRate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        322, _Internal::clk_set_rate(this), output);
      break;
    case kBinderTransactionAllocBuf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        323, _Internal::binder_transaction_alloc_buf(this), output);
      break;
    case kSignalDeliver:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        324, _Internal::signal_deliver(this), output);
      break;
    case kSignalGenerate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        325, _Internal::signal_generate(this), output);
      break;
    case kOomScoreAdjUpdate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        326, _Internal::oom_score_adj_update(this), output);
      break;
    case kGeneric:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        327, _Internal::generic(this), output);
      break;
    case kMmEventRecord:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        328, _Internal::mm_event_record(this), output);
      break;
    case kSysEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        329, _Internal::sys_enter(this), output);
      break;
    case kSysExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        330, _Internal::sys_exit(this), output);
      break;
    case kZero:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        331, _Internal::zero(this), output);
      break;
    case kGpuFrequency:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        332, _Internal::gpu_frequency(this), output);
      break;
    case kSdeTracingMarkWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        333, _Internal::sde_tracing_mark_write(this), output);
      break;
    case kMarkVictim:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        334, _Internal::mark_victim(this), output);
      break;
    case kIonStat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        335, _Internal::ion_stat(this), output);
      break;
    case kIonBufferCreate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        336, _Internal::ion_buffer_create(this), output);
      break;
    case kIonBufferDestroy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        337, _Internal::ion_buffer_destroy(this), output);
      break;
    case kScmCallStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        338, _Internal::scm_call_start(this), output);
      break;
    case kScmCallEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        339, _Internal::scm_call_end(this), output);
      break;
    case kGpuMemTotal:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        340, _Internal::gpu_mem_total(this), output);
      break;
    case kThermalTemperature:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        341, _Internal::thermal_temperature(this), output);
      break;
    case kCdevUpdate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        342, _Internal::cdev_update(this), output);
      break;
    case kCpuhpExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        343, _Internal::cpuhp_exit(this), output);
      break;
    case kCpuhpMultiEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        344, _Internal::cpuhp_multi_enter(this), output);
      break;
    case kCpuhpEnter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        345, _Internal::cpuhp_enter(this), output);
      break;
    case kCpuhpLatency:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        346, _Internal::cpuhp_latency(this), output);
      break;
    case kFastrpcDmaStat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        347, _Internal::fastrpc_dma_stat(this), output);
      break;
    case kDpuTracingMarkWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        348, _Internal::dpu_tracing_mark_write(this), output);
      break;
    case kG2DTracingMarkWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        349, _Internal::g2d_tracing_mark_write(this), output);
      break;
    case kMaliTracingMarkWrite:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        350, _Internal::mali_tracing_mark_write(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceEvent)
}

size_t FtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

  }
  switch (event_case()) {
    // optional .perfetto.protos.PrintFtraceEvent print = 3;
    case kPrint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.print_);
      break;
    }
    // optional .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
    case kSchedSwitch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_switch_);
      break;
    }
    // optional .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
    case kCpuFrequency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpu_frequency_);
      break;
    }
    // optional .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
    case kCpuFrequencyLimits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpu_frequency_limits_);
      break;
    }
    // optional .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
    case kCpuIdle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpu_idle_);
      break;
    }
    // optional .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
    case kClockEnable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.clock_enable_);
      break;
    }
    // optional .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
    case kClockDisable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.clock_disable_);
      break;
    }
    // optional .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
    case kClockSetRate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.clock_set_rate_);
      break;
    }
    // optional .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
    case kSchedWakeup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_wakeup_);
      break;
    }
    // optional .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
    case kSchedBlockedReason: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_blocked_reason_);
      break;
    }
    // optional .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
    case kSchedCpuHotplug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_cpu_hotplug_);
      break;
    }
    // optional .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
    case kSchedWaking: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_waking_);
      break;
    }
    // optional .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
    case kIpiEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ipi_entry_);
      break;
    }
    // optional .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
    case kIpiExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ipi_exit_);
      break;
    }
    // optional .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
    case kIpiRaise: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ipi_raise_);
      break;
    }
    // optional .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
    case kSoftirqEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.softirq_entry_);
      break;
    }
    // optional .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
    case kSoftirqExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.softirq_exit_);
      break;
    }
    // optional .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
    case kSoftirqRaise: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.softirq_raise_);
      break;
    }
    // optional .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
    case kI2CRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.i2c_read_);
      break;
    }
    // optional .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
    case kI2CWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.i2c_write_);
      break;
    }
    // optional .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
    case kI2CResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.i2c_result_);
      break;
    }
    // optional .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
    case kI2CReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.i2c_reply_);
      break;
    }
    // optional .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
    case kSmbusRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.smbus_read_);
      break;
    }
    // optional .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
    case kSmbusWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.smbus_write_);
      break;
    }
    // optional .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
    case kSmbusResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.smbus_result_);
      break;
    }
    // optional .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
    case kSmbusReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.smbus_reply_);
      break;
    }
    // optional .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
    case kLowmemoryKill: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.lowmemory_kill_);
      break;
    }
    // optional .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
    case kIrqHandlerEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.irq_handler_entry_);
      break;
    }
    // optional .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
    case kIrqHandlerExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.irq_handler_exit_);
      break;
    }
    // optional .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
    case kSyncPt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sync_pt_);
      break;
    }
    // optional .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
    case kSyncTimeline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sync_timeline_);
      break;
    }
    // optional .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
    case kSyncWait: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sync_wait_);
      break;
    }
    // optional .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
    case kExt4DaWriteBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_write_begin_);
      break;
    }
    // optional .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
    case kExt4DaWriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_write_end_);
      break;
    }
    // optional .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
    case kExt4SyncFileEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_sync_file_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
    case kExt4SyncFileExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_sync_file_exit_);
      break;
    }
    // optional .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
    case kBlockRqIssue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_rq_issue_);
      break;
    }
    // optional .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
    case kMmVmscanDirectReclaimBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_vmscan_direct_reclaim_begin_);
      break;
    }
    // optional .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
    case kMmVmscanDirectReclaimEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_vmscan_direct_reclaim_end_);
      break;
    }
    // optional .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
    case kMmVmscanKswapdWake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_vmscan_kswapd_wake_);
      break;
    }
    // optional .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
    case kMmVmscanKswapdSleep: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_vmscan_kswapd_sleep_);
      break;
    }
    // optional .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
    case kBinderTransaction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_transaction_);
      break;
    }
    // optional .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
    case kBinderTransactionReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_transaction_received_);
      break;
    }
    // optional .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
    case kBinderSetPriority: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_set_priority_);
      break;
    }
    // optional .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
    case kBinderLock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_lock_);
      break;
    }
    // optional .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
    case kBinderLocked: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_locked_);
      break;
    }
    // optional .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
    case kBinderUnlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_unlock_);
      break;
    }
    // optional .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
    case kWorkqueueActivateWork: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.workqueue_activate_work_);
      break;
    }
    // optional .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
    case kWorkqueueExecuteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.workqueue_execute_end_);
      break;
    }
    // optional .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
    case kWorkqueueExecuteStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.workqueue_execute_start_);
      break;
    }
    // optional .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
    case kWorkqueueQueueWork: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.workqueue_queue_work_);
      break;
    }
    // optional .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
    case kRegulatorDisable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_disable_);
      break;
    }
    // optional .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
    case kRegulatorDisableComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_disable_complete_);
      break;
    }
    // optional .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
    case kRegulatorEnable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_enable_);
      break;
    }
    // optional .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
    case kRegulatorEnableComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_enable_complete_);
      break;
    }
    // optional .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
    case kRegulatorEnableDelay: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_enable_delay_);
      break;
    }
    // optional .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
    case kRegulatorSetVoltage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_set_voltage_);
      break;
    }
    // optional .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
    case kRegulatorSetVoltageComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.regulator_set_voltage_complete_);
      break;
    }
    // optional .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
    case kCgroupAttachTask: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_attach_task_);
      break;
    }
    // optional .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
    case kCgroupMkdir: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_mkdir_);
      break;
    }
    // optional .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
    case kCgroupRemount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_remount_);
      break;
    }
    // optional .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
    case kCgroupRmdir: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_rmdir_);
      break;
    }
    // optional .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
    case kCgroupTransferTasks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_transfer_tasks_);
      break;
    }
    // optional .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
    case kCgroupDestroyRoot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_destroy_root_);
      break;
    }
    // optional .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
    case kCgroupRelease: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_release_);
      break;
    }
    // optional .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
    case kCgroupRename: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_rename_);
      break;
    }
    // optional .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
    case kCgroupSetupRoot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cgroup_setup_root_);
      break;
    }
    // optional .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
    case kMdpCmdKickoff: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_cmd_kickoff_);
      break;
    }
    // optional .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
    case kMdpCommit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_commit_);
      break;
    }
    // optional .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
    case kMdpPerfSetOt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_perf_set_ot_);
      break;
    }
    // optional .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
    case kMdpSsppChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_sspp_change_);
      break;
    }
    // optional .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
    case kTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.tracing_mark_write_);
      break;
    }
    // optional .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
    case kMdpCmdPingpongDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_cmd_pingpong_done_);
      break;
    }
    // optional .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
    case kMdpCompareBw: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_compare_bw_);
      break;
    }
    // optional .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
    case kMdpPerfSetPanicLuts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_perf_set_panic_luts_);
      break;
    }
    // optional .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
    case kMdpSsppSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_sspp_set_);
      break;
    }
    // optional .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
    case kMdpCmdReadptrDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_cmd_readptr_done_);
      break;
    }
    // optional .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
    case kMdpMisrCrc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_misr_crc_);
      break;
    }
    // optional .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
    case kMdpPerfSetQosLuts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_perf_set_qos_luts_);
      break;
    }
    // optional .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
    case kMdpTraceCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_trace_counter_);
      break;
    }
    // optional .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
    case kMdpCmdReleaseBw: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_cmd_release_bw_);
      break;
    }
    // optional .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
    case kMdpMixerUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_mixer_update_);
      break;
    }
    // optional .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
    case kMdpPerfSetWmLevels: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_perf_set_wm_levels_);
      break;
    }
    // optional .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
    case kMdpVideoUnderrunDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_video_underrun_done_);
      break;
    }
    // optional .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
    case kMdpCmdWaitPingpong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_cmd_wait_pingpong_);
      break;
    }
    // optional .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
    case kMdpPerfPrefillCalc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_perf_prefill_calc_);
      break;
    }
    // optional .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
    case kMdpPerfUpdateBus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mdp_perf_update_bus_);
      break;
    }
    // optional .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
    case kRotatorBwAoAsContext: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.rotator_bw_ao_as_context_);
      break;
    }
    // optional .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
    case kMmFilemapAddToPageCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_filemap_add_to_page_cache_);
      break;
    }
    // optional .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
    case kMmFilemapDeleteFromPageCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_filemap_delete_from_page_cache_);
      break;
    }
    // optional .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
    case kMmCompactionBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_begin_);
      break;
    }
    // optional .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
    case kMmCompactionDeferCompaction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_defer_compaction_);
      break;
    }
    // optional .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
    case kMmCompactionDeferred: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_deferred_);
      break;
    }
    // optional .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
    case kMmCompactionDeferReset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_defer_reset_);
      break;
    }
    // optional .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
    case kMmCompactionEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_end_);
      break;
    }
    // optional .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
    case kMmCompactionFinished: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_finished_);
      break;
    }
    // optional .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
    case kMmCompactionIsolateFreepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_isolate_freepages_);
      break;
    }
    // optional .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
    case kMmCompactionIsolateMigratepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_isolate_migratepages_);
      break;
    }
    // optional .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
    case kMmCompactionKcompactdSleep: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_kcompactd_sleep_);
      break;
    }
    // optional .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
    case kMmCompactionKcompactdWake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_kcompactd_wake_);
      break;
    }
    // optional .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
    case kMmCompactionMigratepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_migratepages_);
      break;
    }
    // optional .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
    case kMmCompactionSuitable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_suitable_);
      break;
    }
    // optional .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
    case kMmCompactionTryToCompactPages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_try_to_compact_pages_);
      break;
    }
    // optional .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
    case kMmCompactionWakeupKcompactd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_compaction_wakeup_kcompactd_);
      break;
    }
    // optional .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
    case kSuspendResume: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.suspend_resume_);
      break;
    }
    // optional .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
    case kSchedWakeupNew: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_wakeup_new_);
      break;
    }
    // optional .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
    case kBlockBioBackmerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_bio_backmerge_);
      break;
    }
    // optional .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
    case kBlockBioBounce: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_bio_bounce_);
      break;
    }
    // optional .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
    case kBlockBioComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_bio_complete_);
      break;
    }
    // optional .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
    case kBlockBioFrontmerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_bio_frontmerge_);
      break;
    }
    // optional .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
    case kBlockBioQueue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_bio_queue_);
      break;
    }
    // optional .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
    case kBlockBioRemap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_bio_remap_);
      break;
    }
    // optional .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
    case kBlockDirtyBuffer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_dirty_buffer_);
      break;
    }
    // optional .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
    case kBlockGetrq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_getrq_);
      break;
    }
    // optional .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
    case kBlockPlug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_plug_);
      break;
    }
    // optional .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
    case kBlockRqAbort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_rq_abort_);
      break;
    }
    // optional .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
    case kBlockRqComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_rq_complete_);
      break;
    }
    // optional .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
    case kBlockRqInsert: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_rq_insert_);
      break;
    }
    // optional .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
    case kBlockRqRemap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_rq_remap_);
      break;
    }
    // optional .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
    case kBlockRqRequeue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_rq_requeue_);
      break;
    }
    // optional .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
    case kBlockSleeprq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_sleeprq_);
      break;
    }
    // optional .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
    case kBlockSplit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_split_);
      break;
    }
    // optional .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
    case kBlockTouchBuffer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_touch_buffer_);
      break;
    }
    // optional .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
    case kBlockUnplug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.block_unplug_);
      break;
    }
    // optional .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
    case kExt4AllocDaBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_alloc_da_blocks_);
      break;
    }
    // optional .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
    case kExt4AllocateBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_allocate_blocks_);
      break;
    }
    // optional .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
    case kExt4AllocateInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_allocate_inode_);
      break;
    }
    // optional .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
    case kExt4BeginOrderedTruncate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_begin_ordered_truncate_);
      break;
    }
    // optional .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
    case kExt4CollapseRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_collapse_range_);
      break;
    }
    // optional .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
    case kExt4DaReleaseSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_release_space_);
      break;
    }
    // optional .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
    case kExt4DaReserveSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_reserve_space_);
      break;
    }
    // optional .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
    case kExt4DaUpdateReserveSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_update_reserve_space_);
      break;
    }
    // optional .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
    case kExt4DaWritePages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_write_pages_);
      break;
    }
    // optional .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
    case kExt4DaWritePagesExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_da_write_pages_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
    case kExt4DirectIOEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_direct_io_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
    case kExt4DirectIOExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_direct_io_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
    case kExt4DiscardBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_discard_blocks_);
      break;
    }
    // optional .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
    case kExt4DiscardPreallocations: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_discard_preallocations_);
      break;
    }
    // optional .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
    case kExt4DropInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_drop_inode_);
      break;
    }
    // optional .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
    case kExt4EsCacheExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_cache_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
    case kExt4EsFindDelayedExtentRangeEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_find_delayed_extent_range_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
    case kExt4EsFindDelayedExtentRangeExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_find_delayed_extent_range_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
    case kExt4EsInsertExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_insert_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
    case kExt4EsLookupExtentEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_lookup_extent_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
    case kExt4EsLookupExtentExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_lookup_extent_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
    case kExt4EsRemoveExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_remove_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
    case kExt4EsShrink: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_shrink_);
      break;
    }
    // optional .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
    case kExt4EsShrinkCount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_shrink_count_);
      break;
    }
    // optional .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
    case kExt4EsShrinkScanEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_shrink_scan_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
    case kExt4EsShrinkScanExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_es_shrink_scan_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
    case kExt4EvictInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_evict_inode_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
    case kExt4ExtConvertToInitializedEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_convert_to_initialized_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
    case kExt4ExtConvertToInitializedFastpath: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_convert_to_initialized_fastpath_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
    case kExt4ExtHandleUnwrittenExtents: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_handle_unwritten_extents_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
    case kExt4ExtInCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_in_cache_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
    case kExt4ExtLoadExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_load_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
    case kExt4ExtMapBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_map_blocks_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
    case kExt4ExtMapBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_map_blocks_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
    case kExt4ExtPutInCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_put_in_cache_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
    case kExt4ExtRemoveSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_remove_space_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
    case kExt4ExtRemoveSpaceDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_remove_space_done_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
    case kExt4ExtRmIdx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_rm_idx_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
    case kExt4ExtRmLeaf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_rm_leaf_);
      break;
    }
    // optional .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
    case kExt4ExtShowExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ext_show_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
    case kExt4FallocateEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_fallocate_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
    case kExt4FallocateExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_fallocate_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
    case kExt4FindDelallocRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_find_delalloc_range_);
      break;
    }
    // optional .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
    case kExt4Forget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_forget_);
      break;
    }
    // optional .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
    case kExt4FreeBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_free_blocks_);
      break;
    }
    // optional .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
    case kExt4FreeInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_free_inode_);
      break;
    }
    // optional .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
    case kExt4GetImpliedClusterAllocExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_get_implied_cluster_alloc_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
    case kExt4GetReservedClusterAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_get_reserved_cluster_alloc_);
      break;
    }
    // optional .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
    case kExt4IndMapBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ind_map_blocks_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
    case kExt4IndMapBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_ind_map_blocks_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
    case kExt4InsertRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_insert_range_);
      break;
    }
    // optional .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
    case kExt4Invalidatepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_invalidatepage_);
      break;
    }
    // optional .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
    case kExt4JournalStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_journal_start_);
      break;
    }
    // optional .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
    case kExt4JournalStartReserved: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_journal_start_reserved_);
      break;
    }
    // optional .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
    case kExt4JournalledInvalidatepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_journalled_invalidatepage_);
      break;
    }
    // optional .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
    case kExt4JournalledWriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_journalled_write_end_);
      break;
    }
    // optional .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
    case kExt4LoadInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_load_inode_);
      break;
    }
    // optional .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
    case kExt4LoadInodeBitmap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_load_inode_bitmap_);
      break;
    }
    // optional .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
    case kExt4MarkInodeDirty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mark_inode_dirty_);
      break;
    }
    // optional .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
    case kExt4MbBitmapLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_bitmap_load_);
      break;
    }
    // optional .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
    case kExt4MbBuddyBitmapLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_buddy_bitmap_load_);
      break;
    }
    // optional .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
    case kExt4MbDiscardPreallocations: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_discard_preallocations_);
      break;
    }
    // optional .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
    case kExt4MbNewGroupPa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_new_group_pa_);
      break;
    }
    // optional .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
    case kExt4MbNewInodePa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_new_inode_pa_);
      break;
    }
    // optional .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
    case kExt4MbReleaseGroupPa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_release_group_pa_);
      break;
    }
    // optional .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
    case kExt4MbReleaseInodePa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mb_release_inode_pa_);
      break;
    }
    // optional .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
    case kExt4MballocAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mballoc_alloc_);
      break;
    }
    // optional .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
    case kExt4MballocDiscard: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mballoc_discard_);
      break;
    }
    // optional .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
    case kExt4MballocFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mballoc_free_);
      break;
    }
    // optional .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
    case kExt4MballocPrealloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_mballoc_prealloc_);
      break;
    }
    // optional .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
    case kExt4OtherInodeUpdateTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_other_inode_update_time_);
      break;
    }
    // optional .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
    case kExt4PunchHole: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_punch_hole_);
      break;
    }
    // optional .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
    case kExt4ReadBlockBitmapLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_read_block_bitmap_load_);
      break;
    }
    // optional .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
    case kExt4Readpage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_readpage_);
      break;
    }
    // optional .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
    case kExt4Releasepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_releasepage_);
      break;
    }
    // optional .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
    case kExt4RemoveBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_remove_blocks_);
      break;
    }
    // optional .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
    case kExt4RequestBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_request_blocks_);
      break;
    }
    // optional .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
    case kExt4RequestInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_request_inode_);
      break;
    }
    // optional .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
    case kExt4SyncFs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_sync_fs_);
      break;
    }
    // optional .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
    case kExt4TrimAllFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_trim_all_free_);
      break;
    }
    // optional .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
    case kExt4TrimExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_trim_extent_);
      break;
    }
    // optional .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
    case kExt4TruncateEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_truncate_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
    case kExt4TruncateExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_truncate_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
    case kExt4UnlinkEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_unlink_enter_);
      break;
    }
    // optional .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
    case kExt4UnlinkExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_unlink_exit_);
      break;
    }
    // optional .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
    case kExt4WriteBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_write_begin_);
      break;
    }
    // optional .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
    case kExt4WriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_write_end_);
      break;
    }
    // optional .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
    case kExt4Writepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_writepage_);
      break;
    }
    // optional .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
    case kExt4Writepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_writepages_);
      break;
    }
    // optional .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
    case kExt4WritepagesResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_writepages_result_);
      break;
    }
    // optional .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
    case kExt4ZeroRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ext4_zero_range_);
      break;
    }
    // optional .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
    case kTaskNewtask: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.task_newtask_);
      break;
    }
    // optional .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
    case kTaskRename: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.task_rename_);
      break;
    }
    // optional .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
    case kSchedProcessExec: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_process_exec_);
      break;
    }
    // optional .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
    case kSchedProcessExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_process_exit_);
      break;
    }
    // optional .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
    case kSchedProcessFork: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_process_fork_);
      break;
    }
    // optional .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
    case kSchedProcessFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_process_free_);
      break;
    }
    // optional .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
    case kSchedProcessHang: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_process_hang_);
      break;
    }
    // optional .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
    case kSchedProcessWait: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sched_process_wait_);
      break;
    }
    // optional .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
    case kF2FsDoSubmitBio: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_do_submit_bio_);
      break;
    }
    // optional .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
    case kF2FsEvictInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_evict_inode_);
      break;
    }
    // optional .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
    case kF2FsFallocate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_fallocate_);
      break;
    }
    // optional .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
    case kF2FsGetDataBlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_get_data_block_);
      break;
    }
    // optional .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
    case kF2FsGetVictim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_get_victim_);
      break;
    }
    // optional .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
    case kF2FsIget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_iget_);
      break;
    }
    // optional .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
    case kF2FsIgetExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_iget_exit_);
      break;
    }
    // optional .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
    case kF2FsNewInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_new_inode_);
      break;
    }
    // optional .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
    case kF2FsReadpage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_readpage_);
      break;
    }
    // optional .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
    case kF2FsReserveNewBlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_reserve_new_block_);
      break;
    }
    // optional .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
    case kF2FsSetPageDirty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_set_page_dirty_);
      break;
    }
    // optional .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
    case kF2FsSubmitWritePage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_submit_write_page_);
      break;
    }
    // optional .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
    case kF2FsSyncFileEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_sync_file_enter_);
      break;
    }
    // optional .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
    case kF2FsSyncFileExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_sync_file_exit_);
      break;
    }
    // optional .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
    case kF2FsSyncFs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_sync_fs_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
    case kF2FsTruncate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
    case kF2FsTruncateBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_blocks_enter_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
    case kF2FsTruncateBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_blocks_exit_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
    case kF2FsTruncateDataBlocksRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_data_blocks_range_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
    case kF2FsTruncateInodeBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_inode_blocks_enter_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
    case kF2FsTruncateInodeBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_inode_blocks_exit_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
    case kF2FsTruncateNode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_node_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
    case kF2FsTruncateNodesEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_nodes_enter_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
    case kF2FsTruncateNodesExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_nodes_exit_);
      break;
    }
    // optional .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
    case kF2FsTruncatePartialNodes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_truncate_partial_nodes_);
      break;
    }
    // optional .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
    case kF2FsUnlinkEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_unlink_enter_);
      break;
    }
    // optional .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
    case kF2FsUnlinkExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_unlink_exit_);
      break;
    }
    // optional .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
    case kF2FsVmPageMkwrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_vm_page_mkwrite_);
      break;
    }
    // optional .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
    case kF2FsWriteBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_write_begin_);
      break;
    }
    // optional .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
    case kF2FsWriteCheckpoint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_write_checkpoint_);
      break;
    }
    // optional .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
    case kF2FsWriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.f2fs_write_end_);
      break;
    }
    // optional .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
    case kAllocPagesIommuEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.alloc_pages_iommu_end_);
      break;
    }
    // optional .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
    case kAllocPagesIommuFail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.alloc_pages_iommu_fail_);
      break;
    }
    // optional .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
    case kAllocPagesIommuStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.alloc_pages_iommu_start_);
      break;
    }
    // optional .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
    case kAllocPagesSysEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.alloc_pages_sys_end_);
      break;
    }
    // optional .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
    case kAllocPagesSysFail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.alloc_pages_sys_fail_);
      break;
    }
    // optional .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
    case kAllocPagesSysStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.alloc_pages_sys_start_);
      break;
    }
    // optional .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
    case kDmaAllocContiguousRetry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.dma_alloc_contiguous_retry_);
      break;
    }
    // optional .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
    case kIommuMapRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.iommu_map_range_);
      break;
    }
    // optional .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
    case kIommuSecPtblMapRangeEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.iommu_sec_ptbl_map_range_end_);
      break;
    }
    // optional .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
    case kIommuSecPtblMapRangeStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.iommu_sec_ptbl_map_range_start_);
      break;
    }
    // optional .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
    case kIonAllocBufferEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_alloc_buffer_end_);
      break;
    }
    // optional .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
    case kIonAllocBufferFail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_alloc_buffer_fail_);
      break;
    }
    // optional .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
    case kIonAllocBufferFallback: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_alloc_buffer_fallback_);
      break;
    }
    // optional .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
    case kIonAllocBufferStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_alloc_buffer_start_);
      break;
    }
    // optional .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
    case kIonCpAllocRetry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_cp_alloc_retry_);
      break;
    }
    // optional .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
    case kIonCpSecureBufferEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_cp_secure_buffer_end_);
      break;
    }
    // optional .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
    case kIonCpSecureBufferStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_cp_secure_buffer_start_);
      break;
    }
    // optional .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
    case kIonPrefetching: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_prefetching_);
      break;
    }
    // optional .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
    case kIonSecureCmaAddToPoolEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_secure_cma_add_to_pool_end_);
      break;
    }
    // optional .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
    case kIonSecureCmaAddToPoolStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_secure_cma_add_to_pool_start_);
      break;
    }
    // optional .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
    case kIonSecureCmaAllocateEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_secure_cma_allocate_end_);
      break;
    }
    // optional .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
    case kIonSecureCmaAllocateStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_secure_cma_allocate_start_);
      break;
    }
    // optional .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
    case kIonSecureCmaShrinkPoolEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_secure_cma_shrink_pool_end_);
      break;
    }
    // optional .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
    case kIonSecureCmaShrinkPoolStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_secure_cma_shrink_pool_start_);
      break;
    }
    // optional .perfetto.protos.KfreeFtraceEvent kfree = 298;
    case kKfree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kfree_);
      break;
    }
    // optional .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
    case kKmalloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kmalloc_);
      break;
    }
    // optional .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
    case kKmallocNode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kmalloc_node_);
      break;
    }
    // optional .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
    case kKmemCacheAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kmem_cache_alloc_);
      break;
    }
    // optional .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
    case kKmemCacheAllocNode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kmem_cache_alloc_node_);
      break;
    }
    // optional .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
    case kKmemCacheFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kmem_cache_free_);
      break;
    }
    // optional .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
    case kMigratePagesEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.migrate_pages_end_);
      break;
    }
    // optional .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
    case kMigratePagesStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.migrate_pages_start_);
      break;
    }
    // optional .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
    case kMigrateRetry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.migrate_retry_);
      break;
    }
    // optional .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
    case kMmPageAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_page_alloc_);
      break;
    }
    // optional .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
    case kMmPageAllocExtfrag: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_page_alloc_extfrag_);
      break;
    }
    // optional .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
    case kMmPageAllocZoneLocked: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_page_alloc_zone_locked_);
      break;
    }
    // optional .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
    case kMmPageFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_page_free_);
      break;
    }
    // optional .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
    case kMmPageFreeBatched: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_page_free_batched_);
      break;
    }
    // optional .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
    case kMmPagePcpuDrain: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_page_pcpu_drain_);
      break;
    }
    // optional .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
    case kRssStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.rss_stat_);
      break;
    }
    // optional .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
    case kIonHeapShrink: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_heap_shrink_);
      break;
    }
    // optional .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
    case kIonHeapGrow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_heap_grow_);
      break;
    }
    // optional .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
    case kFenceInit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.fence_init_);
      break;
    }
    // optional .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
    case kFenceDestroy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.fence_destroy_);
      break;
    }
    // optional .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
    case kFenceEnableSignal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.fence_enable_signal_);
      break;
    }
    // optional .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
    case kFenceSignaled: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.fence_signaled_);
      break;
    }
    // optional .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
    case kClkEnable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.clk_enable_);
      break;
    }
    // optional .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
    case kClkDisable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.clk_disable_);
      break;
    }
    // optional .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
    case kClkSetRate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.clk_set_rate_);
      break;
    }
    // optional .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
    case kBinderTransactionAllocBuf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.binder_transaction_alloc_buf_);
      break;
    }
    // optional .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
    case kSignalDeliver: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.signal_deliver_);
      break;
    }
    // optional .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
    case kSignalGenerate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.signal_generate_);
      break;
    }
    // optional .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
    case kOomScoreAdjUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.oom_score_adj_update_);
      break;
    }
    // optional .perfetto.protos.GenericFtraceEvent generic = 327;
    case kGeneric: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.generic_);
      break;
    }
    // optional .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
    case kMmEventRecord: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mm_event_record_);
      break;
    }
    // optional .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
    case kSysEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sys_enter_);
      break;
    }
    // optional .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
    case kSysExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sys_exit_);
      break;
    }
    // optional .perfetto.protos.ZeroFtraceEvent zero = 331;
    case kZero: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.zero_);
      break;
    }
    // optional .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
    case kGpuFrequency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.gpu_frequency_);
      break;
    }
    // optional .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
    case kSdeTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sde_tracing_mark_write_);
      break;
    }
    // optional .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
    case kMarkVictim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mark_victim_);
      break;
    }
    // optional .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
    case kIonStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_stat_);
      break;
    }
    // optional .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
    case kIonBufferCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_buffer_create_);
      break;
    }
    // optional .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
    case kIonBufferDestroy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ion_buffer_destroy_);
      break;
    }
    // optional .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
    case kScmCallStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.scm_call_start_);
      break;
    }
    // optional .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
    case kScmCallEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.scm_call_end_);
      break;
    }
    // optional .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
    case kGpuMemTotal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.gpu_mem_total_);
      break;
    }
    // optional .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
    case kThermalTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.thermal_temperature_);
      break;
    }
    // optional .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
    case kCdevUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cdev_update_);
      break;
    }
    // optional .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
    case kCpuhpExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpuhp_exit_);
      break;
    }
    // optional .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
    case kCpuhpMultiEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpuhp_multi_enter_);
      break;
    }
    // optional .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
    case kCpuhpEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpuhp_enter_);
      break;
    }
    // optional .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
    case kCpuhpLatency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.cpuhp_latency_);
      break;
    }
    // optional .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
    case kFastrpcDmaStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.fastrpc_dma_stat_);
      break;
    }
    // optional .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
    case kDpuTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.dpu_tracing_mark_write_);
      break;
    }
    // optional .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
    case kG2DTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.g2d_tracing_mark_write_);
      break;
    }
    // optional .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
    case kMaliTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.mali_tracing_mark_write_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceEvent*>(
      &from));
}

void FtraceEvent::MergeFrom(const FtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_case()) {
    case kPrint: {
      mutable_print()->::perfetto::protos::PrintFtraceEvent::MergeFrom(from.print());
      break;
    }
    case kSchedSwitch: {
      mutable_sched_switch()->::perfetto::protos::SchedSwitchFtraceEvent::MergeFrom(from.sched_switch());
      break;
    }
    case kCpuFrequency: {
      mutable_cpu_frequency()->::perfetto::protos::CpuFrequencyFtraceEvent::MergeFrom(from.cpu_frequency());
      break;
    }
    case kCpuFrequencyLimits: {
      mutable_cpu_frequency_limits()->::perfetto::protos::CpuFrequencyLimitsFtraceEvent::MergeFrom(from.cpu_frequency_limits());
      break;
    }
    case kCpuIdle: {
      mutable_cpu_idle()->::perfetto::protos::CpuIdleFtraceEvent::MergeFrom(from.cpu_idle());
      break;
    }
    case kClockEnable: {
      mutable_clock_enable()->::perfetto::protos::ClockEnableFtraceEvent::MergeFrom(from.clock_enable());
      break;
    }
    case kClockDisable: {
      mutable_clock_disable()->::perfetto::protos::ClockDisableFtraceEvent::MergeFrom(from.clock_disable());
      break;
    }
    case kClockSetRate: {
      mutable_clock_set_rate()->::perfetto::protos::ClockSetRateFtraceEvent::MergeFrom(from.clock_set_rate());
      break;
    }
    case kSchedWakeup: {
      mutable_sched_wakeup()->::perfetto::protos::SchedWakeupFtraceEvent::MergeFrom(from.sched_wakeup());
      break;
    }
    case kSchedBlockedReason: {
      mutable_sched_blocked_reason()->::perfetto::protos::SchedBlockedReasonFtraceEvent::MergeFrom(from.sched_blocked_reason());
      break;
    }
    case kSchedCpuHotplug: {
      mutable_sched_cpu_hotplug()->::perfetto::protos::SchedCpuHotplugFtraceEvent::MergeFrom(from.sched_cpu_hotplug());
      break;
    }
    case kSchedWaking: {
      mutable_sched_waking()->::perfetto::protos::SchedWakingFtraceEvent::MergeFrom(from.sched_waking());
      break;
    }
    case kIpiEntry: {
      mutable_ipi_entry()->::perfetto::protos::IpiEntryFtraceEvent::MergeFrom(from.ipi_entry());
      break;
    }
    case kIpiExit: {
      mutable_ipi_exit()->::perfetto::protos::IpiExitFtraceEvent::MergeFrom(from.ipi_exit());
      break;
    }
    case kIpiRaise: {
      mutable_ipi_raise()->::perfetto::protos::IpiRaiseFtraceEvent::MergeFrom(from.ipi_raise());
      break;
    }
    case kSoftirqEntry: {
      mutable_softirq_entry()->::perfetto::protos::SoftirqEntryFtraceEvent::MergeFrom(from.softirq_entry());
      break;
    }
    case kSoftirqExit: {
      mutable_softirq_exit()->::perfetto::protos::SoftirqExitFtraceEvent::MergeFrom(from.softirq_exit());
      break;
    }
    case kSoftirqRaise: {
      mutable_softirq_raise()->::perfetto::protos::SoftirqRaiseFtraceEvent::MergeFrom(from.softirq_raise());
      break;
    }
    case kI2CRead: {
      mutable_i2c_read()->::perfetto::protos::I2cReadFtraceEvent::MergeFrom(from.i2c_read());
      break;
    }
    case kI2CWrite: {
      mutable_i2c_write()->::perfetto::protos::I2cWriteFtraceEvent::MergeFrom(from.i2c_write());
      break;
    }
    case kI2CResult: {
      mutable_i2c_result()->::perfetto::protos::I2cResultFtraceEvent::MergeFrom(from.i2c_result());
      break;
    }
    case kI2CReply: {
      mutable_i2c_reply()->::perfetto::protos::I2cReplyFtraceEvent::MergeFrom(from.i2c_reply());
      break;
    }
    case kSmbusRead: {
      mutable_smbus_read()->::perfetto::protos::SmbusReadFtraceEvent::MergeFrom(from.smbus_read());
      break;
    }
    case kSmbusWrite: {
      mutable_smbus_write()->::perfetto::protos::SmbusWriteFtraceEvent::MergeFrom(from.smbus_write());
      break;
    }
    case kSmbusResult: {
      mutable_smbus_result()->::perfetto::protos::SmbusResultFtraceEvent::MergeFrom(from.smbus_result());
      break;
    }
    case kSmbusReply: {
      mutable_smbus_reply()->::perfetto::protos::SmbusReplyFtraceEvent::MergeFrom(from.smbus_reply());
      break;
    }
    case kLowmemoryKill: {
      mutable_lowmemory_kill()->::perfetto::protos::LowmemoryKillFtraceEvent::MergeFrom(from.lowmemory_kill());
      break;
    }
    case kIrqHandlerEntry: {
      mutable_irq_handler_entry()->::perfetto::protos::IrqHandlerEntryFtraceEvent::MergeFrom(from.irq_handler_entry());
      break;
    }
    case kIrqHandlerExit: {
      mutable_irq_handler_exit()->::perfetto::protos::IrqHandlerExitFtraceEvent::MergeFrom(from.irq_handler_exit());
      break;
    }
    case kSyncPt: {
      mutable_sync_pt()->::perfetto::protos::SyncPtFtraceEvent::MergeFrom(from.sync_pt());
      break;
    }
    case kSyncTimeline: {
      mutable_sync_timeline()->::perfetto::protos::SyncTimelineFtraceEvent::MergeFrom(from.sync_timeline());
      break;
    }
    case kSyncWait: {
      mutable_sync_wait()->::perfetto::protos::SyncWaitFtraceEvent::MergeFrom(from.sync_wait());
      break;
    }
    case kExt4DaWriteBegin: {
      mutable_ext4_da_write_begin()->::perfetto::protos::Ext4DaWriteBeginFtraceEvent::MergeFrom(from.ext4_da_write_begin());
      break;
    }
    case kExt4DaWriteEnd: {
      mutable_ext4_da_write_end()->::perfetto::protos::Ext4DaWriteEndFtraceEvent::MergeFrom(from.ext4_da_write_end());
      break;
    }
    case kExt4SyncFileEnter: {
      mutable_ext4_sync_file_enter()->::perfetto::protos::Ext4SyncFileEnterFtraceEvent::MergeFrom(from.ext4_sync_file_enter());
      break;
    }
    case kExt4SyncFileExit: {
      mutable_ext4_sync_file_exit()->::perfetto::protos::Ext4SyncFileExitFtraceEvent::MergeFrom(from.ext4_sync_file_exit());
      break;
    }
    case kBlockRqIssue: {
      mutable_block_rq_issue()->::perfetto::protos::BlockRqIssueFtraceEvent::MergeFrom(from.block_rq_issue());
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      mutable_mm_vmscan_direct_reclaim_begin()->::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent::MergeFrom(from.mm_vmscan_direct_reclaim_begin());
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      mutable_mm_vmscan_direct_reclaim_end()->::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent::MergeFrom(from.mm_vmscan_direct_reclaim_end());
      break;
    }
    case kMmVmscanKswapdWake: {
      mutable_mm_vmscan_kswapd_wake()->::perfetto::protos::MmVmscanKswapdWakeFtraceEvent::MergeFrom(from.mm_vmscan_kswapd_wake());
      break;
    }
    case kMmVmscanKswapdSleep: {
      mutable_mm_vmscan_kswapd_sleep()->::perfetto::protos::MmVmscanKswapdSleepFtraceEvent::MergeFrom(from.mm_vmscan_kswapd_sleep());
      break;
    }
    case kBinderTransaction: {
      mutable_binder_transaction()->::perfetto::protos::BinderTransactionFtraceEvent::MergeFrom(from.binder_transaction());
      break;
    }
    case kBinderTransactionReceived: {
      mutable_binder_transaction_received()->::perfetto::protos::BinderTransactionReceivedFtraceEvent::MergeFrom(from.binder_transaction_received());
      break;
    }
    case kBinderSetPriority: {
      mutable_binder_set_priority()->::perfetto::protos::BinderSetPriorityFtraceEvent::MergeFrom(from.binder_set_priority());
      break;
    }
    case kBinderLock: {
      mutable_binder_lock()->::perfetto::protos::BinderLockFtraceEvent::MergeFrom(from.binder_lock());
      break;
    }
    case kBinderLocked: {
      mutable_binder_locked()->::perfetto::protos::BinderLockedFtraceEvent::MergeFrom(from.binder_locked());
      break;
    }
    case kBinderUnlock: {
      mutable_binder_unlock()->::perfetto::protos::BinderUnlockFtraceEvent::MergeFrom(from.binder_unlock());
      break;
    }
    case kWorkqueueActivateWork: {
      mutable_workqueue_activate_work()->::perfetto::protos::WorkqueueActivateWorkFtraceEvent::MergeFrom(from.workqueue_activate_work());
      break;
    }
    case kWorkqueueExecuteEnd: {
      mutable_workqueue_execute_end()->::perfetto::protos::WorkqueueExecuteEndFtraceEvent::MergeFrom(from.workqueue_execute_end());
      break;
    }
    case kWorkqueueExecuteStart: {
      mutable_workqueue_execute_start()->::perfetto::protos::WorkqueueExecuteStartFtraceEvent::MergeFrom(from.workqueue_execute_start());
      break;
    }
    case kWorkqueueQueueWork: {
      mutable_workqueue_queue_work()->::perfetto::protos::WorkqueueQueueWorkFtraceEvent::MergeFrom(from.workqueue_queue_work());
      break;
    }
    case kRegulatorDisable: {
      mutable_regulator_disable()->::perfetto::protos::RegulatorDisableFtraceEvent::MergeFrom(from.regulator_disable());
      break;
    }
    case kRegulatorDisableComplete: {
      mutable_regulator_disable_complete()->::perfetto::protos::RegulatorDisableCompleteFtraceEvent::MergeFrom(from.regulator_disable_complete());
      break;
    }
    case kRegulatorEnable: {
      mutable_regulator_enable()->::perfetto::protos::RegulatorEnableFtraceEvent::MergeFrom(from.regulator_enable());
      break;
    }
    case kRegulatorEnableComplete: {
      mutable_regulator_enable_complete()->::perfetto::protos::RegulatorEnableCompleteFtraceEvent::MergeFrom(from.regulator_enable_complete());
      break;
    }
    case kRegulatorEnableDelay: {
      mutable_regulator_enable_delay()->::perfetto::protos::RegulatorEnableDelayFtraceEvent::MergeFrom(from.regulator_enable_delay());
      break;
    }
    case kRegulatorSetVoltage: {
      mutable_regulator_set_voltage()->::perfetto::protos::RegulatorSetVoltageFtraceEvent::MergeFrom(from.regulator_set_voltage());
      break;
    }
    case kRegulatorSetVoltageComplete: {
      mutable_regulator_set_voltage_complete()->::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent::MergeFrom(from.regulator_set_voltage_complete());
      break;
    }
    case kCgroupAttachTask: {
      mutable_cgroup_attach_task()->::perfetto::protos::CgroupAttachTaskFtraceEvent::MergeFrom(from.cgroup_attach_task());
      break;
    }
    case kCgroupMkdir: {
      mutable_cgroup_mkdir()->::perfetto::protos::CgroupMkdirFtraceEvent::MergeFrom(from.cgroup_mkdir());
      break;
    }
    case kCgroupRemount: {
      mutable_cgroup_remount()->::perfetto::protos::CgroupRemountFtraceEvent::MergeFrom(from.cgroup_remount());
      break;
    }
    case kCgroupRmdir: {
      mutable_cgroup_rmdir()->::perfetto::protos::CgroupRmdirFtraceEvent::MergeFrom(from.cgroup_rmdir());
      break;
    }
    case kCgroupTransferTasks: {
      mutable_cgroup_transfer_tasks()->::perfetto::protos::CgroupTransferTasksFtraceEvent::MergeFrom(from.cgroup_transfer_tasks());
      break;
    }
    case kCgroupDestroyRoot: {
      mutable_cgroup_destroy_root()->::perfetto::protos::CgroupDestroyRootFtraceEvent::MergeFrom(from.cgroup_destroy_root());
      break;
    }
    case kCgroupRelease: {
      mutable_cgroup_release()->::perfetto::protos::CgroupReleaseFtraceEvent::MergeFrom(from.cgroup_release());
      break;
    }
    case kCgroupRename: {
      mutable_cgroup_rename()->::perfetto::protos::CgroupRenameFtraceEvent::MergeFrom(from.cgroup_rename());
      break;
    }
    case kCgroupSetupRoot: {
      mutable_cgroup_setup_root()->::perfetto::protos::CgroupSetupRootFtraceEvent::MergeFrom(from.cgroup_setup_root());
      break;
    }
    case kMdpCmdKickoff: {
      mutable_mdp_cmd_kickoff()->::perfetto::protos::MdpCmdKickoffFtraceEvent::MergeFrom(from.mdp_cmd_kickoff());
      break;
    }
    case kMdpCommit: {
      mutable_mdp_commit()->::perfetto::protos::MdpCommitFtraceEvent::MergeFrom(from.mdp_commit());
      break;
    }
    case kMdpPerfSetOt: {
      mutable_mdp_perf_set_ot()->::perfetto::protos::MdpPerfSetOtFtraceEvent::MergeFrom(from.mdp_perf_set_ot());
      break;
    }
    case kMdpSsppChange: {
      mutable_mdp_sspp_change()->::perfetto::protos::MdpSsppChangeFtraceEvent::MergeFrom(from.mdp_sspp_change());
      break;
    }
    case kTracingMarkWrite: {
      mutable_tracing_mark_write()->::perfetto::protos::TracingMarkWriteFtraceEvent::MergeFrom(from.tracing_mark_write());
      break;
    }
    case kMdpCmdPingpongDone: {
      mutable_mdp_cmd_pingpong_done()->::perfetto::protos::MdpCmdPingpongDoneFtraceEvent::MergeFrom(from.mdp_cmd_pingpong_done());
      break;
    }
    case kMdpCompareBw: {
      mutable_mdp_compare_bw()->::perfetto::protos::MdpCompareBwFtraceEvent::MergeFrom(from.mdp_compare_bw());
      break;
    }
    case kMdpPerfSetPanicLuts: {
      mutable_mdp_perf_set_panic_luts()->::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent::MergeFrom(from.mdp_perf_set_panic_luts());
      break;
    }
    case kMdpSsppSet: {
      mutable_mdp_sspp_set()->::perfetto::protos::MdpSsppSetFtraceEvent::MergeFrom(from.mdp_sspp_set());
      break;
    }
    case kMdpCmdReadptrDone: {
      mutable_mdp_cmd_readptr_done()->::perfetto::protos::MdpCmdReadptrDoneFtraceEvent::MergeFrom(from.mdp_cmd_readptr_done());
      break;
    }
    case kMdpMisrCrc: {
      mutable_mdp_misr_crc()->::perfetto::protos::MdpMisrCrcFtraceEvent::MergeFrom(from.mdp_misr_crc());
      break;
    }
    case kMdpPerfSetQosLuts: {
      mutable_mdp_perf_set_qos_luts()->::perfetto::protos::MdpPerfSetQosLutsFtraceEvent::MergeFrom(from.mdp_perf_set_qos_luts());
      break;
    }
    case kMdpTraceCounter: {
      mutable_mdp_trace_counter()->::perfetto::protos::MdpTraceCounterFtraceEvent::MergeFrom(from.mdp_trace_counter());
      break;
    }
    case kMdpCmdReleaseBw: {
      mutable_mdp_cmd_release_bw()->::perfetto::protos::MdpCmdReleaseBwFtraceEvent::MergeFrom(from.mdp_cmd_release_bw());
      break;
    }
    case kMdpMixerUpdate: {
      mutable_mdp_mixer_update()->::perfetto::protos::MdpMixerUpdateFtraceEvent::MergeFrom(from.mdp_mixer_update());
      break;
    }
    case kMdpPerfSetWmLevels: {
      mutable_mdp_perf_set_wm_levels()->::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent::MergeFrom(from.mdp_perf_set_wm_levels());
      break;
    }
    case kMdpVideoUnderrunDone: {
      mutable_mdp_video_underrun_done()->::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent::MergeFrom(from.mdp_video_underrun_done());
      break;
    }
    case kMdpCmdWaitPingpong: {
      mutable_mdp_cmd_wait_pingpong()->::perfetto::protos::MdpCmdWaitPingpongFtraceEvent::MergeFrom(from.mdp_cmd_wait_pingpong());
      break;
    }
    case kMdpPerfPrefillCalc: {
      mutable_mdp_perf_prefill_calc()->::perfetto::protos::MdpPerfPrefillCalcFtraceEvent::MergeFrom(from.mdp_perf_prefill_calc());
      break;
    }
    case kMdpPerfUpdateBus: {
      mutable_mdp_perf_update_bus()->::perfetto::protos::MdpPerfUpdateBusFtraceEvent::MergeFrom(from.mdp_perf_update_bus());
      break;
    }
    case kRotatorBwAoAsContext: {
      mutable_rotator_bw_ao_as_context()->::perfetto::protos::RotatorBwAoAsContextFtraceEvent::MergeFrom(from.rotator_bw_ao_as_context());
      break;
    }
    case kMmFilemapAddToPageCache: {
      mutable_mm_filemap_add_to_page_cache()->::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent::MergeFrom(from.mm_filemap_add_to_page_cache());
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      mutable_mm_filemap_delete_from_page_cache()->::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent::MergeFrom(from.mm_filemap_delete_from_page_cache());
      break;
    }
    case kMmCompactionBegin: {
      mutable_mm_compaction_begin()->::perfetto::protos::MmCompactionBeginFtraceEvent::MergeFrom(from.mm_compaction_begin());
      break;
    }
    case kMmCompactionDeferCompaction: {
      mutable_mm_compaction_defer_compaction()->::perfetto::protos::MmCompactionDeferCompactionFtraceEvent::MergeFrom(from.mm_compaction_defer_compaction());
      break;
    }
    case kMmCompactionDeferred: {
      mutable_mm_compaction_deferred()->::perfetto::protos::MmCompactionDeferredFtraceEvent::MergeFrom(from.mm_compaction_deferred());
      break;
    }
    case kMmCompactionDeferReset: {
      mutable_mm_compaction_defer_reset()->::perfetto::protos::MmCompactionDeferResetFtraceEvent::MergeFrom(from.mm_compaction_defer_reset());
      break;
    }
    case kMmCompactionEnd: {
      mutable_mm_compaction_end()->::perfetto::protos::MmCompactionEndFtraceEvent::MergeFrom(from.mm_compaction_end());
      break;
    }
    case kMmCompactionFinished: {
      mutable_mm_compaction_finished()->::perfetto::protos::MmCompactionFinishedFtraceEvent::MergeFrom(from.mm_compaction_finished());
      break;
    }
    case kMmCompactionIsolateFreepages: {
      mutable_mm_compaction_isolate_freepages()->::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent::MergeFrom(from.mm_compaction_isolate_freepages());
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      mutable_mm_compaction_isolate_migratepages()->::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent::MergeFrom(from.mm_compaction_isolate_migratepages());
      break;
    }
    case kMmCompactionKcompactdSleep: {
      mutable_mm_compaction_kcompactd_sleep()->::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent::MergeFrom(from.mm_compaction_kcompactd_sleep());
      break;
    }
    case kMmCompactionKcompactdWake: {
      mutable_mm_compaction_kcompactd_wake()->::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent::MergeFrom(from.mm_compaction_kcompactd_wake());
      break;
    }
    case kMmCompactionMigratepages: {
      mutable_mm_compaction_migratepages()->::perfetto::protos::MmCompactionMigratepagesFtraceEvent::MergeFrom(from.mm_compaction_migratepages());
      break;
    }
    case kMmCompactionSuitable: {
      mutable_mm_compaction_suitable()->::perfetto::protos::MmCompactionSuitableFtraceEvent::MergeFrom(from.mm_compaction_suitable());
      break;
    }
    case kMmCompactionTryToCompactPages: {
      mutable_mm_compaction_try_to_compact_pages()->::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent::MergeFrom(from.mm_compaction_try_to_compact_pages());
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      mutable_mm_compaction_wakeup_kcompactd()->::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent::MergeFrom(from.mm_compaction_wakeup_kcompactd());
      break;
    }
    case kSuspendResume: {
      mutable_suspend_resume()->::perfetto::protos::SuspendResumeFtraceEvent::MergeFrom(from.suspend_resume());
      break;
    }
    case kSchedWakeupNew: {
      mutable_sched_wakeup_new()->::perfetto::protos::SchedWakeupNewFtraceEvent::MergeFrom(from.sched_wakeup_new());
      break;
    }
    case kBlockBioBackmerge: {
      mutable_block_bio_backmerge()->::perfetto::protos::BlockBioBackmergeFtraceEvent::MergeFrom(from.block_bio_backmerge());
      break;
    }
    case kBlockBioBounce: {
      mutable_block_bio_bounce()->::perfetto::protos::BlockBioBounceFtraceEvent::MergeFrom(from.block_bio_bounce());
      break;
    }
    case kBlockBioComplete: {
      mutable_block_bio_complete()->::perfetto::protos::BlockBioCompleteFtraceEvent::MergeFrom(from.block_bio_complete());
      break;
    }
    case kBlockBioFrontmerge: {
      mutable_block_bio_frontmerge()->::perfetto::protos::BlockBioFrontmergeFtraceEvent::MergeFrom(from.block_bio_frontmerge());
      break;
    }
    case kBlockBioQueue: {
      mutable_block_bio_queue()->::perfetto::protos::BlockBioQueueFtraceEvent::MergeFrom(from.block_bio_queue());
      break;
    }
    case kBlockBioRemap: {
      mutable_block_bio_remap()->::perfetto::protos::BlockBioRemapFtraceEvent::MergeFrom(from.block_bio_remap());
      break;
    }
    case kBlockDirtyBuffer: {
      mutable_block_dirty_buffer()->::perfetto::protos::BlockDirtyBufferFtraceEvent::MergeFrom(from.block_dirty_buffer());
      break;
    }
    case kBlockGetrq: {
      mutable_block_getrq()->::perfetto::protos::BlockGetrqFtraceEvent::MergeFrom(from.block_getrq());
      break;
    }
    case kBlockPlug: {
      mutable_block_plug()->::perfetto::protos::BlockPlugFtraceEvent::MergeFrom(from.block_plug());
      break;
    }
    case kBlockRqAbort: {
      mutable_block_rq_abort()->::perfetto::protos::BlockRqAbortFtraceEvent::MergeFrom(from.block_rq_abort());
      break;
    }
    case kBlockRqComplete: {
      mutable_block_rq_complete()->::perfetto::protos::BlockRqCompleteFtraceEvent::MergeFrom(from.block_rq_complete());
      break;
    }
    case kBlockRqInsert: {
      mutable_block_rq_insert()->::perfetto::protos::BlockRqInsertFtraceEvent::MergeFrom(from.block_rq_insert());
      break;
    }
    case kBlockRqRemap: {
      mutable_block_rq_remap()->::perfetto::protos::BlockRqRemapFtraceEvent::MergeFrom(from.block_rq_remap());
      break;
    }
    case kBlockRqRequeue: {
      mutable_block_rq_requeue()->::perfetto::protos::BlockRqRequeueFtraceEvent::MergeFrom(from.block_rq_requeue());
      break;
    }
    case kBlockSleeprq: {
      mutable_block_sleeprq()->::perfetto::protos::BlockSleeprqFtraceEvent::MergeFrom(from.block_sleeprq());
      break;
    }
    case kBlockSplit: {
      mutable_block_split()->::perfetto::protos::BlockSplitFtraceEvent::MergeFrom(from.block_split());
      break;
    }
    case kBlockTouchBuffer: {
      mutable_block_touch_buffer()->::perfetto::protos::BlockTouchBufferFtraceEvent::MergeFrom(from.block_touch_buffer());
      break;
    }
    case kBlockUnplug: {
      mutable_block_unplug()->::perfetto::protos::BlockUnplugFtraceEvent::MergeFrom(from.block_unplug());
      break;
    }
    case kExt4AllocDaBlocks: {
      mutable_ext4_alloc_da_blocks()->::perfetto::protos::Ext4AllocDaBlocksFtraceEvent::MergeFrom(from.ext4_alloc_da_blocks());
      break;
    }
    case kExt4AllocateBlocks: {
      mutable_ext4_allocate_blocks()->::perfetto::protos::Ext4AllocateBlocksFtraceEvent::MergeFrom(from.ext4_allocate_blocks());
      break;
    }
    case kExt4AllocateInode: {
      mutable_ext4_allocate_inode()->::perfetto::protos::Ext4AllocateInodeFtraceEvent::MergeFrom(from.ext4_allocate_inode());
      break;
    }
    case kExt4BeginOrderedTruncate: {
      mutable_ext4_begin_ordered_truncate()->::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent::MergeFrom(from.ext4_begin_ordered_truncate());
      break;
    }
    case kExt4CollapseRange: {
      mutable_ext4_collapse_range()->::perfetto::protos::Ext4CollapseRangeFtraceEvent::MergeFrom(from.ext4_collapse_range());
      break;
    }
    case kExt4DaReleaseSpace: {
      mutable_ext4_da_release_space()->::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent::MergeFrom(from.ext4_da_release_space());
      break;
    }
    case kExt4DaReserveSpace: {
      mutable_ext4_da_reserve_space()->::perfetto::protos::Ext4DaReserveSpaceFtraceEvent::MergeFrom(from.ext4_da_reserve_space());
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      mutable_ext4_da_update_reserve_space()->::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent::MergeFrom(from.ext4_da_update_reserve_space());
      break;
    }
    case kExt4DaWritePages: {
      mutable_ext4_da_write_pages()->::perfetto::protos::Ext4DaWritePagesFtraceEvent::MergeFrom(from.ext4_da_write_pages());
      break;
    }
    case kExt4DaWritePagesExtent: {
      mutable_ext4_da_write_pages_extent()->::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent::MergeFrom(from.ext4_da_write_pages_extent());
      break;
    }
    case kExt4DirectIOEnter: {
      mutable_ext4_direct_io_enter()->::perfetto::protos::Ext4DirectIOEnterFtraceEvent::MergeFrom(from.ext4_direct_io_enter());
      break;
    }
    case kExt4DirectIOExit: {
      mutable_ext4_direct_io_exit()->::perfetto::protos::Ext4DirectIOExitFtraceEvent::MergeFrom(from.ext4_direct_io_exit());
      break;
    }
    case kExt4DiscardBlocks: {
      mutable_ext4_discard_blocks()->::perfetto::protos::Ext4DiscardBlocksFtraceEvent::MergeFrom(from.ext4_discard_blocks());
      break;
    }
    case kExt4DiscardPreallocations: {
      mutable_ext4_discard_preallocations()->::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent::MergeFrom(from.ext4_discard_preallocations());
      break;
    }
    case kExt4DropInode: {
      mutable_ext4_drop_inode()->::perfetto::protos::Ext4DropInodeFtraceEvent::MergeFrom(from.ext4_drop_inode());
      break;
    }
    case kExt4EsCacheExtent: {
      mutable_ext4_es_cache_extent()->::perfetto::protos::Ext4EsCacheExtentFtraceEvent::MergeFrom(from.ext4_es_cache_extent());
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      mutable_ext4_es_find_delayed_extent_range_enter()->::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent::MergeFrom(from.ext4_es_find_delayed_extent_range_enter());
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      mutable_ext4_es_find_delayed_extent_range_exit()->::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent::MergeFrom(from.ext4_es_find_delayed_extent_range_exit());
      break;
    }
    case kExt4EsInsertExtent: {
      mutable_ext4_es_insert_extent()->::perfetto::protos::Ext4EsInsertExtentFtraceEvent::MergeFrom(from.ext4_es_insert_extent());
      break;
    }
    case kExt4EsLookupExtentEnter: {
      mutable_ext4_es_lookup_extent_enter()->::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent::MergeFrom(from.ext4_es_lookup_extent_enter());
      break;
    }
    case kExt4EsLookupExtentExit: {
      mutable_ext4_es_lookup_extent_exit()->::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent::MergeFrom(from.ext4_es_lookup_extent_exit());
      break;
    }
    case kExt4EsRemoveExtent: {
      mutable_ext4_es_remove_extent()->::perfetto::protos::Ext4EsRemoveExtentFtraceEvent::MergeFrom(from.ext4_es_remove_extent());
      break;
    }
    case kExt4EsShrink: {
      mutable_ext4_es_shrink()->::perfetto::protos::Ext4EsShrinkFtraceEvent::MergeFrom(from.ext4_es_shrink());
      break;
    }
    case kExt4EsShrinkCount: {
      mutable_ext4_es_shrink_count()->::perfetto::protos::Ext4EsShrinkCountFtraceEvent::MergeFrom(from.ext4_es_shrink_count());
      break;
    }
    case kExt4EsShrinkScanEnter: {
      mutable_ext4_es_shrink_scan_enter()->::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent::MergeFrom(from.ext4_es_shrink_scan_enter());
      break;
    }
    case kExt4EsShrinkScanExit: {
      mutable_ext4_es_shrink_scan_exit()->::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent::MergeFrom(from.ext4_es_shrink_scan_exit());
      break;
    }
    case kExt4EvictInode: {
      mutable_ext4_evict_inode()->::perfetto::protos::Ext4EvictInodeFtraceEvent::MergeFrom(from.ext4_evict_inode());
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      mutable_ext4_ext_convert_to_initialized_enter()->::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent::MergeFrom(from.ext4_ext_convert_to_initialized_enter());
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      mutable_ext4_ext_convert_to_initialized_fastpath()->::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent::MergeFrom(from.ext4_ext_convert_to_initialized_fastpath());
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      mutable_ext4_ext_handle_unwritten_extents()->::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent::MergeFrom(from.ext4_ext_handle_unwritten_extents());
      break;
    }
    case kExt4ExtInCache: {
      mutable_ext4_ext_in_cache()->::perfetto::protos::Ext4ExtInCacheFtraceEvent::MergeFrom(from.ext4_ext_in_cache());
      break;
    }
    case kExt4ExtLoadExtent: {
      mutable_ext4_ext_load_extent()->::perfetto::protos::Ext4ExtLoadExtentFtraceEvent::MergeFrom(from.ext4_ext_load_extent());
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      mutable_ext4_ext_map_blocks_enter()->::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent::MergeFrom(from.ext4_ext_map_blocks_enter());
      break;
    }
    case kExt4ExtMapBlocksExit: {
      mutable_ext4_ext_map_blocks_exit()->::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent::MergeFrom(from.ext4_ext_map_blocks_exit());
      break;
    }
    case kExt4ExtPutInCache: {
      mutable_ext4_ext_put_in_cache()->::perfetto::protos::Ext4ExtPutInCacheFtraceEvent::MergeFrom(from.ext4_ext_put_in_cache());
      break;
    }
    case kExt4ExtRemoveSpace: {
      mutable_ext4_ext_remove_space()->::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent::MergeFrom(from.ext4_ext_remove_space());
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      mutable_ext4_ext_remove_space_done()->::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent::MergeFrom(from.ext4_ext_remove_space_done());
      break;
    }
    case kExt4ExtRmIdx: {
      mutable_ext4_ext_rm_idx()->::perfetto::protos::Ext4ExtRmIdxFtraceEvent::MergeFrom(from.ext4_ext_rm_idx());
      break;
    }
    case kExt4ExtRmLeaf: {
      mutable_ext4_ext_rm_leaf()->::perfetto::protos::Ext4ExtRmLeafFtraceEvent::MergeFrom(from.ext4_ext_rm_leaf());
      break;
    }
    case kExt4ExtShowExtent: {
      mutable_ext4_ext_show_extent()->::perfetto::protos::Ext4ExtShowExtentFtraceEvent::MergeFrom(from.ext4_ext_show_extent());
      break;
    }
    case kExt4FallocateEnter: {
      mutable_ext4_fallocate_enter()->::perfetto::protos::Ext4FallocateEnterFtraceEvent::MergeFrom(from.ext4_fallocate_enter());
      break;
    }
    case kExt4FallocateExit: {
      mutable_ext4_fallocate_exit()->::perfetto::protos::Ext4FallocateExitFtraceEvent::MergeFrom(from.ext4_fallocate_exit());
      break;
    }
    case kExt4FindDelallocRange: {
      mutable_ext4_find_delalloc_range()->::perfetto::protos::Ext4FindDelallocRangeFtraceEvent::MergeFrom(from.ext4_find_delalloc_range());
      break;
    }
    case kExt4Forget: {
      mutable_ext4_forget()->::perfetto::protos::Ext4ForgetFtraceEvent::MergeFrom(from.ext4_forget());
      break;
    }
    case kExt4FreeBlocks: {
      mutable_ext4_free_blocks()->::perfetto::protos::Ext4FreeBlocksFtraceEvent::MergeFrom(from.ext4_free_blocks());
      break;
    }
    case kExt4FreeInode: {
      mutable_ext4_free_inode()->::perfetto::protos::Ext4FreeInodeFtraceEvent::MergeFrom(from.ext4_free_inode());
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      mutable_ext4_get_implied_cluster_alloc_exit()->::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent::MergeFrom(from.ext4_get_implied_cluster_alloc_exit());
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      mutable_ext4_get_reserved_cluster_alloc()->::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent::MergeFrom(from.ext4_get_reserved_cluster_alloc());
      break;
    }
    case kExt4IndMapBlocksEnter: {
      mutable_ext4_ind_map_blocks_enter()->::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent::MergeFrom(from.ext4_ind_map_blocks_enter());
      break;
    }
    case kExt4IndMapBlocksExit: {
      mutable_ext4_ind_map_blocks_exit()->::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent::MergeFrom(from.ext4_ind_map_blocks_exit());
      break;
    }
    case kExt4InsertRange: {
      mutable_ext4_insert_range()->::perfetto::protos::Ext4InsertRangeFtraceEvent::MergeFrom(from.ext4_insert_range());
      break;
    }
    case kExt4Invalidatepage: {
      mutable_ext4_invalidatepage()->::perfetto::protos::Ext4InvalidatepageFtraceEvent::MergeFrom(from.ext4_invalidatepage());
      break;
    }
    case kExt4JournalStart: {
      mutable_ext4_journal_start()->::perfetto::protos::Ext4JournalStartFtraceEvent::MergeFrom(from.ext4_journal_start());
      break;
    }
    case kExt4JournalStartReserved: {
      mutable_ext4_journal_start_reserved()->::perfetto::protos::Ext4JournalStartReservedFtraceEvent::MergeFrom(from.ext4_journal_start_reserved());
      break;
    }
    case kExt4JournalledInvalidatepage: {
      mutable_ext4_journalled_invalidatepage()->::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent::MergeFrom(from.ext4_journalled_invalidatepage());
      break;
    }
    case kExt4JournalledWriteEnd: {
      mutable_ext4_journalled_write_end()->::perfetto::protos::Ext4JournalledWriteEndFtraceEvent::MergeFrom(from.ext4_journalled_write_end());
      break;
    }
    case kExt4LoadInode: {
      mutable_ext4_load_inode()->::perfetto::protos::Ext4LoadInodeFtraceEvent::MergeFrom(from.ext4_load_inode());
      break;
    }
    case kExt4LoadInodeBitmap: {
      mutable_ext4_load_inode_bitmap()->::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent::MergeFrom(from.ext4_load_inode_bitmap());
      break;
    }
    case kExt4MarkInodeDirty: {
      mutable_ext4_mark_inode_dirty()->::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent::MergeFrom(from.ext4_mark_inode_dirty());
      break;
    }
    case kExt4MbBitmapLoad: {
      mutable_ext4_mb_bitmap_load()->::perfetto::protos::Ext4MbBitmapLoadFtraceEvent::MergeFrom(from.ext4_mb_bitmap_load());
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      mutable_ext4_mb_buddy_bitmap_load()->::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent::MergeFrom(from.ext4_mb_buddy_bitmap_load());
      break;
    }
    case kExt4MbDiscardPreallocations: {
      mutable_ext4_mb_discard_preallocations()->::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent::MergeFrom(from.ext4_mb_discard_preallocations());
      break;
    }
    case kExt4MbNewGroupPa: {
      mutable_ext4_mb_new_group_pa()->::perfetto::protos::Ext4MbNewGroupPaFtraceEvent::MergeFrom(from.ext4_mb_new_group_pa());
      break;
    }
    case kExt4MbNewInodePa: {
      mutable_ext4_mb_new_inode_pa()->::perfetto::protos::Ext4MbNewInodePaFtraceEvent::MergeFrom(from.ext4_mb_new_inode_pa());
      break;
    }
    case kExt4MbReleaseGroupPa: {
      mutable_ext4_mb_release_group_pa()->::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent::MergeFrom(from.ext4_mb_release_group_pa());
      break;
    }
    case kExt4MbReleaseInodePa: {
      mutable_ext4_mb_release_inode_pa()->::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent::MergeFrom(from.ext4_mb_release_inode_pa());
      break;
    }
    case kExt4MballocAlloc: {
      mutable_ext4_mballoc_alloc()->::perfetto::protos::Ext4MballocAllocFtraceEvent::MergeFrom(from.ext4_mballoc_alloc());
      break;
    }
    case kExt4MballocDiscard: {
      mutable_ext4_mballoc_discard()->::perfetto::protos::Ext4MballocDiscardFtraceEvent::MergeFrom(from.ext4_mballoc_discard());
      break;
    }
    case kExt4MballocFree: {
      mutable_ext4_mballoc_free()->::perfetto::protos::Ext4MballocFreeFtraceEvent::MergeFrom(from.ext4_mballoc_free());
      break;
    }
    case kExt4MballocPrealloc: {
      mutable_ext4_mballoc_prealloc()->::perfetto::protos::Ext4MballocPreallocFtraceEvent::MergeFrom(from.ext4_mballoc_prealloc());
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      mutable_ext4_other_inode_update_time()->::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent::MergeFrom(from.ext4_other_inode_update_time());
      break;
    }
    case kExt4PunchHole: {
      mutable_ext4_punch_hole()->::perfetto::protos::Ext4PunchHoleFtraceEvent::MergeFrom(from.ext4_punch_hole());
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      mutable_ext4_read_block_bitmap_load()->::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent::MergeFrom(from.ext4_read_block_bitmap_load());
      break;
    }
    case kExt4Readpage: {
      mutable_ext4_readpage()->::perfetto::protos::Ext4ReadpageFtraceEvent::MergeFrom(from.ext4_readpage());
      break;
    }
    case kExt4Releasepage: {
      mutable_ext4_releasepage()->::perfetto::protos::Ext4ReleasepageFtraceEvent::MergeFrom(from.ext4_releasepage());
      break;
    }
    case kExt4RemoveBlocks: {
      mutable_ext4_remove_blocks()->::perfetto::protos::Ext4RemoveBlocksFtraceEvent::MergeFrom(from.ext4_remove_blocks());
      break;
    }
    case kExt4RequestBlocks: {
      mutable_ext4_request_blocks()->::perfetto::protos::Ext4RequestBlocksFtraceEvent::MergeFrom(from.ext4_request_blocks());
      break;
    }
    case kExt4RequestInode: {
      mutable_ext4_request_inode()->::perfetto::protos::Ext4RequestInodeFtraceEvent::MergeFrom(from.ext4_request_inode());
      break;
    }
    case kExt4SyncFs: {
      mutable_ext4_sync_fs()->::perfetto::protos::Ext4SyncFsFtraceEvent::MergeFrom(from.ext4_sync_fs());
      break;
    }
    case kExt4TrimAllFree: {
      mutable_ext4_trim_all_free()->::perfetto::protos::Ext4TrimAllFreeFtraceEvent::MergeFrom(from.ext4_trim_all_free());
      break;
    }
    case kExt4TrimExtent: {
      mutable_ext4_trim_extent()->::perfetto::protos::Ext4TrimExtentFtraceEvent::MergeFrom(from.ext4_trim_extent());
      break;
    }
    case kExt4TruncateEnter: {
      mutable_ext4_truncate_enter()->::perfetto::protos::Ext4TruncateEnterFtraceEvent::MergeFrom(from.ext4_truncate_enter());
      break;
    }
    case kExt4TruncateExit: {
      mutable_ext4_truncate_exit()->::perfetto::protos::Ext4TruncateExitFtraceEvent::MergeFrom(from.ext4_truncate_exit());
      break;
    }
    case kExt4UnlinkEnter: {
      mutable_ext4_unlink_enter()->::perfetto::protos::Ext4UnlinkEnterFtraceEvent::MergeFrom(from.ext4_unlink_enter());
      break;
    }
    case kExt4UnlinkExit: {
      mutable_ext4_unlink_exit()->::perfetto::protos::Ext4UnlinkExitFtraceEvent::MergeFrom(from.ext4_unlink_exit());
      break;
    }
    case kExt4WriteBegin: {
      mutable_ext4_write_begin()->::perfetto::protos::Ext4WriteBeginFtraceEvent::MergeFrom(from.ext4_write_begin());
      break;
    }
    case kExt4WriteEnd: {
      mutable_ext4_write_end()->::perfetto::protos::Ext4WriteEndFtraceEvent::MergeFrom(from.ext4_write_end());
      break;
    }
    case kExt4Writepage: {
      mutable_ext4_writepage()->::perfetto::protos::Ext4WritepageFtraceEvent::MergeFrom(from.ext4_writepage());
      break;
    }
    case kExt4Writepages: {
      mutable_ext4_writepages()->::perfetto::protos::Ext4WritepagesFtraceEvent::MergeFrom(from.ext4_writepages());
      break;
    }
    case kExt4WritepagesResult: {
      mutable_ext4_writepages_result()->::perfetto::protos::Ext4WritepagesResultFtraceEvent::MergeFrom(from.ext4_writepages_result());
      break;
    }
    case kExt4ZeroRange: {
      mutable_ext4_zero_range()->::perfetto::protos::Ext4ZeroRangeFtraceEvent::MergeFrom(from.ext4_zero_range());
      break;
    }
    case kTaskNewtask: {
      mutable_task_newtask()->::perfetto::protos::TaskNewtaskFtraceEvent::MergeFrom(from.task_newtask());
      break;
    }
    case kTaskRename: {
      mutable_task_rename()->::perfetto::protos::TaskRenameFtraceEvent::MergeFrom(from.task_rename());
      break;
    }
    case kSchedProcessExec: {
      mutable_sched_process_exec()->::perfetto::protos::SchedProcessExecFtraceEvent::MergeFrom(from.sched_process_exec());
      break;
    }
    case kSchedProcessExit: {
      mutable_sched_process_exit()->::perfetto::protos::SchedProcessExitFtraceEvent::MergeFrom(from.sched_process_exit());
      break;
    }
    case kSchedProcessFork: {
      mutable_sched_process_fork()->::perfetto::protos::SchedProcessForkFtraceEvent::MergeFrom(from.sched_process_fork());
      break;
    }
    case kSchedProcessFree: {
      mutable_sched_process_free()->::perfetto::protos::SchedProcessFreeFtraceEvent::MergeFrom(from.sched_process_free());
      break;
    }
    case kSchedProcessHang: {
      mutable_sched_process_hang()->::perfetto::protos::SchedProcessHangFtraceEvent::MergeFrom(from.sched_process_hang());
      break;
    }
    case kSchedProcessWait: {
      mutable_sched_process_wait()->::perfetto::protos::SchedProcessWaitFtraceEvent::MergeFrom(from.sched_process_wait());
      break;
    }
    case kF2FsDoSubmitBio: {
      mutable_f2fs_do_submit_bio()->::perfetto::protos::F2fsDoSubmitBioFtraceEvent::MergeFrom(from.f2fs_do_submit_bio());
      break;
    }
    case kF2FsEvictInode: {
      mutable_f2fs_evict_inode()->::perfetto::protos::F2fsEvictInodeFtraceEvent::MergeFrom(from.f2fs_evict_inode());
      break;
    }
    case kF2FsFallocate: {
      mutable_f2fs_fallocate()->::perfetto::protos::F2fsFallocateFtraceEvent::MergeFrom(from.f2fs_fallocate());
      break;
    }
    case kF2FsGetDataBlock: {
      mutable_f2fs_get_data_block()->::perfetto::protos::F2fsGetDataBlockFtraceEvent::MergeFrom(from.f2fs_get_data_block());
      break;
    }
    case kF2FsGetVictim: {
      mutable_f2fs_get_victim()->::perfetto::protos::F2fsGetVictimFtraceEvent::MergeFrom(from.f2fs_get_victim());
      break;
    }
    case kF2FsIget: {
      mutable_f2fs_iget()->::perfetto::protos::F2fsIgetFtraceEvent::MergeFrom(from.f2fs_iget());
      break;
    }
    case kF2FsIgetExit: {
      mutable_f2fs_iget_exit()->::perfetto::protos::F2fsIgetExitFtraceEvent::MergeFrom(from.f2fs_iget_exit());
      break;
    }
    case kF2FsNewInode: {
      mutable_f2fs_new_inode()->::perfetto::protos::F2fsNewInodeFtraceEvent::MergeFrom(from.f2fs_new_inode());
      break;
    }
    case kF2FsReadpage: {
      mutable_f2fs_readpage()->::perfetto::protos::F2fsReadpageFtraceEvent::MergeFrom(from.f2fs_readpage());
      break;
    }
    case kF2FsReserveNewBlock: {
      mutable_f2fs_reserve_new_block()->::perfetto::protos::F2fsReserveNewBlockFtraceEvent::MergeFrom(from.f2fs_reserve_new_block());
      break;
    }
    case kF2FsSetPageDirty: {
      mutable_f2fs_set_page_dirty()->::perfetto::protos::F2fsSetPageDirtyFtraceEvent::MergeFrom(from.f2fs_set_page_dirty());
      break;
    }
    case kF2FsSubmitWritePage: {
      mutable_f2fs_submit_write_page()->::perfetto::protos::F2fsSubmitWritePageFtraceEvent::MergeFrom(from.f2fs_submit_write_page());
      break;
    }
    case kF2FsSyncFileEnter: {
      mutable_f2fs_sync_file_enter()->::perfetto::protos::F2fsSyncFileEnterFtraceEvent::MergeFrom(from.f2fs_sync_file_enter());
      break;
    }
    case kF2FsSyncFileExit: {
      mutable_f2fs_sync_file_exit()->::perfetto::protos::F2fsSyncFileExitFtraceEvent::MergeFrom(from.f2fs_sync_file_exit());
      break;
    }
    case kF2FsSyncFs: {
      mutable_f2fs_sync_fs()->::perfetto::protos::F2fsSyncFsFtraceEvent::MergeFrom(from.f2fs_sync_fs());
      break;
    }
    case kF2FsTruncate: {
      mutable_f2fs_truncate()->::perfetto::protos::F2fsTruncateFtraceEvent::MergeFrom(from.f2fs_truncate());
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      mutable_f2fs_truncate_blocks_enter()->::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent::MergeFrom(from.f2fs_truncate_blocks_enter());
      break;
    }
    case kF2FsTruncateBlocksExit: {
      mutable_f2fs_truncate_blocks_exit()->::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent::MergeFrom(from.f2fs_truncate_blocks_exit());
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      mutable_f2fs_truncate_data_blocks_range()->::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent::MergeFrom(from.f2fs_truncate_data_blocks_range());
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      mutable_f2fs_truncate_inode_blocks_enter()->::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent::MergeFrom(from.f2fs_truncate_inode_blocks_enter());
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      mutable_f2fs_truncate_inode_blocks_exit()->::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent::MergeFrom(from.f2fs_truncate_inode_blocks_exit());
      break;
    }
    case kF2FsTruncateNode: {
      mutable_f2fs_truncate_node()->::perfetto::protos::F2fsTruncateNodeFtraceEvent::MergeFrom(from.f2fs_truncate_node());
      break;
    }
    case kF2FsTruncateNodesEnter: {
      mutable_f2fs_truncate_nodes_enter()->::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent::MergeFrom(from.f2fs_truncate_nodes_enter());
      break;
    }
    case kF2FsTruncateNodesExit: {
      mutable_f2fs_truncate_nodes_exit()->::perfetto::protos::F2fsTruncateNodesExitFtraceEvent::MergeFrom(from.f2fs_truncate_nodes_exit());
      break;
    }
    case kF2FsTruncatePartialNodes: {
      mutable_f2fs_truncate_partial_nodes()->::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent::MergeFrom(from.f2fs_truncate_partial_nodes());
      break;
    }
    case kF2FsUnlinkEnter: {
      mutable_f2fs_unlink_enter()->::perfetto::protos::F2fsUnlinkEnterFtraceEvent::MergeFrom(from.f2fs_unlink_enter());
      break;
    }
    case kF2FsUnlinkExit: {
      mutable_f2fs_unlink_exit()->::perfetto::protos::F2fsUnlinkExitFtraceEvent::MergeFrom(from.f2fs_unlink_exit());
      break;
    }
    case kF2FsVmPageMkwrite: {
      mutable_f2fs_vm_page_mkwrite()->::perfetto::protos::F2fsVmPageMkwriteFtraceEvent::MergeFrom(from.f2fs_vm_page_mkwrite());
      break;
    }
    case kF2FsWriteBegin: {
      mutable_f2fs_write_begin()->::perfetto::protos::F2fsWriteBeginFtraceEvent::MergeFrom(from.f2fs_write_begin());
      break;
    }
    case kF2FsWriteCheckpoint: {
      mutable_f2fs_write_checkpoint()->::perfetto::protos::F2fsWriteCheckpointFtraceEvent::MergeFrom(from.f2fs_write_checkpoint());
      break;
    }
    case kF2FsWriteEnd: {
      mutable_f2fs_write_end()->::perfetto::protos::F2fsWriteEndFtraceEvent::MergeFrom(from.f2fs_write_end());
      break;
    }
    case kAllocPagesIommuEnd: {
      mutable_alloc_pages_iommu_end()->::perfetto::protos::AllocPagesIommuEndFtraceEvent::MergeFrom(from.alloc_pages_iommu_end());
      break;
    }
    case kAllocPagesIommuFail: {
      mutable_alloc_pages_iommu_fail()->::perfetto::protos::AllocPagesIommuFailFtraceEvent::MergeFrom(from.alloc_pages_iommu_fail());
      break;
    }
    case kAllocPagesIommuStart: {
      mutable_alloc_pages_iommu_start()->::perfetto::protos::AllocPagesIommuStartFtraceEvent::MergeFrom(from.alloc_pages_iommu_start());
      break;
    }
    case kAllocPagesSysEnd: {
      mutable_alloc_pages_sys_end()->::perfetto::protos::AllocPagesSysEndFtraceEvent::MergeFrom(from.alloc_pages_sys_end());
      break;
    }
    case kAllocPagesSysFail: {
      mutable_alloc_pages_sys_fail()->::perfetto::protos::AllocPagesSysFailFtraceEvent::MergeFrom(from.alloc_pages_sys_fail());
      break;
    }
    case kAllocPagesSysStart: {
      mutable_alloc_pages_sys_start()->::perfetto::protos::AllocPagesSysStartFtraceEvent::MergeFrom(from.alloc_pages_sys_start());
      break;
    }
    case kDmaAllocContiguousRetry: {
      mutable_dma_alloc_contiguous_retry()->::perfetto::protos::DmaAllocContiguousRetryFtraceEvent::MergeFrom(from.dma_alloc_contiguous_retry());
      break;
    }
    case kIommuMapRange: {
      mutable_iommu_map_range()->::perfetto::protos::IommuMapRangeFtraceEvent::MergeFrom(from.iommu_map_range());
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      mutable_iommu_sec_ptbl_map_range_end()->::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent::MergeFrom(from.iommu_sec_ptbl_map_range_end());
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      mutable_iommu_sec_ptbl_map_range_start()->::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent::MergeFrom(from.iommu_sec_ptbl_map_range_start());
      break;
    }
    case kIonAllocBufferEnd: {
      mutable_ion_alloc_buffer_end()->::perfetto::protos::IonAllocBufferEndFtraceEvent::MergeFrom(from.ion_alloc_buffer_end());
      break;
    }
    case kIonAllocBufferFail: {
      mutable_ion_alloc_buffer_fail()->::perfetto::protos::IonAllocBufferFailFtraceEvent::MergeFrom(from.ion_alloc_buffer_fail());
      break;
    }
    case kIonAllocBufferFallback: {
      mutable_ion_alloc_buffer_fallback()->::perfetto::protos::IonAllocBufferFallbackFtraceEvent::MergeFrom(from.ion_alloc_buffer_fallback());
      break;
    }
    case kIonAllocBufferStart: {
      mutable_ion_alloc_buffer_start()->::perfetto::protos::IonAllocBufferStartFtraceEvent::MergeFrom(from.ion_alloc_buffer_start());
      break;
    }
    case kIonCpAllocRetry: {
      mutable_ion_cp_alloc_retry()->::perfetto::protos::IonCpAllocRetryFtraceEvent::MergeFrom(from.ion_cp_alloc_retry());
      break;
    }
    case kIonCpSecureBufferEnd: {
      mutable_ion_cp_secure_buffer_end()->::perfetto::protos::IonCpSecureBufferEndFtraceEvent::MergeFrom(from.ion_cp_secure_buffer_end());
      break;
    }
    case kIonCpSecureBufferStart: {
      mutable_ion_cp_secure_buffer_start()->::perfetto::protos::IonCpSecureBufferStartFtraceEvent::MergeFrom(from.ion_cp_secure_buffer_start());
      break;
    }
    case kIonPrefetching: {
      mutable_ion_prefetching()->::perfetto::protos::IonPrefetchingFtraceEvent::MergeFrom(from.ion_prefetching());
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      mutable_ion_secure_cma_add_to_pool_end()->::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent::MergeFrom(from.ion_secure_cma_add_to_pool_end());
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      mutable_ion_secure_cma_add_to_pool_start()->::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent::MergeFrom(from.ion_secure_cma_add_to_pool_start());
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      mutable_ion_secure_cma_allocate_end()->::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent::MergeFrom(from.ion_secure_cma_allocate_end());
      break;
    }
    case kIonSecureCmaAllocateStart: {
      mutable_ion_secure_cma_allocate_start()->::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent::MergeFrom(from.ion_secure_cma_allocate_start());
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      mutable_ion_secure_cma_shrink_pool_end()->::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent::MergeFrom(from.ion_secure_cma_shrink_pool_end());
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      mutable_ion_secure_cma_shrink_pool_start()->::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent::MergeFrom(from.ion_secure_cma_shrink_pool_start());
      break;
    }
    case kKfree: {
      mutable_kfree()->::perfetto::protos::KfreeFtraceEvent::MergeFrom(from.kfree());
      break;
    }
    case kKmalloc: {
      mutable_kmalloc()->::perfetto::protos::KmallocFtraceEvent::MergeFrom(from.kmalloc());
      break;
    }
    case kKmallocNode: {
      mutable_kmalloc_node()->::perfetto::protos::KmallocNodeFtraceEvent::MergeFrom(from.kmalloc_node());
      break;
    }
    case kKmemCacheAlloc: {
      mutable_kmem_cache_alloc()->::perfetto::protos::KmemCacheAllocFtraceEvent::MergeFrom(from.kmem_cache_alloc());
      break;
    }
    case kKmemCacheAllocNode: {
      mutable_kmem_cache_alloc_node()->::perfetto::protos::KmemCacheAllocNodeFtraceEvent::MergeFrom(from.kmem_cache_alloc_node());
      break;
    }
    case kKmemCacheFree: {
      mutable_kmem_cache_free()->::perfetto::protos::KmemCacheFreeFtraceEvent::MergeFrom(from.kmem_cache_free());
      break;
    }
    case kMigratePagesEnd: {
      mutable_migrate_pages_end()->::perfetto::protos::MigratePagesEndFtraceEvent::MergeFrom(from.migrate_pages_end());
      break;
    }
    case kMigratePagesStart: {
      mutable_migrate_pages_start()->::perfetto::protos::MigratePagesStartFtraceEvent::MergeFrom(from.migrate_pages_start());
      break;
    }
    case kMigrateRetry: {
      mutable_migrate_retry()->::perfetto::protos::MigrateRetryFtraceEvent::MergeFrom(from.migrate_retry());
      break;
    }
    case kMmPageAlloc: {
      mutable_mm_page_alloc()->::perfetto::protos::MmPageAllocFtraceEvent::MergeFrom(from.mm_page_alloc());
      break;
    }
    case kMmPageAllocExtfrag: {
      mutable_mm_page_alloc_extfrag()->::perfetto::protos::MmPageAllocExtfragFtraceEvent::MergeFrom(from.mm_page_alloc_extfrag());
      break;
    }
    case kMmPageAllocZoneLocked: {
      mutable_mm_page_alloc_zone_locked()->::perfetto::protos::MmPageAllocZoneLockedFtraceEvent::MergeFrom(from.mm_page_alloc_zone_locked());
      break;
    }
    case kMmPageFree: {
      mutable_mm_page_free()->::perfetto::protos::MmPageFreeFtraceEvent::MergeFrom(from.mm_page_free());
      break;
    }
    case kMmPageFreeBatched: {
      mutable_mm_page_free_batched()->::perfetto::protos::MmPageFreeBatchedFtraceEvent::MergeFrom(from.mm_page_free_batched());
      break;
    }
    case kMmPagePcpuDrain: {
      mutable_mm_page_pcpu_drain()->::perfetto::protos::MmPagePcpuDrainFtraceEvent::MergeFrom(from.mm_page_pcpu_drain());
      break;
    }
    case kRssStat: {
      mutable_rss_stat()->::perfetto::protos::RssStatFtraceEvent::MergeFrom(from.rss_stat());
      break;
    }
    case kIonHeapShrink: {
      mutable_ion_heap_shrink()->::perfetto::protos::IonHeapShrinkFtraceEvent::MergeFrom(from.ion_heap_shrink());
      break;
    }
    case kIonHeapGrow: {
      mutable_ion_heap_grow()->::perfetto::protos::IonHeapGrowFtraceEvent::MergeFrom(from.ion_heap_grow());
      break;
    }
    case kFenceInit: {
      mutable_fence_init()->::perfetto::protos::FenceInitFtraceEvent::MergeFrom(from.fence_init());
      break;
    }
    case kFenceDestroy: {
      mutable_fence_destroy()->::perfetto::protos::FenceDestroyFtraceEvent::MergeFrom(from.fence_destroy());
      break;
    }
    case kFenceEnableSignal: {
      mutable_fence_enable_signal()->::perfetto::protos::FenceEnableSignalFtraceEvent::MergeFrom(from.fence_enable_signal());
      break;
    }
    case kFenceSignaled: {
      mutable_fence_signaled()->::perfetto::protos::FenceSignaledFtraceEvent::MergeFrom(from.fence_signaled());
      break;
    }
    case kClkEnable: {
      mutable_clk_enable()->::perfetto::protos::ClkEnableFtraceEvent::MergeFrom(from.clk_enable());
      break;
    }
    case kClkDisable: {
      mutable_clk_disable()->::perfetto::protos::ClkDisableFtraceEvent::MergeFrom(from.clk_disable());
      break;
    }
    case kClkSetRate: {
      mutable_clk_set_rate()->::perfetto::protos::ClkSetRateFtraceEvent::MergeFrom(from.clk_set_rate());
      break;
    }
    case kBinderTransactionAllocBuf: {
      mutable_binder_transaction_alloc_buf()->::perfetto::protos::BinderTransactionAllocBufFtraceEvent::MergeFrom(from.binder_transaction_alloc_buf());
      break;
    }
    case kSignalDeliver: {
      mutable_signal_deliver()->::perfetto::protos::SignalDeliverFtraceEvent::MergeFrom(from.signal_deliver());
      break;
    }
    case kSignalGenerate: {
      mutable_signal_generate()->::perfetto::protos::SignalGenerateFtraceEvent::MergeFrom(from.signal_generate());
      break;
    }
    case kOomScoreAdjUpdate: {
      mutable_oom_score_adj_update()->::perfetto::protos::OomScoreAdjUpdateFtraceEvent::MergeFrom(from.oom_score_adj_update());
      break;
    }
    case kGeneric: {
      mutable_generic()->::perfetto::protos::GenericFtraceEvent::MergeFrom(from.generic());
      break;
    }
    case kMmEventRecord: {
      mutable_mm_event_record()->::perfetto::protos::MmEventRecordFtraceEvent::MergeFrom(from.mm_event_record());
      break;
    }
    case kSysEnter: {
      mutable_sys_enter()->::perfetto::protos::SysEnterFtraceEvent::MergeFrom(from.sys_enter());
      break;
    }
    case kSysExit: {
      mutable_sys_exit()->::perfetto::protos::SysExitFtraceEvent::MergeFrom(from.sys_exit());
      break;
    }
    case kZero: {
      mutable_zero()->::perfetto::protos::ZeroFtraceEvent::MergeFrom(from.zero());
      break;
    }
    case kGpuFrequency: {
      mutable_gpu_frequency()->::perfetto::protos::GpuFrequencyFtraceEvent::MergeFrom(from.gpu_frequency());
      break;
    }
    case kSdeTracingMarkWrite: {
      mutable_sde_tracing_mark_write()->::perfetto::protos::SdeTracingMarkWriteFtraceEvent::MergeFrom(from.sde_tracing_mark_write());
      break;
    }
    case kMarkVictim: {
      mutable_mark_victim()->::perfetto::protos::MarkVictimFtraceEvent::MergeFrom(from.mark_victim());
      break;
    }
    case kIonStat: {
      mutable_ion_stat()->::perfetto::protos::IonStatFtraceEvent::MergeFrom(from.ion_stat());
      break;
    }
    case kIonBufferCreate: {
      mutable_ion_buffer_create()->::perfetto::protos::IonBufferCreateFtraceEvent::MergeFrom(from.ion_buffer_create());
      break;
    }
    case kIonBufferDestroy: {
      mutable_ion_buffer_destroy()->::perfetto::protos::IonBufferDestroyFtraceEvent::MergeFrom(from.ion_buffer_destroy());
      break;
    }
    case kScmCallStart: {
      mutable_scm_call_start()->::perfetto::protos::ScmCallStartFtraceEvent::MergeFrom(from.scm_call_start());
      break;
    }
    case kScmCallEnd: {
      mutable_scm_call_end()->::perfetto::protos::ScmCallEndFtraceEvent::MergeFrom(from.scm_call_end());
      break;
    }
    case kGpuMemTotal: {
      mutable_gpu_mem_total()->::perfetto::protos::GpuMemTotalFtraceEvent::MergeFrom(from.gpu_mem_total());
      break;
    }
    case kThermalTemperature: {
      mutable_thermal_temperature()->::perfetto::protos::ThermalTemperatureFtraceEvent::MergeFrom(from.thermal_temperature());
      break;
    }
    case kCdevUpdate: {
      mutable_cdev_update()->::perfetto::protos::CdevUpdateFtraceEvent::MergeFrom(from.cdev_update());
      break;
    }
    case kCpuhpExit: {
      mutable_cpuhp_exit()->::perfetto::protos::CpuhpExitFtraceEvent::MergeFrom(from.cpuhp_exit());
      break;
    }
    case kCpuhpMultiEnter: {
      mutable_cpuhp_multi_enter()->::perfetto::protos::CpuhpMultiEnterFtraceEvent::MergeFrom(from.cpuhp_multi_enter());
      break;
    }
    case kCpuhpEnter: {
      mutable_cpuhp_enter()->::perfetto::protos::CpuhpEnterFtraceEvent::MergeFrom(from.cpuhp_enter());
      break;
    }
    case kCpuhpLatency: {
      mutable_cpuhp_latency()->::perfetto::protos::CpuhpLatencyFtraceEvent::MergeFrom(from.cpuhp_latency());
      break;
    }
    case kFastrpcDmaStat: {
      mutable_fastrpc_dma_stat()->::perfetto::protos::FastrpcDmaStatFtraceEvent::MergeFrom(from.fastrpc_dma_stat());
      break;
    }
    case kDpuTracingMarkWrite: {
      mutable_dpu_tracing_mark_write()->::perfetto::protos::DpuTracingMarkWriteFtraceEvent::MergeFrom(from.dpu_tracing_mark_write());
      break;
    }
    case kG2DTracingMarkWrite: {
      mutable_g2d_tracing_mark_write()->::perfetto::protos::G2dTracingMarkWriteFtraceEvent::MergeFrom(from.g2d_tracing_mark_write());
      break;
    }
    case kMaliTracingMarkWrite: {
      mutable_mali_tracing_mark_write()->::perfetto::protos::MaliTracingMarkWriteFtraceEvent::MergeFrom(from.mali_tracing_mark_write());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void FtraceEvent::CopyFrom(const FtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEvent::IsInitialized() const {
  return true;
}

void FtraceEvent::InternalSwap(FtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(pid_, other->pid_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FtraceEvent::GetTypeName() const {
  return "perfetto.protos.FtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
