// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/irq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class IrqHandlerEntryFtraceEvent;
class IrqHandlerEntryFtraceEventDefaultTypeInternal;
extern IrqHandlerEntryFtraceEventDefaultTypeInternal _IrqHandlerEntryFtraceEvent_default_instance_;
class IrqHandlerExitFtraceEvent;
class IrqHandlerExitFtraceEventDefaultTypeInternal;
extern IrqHandlerExitFtraceEventDefaultTypeInternal _IrqHandlerExitFtraceEvent_default_instance_;
class SoftirqEntryFtraceEvent;
class SoftirqEntryFtraceEventDefaultTypeInternal;
extern SoftirqEntryFtraceEventDefaultTypeInternal _SoftirqEntryFtraceEvent_default_instance_;
class SoftirqExitFtraceEvent;
class SoftirqExitFtraceEventDefaultTypeInternal;
extern SoftirqExitFtraceEventDefaultTypeInternal _SoftirqExitFtraceEvent_default_instance_;
class SoftirqRaiseFtraceEvent;
class SoftirqRaiseFtraceEventDefaultTypeInternal;
extern SoftirqRaiseFtraceEventDefaultTypeInternal _SoftirqRaiseFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::IrqHandlerEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IrqHandlerEntryFtraceEvent>(Arena*);
template<> ::perfetto::protos::IrqHandlerExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IrqHandlerExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::SoftirqEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SoftirqEntryFtraceEvent>(Arena*);
template<> ::perfetto::protos::SoftirqExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SoftirqExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::SoftirqRaiseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SoftirqRaiseFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SoftirqEntryFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SoftirqEntryFtraceEvent) */ {
 public:
  SoftirqEntryFtraceEvent();
  virtual ~SoftirqEntryFtraceEvent();

  SoftirqEntryFtraceEvent(const SoftirqEntryFtraceEvent& from);
  SoftirqEntryFtraceEvent(SoftirqEntryFtraceEvent&& from) noexcept
    : SoftirqEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SoftirqEntryFtraceEvent& operator=(const SoftirqEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftirqEntryFtraceEvent& operator=(SoftirqEntryFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SoftirqEntryFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftirqEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SoftirqEntryFtraceEvent*>(
               &_SoftirqEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SoftirqEntryFtraceEvent& a, SoftirqEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftirqEntryFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftirqEntryFtraceEvent* New() const final {
    return CreateMaybeMessage<SoftirqEntryFtraceEvent>(nullptr);
  }

  SoftirqEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftirqEntryFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SoftirqEntryFtraceEvent& from);
  void MergeFrom(const SoftirqEntryFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftirqEntryFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SoftirqEntryFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // optional uint32 vec = 1;
  bool has_vec() const;
  void clear_vec();
  ::PROTOBUF_NAMESPACE_ID::uint32 vec() const;
  void set_vec(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SoftirqEntryFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vec_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};
// -------------------------------------------------------------------

class SoftirqExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SoftirqExitFtraceEvent) */ {
 public:
  SoftirqExitFtraceEvent();
  virtual ~SoftirqExitFtraceEvent();

  SoftirqExitFtraceEvent(const SoftirqExitFtraceEvent& from);
  SoftirqExitFtraceEvent(SoftirqExitFtraceEvent&& from) noexcept
    : SoftirqExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SoftirqExitFtraceEvent& operator=(const SoftirqExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftirqExitFtraceEvent& operator=(SoftirqExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SoftirqExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftirqExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SoftirqExitFtraceEvent*>(
               &_SoftirqExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoftirqExitFtraceEvent& a, SoftirqExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftirqExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftirqExitFtraceEvent* New() const final {
    return CreateMaybeMessage<SoftirqExitFtraceEvent>(nullptr);
  }

  SoftirqExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftirqExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SoftirqExitFtraceEvent& from);
  void MergeFrom(const SoftirqExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftirqExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SoftirqExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // optional uint32 vec = 1;
  bool has_vec() const;
  void clear_vec();
  ::PROTOBUF_NAMESPACE_ID::uint32 vec() const;
  void set_vec(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SoftirqExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vec_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};
// -------------------------------------------------------------------

class SoftirqRaiseFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SoftirqRaiseFtraceEvent) */ {
 public:
  SoftirqRaiseFtraceEvent();
  virtual ~SoftirqRaiseFtraceEvent();

  SoftirqRaiseFtraceEvent(const SoftirqRaiseFtraceEvent& from);
  SoftirqRaiseFtraceEvent(SoftirqRaiseFtraceEvent&& from) noexcept
    : SoftirqRaiseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SoftirqRaiseFtraceEvent& operator=(const SoftirqRaiseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftirqRaiseFtraceEvent& operator=(SoftirqRaiseFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SoftirqRaiseFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftirqRaiseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SoftirqRaiseFtraceEvent*>(
               &_SoftirqRaiseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SoftirqRaiseFtraceEvent& a, SoftirqRaiseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftirqRaiseFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftirqRaiseFtraceEvent* New() const final {
    return CreateMaybeMessage<SoftirqRaiseFtraceEvent>(nullptr);
  }

  SoftirqRaiseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftirqRaiseFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SoftirqRaiseFtraceEvent& from);
  void MergeFrom(const SoftirqRaiseFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftirqRaiseFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SoftirqRaiseFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // optional uint32 vec = 1;
  bool has_vec() const;
  void clear_vec();
  ::PROTOBUF_NAMESPACE_ID::uint32 vec() const;
  void set_vec(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SoftirqRaiseFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vec_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};
// -------------------------------------------------------------------

class IrqHandlerEntryFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.IrqHandlerEntryFtraceEvent) */ {
 public:
  IrqHandlerEntryFtraceEvent();
  virtual ~IrqHandlerEntryFtraceEvent();

  IrqHandlerEntryFtraceEvent(const IrqHandlerEntryFtraceEvent& from);
  IrqHandlerEntryFtraceEvent(IrqHandlerEntryFtraceEvent&& from) noexcept
    : IrqHandlerEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IrqHandlerEntryFtraceEvent& operator=(const IrqHandlerEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrqHandlerEntryFtraceEvent& operator=(IrqHandlerEntryFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IrqHandlerEntryFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IrqHandlerEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IrqHandlerEntryFtraceEvent*>(
               &_IrqHandlerEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IrqHandlerEntryFtraceEvent& a, IrqHandlerEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IrqHandlerEntryFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IrqHandlerEntryFtraceEvent* New() const final {
    return CreateMaybeMessage<IrqHandlerEntryFtraceEvent>(nullptr);
  }

  IrqHandlerEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IrqHandlerEntryFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IrqHandlerEntryFtraceEvent& from);
  void MergeFrom(const IrqHandlerEntryFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IrqHandlerEntryFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.IrqHandlerEntryFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIrqFieldNumber = 1,
    kHandlerFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 irq = 1;
  bool has_irq() const;
  void clear_irq();
  ::PROTOBUF_NAMESPACE_ID::int32 irq() const;
  void set_irq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 handler = 3;
  bool has_handler() const;
  void clear_handler();
  ::PROTOBUF_NAMESPACE_ID::uint32 handler() const;
  void set_handler(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.IrqHandlerEntryFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 irq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 handler_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};
// -------------------------------------------------------------------

class IrqHandlerExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.IrqHandlerExitFtraceEvent) */ {
 public:
  IrqHandlerExitFtraceEvent();
  virtual ~IrqHandlerExitFtraceEvent();

  IrqHandlerExitFtraceEvent(const IrqHandlerExitFtraceEvent& from);
  IrqHandlerExitFtraceEvent(IrqHandlerExitFtraceEvent&& from) noexcept
    : IrqHandlerExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IrqHandlerExitFtraceEvent& operator=(const IrqHandlerExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrqHandlerExitFtraceEvent& operator=(IrqHandlerExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IrqHandlerExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IrqHandlerExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IrqHandlerExitFtraceEvent*>(
               &_IrqHandlerExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IrqHandlerExitFtraceEvent& a, IrqHandlerExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IrqHandlerExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IrqHandlerExitFtraceEvent* New() const final {
    return CreateMaybeMessage<IrqHandlerExitFtraceEvent>(nullptr);
  }

  IrqHandlerExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IrqHandlerExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IrqHandlerExitFtraceEvent& from);
  void MergeFrom(const IrqHandlerExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IrqHandlerExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.IrqHandlerExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional int32 irq = 1;
  bool has_irq() const;
  void clear_irq();
  ::PROTOBUF_NAMESPACE_ID::int32 irq() const;
  void set_irq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.IrqHandlerExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 irq_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SoftirqEntryFtraceEvent

// optional uint32 vec = 1;
inline bool SoftirqEntryFtraceEvent::has_vec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftirqEntryFtraceEvent::clear_vec() {
  vec_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftirqEntryFtraceEvent::vec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SoftirqEntryFtraceEvent.vec)
  return vec_;
}
inline void SoftirqEntryFtraceEvent::set_vec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  vec_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SoftirqEntryFtraceEvent.vec)
}

// -------------------------------------------------------------------

// SoftirqExitFtraceEvent

// optional uint32 vec = 1;
inline bool SoftirqExitFtraceEvent::has_vec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftirqExitFtraceEvent::clear_vec() {
  vec_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftirqExitFtraceEvent::vec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SoftirqExitFtraceEvent.vec)
  return vec_;
}
inline void SoftirqExitFtraceEvent::set_vec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  vec_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SoftirqExitFtraceEvent.vec)
}

// -------------------------------------------------------------------

// SoftirqRaiseFtraceEvent

// optional uint32 vec = 1;
inline bool SoftirqRaiseFtraceEvent::has_vec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftirqRaiseFtraceEvent::clear_vec() {
  vec_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftirqRaiseFtraceEvent::vec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SoftirqRaiseFtraceEvent.vec)
  return vec_;
}
inline void SoftirqRaiseFtraceEvent::set_vec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  vec_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SoftirqRaiseFtraceEvent.vec)
}

// -------------------------------------------------------------------

// IrqHandlerEntryFtraceEvent

// optional int32 irq = 1;
inline bool IrqHandlerEntryFtraceEvent::has_irq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IrqHandlerEntryFtraceEvent::clear_irq() {
  irq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IrqHandlerEntryFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerEntryFtraceEvent.irq)
  return irq_;
}
inline void IrqHandlerEntryFtraceEvent::set_irq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  irq_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerEntryFtraceEvent.irq)
}

// optional string name = 2;
inline bool IrqHandlerEntryFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IrqHandlerEntryFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IrqHandlerEntryFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
  return name_.GetNoArena();
}
inline void IrqHandlerEntryFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}
inline void IrqHandlerEntryFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}
inline void IrqHandlerEntryFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}
inline void IrqHandlerEntryFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}
inline std::string* IrqHandlerEntryFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IrqHandlerEntryFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IrqHandlerEntryFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}

// optional uint32 handler = 3;
inline bool IrqHandlerEntryFtraceEvent::has_handler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IrqHandlerEntryFtraceEvent::clear_handler() {
  handler_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IrqHandlerEntryFtraceEvent::handler() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerEntryFtraceEvent.handler)
  return handler_;
}
inline void IrqHandlerEntryFtraceEvent::set_handler(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  handler_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerEntryFtraceEvent.handler)
}

// -------------------------------------------------------------------

// IrqHandlerExitFtraceEvent

// optional int32 irq = 1;
inline bool IrqHandlerExitFtraceEvent::has_irq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IrqHandlerExitFtraceEvent::clear_irq() {
  irq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IrqHandlerExitFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerExitFtraceEvent.irq)
  return irq_;
}
inline void IrqHandlerExitFtraceEvent::set_irq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  irq_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerExitFtraceEvent.irq)
}

// optional int32 ret = 2;
inline bool IrqHandlerExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IrqHandlerExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IrqHandlerExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerExitFtraceEvent.ret)
  return ret_;
}
inline void IrqHandlerExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerExitFtraceEvent.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto
