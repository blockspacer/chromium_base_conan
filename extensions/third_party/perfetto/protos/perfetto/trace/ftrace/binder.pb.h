// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/binder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class BinderLockFtraceEvent;
class BinderLockFtraceEventDefaultTypeInternal;
extern BinderLockFtraceEventDefaultTypeInternal _BinderLockFtraceEvent_default_instance_;
class BinderLockedFtraceEvent;
class BinderLockedFtraceEventDefaultTypeInternal;
extern BinderLockedFtraceEventDefaultTypeInternal _BinderLockedFtraceEvent_default_instance_;
class BinderSetPriorityFtraceEvent;
class BinderSetPriorityFtraceEventDefaultTypeInternal;
extern BinderSetPriorityFtraceEventDefaultTypeInternal _BinderSetPriorityFtraceEvent_default_instance_;
class BinderTransactionAllocBufFtraceEvent;
class BinderTransactionAllocBufFtraceEventDefaultTypeInternal;
extern BinderTransactionAllocBufFtraceEventDefaultTypeInternal _BinderTransactionAllocBufFtraceEvent_default_instance_;
class BinderTransactionFtraceEvent;
class BinderTransactionFtraceEventDefaultTypeInternal;
extern BinderTransactionFtraceEventDefaultTypeInternal _BinderTransactionFtraceEvent_default_instance_;
class BinderTransactionReceivedFtraceEvent;
class BinderTransactionReceivedFtraceEventDefaultTypeInternal;
extern BinderTransactionReceivedFtraceEventDefaultTypeInternal _BinderTransactionReceivedFtraceEvent_default_instance_;
class BinderUnlockFtraceEvent;
class BinderUnlockFtraceEventDefaultTypeInternal;
extern BinderUnlockFtraceEventDefaultTypeInternal _BinderUnlockFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BinderLockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderLockFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderLockedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderLockedFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderSetPriorityFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderSetPriorityFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderTransactionAllocBufFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderTransactionFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderTransactionFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderTransactionReceivedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderTransactionReceivedFtraceEvent>(Arena*);
template<> ::perfetto::protos::BinderUnlockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BinderUnlockFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class BinderTransactionFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderTransactionFtraceEvent) */ {
 public:
  BinderTransactionFtraceEvent();
  virtual ~BinderTransactionFtraceEvent();

  BinderTransactionFtraceEvent(const BinderTransactionFtraceEvent& from);
  BinderTransactionFtraceEvent(BinderTransactionFtraceEvent&& from) noexcept
    : BinderTransactionFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderTransactionFtraceEvent& operator=(const BinderTransactionFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderTransactionFtraceEvent& operator=(BinderTransactionFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderTransactionFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderTransactionFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderTransactionFtraceEvent*>(
               &_BinderTransactionFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BinderTransactionFtraceEvent& a, BinderTransactionFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderTransactionFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderTransactionFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderTransactionFtraceEvent>(nullptr);
  }

  BinderTransactionFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderTransactionFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderTransactionFtraceEvent& from);
  void MergeFrom(const BinderTransactionFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderTransactionFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderTransactionFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugIdFieldNumber = 1,
    kTargetNodeFieldNumber = 2,
    kToProcFieldNumber = 3,
    kToThreadFieldNumber = 4,
    kReplyFieldNumber = 5,
    kCodeFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };
  // optional int32 debug_id = 1;
  bool has_debug_id() const;
  void clear_debug_id();
  ::PROTOBUF_NAMESPACE_ID::int32 debug_id() const;
  void set_debug_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 target_node = 2;
  bool has_target_node() const;
  void clear_target_node();
  ::PROTOBUF_NAMESPACE_ID::int32 target_node() const;
  void set_target_node(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 to_proc = 3;
  bool has_to_proc() const;
  void clear_to_proc();
  ::PROTOBUF_NAMESPACE_ID::int32 to_proc() const;
  void set_to_proc(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 to_thread = 4;
  bool has_to_thread() const;
  void clear_to_thread();
  ::PROTOBUF_NAMESPACE_ID::int32 to_thread() const;
  void set_to_thread(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reply = 5;
  bool has_reply() const;
  void clear_reply();
  ::PROTOBUF_NAMESPACE_ID::int32 reply() const;
  void set_reply(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 code = 6;
  bool has_code() const;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 7;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderTransactionFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 debug_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_node_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_proc_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_thread_;
  ::PROTOBUF_NAMESPACE_ID::int32 reply_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderTransactionReceivedFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderTransactionReceivedFtraceEvent) */ {
 public:
  BinderTransactionReceivedFtraceEvent();
  virtual ~BinderTransactionReceivedFtraceEvent();

  BinderTransactionReceivedFtraceEvent(const BinderTransactionReceivedFtraceEvent& from);
  BinderTransactionReceivedFtraceEvent(BinderTransactionReceivedFtraceEvent&& from) noexcept
    : BinderTransactionReceivedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderTransactionReceivedFtraceEvent& operator=(const BinderTransactionReceivedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderTransactionReceivedFtraceEvent& operator=(BinderTransactionReceivedFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderTransactionReceivedFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderTransactionReceivedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderTransactionReceivedFtraceEvent*>(
               &_BinderTransactionReceivedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BinderTransactionReceivedFtraceEvent& a, BinderTransactionReceivedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderTransactionReceivedFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderTransactionReceivedFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderTransactionReceivedFtraceEvent>(nullptr);
  }

  BinderTransactionReceivedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderTransactionReceivedFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderTransactionReceivedFtraceEvent& from);
  void MergeFrom(const BinderTransactionReceivedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderTransactionReceivedFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderTransactionReceivedFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugIdFieldNumber = 1,
  };
  // optional int32 debug_id = 1;
  bool has_debug_id() const;
  void clear_debug_id();
  ::PROTOBUF_NAMESPACE_ID::int32 debug_id() const;
  void set_debug_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderTransactionReceivedFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 debug_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderSetPriorityFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderSetPriorityFtraceEvent) */ {
 public:
  BinderSetPriorityFtraceEvent();
  virtual ~BinderSetPriorityFtraceEvent();

  BinderSetPriorityFtraceEvent(const BinderSetPriorityFtraceEvent& from);
  BinderSetPriorityFtraceEvent(BinderSetPriorityFtraceEvent&& from) noexcept
    : BinderSetPriorityFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderSetPriorityFtraceEvent& operator=(const BinderSetPriorityFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderSetPriorityFtraceEvent& operator=(BinderSetPriorityFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderSetPriorityFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderSetPriorityFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderSetPriorityFtraceEvent*>(
               &_BinderSetPriorityFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BinderSetPriorityFtraceEvent& a, BinderSetPriorityFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderSetPriorityFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderSetPriorityFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderSetPriorityFtraceEvent>(nullptr);
  }

  BinderSetPriorityFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderSetPriorityFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderSetPriorityFtraceEvent& from);
  void MergeFrom(const BinderSetPriorityFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderSetPriorityFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderSetPriorityFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcFieldNumber = 1,
    kThreadFieldNumber = 2,
    kOldPrioFieldNumber = 3,
    kNewPrioFieldNumber = 4,
    kDesiredPrioFieldNumber = 5,
  };
  // optional int32 proc = 1;
  bool has_proc() const;
  void clear_proc();
  ::PROTOBUF_NAMESPACE_ID::int32 proc() const;
  void set_proc(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 thread = 2;
  bool has_thread() const;
  void clear_thread();
  ::PROTOBUF_NAMESPACE_ID::int32 thread() const;
  void set_thread(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 old_prio = 3;
  bool has_old_prio() const;
  void clear_old_prio();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_prio() const;
  void set_old_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 new_prio = 4;
  bool has_new_prio() const;
  void clear_new_prio();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_prio() const;
  void set_new_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 desired_prio = 5;
  bool has_desired_prio() const;
  void clear_desired_prio();
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_prio() const;
  void set_desired_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderSetPriorityFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 proc_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_prio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_prio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_prio_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderLockFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderLockFtraceEvent) */ {
 public:
  BinderLockFtraceEvent();
  virtual ~BinderLockFtraceEvent();

  BinderLockFtraceEvent(const BinderLockFtraceEvent& from);
  BinderLockFtraceEvent(BinderLockFtraceEvent&& from) noexcept
    : BinderLockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderLockFtraceEvent& operator=(const BinderLockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderLockFtraceEvent& operator=(BinderLockFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderLockFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderLockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderLockFtraceEvent*>(
               &_BinderLockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BinderLockFtraceEvent& a, BinderLockFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderLockFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderLockFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderLockFtraceEvent>(nullptr);
  }

  BinderLockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderLockFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderLockFtraceEvent& from);
  void MergeFrom(const BinderLockFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderLockFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderLockFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderLockFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderLockedFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderLockedFtraceEvent) */ {
 public:
  BinderLockedFtraceEvent();
  virtual ~BinderLockedFtraceEvent();

  BinderLockedFtraceEvent(const BinderLockedFtraceEvent& from);
  BinderLockedFtraceEvent(BinderLockedFtraceEvent&& from) noexcept
    : BinderLockedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderLockedFtraceEvent& operator=(const BinderLockedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderLockedFtraceEvent& operator=(BinderLockedFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderLockedFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderLockedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderLockedFtraceEvent*>(
               &_BinderLockedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BinderLockedFtraceEvent& a, BinderLockedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderLockedFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderLockedFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderLockedFtraceEvent>(nullptr);
  }

  BinderLockedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderLockedFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderLockedFtraceEvent& from);
  void MergeFrom(const BinderLockedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderLockedFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderLockedFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderLockedFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderUnlockFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderUnlockFtraceEvent) */ {
 public:
  BinderUnlockFtraceEvent();
  virtual ~BinderUnlockFtraceEvent();

  BinderUnlockFtraceEvent(const BinderUnlockFtraceEvent& from);
  BinderUnlockFtraceEvent(BinderUnlockFtraceEvent&& from) noexcept
    : BinderUnlockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderUnlockFtraceEvent& operator=(const BinderUnlockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderUnlockFtraceEvent& operator=(BinderUnlockFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderUnlockFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderUnlockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderUnlockFtraceEvent*>(
               &_BinderUnlockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BinderUnlockFtraceEvent& a, BinderUnlockFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderUnlockFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderUnlockFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderUnlockFtraceEvent>(nullptr);
  }

  BinderUnlockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderUnlockFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderUnlockFtraceEvent& from);
  void MergeFrom(const BinderUnlockFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderUnlockFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderUnlockFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderUnlockFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// -------------------------------------------------------------------

class BinderTransactionAllocBufFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BinderTransactionAllocBufFtraceEvent) */ {
 public:
  BinderTransactionAllocBufFtraceEvent();
  virtual ~BinderTransactionAllocBufFtraceEvent();

  BinderTransactionAllocBufFtraceEvent(const BinderTransactionAllocBufFtraceEvent& from);
  BinderTransactionAllocBufFtraceEvent(BinderTransactionAllocBufFtraceEvent&& from) noexcept
    : BinderTransactionAllocBufFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BinderTransactionAllocBufFtraceEvent& operator=(const BinderTransactionAllocBufFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinderTransactionAllocBufFtraceEvent& operator=(BinderTransactionAllocBufFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinderTransactionAllocBufFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinderTransactionAllocBufFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BinderTransactionAllocBufFtraceEvent*>(
               &_BinderTransactionAllocBufFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BinderTransactionAllocBufFtraceEvent& a, BinderTransactionAllocBufFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BinderTransactionAllocBufFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinderTransactionAllocBufFtraceEvent* New() const final {
    return CreateMaybeMessage<BinderTransactionAllocBufFtraceEvent>(nullptr);
  }

  BinderTransactionAllocBufFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinderTransactionAllocBufFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinderTransactionAllocBufFtraceEvent& from);
  void MergeFrom(const BinderTransactionAllocBufFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinderTransactionAllocBufFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BinderTransactionAllocBufFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSizeFieldNumber = 1,
    kOffsetsSizeFieldNumber = 3,
    kDebugIdFieldNumber = 2,
  };
  // optional uint64 data_size = 1;
  bool has_data_size() const;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 offsets_size = 3;
  bool has_offsets_size() const;
  void clear_offsets_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 offsets_size() const;
  void set_offsets_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 debug_id = 2;
  bool has_debug_id() const;
  void clear_debug_id();
  ::PROTOBUF_NAMESPACE_ID::int32 debug_id() const;
  void set_debug_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offsets_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 debug_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BinderTransactionFtraceEvent

// optional int32 debug_id = 1;
inline bool BinderTransactionFtraceEvent::has_debug_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_debug_id() {
  debug_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionFtraceEvent::debug_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.debug_id)
  return debug_id_;
}
inline void BinderTransactionFtraceEvent::set_debug_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  debug_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.debug_id)
}

// optional int32 target_node = 2;
inline bool BinderTransactionFtraceEvent::has_target_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_target_node() {
  target_node_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionFtraceEvent::target_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.target_node)
  return target_node_;
}
inline void BinderTransactionFtraceEvent::set_target_node(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  target_node_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.target_node)
}

// optional int32 to_proc = 3;
inline bool BinderTransactionFtraceEvent::has_to_proc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_to_proc() {
  to_proc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionFtraceEvent::to_proc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.to_proc)
  return to_proc_;
}
inline void BinderTransactionFtraceEvent::set_to_proc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  to_proc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.to_proc)
}

// optional int32 to_thread = 4;
inline bool BinderTransactionFtraceEvent::has_to_thread() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_to_thread() {
  to_thread_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionFtraceEvent::to_thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.to_thread)
  return to_thread_;
}
inline void BinderTransactionFtraceEvent::set_to_thread(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  to_thread_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.to_thread)
}

// optional int32 reply = 5;
inline bool BinderTransactionFtraceEvent::has_reply() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_reply() {
  reply_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionFtraceEvent::reply() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.reply)
  return reply_;
}
inline void BinderTransactionFtraceEvent::set_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reply_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.reply)
}

// optional uint32 code = 6;
inline bool BinderTransactionFtraceEvent::has_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinderTransactionFtraceEvent::code() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.code)
  return code_;
}
inline void BinderTransactionFtraceEvent::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  code_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.code)
}

// optional uint32 flags = 7;
inline bool BinderTransactionFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BinderTransactionFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinderTransactionFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionFtraceEvent.flags)
  return flags_;
}
inline void BinderTransactionFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionFtraceEvent.flags)
}

// -------------------------------------------------------------------

// BinderTransactionReceivedFtraceEvent

// optional int32 debug_id = 1;
inline bool BinderTransactionReceivedFtraceEvent::has_debug_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderTransactionReceivedFtraceEvent::clear_debug_id() {
  debug_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionReceivedFtraceEvent::debug_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionReceivedFtraceEvent.debug_id)
  return debug_id_;
}
inline void BinderTransactionReceivedFtraceEvent::set_debug_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  debug_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionReceivedFtraceEvent.debug_id)
}

// -------------------------------------------------------------------

// BinderSetPriorityFtraceEvent

// optional int32 proc = 1;
inline bool BinderSetPriorityFtraceEvent::has_proc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderSetPriorityFtraceEvent::clear_proc() {
  proc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderSetPriorityFtraceEvent::proc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.proc)
  return proc_;
}
inline void BinderSetPriorityFtraceEvent::set_proc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  proc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.proc)
}

// optional int32 thread = 2;
inline bool BinderSetPriorityFtraceEvent::has_thread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinderSetPriorityFtraceEvent::clear_thread() {
  thread_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderSetPriorityFtraceEvent::thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.thread)
  return thread_;
}
inline void BinderSetPriorityFtraceEvent::set_thread(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  thread_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.thread)
}

// optional uint32 old_prio = 3;
inline bool BinderSetPriorityFtraceEvent::has_old_prio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinderSetPriorityFtraceEvent::clear_old_prio() {
  old_prio_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinderSetPriorityFtraceEvent::old_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.old_prio)
  return old_prio_;
}
inline void BinderSetPriorityFtraceEvent::set_old_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  old_prio_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.old_prio)
}

// optional uint32 new_prio = 4;
inline bool BinderSetPriorityFtraceEvent::has_new_prio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BinderSetPriorityFtraceEvent::clear_new_prio() {
  new_prio_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinderSetPriorityFtraceEvent::new_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.new_prio)
  return new_prio_;
}
inline void BinderSetPriorityFtraceEvent::set_new_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  new_prio_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.new_prio)
}

// optional uint32 desired_prio = 5;
inline bool BinderSetPriorityFtraceEvent::has_desired_prio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BinderSetPriorityFtraceEvent::clear_desired_prio() {
  desired_prio_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinderSetPriorityFtraceEvent::desired_prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderSetPriorityFtraceEvent.desired_prio)
  return desired_prio_;
}
inline void BinderSetPriorityFtraceEvent::set_desired_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  desired_prio_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderSetPriorityFtraceEvent.desired_prio)
}

// -------------------------------------------------------------------

// BinderLockFtraceEvent

// optional string tag = 1;
inline bool BinderLockFtraceEvent::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderLockFtraceEvent::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinderLockFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderLockFtraceEvent.tag)
  return tag_.GetNoArena();
}
inline void BinderLockFtraceEvent::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderLockFtraceEvent.tag)
}
inline void BinderLockFtraceEvent::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BinderLockFtraceEvent.tag)
}
inline void BinderLockFtraceEvent::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BinderLockFtraceEvent.tag)
}
inline void BinderLockFtraceEvent::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BinderLockFtraceEvent.tag)
}
inline std::string* BinderLockFtraceEvent::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BinderLockFtraceEvent.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BinderLockFtraceEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BinderLockFtraceEvent.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BinderLockFtraceEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BinderLockFtraceEvent.tag)
}

// -------------------------------------------------------------------

// BinderLockedFtraceEvent

// optional string tag = 1;
inline bool BinderLockedFtraceEvent::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderLockedFtraceEvent::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinderLockedFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderLockedFtraceEvent.tag)
  return tag_.GetNoArena();
}
inline void BinderLockedFtraceEvent::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderLockedFtraceEvent.tag)
}
inline void BinderLockedFtraceEvent::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BinderLockedFtraceEvent.tag)
}
inline void BinderLockedFtraceEvent::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BinderLockedFtraceEvent.tag)
}
inline void BinderLockedFtraceEvent::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BinderLockedFtraceEvent.tag)
}
inline std::string* BinderLockedFtraceEvent::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BinderLockedFtraceEvent.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BinderLockedFtraceEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BinderLockedFtraceEvent.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BinderLockedFtraceEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BinderLockedFtraceEvent.tag)
}

// -------------------------------------------------------------------

// BinderUnlockFtraceEvent

// optional string tag = 1;
inline bool BinderUnlockFtraceEvent::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderUnlockFtraceEvent::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinderUnlockFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderUnlockFtraceEvent.tag)
  return tag_.GetNoArena();
}
inline void BinderUnlockFtraceEvent::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderUnlockFtraceEvent.tag)
}
inline void BinderUnlockFtraceEvent::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BinderUnlockFtraceEvent.tag)
}
inline void BinderUnlockFtraceEvent::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BinderUnlockFtraceEvent.tag)
}
inline void BinderUnlockFtraceEvent::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BinderUnlockFtraceEvent.tag)
}
inline std::string* BinderUnlockFtraceEvent::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BinderUnlockFtraceEvent.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BinderUnlockFtraceEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BinderUnlockFtraceEvent.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BinderUnlockFtraceEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BinderUnlockFtraceEvent.tag)
}

// -------------------------------------------------------------------

// BinderTransactionAllocBufFtraceEvent

// optional uint64 data_size = 1;
inline bool BinderTransactionAllocBufFtraceEvent::has_data_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinderTransactionAllocBufFtraceEvent::clear_data_size() {
  data_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BinderTransactionAllocBufFtraceEvent::data_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.data_size)
  return data_size_;
}
inline void BinderTransactionAllocBufFtraceEvent::set_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  data_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.data_size)
}

// optional int32 debug_id = 2;
inline bool BinderTransactionAllocBufFtraceEvent::has_debug_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinderTransactionAllocBufFtraceEvent::clear_debug_id() {
  debug_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinderTransactionAllocBufFtraceEvent::debug_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.debug_id)
  return debug_id_;
}
inline void BinderTransactionAllocBufFtraceEvent::set_debug_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  debug_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.debug_id)
}

// optional uint64 offsets_size = 3;
inline bool BinderTransactionAllocBufFtraceEvent::has_offsets_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinderTransactionAllocBufFtraceEvent::clear_offsets_size() {
  offsets_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BinderTransactionAllocBufFtraceEvent::offsets_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BinderTransactionAllocBufFtraceEvent.offsets_size)
  return offsets_size_;
}
inline void BinderTransactionAllocBufFtraceEvent::set_offsets_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  offsets_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BinderTransactionAllocBufFtraceEvent.offsets_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto
