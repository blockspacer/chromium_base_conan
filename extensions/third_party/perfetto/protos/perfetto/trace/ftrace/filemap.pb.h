// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/filemap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class MmFilemapAddToPageCacheFtraceEvent;
class MmFilemapAddToPageCacheFtraceEventDefaultTypeInternal;
extern MmFilemapAddToPageCacheFtraceEventDefaultTypeInternal _MmFilemapAddToPageCacheFtraceEvent_default_instance_;
class MmFilemapDeleteFromPageCacheFtraceEvent;
class MmFilemapDeleteFromPageCacheFtraceEventDefaultTypeInternal;
extern MmFilemapDeleteFromPageCacheFtraceEventDefaultTypeInternal _MmFilemapDeleteFromPageCacheFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class MmFilemapAddToPageCacheFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent) */ {
 public:
  MmFilemapAddToPageCacheFtraceEvent();
  virtual ~MmFilemapAddToPageCacheFtraceEvent();

  MmFilemapAddToPageCacheFtraceEvent(const MmFilemapAddToPageCacheFtraceEvent& from);
  MmFilemapAddToPageCacheFtraceEvent(MmFilemapAddToPageCacheFtraceEvent&& from) noexcept
    : MmFilemapAddToPageCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmFilemapAddToPageCacheFtraceEvent& operator=(const MmFilemapAddToPageCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmFilemapAddToPageCacheFtraceEvent& operator=(MmFilemapAddToPageCacheFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmFilemapAddToPageCacheFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmFilemapAddToPageCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmFilemapAddToPageCacheFtraceEvent*>(
               &_MmFilemapAddToPageCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MmFilemapAddToPageCacheFtraceEvent& a, MmFilemapAddToPageCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmFilemapAddToPageCacheFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmFilemapAddToPageCacheFtraceEvent* New() const final {
    return CreateMaybeMessage<MmFilemapAddToPageCacheFtraceEvent>(nullptr);
  }

  MmFilemapAddToPageCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmFilemapAddToPageCacheFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmFilemapAddToPageCacheFtraceEvent& from);
  void MergeFrom(const MmFilemapAddToPageCacheFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmFilemapAddToPageCacheFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmFilemapAddToPageCacheFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPfnFieldNumber = 1,
    kIInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kSDevFieldNumber = 4,
    kPageFieldNumber = 5,
  };
  // optional uint64 pfn = 1;
  bool has_pfn() const;
  void clear_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 pfn() const;
  void set_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 i_ino = 2;
  bool has_i_ino() const;
  void clear_i_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 i_ino() const;
  void set_i_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 s_dev = 4;
  bool has_s_dev() const;
  void clear_s_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 s_dev() const;
  void set_s_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 page = 5;
  bool has_page() const;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint64 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i_ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 s_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 page_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto;
};
// -------------------------------------------------------------------

class MmFilemapDeleteFromPageCacheFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent) */ {
 public:
  MmFilemapDeleteFromPageCacheFtraceEvent();
  virtual ~MmFilemapDeleteFromPageCacheFtraceEvent();

  MmFilemapDeleteFromPageCacheFtraceEvent(const MmFilemapDeleteFromPageCacheFtraceEvent& from);
  MmFilemapDeleteFromPageCacheFtraceEvent(MmFilemapDeleteFromPageCacheFtraceEvent&& from) noexcept
    : MmFilemapDeleteFromPageCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmFilemapDeleteFromPageCacheFtraceEvent& operator=(const MmFilemapDeleteFromPageCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmFilemapDeleteFromPageCacheFtraceEvent& operator=(MmFilemapDeleteFromPageCacheFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmFilemapDeleteFromPageCacheFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmFilemapDeleteFromPageCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmFilemapDeleteFromPageCacheFtraceEvent*>(
               &_MmFilemapDeleteFromPageCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MmFilemapDeleteFromPageCacheFtraceEvent& a, MmFilemapDeleteFromPageCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmFilemapDeleteFromPageCacheFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmFilemapDeleteFromPageCacheFtraceEvent* New() const final {
    return CreateMaybeMessage<MmFilemapDeleteFromPageCacheFtraceEvent>(nullptr);
  }

  MmFilemapDeleteFromPageCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmFilemapDeleteFromPageCacheFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmFilemapDeleteFromPageCacheFtraceEvent& from);
  void MergeFrom(const MmFilemapDeleteFromPageCacheFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmFilemapDeleteFromPageCacheFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPfnFieldNumber = 1,
    kIInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kSDevFieldNumber = 4,
    kPageFieldNumber = 5,
  };
  // optional uint64 pfn = 1;
  bool has_pfn() const;
  void clear_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 pfn() const;
  void set_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 i_ino = 2;
  bool has_i_ino() const;
  void clear_i_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 i_ino() const;
  void set_i_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 s_dev = 4;
  bool has_s_dev() const;
  void clear_s_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 s_dev() const;
  void set_s_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 page = 5;
  bool has_page() const;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint64 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i_ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 s_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 page_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MmFilemapAddToPageCacheFtraceEvent

// optional uint64 pfn = 1;
inline bool MmFilemapAddToPageCacheFtraceEvent::has_pfn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmFilemapAddToPageCacheFtraceEvent::clear_pfn() {
  pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapAddToPageCacheFtraceEvent::pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.pfn)
  return pfn_;
}
inline void MmFilemapAddToPageCacheFtraceEvent::set_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.pfn)
}

// optional uint64 i_ino = 2;
inline bool MmFilemapAddToPageCacheFtraceEvent::has_i_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmFilemapAddToPageCacheFtraceEvent::clear_i_ino() {
  i_ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapAddToPageCacheFtraceEvent::i_ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.i_ino)
  return i_ino_;
}
inline void MmFilemapAddToPageCacheFtraceEvent::set_i_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  i_ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.i_ino)
}

// optional uint64 index = 3;
inline bool MmFilemapAddToPageCacheFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmFilemapAddToPageCacheFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapAddToPageCacheFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.index)
  return index_;
}
inline void MmFilemapAddToPageCacheFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.index)
}

// optional uint64 s_dev = 4;
inline bool MmFilemapAddToPageCacheFtraceEvent::has_s_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmFilemapAddToPageCacheFtraceEvent::clear_s_dev() {
  s_dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapAddToPageCacheFtraceEvent::s_dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.s_dev)
  return s_dev_;
}
inline void MmFilemapAddToPageCacheFtraceEvent::set_s_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  s_dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.s_dev)
}

// optional uint64 page = 5;
inline bool MmFilemapAddToPageCacheFtraceEvent::has_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmFilemapAddToPageCacheFtraceEvent::clear_page() {
  page_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapAddToPageCacheFtraceEvent::page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.page)
  return page_;
}
inline void MmFilemapAddToPageCacheFtraceEvent::set_page(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  page_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapAddToPageCacheFtraceEvent.page)
}

// -------------------------------------------------------------------

// MmFilemapDeleteFromPageCacheFtraceEvent

// optional uint64 pfn = 1;
inline bool MmFilemapDeleteFromPageCacheFtraceEvent::has_pfn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::clear_pfn() {
  pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapDeleteFromPageCacheFtraceEvent::pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.pfn)
  return pfn_;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::set_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.pfn)
}

// optional uint64 i_ino = 2;
inline bool MmFilemapDeleteFromPageCacheFtraceEvent::has_i_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::clear_i_ino() {
  i_ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapDeleteFromPageCacheFtraceEvent::i_ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.i_ino)
  return i_ino_;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::set_i_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  i_ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.i_ino)
}

// optional uint64 index = 3;
inline bool MmFilemapDeleteFromPageCacheFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapDeleteFromPageCacheFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.index)
  return index_;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.index)
}

// optional uint64 s_dev = 4;
inline bool MmFilemapDeleteFromPageCacheFtraceEvent::has_s_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::clear_s_dev() {
  s_dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapDeleteFromPageCacheFtraceEvent::s_dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.s_dev)
  return s_dev_;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::set_s_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  s_dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.s_dev)
}

// optional uint64 page = 5;
inline bool MmFilemapDeleteFromPageCacheFtraceEvent::has_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::clear_page() {
  page_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmFilemapDeleteFromPageCacheFtraceEvent::page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.page)
  return page_;
}
inline void MmFilemapDeleteFromPageCacheFtraceEvent::set_page(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  page_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent.page)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto
