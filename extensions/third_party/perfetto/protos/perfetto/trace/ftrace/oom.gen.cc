#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/oom.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MarkVictimFtraceEvent::MarkVictimFtraceEvent() = default;
MarkVictimFtraceEvent::~MarkVictimFtraceEvent() = default;
MarkVictimFtraceEvent::MarkVictimFtraceEvent(const MarkVictimFtraceEvent&) = default;
MarkVictimFtraceEvent& MarkVictimFtraceEvent::operator=(const MarkVictimFtraceEvent&) = default;
MarkVictimFtraceEvent::MarkVictimFtraceEvent(MarkVictimFtraceEvent&&) noexcept = default;
MarkVictimFtraceEvent& MarkVictimFtraceEvent::operator=(MarkVictimFtraceEvent&&) = default;

bool MarkVictimFtraceEvent::operator==(const MarkVictimFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_;
}

bool MarkVictimFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MarkVictimFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MarkVictimFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MarkVictimFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


OomScoreAdjUpdateFtraceEvent::OomScoreAdjUpdateFtraceEvent() = default;
OomScoreAdjUpdateFtraceEvent::~OomScoreAdjUpdateFtraceEvent() = default;
OomScoreAdjUpdateFtraceEvent::OomScoreAdjUpdateFtraceEvent(const OomScoreAdjUpdateFtraceEvent&) = default;
OomScoreAdjUpdateFtraceEvent& OomScoreAdjUpdateFtraceEvent::operator=(const OomScoreAdjUpdateFtraceEvent&) = default;
OomScoreAdjUpdateFtraceEvent::OomScoreAdjUpdateFtraceEvent(OomScoreAdjUpdateFtraceEvent&&) noexcept = default;
OomScoreAdjUpdateFtraceEvent& OomScoreAdjUpdateFtraceEvent::operator=(OomScoreAdjUpdateFtraceEvent&&) = default;

bool OomScoreAdjUpdateFtraceEvent::operator==(const OomScoreAdjUpdateFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && comm_ == other.comm_
   && oom_score_adj_ == other.oom_score_adj_
   && pid_ == other.pid_;
}

bool OomScoreAdjUpdateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* comm */:
        field.get(&comm_);
        break;
      case 2 /* oom_score_adj */:
        field.get(&oom_score_adj_);
        break;
      case 3 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string OomScoreAdjUpdateFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> OomScoreAdjUpdateFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void OomScoreAdjUpdateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: comm
  if (_has_field_[1]) {
    msg->AppendString(1, comm_);
  }

  // Field 2: oom_score_adj
  if (_has_field_[2]) {
    msg->AppendVarInt(2, oom_score_adj_);
  }

  // Field 3: pid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, pid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
