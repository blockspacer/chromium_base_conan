#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ftrace_stats.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FtraceStats::FtraceStats() = default;
FtraceStats::~FtraceStats() = default;
FtraceStats::FtraceStats(const FtraceStats&) = default;
FtraceStats& FtraceStats::operator=(const FtraceStats&) = default;
FtraceStats::FtraceStats(FtraceStats&&) noexcept = default;
FtraceStats& FtraceStats::operator=(FtraceStats&&) = default;

bool FtraceStats::operator==(const FtraceStats& other) const {
  return unknown_fields_ == other.unknown_fields_
   && phase_ == other.phase_
   && cpu_stats_ == other.cpu_stats_
   && kernel_symbols_parsed_ == other.kernel_symbols_parsed_
   && kernel_symbols_mem_kb_ == other.kernel_symbols_mem_kb_;
}

int FtraceStats::cpu_stats_size() const { return static_cast<int>(cpu_stats_.size()); }
void FtraceStats::clear_cpu_stats() { cpu_stats_.clear(); }
FtraceCpuStats* FtraceStats::add_cpu_stats() { cpu_stats_.emplace_back(); return &cpu_stats_.back(); }
bool FtraceStats::ParseFromArray(const void* raw, size_t size) {
  cpu_stats_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* phase */:
        field.get(&phase_);
        break;
      case 2 /* cpu_stats */:
        cpu_stats_.emplace_back();
        cpu_stats_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* kernel_symbols_parsed */:
        field.get(&kernel_symbols_parsed_);
        break;
      case 4 /* kernel_symbols_mem_kb */:
        field.get(&kernel_symbols_mem_kb_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceStats::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceStats::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceStats::Serialize(::protozero::Message* msg) const {
  // Field 1: phase
  if (_has_field_[1]) {
    msg->AppendVarInt(1, phase_);
  }

  // Field 2: cpu_stats
  for (auto& it : cpu_stats_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: kernel_symbols_parsed
  if (_has_field_[3]) {
    msg->AppendVarInt(3, kernel_symbols_parsed_);
  }

  // Field 4: kernel_symbols_mem_kb
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kernel_symbols_mem_kb_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FtraceCpuStats::FtraceCpuStats() = default;
FtraceCpuStats::~FtraceCpuStats() = default;
FtraceCpuStats::FtraceCpuStats(const FtraceCpuStats&) = default;
FtraceCpuStats& FtraceCpuStats::operator=(const FtraceCpuStats&) = default;
FtraceCpuStats::FtraceCpuStats(FtraceCpuStats&&) noexcept = default;
FtraceCpuStats& FtraceCpuStats::operator=(FtraceCpuStats&&) = default;

bool FtraceCpuStats::operator==(const FtraceCpuStats& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cpu_ == other.cpu_
   && entries_ == other.entries_
   && overrun_ == other.overrun_
   && commit_overrun_ == other.commit_overrun_
   && bytes_read_ == other.bytes_read_
   && oldest_event_ts_ == other.oldest_event_ts_
   && now_ts_ == other.now_ts_
   && dropped_events_ == other.dropped_events_
   && read_events_ == other.read_events_;
}

bool FtraceCpuStats::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* entries */:
        field.get(&entries_);
        break;
      case 3 /* overrun */:
        field.get(&overrun_);
        break;
      case 4 /* commit_overrun */:
        field.get(&commit_overrun_);
        break;
      case 5 /* bytes_read */:
        field.get(&bytes_read_);
        break;
      case 6 /* oldest_event_ts */:
        field.get(&oldest_event_ts_);
        break;
      case 7 /* now_ts */:
        field.get(&now_ts_);
        break;
      case 8 /* dropped_events */:
        field.get(&dropped_events_);
        break;
      case 9 /* read_events */:
        field.get(&read_events_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceCpuStats::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceCpuStats::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceCpuStats::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cpu_);
  }

  // Field 2: entries
  if (_has_field_[2]) {
    msg->AppendVarInt(2, entries_);
  }

  // Field 3: overrun
  if (_has_field_[3]) {
    msg->AppendVarInt(3, overrun_);
  }

  // Field 4: commit_overrun
  if (_has_field_[4]) {
    msg->AppendVarInt(4, commit_overrun_);
  }

  // Field 5: bytes_read
  if (_has_field_[5]) {
    msg->AppendVarInt(5, bytes_read_);
  }

  // Field 6: oldest_event_ts
  if (_has_field_[6]) {
    msg->AppendFixed(6, oldest_event_ts_);
  }

  // Field 7: now_ts
  if (_has_field_[7]) {
    msg->AppendFixed(7, now_ts_);
  }

  // Field 8: dropped_events
  if (_has_field_[8]) {
    msg->AppendVarInt(8, dropped_events_);
  }

  // Field 9: read_events
  if (_has_field_[9]) {
    msg->AppendVarInt(9, read_events_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
