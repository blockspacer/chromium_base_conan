#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/fence.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FenceSignaledFtraceEvent::FenceSignaledFtraceEvent() = default;
FenceSignaledFtraceEvent::~FenceSignaledFtraceEvent() = default;
FenceSignaledFtraceEvent::FenceSignaledFtraceEvent(const FenceSignaledFtraceEvent&) = default;
FenceSignaledFtraceEvent& FenceSignaledFtraceEvent::operator=(const FenceSignaledFtraceEvent&) = default;
FenceSignaledFtraceEvent::FenceSignaledFtraceEvent(FenceSignaledFtraceEvent&&) noexcept = default;
FenceSignaledFtraceEvent& FenceSignaledFtraceEvent::operator=(FenceSignaledFtraceEvent&&) = default;

bool FenceSignaledFtraceEvent::operator==(const FenceSignaledFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && context_ == other.context_
   && driver_ == other.driver_
   && seqno_ == other.seqno_
   && timeline_ == other.timeline_;
}

bool FenceSignaledFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* context */:
        field.get(&context_);
        break;
      case 2 /* driver */:
        field.get(&driver_);
        break;
      case 3 /* seqno */:
        field.get(&seqno_);
        break;
      case 4 /* timeline */:
        field.get(&timeline_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FenceSignaledFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FenceSignaledFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FenceSignaledFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: context
  if (_has_field_[1]) {
    msg->AppendVarInt(1, context_);
  }

  // Field 2: driver
  if (_has_field_[2]) {
    msg->AppendString(2, driver_);
  }

  // Field 3: seqno
  if (_has_field_[3]) {
    msg->AppendVarInt(3, seqno_);
  }

  // Field 4: timeline
  if (_has_field_[4]) {
    msg->AppendString(4, timeline_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FenceEnableSignalFtraceEvent::FenceEnableSignalFtraceEvent() = default;
FenceEnableSignalFtraceEvent::~FenceEnableSignalFtraceEvent() = default;
FenceEnableSignalFtraceEvent::FenceEnableSignalFtraceEvent(const FenceEnableSignalFtraceEvent&) = default;
FenceEnableSignalFtraceEvent& FenceEnableSignalFtraceEvent::operator=(const FenceEnableSignalFtraceEvent&) = default;
FenceEnableSignalFtraceEvent::FenceEnableSignalFtraceEvent(FenceEnableSignalFtraceEvent&&) noexcept = default;
FenceEnableSignalFtraceEvent& FenceEnableSignalFtraceEvent::operator=(FenceEnableSignalFtraceEvent&&) = default;

bool FenceEnableSignalFtraceEvent::operator==(const FenceEnableSignalFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && context_ == other.context_
   && driver_ == other.driver_
   && seqno_ == other.seqno_
   && timeline_ == other.timeline_;
}

bool FenceEnableSignalFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* context */:
        field.get(&context_);
        break;
      case 2 /* driver */:
        field.get(&driver_);
        break;
      case 3 /* seqno */:
        field.get(&seqno_);
        break;
      case 4 /* timeline */:
        field.get(&timeline_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FenceEnableSignalFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FenceEnableSignalFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FenceEnableSignalFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: context
  if (_has_field_[1]) {
    msg->AppendVarInt(1, context_);
  }

  // Field 2: driver
  if (_has_field_[2]) {
    msg->AppendString(2, driver_);
  }

  // Field 3: seqno
  if (_has_field_[3]) {
    msg->AppendVarInt(3, seqno_);
  }

  // Field 4: timeline
  if (_has_field_[4]) {
    msg->AppendString(4, timeline_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FenceDestroyFtraceEvent::FenceDestroyFtraceEvent() = default;
FenceDestroyFtraceEvent::~FenceDestroyFtraceEvent() = default;
FenceDestroyFtraceEvent::FenceDestroyFtraceEvent(const FenceDestroyFtraceEvent&) = default;
FenceDestroyFtraceEvent& FenceDestroyFtraceEvent::operator=(const FenceDestroyFtraceEvent&) = default;
FenceDestroyFtraceEvent::FenceDestroyFtraceEvent(FenceDestroyFtraceEvent&&) noexcept = default;
FenceDestroyFtraceEvent& FenceDestroyFtraceEvent::operator=(FenceDestroyFtraceEvent&&) = default;

bool FenceDestroyFtraceEvent::operator==(const FenceDestroyFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && context_ == other.context_
   && driver_ == other.driver_
   && seqno_ == other.seqno_
   && timeline_ == other.timeline_;
}

bool FenceDestroyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* context */:
        field.get(&context_);
        break;
      case 2 /* driver */:
        field.get(&driver_);
        break;
      case 3 /* seqno */:
        field.get(&seqno_);
        break;
      case 4 /* timeline */:
        field.get(&timeline_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FenceDestroyFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FenceDestroyFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FenceDestroyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: context
  if (_has_field_[1]) {
    msg->AppendVarInt(1, context_);
  }

  // Field 2: driver
  if (_has_field_[2]) {
    msg->AppendString(2, driver_);
  }

  // Field 3: seqno
  if (_has_field_[3]) {
    msg->AppendVarInt(3, seqno_);
  }

  // Field 4: timeline
  if (_has_field_[4]) {
    msg->AppendString(4, timeline_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FenceInitFtraceEvent::FenceInitFtraceEvent() = default;
FenceInitFtraceEvent::~FenceInitFtraceEvent() = default;
FenceInitFtraceEvent::FenceInitFtraceEvent(const FenceInitFtraceEvent&) = default;
FenceInitFtraceEvent& FenceInitFtraceEvent::operator=(const FenceInitFtraceEvent&) = default;
FenceInitFtraceEvent::FenceInitFtraceEvent(FenceInitFtraceEvent&&) noexcept = default;
FenceInitFtraceEvent& FenceInitFtraceEvent::operator=(FenceInitFtraceEvent&&) = default;

bool FenceInitFtraceEvent::operator==(const FenceInitFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && context_ == other.context_
   && driver_ == other.driver_
   && seqno_ == other.seqno_
   && timeline_ == other.timeline_;
}

bool FenceInitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* context */:
        field.get(&context_);
        break;
      case 2 /* driver */:
        field.get(&driver_);
        break;
      case 3 /* seqno */:
        field.get(&seqno_);
        break;
      case 4 /* timeline */:
        field.get(&timeline_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FenceInitFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FenceInitFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FenceInitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: context
  if (_has_field_[1]) {
    msg->AppendVarInt(1, context_);
  }

  // Field 2: driver
  if (_has_field_[2]) {
    msg->AppendString(2, driver_);
  }

  // Field 3: seqno
  if (_has_field_[3]) {
    msg->AppendVarInt(3, seqno_);
  }

  // Field 4: timeline
  if (_has_field_[4]) {
    msg->AppendString(4, timeline_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
