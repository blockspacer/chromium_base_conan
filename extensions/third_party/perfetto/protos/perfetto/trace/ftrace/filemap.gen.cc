#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/filemap.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MmFilemapDeleteFromPageCacheFtraceEvent::MmFilemapDeleteFromPageCacheFtraceEvent() = default;
MmFilemapDeleteFromPageCacheFtraceEvent::~MmFilemapDeleteFromPageCacheFtraceEvent() = default;
MmFilemapDeleteFromPageCacheFtraceEvent::MmFilemapDeleteFromPageCacheFtraceEvent(const MmFilemapDeleteFromPageCacheFtraceEvent&) = default;
MmFilemapDeleteFromPageCacheFtraceEvent& MmFilemapDeleteFromPageCacheFtraceEvent::operator=(const MmFilemapDeleteFromPageCacheFtraceEvent&) = default;
MmFilemapDeleteFromPageCacheFtraceEvent::MmFilemapDeleteFromPageCacheFtraceEvent(MmFilemapDeleteFromPageCacheFtraceEvent&&) noexcept = default;
MmFilemapDeleteFromPageCacheFtraceEvent& MmFilemapDeleteFromPageCacheFtraceEvent::operator=(MmFilemapDeleteFromPageCacheFtraceEvent&&) = default;

bool MmFilemapDeleteFromPageCacheFtraceEvent::operator==(const MmFilemapDeleteFromPageCacheFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pfn_ == other.pfn_
   && i_ino_ == other.i_ino_
   && index_ == other.index_
   && s_dev_ == other.s_dev_
   && page_ == other.page_;
}

bool MmFilemapDeleteFromPageCacheFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pfn */:
        field.get(&pfn_);
        break;
      case 2 /* i_ino */:
        field.get(&i_ino_);
        break;
      case 3 /* index */:
        field.get(&index_);
        break;
      case 4 /* s_dev */:
        field.get(&s_dev_);
        break;
      case 5 /* page */:
        field.get(&page_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmFilemapDeleteFromPageCacheFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmFilemapDeleteFromPageCacheFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmFilemapDeleteFromPageCacheFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pfn
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pfn_);
  }

  // Field 2: i_ino
  if (_has_field_[2]) {
    msg->AppendVarInt(2, i_ino_);
  }

  // Field 3: index
  if (_has_field_[3]) {
    msg->AppendVarInt(3, index_);
  }

  // Field 4: s_dev
  if (_has_field_[4]) {
    msg->AppendVarInt(4, s_dev_);
  }

  // Field 5: page
  if (_has_field_[5]) {
    msg->AppendVarInt(5, page_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmFilemapAddToPageCacheFtraceEvent::MmFilemapAddToPageCacheFtraceEvent() = default;
MmFilemapAddToPageCacheFtraceEvent::~MmFilemapAddToPageCacheFtraceEvent() = default;
MmFilemapAddToPageCacheFtraceEvent::MmFilemapAddToPageCacheFtraceEvent(const MmFilemapAddToPageCacheFtraceEvent&) = default;
MmFilemapAddToPageCacheFtraceEvent& MmFilemapAddToPageCacheFtraceEvent::operator=(const MmFilemapAddToPageCacheFtraceEvent&) = default;
MmFilemapAddToPageCacheFtraceEvent::MmFilemapAddToPageCacheFtraceEvent(MmFilemapAddToPageCacheFtraceEvent&&) noexcept = default;
MmFilemapAddToPageCacheFtraceEvent& MmFilemapAddToPageCacheFtraceEvent::operator=(MmFilemapAddToPageCacheFtraceEvent&&) = default;

bool MmFilemapAddToPageCacheFtraceEvent::operator==(const MmFilemapAddToPageCacheFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pfn_ == other.pfn_
   && i_ino_ == other.i_ino_
   && index_ == other.index_
   && s_dev_ == other.s_dev_
   && page_ == other.page_;
}

bool MmFilemapAddToPageCacheFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pfn */:
        field.get(&pfn_);
        break;
      case 2 /* i_ino */:
        field.get(&i_ino_);
        break;
      case 3 /* index */:
        field.get(&index_);
        break;
      case 4 /* s_dev */:
        field.get(&s_dev_);
        break;
      case 5 /* page */:
        field.get(&page_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmFilemapAddToPageCacheFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmFilemapAddToPageCacheFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmFilemapAddToPageCacheFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pfn
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pfn_);
  }

  // Field 2: i_ino
  if (_has_field_[2]) {
    msg->AppendVarInt(2, i_ino_);
  }

  // Field 3: index
  if (_has_field_[3]) {
    msg->AppendVarInt(3, index_);
  }

  // Field 4: s_dev
  if (_has_field_[4]) {
    msg->AppendVarInt(4, s_dev_);
  }

  // Field 5: page
  if (_has_field_[5]) {
    msg->AppendVarInt(5, page_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
