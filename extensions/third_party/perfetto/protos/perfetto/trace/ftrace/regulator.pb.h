// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/regulator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class RegulatorDisableCompleteFtraceEvent;
class RegulatorDisableCompleteFtraceEventDefaultTypeInternal;
extern RegulatorDisableCompleteFtraceEventDefaultTypeInternal _RegulatorDisableCompleteFtraceEvent_default_instance_;
class RegulatorDisableFtraceEvent;
class RegulatorDisableFtraceEventDefaultTypeInternal;
extern RegulatorDisableFtraceEventDefaultTypeInternal _RegulatorDisableFtraceEvent_default_instance_;
class RegulatorEnableCompleteFtraceEvent;
class RegulatorEnableCompleteFtraceEventDefaultTypeInternal;
extern RegulatorEnableCompleteFtraceEventDefaultTypeInternal _RegulatorEnableCompleteFtraceEvent_default_instance_;
class RegulatorEnableDelayFtraceEvent;
class RegulatorEnableDelayFtraceEventDefaultTypeInternal;
extern RegulatorEnableDelayFtraceEventDefaultTypeInternal _RegulatorEnableDelayFtraceEvent_default_instance_;
class RegulatorEnableFtraceEvent;
class RegulatorEnableFtraceEventDefaultTypeInternal;
extern RegulatorEnableFtraceEventDefaultTypeInternal _RegulatorEnableFtraceEvent_default_instance_;
class RegulatorSetVoltageCompleteFtraceEvent;
class RegulatorSetVoltageCompleteFtraceEventDefaultTypeInternal;
extern RegulatorSetVoltageCompleteFtraceEventDefaultTypeInternal _RegulatorSetVoltageCompleteFtraceEvent_default_instance_;
class RegulatorSetVoltageFtraceEvent;
class RegulatorSetVoltageFtraceEventDefaultTypeInternal;
extern RegulatorSetVoltageFtraceEventDefaultTypeInternal _RegulatorSetVoltageFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorDisableCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorDisableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorDisableFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorEnableCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorEnableDelayFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorEnableDelayFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorEnableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorEnableFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorSetVoltageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorSetVoltageFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class RegulatorDisableFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorDisableFtraceEvent) */ {
 public:
  RegulatorDisableFtraceEvent();
  virtual ~RegulatorDisableFtraceEvent();

  RegulatorDisableFtraceEvent(const RegulatorDisableFtraceEvent& from);
  RegulatorDisableFtraceEvent(RegulatorDisableFtraceEvent&& from) noexcept
    : RegulatorDisableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorDisableFtraceEvent& operator=(const RegulatorDisableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorDisableFtraceEvent& operator=(RegulatorDisableFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorDisableFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorDisableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorDisableFtraceEvent*>(
               &_RegulatorDisableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegulatorDisableFtraceEvent& a, RegulatorDisableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorDisableFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorDisableFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorDisableFtraceEvent>(nullptr);
  }

  RegulatorDisableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorDisableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorDisableFtraceEvent& from);
  void MergeFrom(const RegulatorDisableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorDisableFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorDisableFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorDisableFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorDisableCompleteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorDisableCompleteFtraceEvent) */ {
 public:
  RegulatorDisableCompleteFtraceEvent();
  virtual ~RegulatorDisableCompleteFtraceEvent();

  RegulatorDisableCompleteFtraceEvent(const RegulatorDisableCompleteFtraceEvent& from);
  RegulatorDisableCompleteFtraceEvent(RegulatorDisableCompleteFtraceEvent&& from) noexcept
    : RegulatorDisableCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorDisableCompleteFtraceEvent& operator=(const RegulatorDisableCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorDisableCompleteFtraceEvent& operator=(RegulatorDisableCompleteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorDisableCompleteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorDisableCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorDisableCompleteFtraceEvent*>(
               &_RegulatorDisableCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegulatorDisableCompleteFtraceEvent& a, RegulatorDisableCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorDisableCompleteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorDisableCompleteFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorDisableCompleteFtraceEvent>(nullptr);
  }

  RegulatorDisableCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorDisableCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorDisableCompleteFtraceEvent& from);
  void MergeFrom(const RegulatorDisableCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorDisableCompleteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorDisableCompleteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorDisableCompleteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorEnableFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorEnableFtraceEvent) */ {
 public:
  RegulatorEnableFtraceEvent();
  virtual ~RegulatorEnableFtraceEvent();

  RegulatorEnableFtraceEvent(const RegulatorEnableFtraceEvent& from);
  RegulatorEnableFtraceEvent(RegulatorEnableFtraceEvent&& from) noexcept
    : RegulatorEnableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorEnableFtraceEvent& operator=(const RegulatorEnableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorEnableFtraceEvent& operator=(RegulatorEnableFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorEnableFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorEnableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorEnableFtraceEvent*>(
               &_RegulatorEnableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegulatorEnableFtraceEvent& a, RegulatorEnableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorEnableFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorEnableFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorEnableFtraceEvent>(nullptr);
  }

  RegulatorEnableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorEnableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorEnableFtraceEvent& from);
  void MergeFrom(const RegulatorEnableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorEnableFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorEnableFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorEnableFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorEnableCompleteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorEnableCompleteFtraceEvent) */ {
 public:
  RegulatorEnableCompleteFtraceEvent();
  virtual ~RegulatorEnableCompleteFtraceEvent();

  RegulatorEnableCompleteFtraceEvent(const RegulatorEnableCompleteFtraceEvent& from);
  RegulatorEnableCompleteFtraceEvent(RegulatorEnableCompleteFtraceEvent&& from) noexcept
    : RegulatorEnableCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorEnableCompleteFtraceEvent& operator=(const RegulatorEnableCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorEnableCompleteFtraceEvent& operator=(RegulatorEnableCompleteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorEnableCompleteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorEnableCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorEnableCompleteFtraceEvent*>(
               &_RegulatorEnableCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegulatorEnableCompleteFtraceEvent& a, RegulatorEnableCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorEnableCompleteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorEnableCompleteFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorEnableCompleteFtraceEvent>(nullptr);
  }

  RegulatorEnableCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorEnableCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorEnableCompleteFtraceEvent& from);
  void MergeFrom(const RegulatorEnableCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorEnableCompleteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorEnableCompleteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorEnableCompleteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorEnableDelayFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorEnableDelayFtraceEvent) */ {
 public:
  RegulatorEnableDelayFtraceEvent();
  virtual ~RegulatorEnableDelayFtraceEvent();

  RegulatorEnableDelayFtraceEvent(const RegulatorEnableDelayFtraceEvent& from);
  RegulatorEnableDelayFtraceEvent(RegulatorEnableDelayFtraceEvent&& from) noexcept
    : RegulatorEnableDelayFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorEnableDelayFtraceEvent& operator=(const RegulatorEnableDelayFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorEnableDelayFtraceEvent& operator=(RegulatorEnableDelayFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorEnableDelayFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorEnableDelayFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorEnableDelayFtraceEvent*>(
               &_RegulatorEnableDelayFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegulatorEnableDelayFtraceEvent& a, RegulatorEnableDelayFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorEnableDelayFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorEnableDelayFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorEnableDelayFtraceEvent>(nullptr);
  }

  RegulatorEnableDelayFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorEnableDelayFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorEnableDelayFtraceEvent& from);
  void MergeFrom(const RegulatorEnableDelayFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorEnableDelayFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorEnableDelayFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorEnableDelayFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorSetVoltageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorSetVoltageFtraceEvent) */ {
 public:
  RegulatorSetVoltageFtraceEvent();
  virtual ~RegulatorSetVoltageFtraceEvent();

  RegulatorSetVoltageFtraceEvent(const RegulatorSetVoltageFtraceEvent& from);
  RegulatorSetVoltageFtraceEvent(RegulatorSetVoltageFtraceEvent&& from) noexcept
    : RegulatorSetVoltageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorSetVoltageFtraceEvent& operator=(const RegulatorSetVoltageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorSetVoltageFtraceEvent& operator=(RegulatorSetVoltageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorSetVoltageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorSetVoltageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorSetVoltageFtraceEvent*>(
               &_RegulatorSetVoltageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegulatorSetVoltageFtraceEvent& a, RegulatorSetVoltageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorSetVoltageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorSetVoltageFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorSetVoltageFtraceEvent>(nullptr);
  }

  RegulatorSetVoltageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorSetVoltageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorSetVoltageFtraceEvent& from);
  void MergeFrom(const RegulatorSetVoltageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorSetVoltageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorSetVoltageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 min = 2;
  bool has_min() const;
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max = 3;
  bool has_max() const;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorSetVoltageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorSetVoltageCompleteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent) */ {
 public:
  RegulatorSetVoltageCompleteFtraceEvent();
  virtual ~RegulatorSetVoltageCompleteFtraceEvent();

  RegulatorSetVoltageCompleteFtraceEvent(const RegulatorSetVoltageCompleteFtraceEvent& from);
  RegulatorSetVoltageCompleteFtraceEvent(RegulatorSetVoltageCompleteFtraceEvent&& from) noexcept
    : RegulatorSetVoltageCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorSetVoltageCompleteFtraceEvent& operator=(const RegulatorSetVoltageCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorSetVoltageCompleteFtraceEvent& operator=(RegulatorSetVoltageCompleteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegulatorSetVoltageCompleteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulatorSetVoltageCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorSetVoltageCompleteFtraceEvent*>(
               &_RegulatorSetVoltageCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegulatorSetVoltageCompleteFtraceEvent& a, RegulatorSetVoltageCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulatorSetVoltageCompleteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulatorSetVoltageCompleteFtraceEvent* New() const final {
    return CreateMaybeMessage<RegulatorSetVoltageCompleteFtraceEvent>(nullptr);
  }

  RegulatorSetVoltageCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulatorSetVoltageCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegulatorSetVoltageCompleteFtraceEvent& from);
  void MergeFrom(const RegulatorSetVoltageCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorSetVoltageCompleteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint32 val = 2;
  bool has_val() const;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegulatorDisableFtraceEvent

// optional string name = 1;
inline bool RegulatorDisableFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorDisableFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorDisableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorDisableFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorDisableFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorDisableFtraceEvent.name)
}
inline void RegulatorDisableFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorDisableFtraceEvent.name)
}
inline void RegulatorDisableFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorDisableFtraceEvent.name)
}
inline void RegulatorDisableFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorDisableFtraceEvent.name)
}
inline std::string* RegulatorDisableFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorDisableFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorDisableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorDisableFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorDisableFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorDisableFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorDisableCompleteFtraceEvent

// optional string name = 1;
inline bool RegulatorDisableCompleteFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorDisableCompleteFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorDisableCompleteFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorDisableCompleteFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}
inline void RegulatorDisableCompleteFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}
inline void RegulatorDisableCompleteFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}
inline void RegulatorDisableCompleteFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}
inline std::string* RegulatorDisableCompleteFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorDisableCompleteFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorDisableCompleteFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorEnableFtraceEvent

// optional string name = 1;
inline bool RegulatorEnableFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorEnableFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorEnableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorEnableFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorEnableFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorEnableFtraceEvent.name)
}
inline void RegulatorEnableFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorEnableFtraceEvent.name)
}
inline void RegulatorEnableFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorEnableFtraceEvent.name)
}
inline void RegulatorEnableFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorEnableFtraceEvent.name)
}
inline std::string* RegulatorEnableFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorEnableFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorEnableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorEnableFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorEnableFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorEnableFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorEnableCompleteFtraceEvent

// optional string name = 1;
inline bool RegulatorEnableCompleteFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorEnableCompleteFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorEnableCompleteFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorEnableCompleteFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}
inline void RegulatorEnableCompleteFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}
inline void RegulatorEnableCompleteFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}
inline void RegulatorEnableCompleteFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}
inline std::string* RegulatorEnableCompleteFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorEnableCompleteFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorEnableCompleteFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorEnableDelayFtraceEvent

// optional string name = 1;
inline bool RegulatorEnableDelayFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorEnableDelayFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorEnableDelayFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorEnableDelayFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}
inline void RegulatorEnableDelayFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}
inline void RegulatorEnableDelayFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}
inline void RegulatorEnableDelayFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}
inline std::string* RegulatorEnableDelayFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorEnableDelayFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorEnableDelayFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorSetVoltageFtraceEvent

// optional string name = 1;
inline bool RegulatorSetVoltageFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorSetVoltageFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorSetVoltageFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorSetVoltageFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}
inline void RegulatorSetVoltageFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}
inline void RegulatorSetVoltageFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}
inline void RegulatorSetVoltageFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}
inline std::string* RegulatorSetVoltageFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorSetVoltageFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorSetVoltageFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}

// optional int32 min = 2;
inline bool RegulatorSetVoltageFtraceEvent::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegulatorSetVoltageFtraceEvent::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegulatorSetVoltageFtraceEvent::min() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageFtraceEvent.min)
  return min_;
}
inline void RegulatorSetVoltageFtraceEvent::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageFtraceEvent.min)
}

// optional int32 max = 3;
inline bool RegulatorSetVoltageFtraceEvent::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegulatorSetVoltageFtraceEvent::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegulatorSetVoltageFtraceEvent::max() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageFtraceEvent.max)
  return max_;
}
inline void RegulatorSetVoltageFtraceEvent::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageFtraceEvent.max)
}

// -------------------------------------------------------------------

// RegulatorSetVoltageCompleteFtraceEvent

// optional string name = 1;
inline bool RegulatorSetVoltageCompleteFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegulatorSetVoltageCompleteFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorSetVoltageCompleteFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
  return name_.GetNoArena();
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}
inline std::string* RegulatorSetVoltageCompleteFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegulatorSetVoltageCompleteFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}

// optional uint32 val = 2;
inline bool RegulatorSetVoltageCompleteFtraceEvent::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegulatorSetVoltageCompleteFtraceEvent::clear_val() {
  val_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegulatorSetVoltageCompleteFtraceEvent::val() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.val)
  return val_;
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  val_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.val)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto
