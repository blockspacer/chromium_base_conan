#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/thermal.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

CdevUpdateFtraceEvent::CdevUpdateFtraceEvent() = default;
CdevUpdateFtraceEvent::~CdevUpdateFtraceEvent() = default;
CdevUpdateFtraceEvent::CdevUpdateFtraceEvent(const CdevUpdateFtraceEvent&) = default;
CdevUpdateFtraceEvent& CdevUpdateFtraceEvent::operator=(const CdevUpdateFtraceEvent&) = default;
CdevUpdateFtraceEvent::CdevUpdateFtraceEvent(CdevUpdateFtraceEvent&&) noexcept = default;
CdevUpdateFtraceEvent& CdevUpdateFtraceEvent::operator=(CdevUpdateFtraceEvent&&) = default;

bool CdevUpdateFtraceEvent::operator==(const CdevUpdateFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && target_ == other.target_
   && type_ == other.type_;
}

bool CdevUpdateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* target */:
        field.get(&target_);
        break;
      case 2 /* type */:
        field.get(&type_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CdevUpdateFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CdevUpdateFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CdevUpdateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: target
  if (_has_field_[1]) {
    msg->AppendVarInt(1, target_);
  }

  // Field 2: type
  if (_has_field_[2]) {
    msg->AppendString(2, type_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


ThermalTemperatureFtraceEvent::ThermalTemperatureFtraceEvent() = default;
ThermalTemperatureFtraceEvent::~ThermalTemperatureFtraceEvent() = default;
ThermalTemperatureFtraceEvent::ThermalTemperatureFtraceEvent(const ThermalTemperatureFtraceEvent&) = default;
ThermalTemperatureFtraceEvent& ThermalTemperatureFtraceEvent::operator=(const ThermalTemperatureFtraceEvent&) = default;
ThermalTemperatureFtraceEvent::ThermalTemperatureFtraceEvent(ThermalTemperatureFtraceEvent&&) noexcept = default;
ThermalTemperatureFtraceEvent& ThermalTemperatureFtraceEvent::operator=(ThermalTemperatureFtraceEvent&&) = default;

bool ThermalTemperatureFtraceEvent::operator==(const ThermalTemperatureFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && id_ == other.id_
   && temp_ == other.temp_
   && temp_prev_ == other.temp_prev_
   && thermal_zone_ == other.thermal_zone_;
}

bool ThermalTemperatureFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* temp */:
        field.get(&temp_);
        break;
      case 3 /* temp_prev */:
        field.get(&temp_prev_);
        break;
      case 4 /* thermal_zone */:
        field.get(&thermal_zone_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ThermalTemperatureFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ThermalTemperatureFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ThermalTemperatureFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, id_);
  }

  // Field 2: temp
  if (_has_field_[2]) {
    msg->AppendVarInt(2, temp_);
  }

  // Field 3: temp_prev
  if (_has_field_[3]) {
    msg->AppendVarInt(3, temp_prev_);
  }

  // Field 4: thermal_zone
  if (_has_field_[4]) {
    msg->AppendString(4, thermal_zone_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
