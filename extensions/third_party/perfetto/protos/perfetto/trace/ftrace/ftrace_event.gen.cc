#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ftrace_event.gen.h"
#include "protos/perfetto/trace/ftrace/generic.gen.h"
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"
#include "protos/perfetto/trace/ftrace/thermal.gen.h"
#include "protos/perfetto/trace/ftrace/task.gen.h"
#include "protos/perfetto/trace/ftrace/systrace.gen.h"
#include "protos/perfetto/trace/ftrace/sync.gen.h"
#include "protos/perfetto/trace/ftrace/signal.gen.h"
#include "protos/perfetto/trace/ftrace/sde.gen.h"
#include "protos/perfetto/trace/ftrace/scm.gen.h"
#include "protos/perfetto/trace/ftrace/sched.gen.h"
#include "protos/perfetto/trace/ftrace/regulator.gen.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.gen.h"
#include "protos/perfetto/trace/ftrace/power.gen.h"
#include "protos/perfetto/trace/ftrace/oom.gen.h"
#include "protos/perfetto/trace/ftrace/mm_event.gen.h"
#include "protos/perfetto/trace/ftrace/mdss.gen.h"
#include "protos/perfetto/trace/ftrace/mali.gen.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.gen.h"
#include "protos/perfetto/trace/ftrace/kmem.gen.h"
#include "protos/perfetto/trace/ftrace/irq.gen.h"
#include "protos/perfetto/trace/ftrace/ipi.gen.h"
#include "protos/perfetto/trace/ftrace/ion.gen.h"
#include "protos/perfetto/trace/ftrace/i2c.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.gen.h"
#include "protos/perfetto/trace/ftrace/g2d.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"
#include "protos/perfetto/trace/ftrace/filemap.gen.h"
#include "protos/perfetto/trace/ftrace/fence.gen.h"
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"
#include "protos/perfetto/trace/ftrace/ext4.gen.h"
#include "protos/perfetto/trace/ftrace/dpu.gen.h"
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"
#include "protos/perfetto/trace/ftrace/compaction.gen.h"
#include "protos/perfetto/trace/ftrace/clk.gen.h"
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"
#include "protos/perfetto/trace/ftrace/block.gen.h"
#include "protos/perfetto/trace/ftrace/binder.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FtraceEvent::FtraceEvent() = default;
FtraceEvent::~FtraceEvent() = default;
FtraceEvent::FtraceEvent(const FtraceEvent&) = default;
FtraceEvent& FtraceEvent::operator=(const FtraceEvent&) = default;
FtraceEvent::FtraceEvent(FtraceEvent&&) noexcept = default;
FtraceEvent& FtraceEvent::operator=(FtraceEvent&&) = default;

bool FtraceEvent::operator==(const FtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && timestamp_ == other.timestamp_
   && pid_ == other.pid_
   && print_ == other.print_
   && sched_switch_ == other.sched_switch_
   && cpu_frequency_ == other.cpu_frequency_
   && cpu_frequency_limits_ == other.cpu_frequency_limits_
   && cpu_idle_ == other.cpu_idle_
   && clock_enable_ == other.clock_enable_
   && clock_disable_ == other.clock_disable_
   && clock_set_rate_ == other.clock_set_rate_
   && sched_wakeup_ == other.sched_wakeup_
   && sched_blocked_reason_ == other.sched_blocked_reason_
   && sched_cpu_hotplug_ == other.sched_cpu_hotplug_
   && sched_waking_ == other.sched_waking_
   && ipi_entry_ == other.ipi_entry_
   && ipi_exit_ == other.ipi_exit_
   && ipi_raise_ == other.ipi_raise_
   && softirq_entry_ == other.softirq_entry_
   && softirq_exit_ == other.softirq_exit_
   && softirq_raise_ == other.softirq_raise_
   && i2c_read_ == other.i2c_read_
   && i2c_write_ == other.i2c_write_
   && i2c_result_ == other.i2c_result_
   && i2c_reply_ == other.i2c_reply_
   && smbus_read_ == other.smbus_read_
   && smbus_write_ == other.smbus_write_
   && smbus_result_ == other.smbus_result_
   && smbus_reply_ == other.smbus_reply_
   && lowmemory_kill_ == other.lowmemory_kill_
   && irq_handler_entry_ == other.irq_handler_entry_
   && irq_handler_exit_ == other.irq_handler_exit_
   && sync_pt_ == other.sync_pt_
   && sync_timeline_ == other.sync_timeline_
   && sync_wait_ == other.sync_wait_
   && ext4_da_write_begin_ == other.ext4_da_write_begin_
   && ext4_da_write_end_ == other.ext4_da_write_end_
   && ext4_sync_file_enter_ == other.ext4_sync_file_enter_
   && ext4_sync_file_exit_ == other.ext4_sync_file_exit_
   && block_rq_issue_ == other.block_rq_issue_
   && mm_vmscan_direct_reclaim_begin_ == other.mm_vmscan_direct_reclaim_begin_
   && mm_vmscan_direct_reclaim_end_ == other.mm_vmscan_direct_reclaim_end_
   && mm_vmscan_kswapd_wake_ == other.mm_vmscan_kswapd_wake_
   && mm_vmscan_kswapd_sleep_ == other.mm_vmscan_kswapd_sleep_
   && binder_transaction_ == other.binder_transaction_
   && binder_transaction_received_ == other.binder_transaction_received_
   && binder_set_priority_ == other.binder_set_priority_
   && binder_lock_ == other.binder_lock_
   && binder_locked_ == other.binder_locked_
   && binder_unlock_ == other.binder_unlock_
   && workqueue_activate_work_ == other.workqueue_activate_work_
   && workqueue_execute_end_ == other.workqueue_execute_end_
   && workqueue_execute_start_ == other.workqueue_execute_start_
   && workqueue_queue_work_ == other.workqueue_queue_work_
   && regulator_disable_ == other.regulator_disable_
   && regulator_disable_complete_ == other.regulator_disable_complete_
   && regulator_enable_ == other.regulator_enable_
   && regulator_enable_complete_ == other.regulator_enable_complete_
   && regulator_enable_delay_ == other.regulator_enable_delay_
   && regulator_set_voltage_ == other.regulator_set_voltage_
   && regulator_set_voltage_complete_ == other.regulator_set_voltage_complete_
   && cgroup_attach_task_ == other.cgroup_attach_task_
   && cgroup_mkdir_ == other.cgroup_mkdir_
   && cgroup_remount_ == other.cgroup_remount_
   && cgroup_rmdir_ == other.cgroup_rmdir_
   && cgroup_transfer_tasks_ == other.cgroup_transfer_tasks_
   && cgroup_destroy_root_ == other.cgroup_destroy_root_
   && cgroup_release_ == other.cgroup_release_
   && cgroup_rename_ == other.cgroup_rename_
   && cgroup_setup_root_ == other.cgroup_setup_root_
   && mdp_cmd_kickoff_ == other.mdp_cmd_kickoff_
   && mdp_commit_ == other.mdp_commit_
   && mdp_perf_set_ot_ == other.mdp_perf_set_ot_
   && mdp_sspp_change_ == other.mdp_sspp_change_
   && tracing_mark_write_ == other.tracing_mark_write_
   && mdp_cmd_pingpong_done_ == other.mdp_cmd_pingpong_done_
   && mdp_compare_bw_ == other.mdp_compare_bw_
   && mdp_perf_set_panic_luts_ == other.mdp_perf_set_panic_luts_
   && mdp_sspp_set_ == other.mdp_sspp_set_
   && mdp_cmd_readptr_done_ == other.mdp_cmd_readptr_done_
   && mdp_misr_crc_ == other.mdp_misr_crc_
   && mdp_perf_set_qos_luts_ == other.mdp_perf_set_qos_luts_
   && mdp_trace_counter_ == other.mdp_trace_counter_
   && mdp_cmd_release_bw_ == other.mdp_cmd_release_bw_
   && mdp_mixer_update_ == other.mdp_mixer_update_
   && mdp_perf_set_wm_levels_ == other.mdp_perf_set_wm_levels_
   && mdp_video_underrun_done_ == other.mdp_video_underrun_done_
   && mdp_cmd_wait_pingpong_ == other.mdp_cmd_wait_pingpong_
   && mdp_perf_prefill_calc_ == other.mdp_perf_prefill_calc_
   && mdp_perf_update_bus_ == other.mdp_perf_update_bus_
   && rotator_bw_ao_as_context_ == other.rotator_bw_ao_as_context_
   && mm_filemap_add_to_page_cache_ == other.mm_filemap_add_to_page_cache_
   && mm_filemap_delete_from_page_cache_ == other.mm_filemap_delete_from_page_cache_
   && mm_compaction_begin_ == other.mm_compaction_begin_
   && mm_compaction_defer_compaction_ == other.mm_compaction_defer_compaction_
   && mm_compaction_deferred_ == other.mm_compaction_deferred_
   && mm_compaction_defer_reset_ == other.mm_compaction_defer_reset_
   && mm_compaction_end_ == other.mm_compaction_end_
   && mm_compaction_finished_ == other.mm_compaction_finished_
   && mm_compaction_isolate_freepages_ == other.mm_compaction_isolate_freepages_
   && mm_compaction_isolate_migratepages_ == other.mm_compaction_isolate_migratepages_
   && mm_compaction_kcompactd_sleep_ == other.mm_compaction_kcompactd_sleep_
   && mm_compaction_kcompactd_wake_ == other.mm_compaction_kcompactd_wake_
   && mm_compaction_migratepages_ == other.mm_compaction_migratepages_
   && mm_compaction_suitable_ == other.mm_compaction_suitable_
   && mm_compaction_try_to_compact_pages_ == other.mm_compaction_try_to_compact_pages_
   && mm_compaction_wakeup_kcompactd_ == other.mm_compaction_wakeup_kcompactd_
   && suspend_resume_ == other.suspend_resume_
   && sched_wakeup_new_ == other.sched_wakeup_new_
   && block_bio_backmerge_ == other.block_bio_backmerge_
   && block_bio_bounce_ == other.block_bio_bounce_
   && block_bio_complete_ == other.block_bio_complete_
   && block_bio_frontmerge_ == other.block_bio_frontmerge_
   && block_bio_queue_ == other.block_bio_queue_
   && block_bio_remap_ == other.block_bio_remap_
   && block_dirty_buffer_ == other.block_dirty_buffer_
   && block_getrq_ == other.block_getrq_
   && block_plug_ == other.block_plug_
   && block_rq_abort_ == other.block_rq_abort_
   && block_rq_complete_ == other.block_rq_complete_
   && block_rq_insert_ == other.block_rq_insert_
   && block_rq_remap_ == other.block_rq_remap_
   && block_rq_requeue_ == other.block_rq_requeue_
   && block_sleeprq_ == other.block_sleeprq_
   && block_split_ == other.block_split_
   && block_touch_buffer_ == other.block_touch_buffer_
   && block_unplug_ == other.block_unplug_
   && ext4_alloc_da_blocks_ == other.ext4_alloc_da_blocks_
   && ext4_allocate_blocks_ == other.ext4_allocate_blocks_
   && ext4_allocate_inode_ == other.ext4_allocate_inode_
   && ext4_begin_ordered_truncate_ == other.ext4_begin_ordered_truncate_
   && ext4_collapse_range_ == other.ext4_collapse_range_
   && ext4_da_release_space_ == other.ext4_da_release_space_
   && ext4_da_reserve_space_ == other.ext4_da_reserve_space_
   && ext4_da_update_reserve_space_ == other.ext4_da_update_reserve_space_
   && ext4_da_write_pages_ == other.ext4_da_write_pages_
   && ext4_da_write_pages_extent_ == other.ext4_da_write_pages_extent_
   && ext4_direct_io_enter_ == other.ext4_direct_io_enter_
   && ext4_direct_io_exit_ == other.ext4_direct_io_exit_
   && ext4_discard_blocks_ == other.ext4_discard_blocks_
   && ext4_discard_preallocations_ == other.ext4_discard_preallocations_
   && ext4_drop_inode_ == other.ext4_drop_inode_
   && ext4_es_cache_extent_ == other.ext4_es_cache_extent_
   && ext4_es_find_delayed_extent_range_enter_ == other.ext4_es_find_delayed_extent_range_enter_
   && ext4_es_find_delayed_extent_range_exit_ == other.ext4_es_find_delayed_extent_range_exit_
   && ext4_es_insert_extent_ == other.ext4_es_insert_extent_
   && ext4_es_lookup_extent_enter_ == other.ext4_es_lookup_extent_enter_
   && ext4_es_lookup_extent_exit_ == other.ext4_es_lookup_extent_exit_
   && ext4_es_remove_extent_ == other.ext4_es_remove_extent_
   && ext4_es_shrink_ == other.ext4_es_shrink_
   && ext4_es_shrink_count_ == other.ext4_es_shrink_count_
   && ext4_es_shrink_scan_enter_ == other.ext4_es_shrink_scan_enter_
   && ext4_es_shrink_scan_exit_ == other.ext4_es_shrink_scan_exit_
   && ext4_evict_inode_ == other.ext4_evict_inode_
   && ext4_ext_convert_to_initialized_enter_ == other.ext4_ext_convert_to_initialized_enter_
   && ext4_ext_convert_to_initialized_fastpath_ == other.ext4_ext_convert_to_initialized_fastpath_
   && ext4_ext_handle_unwritten_extents_ == other.ext4_ext_handle_unwritten_extents_
   && ext4_ext_in_cache_ == other.ext4_ext_in_cache_
   && ext4_ext_load_extent_ == other.ext4_ext_load_extent_
   && ext4_ext_map_blocks_enter_ == other.ext4_ext_map_blocks_enter_
   && ext4_ext_map_blocks_exit_ == other.ext4_ext_map_blocks_exit_
   && ext4_ext_put_in_cache_ == other.ext4_ext_put_in_cache_
   && ext4_ext_remove_space_ == other.ext4_ext_remove_space_
   && ext4_ext_remove_space_done_ == other.ext4_ext_remove_space_done_
   && ext4_ext_rm_idx_ == other.ext4_ext_rm_idx_
   && ext4_ext_rm_leaf_ == other.ext4_ext_rm_leaf_
   && ext4_ext_show_extent_ == other.ext4_ext_show_extent_
   && ext4_fallocate_enter_ == other.ext4_fallocate_enter_
   && ext4_fallocate_exit_ == other.ext4_fallocate_exit_
   && ext4_find_delalloc_range_ == other.ext4_find_delalloc_range_
   && ext4_forget_ == other.ext4_forget_
   && ext4_free_blocks_ == other.ext4_free_blocks_
   && ext4_free_inode_ == other.ext4_free_inode_
   && ext4_get_implied_cluster_alloc_exit_ == other.ext4_get_implied_cluster_alloc_exit_
   && ext4_get_reserved_cluster_alloc_ == other.ext4_get_reserved_cluster_alloc_
   && ext4_ind_map_blocks_enter_ == other.ext4_ind_map_blocks_enter_
   && ext4_ind_map_blocks_exit_ == other.ext4_ind_map_blocks_exit_
   && ext4_insert_range_ == other.ext4_insert_range_
   && ext4_invalidatepage_ == other.ext4_invalidatepage_
   && ext4_journal_start_ == other.ext4_journal_start_
   && ext4_journal_start_reserved_ == other.ext4_journal_start_reserved_
   && ext4_journalled_invalidatepage_ == other.ext4_journalled_invalidatepage_
   && ext4_journalled_write_end_ == other.ext4_journalled_write_end_
   && ext4_load_inode_ == other.ext4_load_inode_
   && ext4_load_inode_bitmap_ == other.ext4_load_inode_bitmap_
   && ext4_mark_inode_dirty_ == other.ext4_mark_inode_dirty_
   && ext4_mb_bitmap_load_ == other.ext4_mb_bitmap_load_
   && ext4_mb_buddy_bitmap_load_ == other.ext4_mb_buddy_bitmap_load_
   && ext4_mb_discard_preallocations_ == other.ext4_mb_discard_preallocations_
   && ext4_mb_new_group_pa_ == other.ext4_mb_new_group_pa_
   && ext4_mb_new_inode_pa_ == other.ext4_mb_new_inode_pa_
   && ext4_mb_release_group_pa_ == other.ext4_mb_release_group_pa_
   && ext4_mb_release_inode_pa_ == other.ext4_mb_release_inode_pa_
   && ext4_mballoc_alloc_ == other.ext4_mballoc_alloc_
   && ext4_mballoc_discard_ == other.ext4_mballoc_discard_
   && ext4_mballoc_free_ == other.ext4_mballoc_free_
   && ext4_mballoc_prealloc_ == other.ext4_mballoc_prealloc_
   && ext4_other_inode_update_time_ == other.ext4_other_inode_update_time_
   && ext4_punch_hole_ == other.ext4_punch_hole_
   && ext4_read_block_bitmap_load_ == other.ext4_read_block_bitmap_load_
   && ext4_readpage_ == other.ext4_readpage_
   && ext4_releasepage_ == other.ext4_releasepage_
   && ext4_remove_blocks_ == other.ext4_remove_blocks_
   && ext4_request_blocks_ == other.ext4_request_blocks_
   && ext4_request_inode_ == other.ext4_request_inode_
   && ext4_sync_fs_ == other.ext4_sync_fs_
   && ext4_trim_all_free_ == other.ext4_trim_all_free_
   && ext4_trim_extent_ == other.ext4_trim_extent_
   && ext4_truncate_enter_ == other.ext4_truncate_enter_
   && ext4_truncate_exit_ == other.ext4_truncate_exit_
   && ext4_unlink_enter_ == other.ext4_unlink_enter_
   && ext4_unlink_exit_ == other.ext4_unlink_exit_
   && ext4_write_begin_ == other.ext4_write_begin_
   && ext4_write_end_ == other.ext4_write_end_
   && ext4_writepage_ == other.ext4_writepage_
   && ext4_writepages_ == other.ext4_writepages_
   && ext4_writepages_result_ == other.ext4_writepages_result_
   && ext4_zero_range_ == other.ext4_zero_range_
   && task_newtask_ == other.task_newtask_
   && task_rename_ == other.task_rename_
   && sched_process_exec_ == other.sched_process_exec_
   && sched_process_exit_ == other.sched_process_exit_
   && sched_process_fork_ == other.sched_process_fork_
   && sched_process_free_ == other.sched_process_free_
   && sched_process_hang_ == other.sched_process_hang_
   && sched_process_wait_ == other.sched_process_wait_
   && f2fs_do_submit_bio_ == other.f2fs_do_submit_bio_
   && f2fs_evict_inode_ == other.f2fs_evict_inode_
   && f2fs_fallocate_ == other.f2fs_fallocate_
   && f2fs_get_data_block_ == other.f2fs_get_data_block_
   && f2fs_get_victim_ == other.f2fs_get_victim_
   && f2fs_iget_ == other.f2fs_iget_
   && f2fs_iget_exit_ == other.f2fs_iget_exit_
   && f2fs_new_inode_ == other.f2fs_new_inode_
   && f2fs_readpage_ == other.f2fs_readpage_
   && f2fs_reserve_new_block_ == other.f2fs_reserve_new_block_
   && f2fs_set_page_dirty_ == other.f2fs_set_page_dirty_
   && f2fs_submit_write_page_ == other.f2fs_submit_write_page_
   && f2fs_sync_file_enter_ == other.f2fs_sync_file_enter_
   && f2fs_sync_file_exit_ == other.f2fs_sync_file_exit_
   && f2fs_sync_fs_ == other.f2fs_sync_fs_
   && f2fs_truncate_ == other.f2fs_truncate_
   && f2fs_truncate_blocks_enter_ == other.f2fs_truncate_blocks_enter_
   && f2fs_truncate_blocks_exit_ == other.f2fs_truncate_blocks_exit_
   && f2fs_truncate_data_blocks_range_ == other.f2fs_truncate_data_blocks_range_
   && f2fs_truncate_inode_blocks_enter_ == other.f2fs_truncate_inode_blocks_enter_
   && f2fs_truncate_inode_blocks_exit_ == other.f2fs_truncate_inode_blocks_exit_
   && f2fs_truncate_node_ == other.f2fs_truncate_node_
   && f2fs_truncate_nodes_enter_ == other.f2fs_truncate_nodes_enter_
   && f2fs_truncate_nodes_exit_ == other.f2fs_truncate_nodes_exit_
   && f2fs_truncate_partial_nodes_ == other.f2fs_truncate_partial_nodes_
   && f2fs_unlink_enter_ == other.f2fs_unlink_enter_
   && f2fs_unlink_exit_ == other.f2fs_unlink_exit_
   && f2fs_vm_page_mkwrite_ == other.f2fs_vm_page_mkwrite_
   && f2fs_write_begin_ == other.f2fs_write_begin_
   && f2fs_write_checkpoint_ == other.f2fs_write_checkpoint_
   && f2fs_write_end_ == other.f2fs_write_end_
   && alloc_pages_iommu_end_ == other.alloc_pages_iommu_end_
   && alloc_pages_iommu_fail_ == other.alloc_pages_iommu_fail_
   && alloc_pages_iommu_start_ == other.alloc_pages_iommu_start_
   && alloc_pages_sys_end_ == other.alloc_pages_sys_end_
   && alloc_pages_sys_fail_ == other.alloc_pages_sys_fail_
   && alloc_pages_sys_start_ == other.alloc_pages_sys_start_
   && dma_alloc_contiguous_retry_ == other.dma_alloc_contiguous_retry_
   && iommu_map_range_ == other.iommu_map_range_
   && iommu_sec_ptbl_map_range_end_ == other.iommu_sec_ptbl_map_range_end_
   && iommu_sec_ptbl_map_range_start_ == other.iommu_sec_ptbl_map_range_start_
   && ion_alloc_buffer_end_ == other.ion_alloc_buffer_end_
   && ion_alloc_buffer_fail_ == other.ion_alloc_buffer_fail_
   && ion_alloc_buffer_fallback_ == other.ion_alloc_buffer_fallback_
   && ion_alloc_buffer_start_ == other.ion_alloc_buffer_start_
   && ion_cp_alloc_retry_ == other.ion_cp_alloc_retry_
   && ion_cp_secure_buffer_end_ == other.ion_cp_secure_buffer_end_
   && ion_cp_secure_buffer_start_ == other.ion_cp_secure_buffer_start_
   && ion_prefetching_ == other.ion_prefetching_
   && ion_secure_cma_add_to_pool_end_ == other.ion_secure_cma_add_to_pool_end_
   && ion_secure_cma_add_to_pool_start_ == other.ion_secure_cma_add_to_pool_start_
   && ion_secure_cma_allocate_end_ == other.ion_secure_cma_allocate_end_
   && ion_secure_cma_allocate_start_ == other.ion_secure_cma_allocate_start_
   && ion_secure_cma_shrink_pool_end_ == other.ion_secure_cma_shrink_pool_end_
   && ion_secure_cma_shrink_pool_start_ == other.ion_secure_cma_shrink_pool_start_
   && kfree_ == other.kfree_
   && kmalloc_ == other.kmalloc_
   && kmalloc_node_ == other.kmalloc_node_
   && kmem_cache_alloc_ == other.kmem_cache_alloc_
   && kmem_cache_alloc_node_ == other.kmem_cache_alloc_node_
   && kmem_cache_free_ == other.kmem_cache_free_
   && migrate_pages_end_ == other.migrate_pages_end_
   && migrate_pages_start_ == other.migrate_pages_start_
   && migrate_retry_ == other.migrate_retry_
   && mm_page_alloc_ == other.mm_page_alloc_
   && mm_page_alloc_extfrag_ == other.mm_page_alloc_extfrag_
   && mm_page_alloc_zone_locked_ == other.mm_page_alloc_zone_locked_
   && mm_page_free_ == other.mm_page_free_
   && mm_page_free_batched_ == other.mm_page_free_batched_
   && mm_page_pcpu_drain_ == other.mm_page_pcpu_drain_
   && rss_stat_ == other.rss_stat_
   && ion_heap_shrink_ == other.ion_heap_shrink_
   && ion_heap_grow_ == other.ion_heap_grow_
   && fence_init_ == other.fence_init_
   && fence_destroy_ == other.fence_destroy_
   && fence_enable_signal_ == other.fence_enable_signal_
   && fence_signaled_ == other.fence_signaled_
   && clk_enable_ == other.clk_enable_
   && clk_disable_ == other.clk_disable_
   && clk_set_rate_ == other.clk_set_rate_
   && binder_transaction_alloc_buf_ == other.binder_transaction_alloc_buf_
   && signal_deliver_ == other.signal_deliver_
   && signal_generate_ == other.signal_generate_
   && oom_score_adj_update_ == other.oom_score_adj_update_
   && generic_ == other.generic_
   && mm_event_record_ == other.mm_event_record_
   && sys_enter_ == other.sys_enter_
   && sys_exit_ == other.sys_exit_
   && zero_ == other.zero_
   && gpu_frequency_ == other.gpu_frequency_
   && sde_tracing_mark_write_ == other.sde_tracing_mark_write_
   && mark_victim_ == other.mark_victim_
   && ion_stat_ == other.ion_stat_
   && ion_buffer_create_ == other.ion_buffer_create_
   && ion_buffer_destroy_ == other.ion_buffer_destroy_
   && scm_call_start_ == other.scm_call_start_
   && scm_call_end_ == other.scm_call_end_
   && gpu_mem_total_ == other.gpu_mem_total_
   && thermal_temperature_ == other.thermal_temperature_
   && cdev_update_ == other.cdev_update_
   && cpuhp_exit_ == other.cpuhp_exit_
   && cpuhp_multi_enter_ == other.cpuhp_multi_enter_
   && cpuhp_enter_ == other.cpuhp_enter_
   && cpuhp_latency_ == other.cpuhp_latency_
   && fastrpc_dma_stat_ == other.fastrpc_dma_stat_
   && dpu_tracing_mark_write_ == other.dpu_tracing_mark_write_
   && g2d_tracing_mark_write_ == other.g2d_tracing_mark_write_
   && mali_tracing_mark_write_ == other.mali_tracing_mark_write_;
}

bool FtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* print */:
        (*print_).ParseFromArray(field.data(), field.size());
        break;
      case 4 /* sched_switch */:
        (*sched_switch_).ParseFromArray(field.data(), field.size());
        break;
      case 11 /* cpu_frequency */:
        (*cpu_frequency_).ParseFromArray(field.data(), field.size());
        break;
      case 12 /* cpu_frequency_limits */:
        (*cpu_frequency_limits_).ParseFromArray(field.data(), field.size());
        break;
      case 13 /* cpu_idle */:
        (*cpu_idle_).ParseFromArray(field.data(), field.size());
        break;
      case 14 /* clock_enable */:
        (*clock_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 15 /* clock_disable */:
        (*clock_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 16 /* clock_set_rate */:
        (*clock_set_rate_).ParseFromArray(field.data(), field.size());
        break;
      case 17 /* sched_wakeup */:
        (*sched_wakeup_).ParseFromArray(field.data(), field.size());
        break;
      case 18 /* sched_blocked_reason */:
        (*sched_blocked_reason_).ParseFromArray(field.data(), field.size());
        break;
      case 19 /* sched_cpu_hotplug */:
        (*sched_cpu_hotplug_).ParseFromArray(field.data(), field.size());
        break;
      case 20 /* sched_waking */:
        (*sched_waking_).ParseFromArray(field.data(), field.size());
        break;
      case 21 /* ipi_entry */:
        (*ipi_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 22 /* ipi_exit */:
        (*ipi_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 23 /* ipi_raise */:
        (*ipi_raise_).ParseFromArray(field.data(), field.size());
        break;
      case 24 /* softirq_entry */:
        (*softirq_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 25 /* softirq_exit */:
        (*softirq_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 26 /* softirq_raise */:
        (*softirq_raise_).ParseFromArray(field.data(), field.size());
        break;
      case 27 /* i2c_read */:
        (*i2c_read_).ParseFromArray(field.data(), field.size());
        break;
      case 28 /* i2c_write */:
        (*i2c_write_).ParseFromArray(field.data(), field.size());
        break;
      case 29 /* i2c_result */:
        (*i2c_result_).ParseFromArray(field.data(), field.size());
        break;
      case 30 /* i2c_reply */:
        (*i2c_reply_).ParseFromArray(field.data(), field.size());
        break;
      case 31 /* smbus_read */:
        (*smbus_read_).ParseFromArray(field.data(), field.size());
        break;
      case 32 /* smbus_write */:
        (*smbus_write_).ParseFromArray(field.data(), field.size());
        break;
      case 33 /* smbus_result */:
        (*smbus_result_).ParseFromArray(field.data(), field.size());
        break;
      case 34 /* smbus_reply */:
        (*smbus_reply_).ParseFromArray(field.data(), field.size());
        break;
      case 35 /* lowmemory_kill */:
        (*lowmemory_kill_).ParseFromArray(field.data(), field.size());
        break;
      case 36 /* irq_handler_entry */:
        (*irq_handler_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 37 /* irq_handler_exit */:
        (*irq_handler_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 38 /* sync_pt */:
        (*sync_pt_).ParseFromArray(field.data(), field.size());
        break;
      case 39 /* sync_timeline */:
        (*sync_timeline_).ParseFromArray(field.data(), field.size());
        break;
      case 40 /* sync_wait */:
        (*sync_wait_).ParseFromArray(field.data(), field.size());
        break;
      case 41 /* ext4_da_write_begin */:
        (*ext4_da_write_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 42 /* ext4_da_write_end */:
        (*ext4_da_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 43 /* ext4_sync_file_enter */:
        (*ext4_sync_file_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 44 /* ext4_sync_file_exit */:
        (*ext4_sync_file_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 45 /* block_rq_issue */:
        (*block_rq_issue_).ParseFromArray(field.data(), field.size());
        break;
      case 46 /* mm_vmscan_direct_reclaim_begin */:
        (*mm_vmscan_direct_reclaim_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 47 /* mm_vmscan_direct_reclaim_end */:
        (*mm_vmscan_direct_reclaim_end_).ParseFromArray(field.data(), field.size());
        break;
      case 48 /* mm_vmscan_kswapd_wake */:
        (*mm_vmscan_kswapd_wake_).ParseFromArray(field.data(), field.size());
        break;
      case 49 /* mm_vmscan_kswapd_sleep */:
        (*mm_vmscan_kswapd_sleep_).ParseFromArray(field.data(), field.size());
        break;
      case 50 /* binder_transaction */:
        (*binder_transaction_).ParseFromArray(field.data(), field.size());
        break;
      case 51 /* binder_transaction_received */:
        (*binder_transaction_received_).ParseFromArray(field.data(), field.size());
        break;
      case 52 /* binder_set_priority */:
        (*binder_set_priority_).ParseFromArray(field.data(), field.size());
        break;
      case 53 /* binder_lock */:
        (*binder_lock_).ParseFromArray(field.data(), field.size());
        break;
      case 54 /* binder_locked */:
        (*binder_locked_).ParseFromArray(field.data(), field.size());
        break;
      case 55 /* binder_unlock */:
        (*binder_unlock_).ParseFromArray(field.data(), field.size());
        break;
      case 56 /* workqueue_activate_work */:
        (*workqueue_activate_work_).ParseFromArray(field.data(), field.size());
        break;
      case 57 /* workqueue_execute_end */:
        (*workqueue_execute_end_).ParseFromArray(field.data(), field.size());
        break;
      case 58 /* workqueue_execute_start */:
        (*workqueue_execute_start_).ParseFromArray(field.data(), field.size());
        break;
      case 59 /* workqueue_queue_work */:
        (*workqueue_queue_work_).ParseFromArray(field.data(), field.size());
        break;
      case 60 /* regulator_disable */:
        (*regulator_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 61 /* regulator_disable_complete */:
        (*regulator_disable_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 62 /* regulator_enable */:
        (*regulator_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 63 /* regulator_enable_complete */:
        (*regulator_enable_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 64 /* regulator_enable_delay */:
        (*regulator_enable_delay_).ParseFromArray(field.data(), field.size());
        break;
      case 65 /* regulator_set_voltage */:
        (*regulator_set_voltage_).ParseFromArray(field.data(), field.size());
        break;
      case 66 /* regulator_set_voltage_complete */:
        (*regulator_set_voltage_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 67 /* cgroup_attach_task */:
        (*cgroup_attach_task_).ParseFromArray(field.data(), field.size());
        break;
      case 68 /* cgroup_mkdir */:
        (*cgroup_mkdir_).ParseFromArray(field.data(), field.size());
        break;
      case 69 /* cgroup_remount */:
        (*cgroup_remount_).ParseFromArray(field.data(), field.size());
        break;
      case 70 /* cgroup_rmdir */:
        (*cgroup_rmdir_).ParseFromArray(field.data(), field.size());
        break;
      case 71 /* cgroup_transfer_tasks */:
        (*cgroup_transfer_tasks_).ParseFromArray(field.data(), field.size());
        break;
      case 72 /* cgroup_destroy_root */:
        (*cgroup_destroy_root_).ParseFromArray(field.data(), field.size());
        break;
      case 73 /* cgroup_release */:
        (*cgroup_release_).ParseFromArray(field.data(), field.size());
        break;
      case 74 /* cgroup_rename */:
        (*cgroup_rename_).ParseFromArray(field.data(), field.size());
        break;
      case 75 /* cgroup_setup_root */:
        (*cgroup_setup_root_).ParseFromArray(field.data(), field.size());
        break;
      case 76 /* mdp_cmd_kickoff */:
        (*mdp_cmd_kickoff_).ParseFromArray(field.data(), field.size());
        break;
      case 77 /* mdp_commit */:
        (*mdp_commit_).ParseFromArray(field.data(), field.size());
        break;
      case 78 /* mdp_perf_set_ot */:
        (*mdp_perf_set_ot_).ParseFromArray(field.data(), field.size());
        break;
      case 79 /* mdp_sspp_change */:
        (*mdp_sspp_change_).ParseFromArray(field.data(), field.size());
        break;
      case 80 /* tracing_mark_write */:
        (*tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 81 /* mdp_cmd_pingpong_done */:
        (*mdp_cmd_pingpong_done_).ParseFromArray(field.data(), field.size());
        break;
      case 82 /* mdp_compare_bw */:
        (*mdp_compare_bw_).ParseFromArray(field.data(), field.size());
        break;
      case 83 /* mdp_perf_set_panic_luts */:
        (*mdp_perf_set_panic_luts_).ParseFromArray(field.data(), field.size());
        break;
      case 84 /* mdp_sspp_set */:
        (*mdp_sspp_set_).ParseFromArray(field.data(), field.size());
        break;
      case 85 /* mdp_cmd_readptr_done */:
        (*mdp_cmd_readptr_done_).ParseFromArray(field.data(), field.size());
        break;
      case 86 /* mdp_misr_crc */:
        (*mdp_misr_crc_).ParseFromArray(field.data(), field.size());
        break;
      case 87 /* mdp_perf_set_qos_luts */:
        (*mdp_perf_set_qos_luts_).ParseFromArray(field.data(), field.size());
        break;
      case 88 /* mdp_trace_counter */:
        (*mdp_trace_counter_).ParseFromArray(field.data(), field.size());
        break;
      case 89 /* mdp_cmd_release_bw */:
        (*mdp_cmd_release_bw_).ParseFromArray(field.data(), field.size());
        break;
      case 90 /* mdp_mixer_update */:
        (*mdp_mixer_update_).ParseFromArray(field.data(), field.size());
        break;
      case 91 /* mdp_perf_set_wm_levels */:
        (*mdp_perf_set_wm_levels_).ParseFromArray(field.data(), field.size());
        break;
      case 92 /* mdp_video_underrun_done */:
        (*mdp_video_underrun_done_).ParseFromArray(field.data(), field.size());
        break;
      case 93 /* mdp_cmd_wait_pingpong */:
        (*mdp_cmd_wait_pingpong_).ParseFromArray(field.data(), field.size());
        break;
      case 94 /* mdp_perf_prefill_calc */:
        (*mdp_perf_prefill_calc_).ParseFromArray(field.data(), field.size());
        break;
      case 95 /* mdp_perf_update_bus */:
        (*mdp_perf_update_bus_).ParseFromArray(field.data(), field.size());
        break;
      case 96 /* rotator_bw_ao_as_context */:
        (*rotator_bw_ao_as_context_).ParseFromArray(field.data(), field.size());
        break;
      case 97 /* mm_filemap_add_to_page_cache */:
        (*mm_filemap_add_to_page_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 98 /* mm_filemap_delete_from_page_cache */:
        (*mm_filemap_delete_from_page_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 99 /* mm_compaction_begin */:
        (*mm_compaction_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 100 /* mm_compaction_defer_compaction */:
        (*mm_compaction_defer_compaction_).ParseFromArray(field.data(), field.size());
        break;
      case 101 /* mm_compaction_deferred */:
        (*mm_compaction_deferred_).ParseFromArray(field.data(), field.size());
        break;
      case 102 /* mm_compaction_defer_reset */:
        (*mm_compaction_defer_reset_).ParseFromArray(field.data(), field.size());
        break;
      case 103 /* mm_compaction_end */:
        (*mm_compaction_end_).ParseFromArray(field.data(), field.size());
        break;
      case 104 /* mm_compaction_finished */:
        (*mm_compaction_finished_).ParseFromArray(field.data(), field.size());
        break;
      case 105 /* mm_compaction_isolate_freepages */:
        (*mm_compaction_isolate_freepages_).ParseFromArray(field.data(), field.size());
        break;
      case 106 /* mm_compaction_isolate_migratepages */:
        (*mm_compaction_isolate_migratepages_).ParseFromArray(field.data(), field.size());
        break;
      case 107 /* mm_compaction_kcompactd_sleep */:
        (*mm_compaction_kcompactd_sleep_).ParseFromArray(field.data(), field.size());
        break;
      case 108 /* mm_compaction_kcompactd_wake */:
        (*mm_compaction_kcompactd_wake_).ParseFromArray(field.data(), field.size());
        break;
      case 109 /* mm_compaction_migratepages */:
        (*mm_compaction_migratepages_).ParseFromArray(field.data(), field.size());
        break;
      case 110 /* mm_compaction_suitable */:
        (*mm_compaction_suitable_).ParseFromArray(field.data(), field.size());
        break;
      case 111 /* mm_compaction_try_to_compact_pages */:
        (*mm_compaction_try_to_compact_pages_).ParseFromArray(field.data(), field.size());
        break;
      case 112 /* mm_compaction_wakeup_kcompactd */:
        (*mm_compaction_wakeup_kcompactd_).ParseFromArray(field.data(), field.size());
        break;
      case 113 /* suspend_resume */:
        (*suspend_resume_).ParseFromArray(field.data(), field.size());
        break;
      case 114 /* sched_wakeup_new */:
        (*sched_wakeup_new_).ParseFromArray(field.data(), field.size());
        break;
      case 115 /* block_bio_backmerge */:
        (*block_bio_backmerge_).ParseFromArray(field.data(), field.size());
        break;
      case 116 /* block_bio_bounce */:
        (*block_bio_bounce_).ParseFromArray(field.data(), field.size());
        break;
      case 117 /* block_bio_complete */:
        (*block_bio_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 118 /* block_bio_frontmerge */:
        (*block_bio_frontmerge_).ParseFromArray(field.data(), field.size());
        break;
      case 119 /* block_bio_queue */:
        (*block_bio_queue_).ParseFromArray(field.data(), field.size());
        break;
      case 120 /* block_bio_remap */:
        (*block_bio_remap_).ParseFromArray(field.data(), field.size());
        break;
      case 121 /* block_dirty_buffer */:
        (*block_dirty_buffer_).ParseFromArray(field.data(), field.size());
        break;
      case 122 /* block_getrq */:
        (*block_getrq_).ParseFromArray(field.data(), field.size());
        break;
      case 123 /* block_plug */:
        (*block_plug_).ParseFromArray(field.data(), field.size());
        break;
      case 124 /* block_rq_abort */:
        (*block_rq_abort_).ParseFromArray(field.data(), field.size());
        break;
      case 125 /* block_rq_complete */:
        (*block_rq_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 126 /* block_rq_insert */:
        (*block_rq_insert_).ParseFromArray(field.data(), field.size());
        break;
      case 128 /* block_rq_remap */:
        (*block_rq_remap_).ParseFromArray(field.data(), field.size());
        break;
      case 129 /* block_rq_requeue */:
        (*block_rq_requeue_).ParseFromArray(field.data(), field.size());
        break;
      case 130 /* block_sleeprq */:
        (*block_sleeprq_).ParseFromArray(field.data(), field.size());
        break;
      case 131 /* block_split */:
        (*block_split_).ParseFromArray(field.data(), field.size());
        break;
      case 132 /* block_touch_buffer */:
        (*block_touch_buffer_).ParseFromArray(field.data(), field.size());
        break;
      case 133 /* block_unplug */:
        (*block_unplug_).ParseFromArray(field.data(), field.size());
        break;
      case 134 /* ext4_alloc_da_blocks */:
        (*ext4_alloc_da_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 135 /* ext4_allocate_blocks */:
        (*ext4_allocate_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 136 /* ext4_allocate_inode */:
        (*ext4_allocate_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 137 /* ext4_begin_ordered_truncate */:
        (*ext4_begin_ordered_truncate_).ParseFromArray(field.data(), field.size());
        break;
      case 138 /* ext4_collapse_range */:
        (*ext4_collapse_range_).ParseFromArray(field.data(), field.size());
        break;
      case 139 /* ext4_da_release_space */:
        (*ext4_da_release_space_).ParseFromArray(field.data(), field.size());
        break;
      case 140 /* ext4_da_reserve_space */:
        (*ext4_da_reserve_space_).ParseFromArray(field.data(), field.size());
        break;
      case 141 /* ext4_da_update_reserve_space */:
        (*ext4_da_update_reserve_space_).ParseFromArray(field.data(), field.size());
        break;
      case 142 /* ext4_da_write_pages */:
        (*ext4_da_write_pages_).ParseFromArray(field.data(), field.size());
        break;
      case 143 /* ext4_da_write_pages_extent */:
        (*ext4_da_write_pages_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 144 /* ext4_direct_io_enter */:
        (*ext4_direct_io_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 145 /* ext4_direct_io_exit */:
        (*ext4_direct_io_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 146 /* ext4_discard_blocks */:
        (*ext4_discard_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 147 /* ext4_discard_preallocations */:
        (*ext4_discard_preallocations_).ParseFromArray(field.data(), field.size());
        break;
      case 148 /* ext4_drop_inode */:
        (*ext4_drop_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 149 /* ext4_es_cache_extent */:
        (*ext4_es_cache_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 150 /* ext4_es_find_delayed_extent_range_enter */:
        (*ext4_es_find_delayed_extent_range_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 151 /* ext4_es_find_delayed_extent_range_exit */:
        (*ext4_es_find_delayed_extent_range_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 152 /* ext4_es_insert_extent */:
        (*ext4_es_insert_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 153 /* ext4_es_lookup_extent_enter */:
        (*ext4_es_lookup_extent_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 154 /* ext4_es_lookup_extent_exit */:
        (*ext4_es_lookup_extent_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 155 /* ext4_es_remove_extent */:
        (*ext4_es_remove_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 156 /* ext4_es_shrink */:
        (*ext4_es_shrink_).ParseFromArray(field.data(), field.size());
        break;
      case 157 /* ext4_es_shrink_count */:
        (*ext4_es_shrink_count_).ParseFromArray(field.data(), field.size());
        break;
      case 158 /* ext4_es_shrink_scan_enter */:
        (*ext4_es_shrink_scan_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 159 /* ext4_es_shrink_scan_exit */:
        (*ext4_es_shrink_scan_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 160 /* ext4_evict_inode */:
        (*ext4_evict_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 161 /* ext4_ext_convert_to_initialized_enter */:
        (*ext4_ext_convert_to_initialized_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 162 /* ext4_ext_convert_to_initialized_fastpath */:
        (*ext4_ext_convert_to_initialized_fastpath_).ParseFromArray(field.data(), field.size());
        break;
      case 163 /* ext4_ext_handle_unwritten_extents */:
        (*ext4_ext_handle_unwritten_extents_).ParseFromArray(field.data(), field.size());
        break;
      case 164 /* ext4_ext_in_cache */:
        (*ext4_ext_in_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 165 /* ext4_ext_load_extent */:
        (*ext4_ext_load_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 166 /* ext4_ext_map_blocks_enter */:
        (*ext4_ext_map_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 167 /* ext4_ext_map_blocks_exit */:
        (*ext4_ext_map_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 168 /* ext4_ext_put_in_cache */:
        (*ext4_ext_put_in_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 169 /* ext4_ext_remove_space */:
        (*ext4_ext_remove_space_).ParseFromArray(field.data(), field.size());
        break;
      case 170 /* ext4_ext_remove_space_done */:
        (*ext4_ext_remove_space_done_).ParseFromArray(field.data(), field.size());
        break;
      case 171 /* ext4_ext_rm_idx */:
        (*ext4_ext_rm_idx_).ParseFromArray(field.data(), field.size());
        break;
      case 172 /* ext4_ext_rm_leaf */:
        (*ext4_ext_rm_leaf_).ParseFromArray(field.data(), field.size());
        break;
      case 173 /* ext4_ext_show_extent */:
        (*ext4_ext_show_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 174 /* ext4_fallocate_enter */:
        (*ext4_fallocate_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 175 /* ext4_fallocate_exit */:
        (*ext4_fallocate_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 176 /* ext4_find_delalloc_range */:
        (*ext4_find_delalloc_range_).ParseFromArray(field.data(), field.size());
        break;
      case 177 /* ext4_forget */:
        (*ext4_forget_).ParseFromArray(field.data(), field.size());
        break;
      case 178 /* ext4_free_blocks */:
        (*ext4_free_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 179 /* ext4_free_inode */:
        (*ext4_free_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 180 /* ext4_get_implied_cluster_alloc_exit */:
        (*ext4_get_implied_cluster_alloc_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 181 /* ext4_get_reserved_cluster_alloc */:
        (*ext4_get_reserved_cluster_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 182 /* ext4_ind_map_blocks_enter */:
        (*ext4_ind_map_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 183 /* ext4_ind_map_blocks_exit */:
        (*ext4_ind_map_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 184 /* ext4_insert_range */:
        (*ext4_insert_range_).ParseFromArray(field.data(), field.size());
        break;
      case 185 /* ext4_invalidatepage */:
        (*ext4_invalidatepage_).ParseFromArray(field.data(), field.size());
        break;
      case 186 /* ext4_journal_start */:
        (*ext4_journal_start_).ParseFromArray(field.data(), field.size());
        break;
      case 187 /* ext4_journal_start_reserved */:
        (*ext4_journal_start_reserved_).ParseFromArray(field.data(), field.size());
        break;
      case 188 /* ext4_journalled_invalidatepage */:
        (*ext4_journalled_invalidatepage_).ParseFromArray(field.data(), field.size());
        break;
      case 189 /* ext4_journalled_write_end */:
        (*ext4_journalled_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 190 /* ext4_load_inode */:
        (*ext4_load_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 191 /* ext4_load_inode_bitmap */:
        (*ext4_load_inode_bitmap_).ParseFromArray(field.data(), field.size());
        break;
      case 192 /* ext4_mark_inode_dirty */:
        (*ext4_mark_inode_dirty_).ParseFromArray(field.data(), field.size());
        break;
      case 193 /* ext4_mb_bitmap_load */:
        (*ext4_mb_bitmap_load_).ParseFromArray(field.data(), field.size());
        break;
      case 194 /* ext4_mb_buddy_bitmap_load */:
        (*ext4_mb_buddy_bitmap_load_).ParseFromArray(field.data(), field.size());
        break;
      case 195 /* ext4_mb_discard_preallocations */:
        (*ext4_mb_discard_preallocations_).ParseFromArray(field.data(), field.size());
        break;
      case 196 /* ext4_mb_new_group_pa */:
        (*ext4_mb_new_group_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 197 /* ext4_mb_new_inode_pa */:
        (*ext4_mb_new_inode_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 198 /* ext4_mb_release_group_pa */:
        (*ext4_mb_release_group_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 199 /* ext4_mb_release_inode_pa */:
        (*ext4_mb_release_inode_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 200 /* ext4_mballoc_alloc */:
        (*ext4_mballoc_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 201 /* ext4_mballoc_discard */:
        (*ext4_mballoc_discard_).ParseFromArray(field.data(), field.size());
        break;
      case 202 /* ext4_mballoc_free */:
        (*ext4_mballoc_free_).ParseFromArray(field.data(), field.size());
        break;
      case 203 /* ext4_mballoc_prealloc */:
        (*ext4_mballoc_prealloc_).ParseFromArray(field.data(), field.size());
        break;
      case 204 /* ext4_other_inode_update_time */:
        (*ext4_other_inode_update_time_).ParseFromArray(field.data(), field.size());
        break;
      case 205 /* ext4_punch_hole */:
        (*ext4_punch_hole_).ParseFromArray(field.data(), field.size());
        break;
      case 206 /* ext4_read_block_bitmap_load */:
        (*ext4_read_block_bitmap_load_).ParseFromArray(field.data(), field.size());
        break;
      case 207 /* ext4_readpage */:
        (*ext4_readpage_).ParseFromArray(field.data(), field.size());
        break;
      case 208 /* ext4_releasepage */:
        (*ext4_releasepage_).ParseFromArray(field.data(), field.size());
        break;
      case 209 /* ext4_remove_blocks */:
        (*ext4_remove_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 210 /* ext4_request_blocks */:
        (*ext4_request_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 211 /* ext4_request_inode */:
        (*ext4_request_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 212 /* ext4_sync_fs */:
        (*ext4_sync_fs_).ParseFromArray(field.data(), field.size());
        break;
      case 213 /* ext4_trim_all_free */:
        (*ext4_trim_all_free_).ParseFromArray(field.data(), field.size());
        break;
      case 214 /* ext4_trim_extent */:
        (*ext4_trim_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 215 /* ext4_truncate_enter */:
        (*ext4_truncate_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 216 /* ext4_truncate_exit */:
        (*ext4_truncate_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 217 /* ext4_unlink_enter */:
        (*ext4_unlink_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 218 /* ext4_unlink_exit */:
        (*ext4_unlink_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 219 /* ext4_write_begin */:
        (*ext4_write_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 230 /* ext4_write_end */:
        (*ext4_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 231 /* ext4_writepage */:
        (*ext4_writepage_).ParseFromArray(field.data(), field.size());
        break;
      case 232 /* ext4_writepages */:
        (*ext4_writepages_).ParseFromArray(field.data(), field.size());
        break;
      case 233 /* ext4_writepages_result */:
        (*ext4_writepages_result_).ParseFromArray(field.data(), field.size());
        break;
      case 234 /* ext4_zero_range */:
        (*ext4_zero_range_).ParseFromArray(field.data(), field.size());
        break;
      case 235 /* task_newtask */:
        (*task_newtask_).ParseFromArray(field.data(), field.size());
        break;
      case 236 /* task_rename */:
        (*task_rename_).ParseFromArray(field.data(), field.size());
        break;
      case 237 /* sched_process_exec */:
        (*sched_process_exec_).ParseFromArray(field.data(), field.size());
        break;
      case 238 /* sched_process_exit */:
        (*sched_process_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 239 /* sched_process_fork */:
        (*sched_process_fork_).ParseFromArray(field.data(), field.size());
        break;
      case 240 /* sched_process_free */:
        (*sched_process_free_).ParseFromArray(field.data(), field.size());
        break;
      case 241 /* sched_process_hang */:
        (*sched_process_hang_).ParseFromArray(field.data(), field.size());
        break;
      case 242 /* sched_process_wait */:
        (*sched_process_wait_).ParseFromArray(field.data(), field.size());
        break;
      case 243 /* f2fs_do_submit_bio */:
        (*f2fs_do_submit_bio_).ParseFromArray(field.data(), field.size());
        break;
      case 244 /* f2fs_evict_inode */:
        (*f2fs_evict_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 245 /* f2fs_fallocate */:
        (*f2fs_fallocate_).ParseFromArray(field.data(), field.size());
        break;
      case 246 /* f2fs_get_data_block */:
        (*f2fs_get_data_block_).ParseFromArray(field.data(), field.size());
        break;
      case 247 /* f2fs_get_victim */:
        (*f2fs_get_victim_).ParseFromArray(field.data(), field.size());
        break;
      case 248 /* f2fs_iget */:
        (*f2fs_iget_).ParseFromArray(field.data(), field.size());
        break;
      case 249 /* f2fs_iget_exit */:
        (*f2fs_iget_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 250 /* f2fs_new_inode */:
        (*f2fs_new_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 251 /* f2fs_readpage */:
        (*f2fs_readpage_).ParseFromArray(field.data(), field.size());
        break;
      case 252 /* f2fs_reserve_new_block */:
        (*f2fs_reserve_new_block_).ParseFromArray(field.data(), field.size());
        break;
      case 253 /* f2fs_set_page_dirty */:
        (*f2fs_set_page_dirty_).ParseFromArray(field.data(), field.size());
        break;
      case 254 /* f2fs_submit_write_page */:
        (*f2fs_submit_write_page_).ParseFromArray(field.data(), field.size());
        break;
      case 255 /* f2fs_sync_file_enter */:
        (*f2fs_sync_file_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 256 /* f2fs_sync_file_exit */:
        (*f2fs_sync_file_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 257 /* f2fs_sync_fs */:
        (*f2fs_sync_fs_).ParseFromArray(field.data(), field.size());
        break;
      case 258 /* f2fs_truncate */:
        (*f2fs_truncate_).ParseFromArray(field.data(), field.size());
        break;
      case 259 /* f2fs_truncate_blocks_enter */:
        (*f2fs_truncate_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 260 /* f2fs_truncate_blocks_exit */:
        (*f2fs_truncate_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 261 /* f2fs_truncate_data_blocks_range */:
        (*f2fs_truncate_data_blocks_range_).ParseFromArray(field.data(), field.size());
        break;
      case 262 /* f2fs_truncate_inode_blocks_enter */:
        (*f2fs_truncate_inode_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 263 /* f2fs_truncate_inode_blocks_exit */:
        (*f2fs_truncate_inode_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 264 /* f2fs_truncate_node */:
        (*f2fs_truncate_node_).ParseFromArray(field.data(), field.size());
        break;
      case 265 /* f2fs_truncate_nodes_enter */:
        (*f2fs_truncate_nodes_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 266 /* f2fs_truncate_nodes_exit */:
        (*f2fs_truncate_nodes_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 267 /* f2fs_truncate_partial_nodes */:
        (*f2fs_truncate_partial_nodes_).ParseFromArray(field.data(), field.size());
        break;
      case 268 /* f2fs_unlink_enter */:
        (*f2fs_unlink_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 269 /* f2fs_unlink_exit */:
        (*f2fs_unlink_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 270 /* f2fs_vm_page_mkwrite */:
        (*f2fs_vm_page_mkwrite_).ParseFromArray(field.data(), field.size());
        break;
      case 271 /* f2fs_write_begin */:
        (*f2fs_write_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 272 /* f2fs_write_checkpoint */:
        (*f2fs_write_checkpoint_).ParseFromArray(field.data(), field.size());
        break;
      case 273 /* f2fs_write_end */:
        (*f2fs_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 274 /* alloc_pages_iommu_end */:
        (*alloc_pages_iommu_end_).ParseFromArray(field.data(), field.size());
        break;
      case 275 /* alloc_pages_iommu_fail */:
        (*alloc_pages_iommu_fail_).ParseFromArray(field.data(), field.size());
        break;
      case 276 /* alloc_pages_iommu_start */:
        (*alloc_pages_iommu_start_).ParseFromArray(field.data(), field.size());
        break;
      case 277 /* alloc_pages_sys_end */:
        (*alloc_pages_sys_end_).ParseFromArray(field.data(), field.size());
        break;
      case 278 /* alloc_pages_sys_fail */:
        (*alloc_pages_sys_fail_).ParseFromArray(field.data(), field.size());
        break;
      case 279 /* alloc_pages_sys_start */:
        (*alloc_pages_sys_start_).ParseFromArray(field.data(), field.size());
        break;
      case 280 /* dma_alloc_contiguous_retry */:
        (*dma_alloc_contiguous_retry_).ParseFromArray(field.data(), field.size());
        break;
      case 281 /* iommu_map_range */:
        (*iommu_map_range_).ParseFromArray(field.data(), field.size());
        break;
      case 282 /* iommu_sec_ptbl_map_range_end */:
        (*iommu_sec_ptbl_map_range_end_).ParseFromArray(field.data(), field.size());
        break;
      case 283 /* iommu_sec_ptbl_map_range_start */:
        (*iommu_sec_ptbl_map_range_start_).ParseFromArray(field.data(), field.size());
        break;
      case 284 /* ion_alloc_buffer_end */:
        (*ion_alloc_buffer_end_).ParseFromArray(field.data(), field.size());
        break;
      case 285 /* ion_alloc_buffer_fail */:
        (*ion_alloc_buffer_fail_).ParseFromArray(field.data(), field.size());
        break;
      case 286 /* ion_alloc_buffer_fallback */:
        (*ion_alloc_buffer_fallback_).ParseFromArray(field.data(), field.size());
        break;
      case 287 /* ion_alloc_buffer_start */:
        (*ion_alloc_buffer_start_).ParseFromArray(field.data(), field.size());
        break;
      case 288 /* ion_cp_alloc_retry */:
        (*ion_cp_alloc_retry_).ParseFromArray(field.data(), field.size());
        break;
      case 289 /* ion_cp_secure_buffer_end */:
        (*ion_cp_secure_buffer_end_).ParseFromArray(field.data(), field.size());
        break;
      case 290 /* ion_cp_secure_buffer_start */:
        (*ion_cp_secure_buffer_start_).ParseFromArray(field.data(), field.size());
        break;
      case 291 /* ion_prefetching */:
        (*ion_prefetching_).ParseFromArray(field.data(), field.size());
        break;
      case 292 /* ion_secure_cma_add_to_pool_end */:
        (*ion_secure_cma_add_to_pool_end_).ParseFromArray(field.data(), field.size());
        break;
      case 293 /* ion_secure_cma_add_to_pool_start */:
        (*ion_secure_cma_add_to_pool_start_).ParseFromArray(field.data(), field.size());
        break;
      case 294 /* ion_secure_cma_allocate_end */:
        (*ion_secure_cma_allocate_end_).ParseFromArray(field.data(), field.size());
        break;
      case 295 /* ion_secure_cma_allocate_start */:
        (*ion_secure_cma_allocate_start_).ParseFromArray(field.data(), field.size());
        break;
      case 296 /* ion_secure_cma_shrink_pool_end */:
        (*ion_secure_cma_shrink_pool_end_).ParseFromArray(field.data(), field.size());
        break;
      case 297 /* ion_secure_cma_shrink_pool_start */:
        (*ion_secure_cma_shrink_pool_start_).ParseFromArray(field.data(), field.size());
        break;
      case 298 /* kfree */:
        (*kfree_).ParseFromArray(field.data(), field.size());
        break;
      case 299 /* kmalloc */:
        (*kmalloc_).ParseFromArray(field.data(), field.size());
        break;
      case 300 /* kmalloc_node */:
        (*kmalloc_node_).ParseFromArray(field.data(), field.size());
        break;
      case 301 /* kmem_cache_alloc */:
        (*kmem_cache_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 302 /* kmem_cache_alloc_node */:
        (*kmem_cache_alloc_node_).ParseFromArray(field.data(), field.size());
        break;
      case 303 /* kmem_cache_free */:
        (*kmem_cache_free_).ParseFromArray(field.data(), field.size());
        break;
      case 304 /* migrate_pages_end */:
        (*migrate_pages_end_).ParseFromArray(field.data(), field.size());
        break;
      case 305 /* migrate_pages_start */:
        (*migrate_pages_start_).ParseFromArray(field.data(), field.size());
        break;
      case 306 /* migrate_retry */:
        (*migrate_retry_).ParseFromArray(field.data(), field.size());
        break;
      case 307 /* mm_page_alloc */:
        (*mm_page_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 308 /* mm_page_alloc_extfrag */:
        (*mm_page_alloc_extfrag_).ParseFromArray(field.data(), field.size());
        break;
      case 309 /* mm_page_alloc_zone_locked */:
        (*mm_page_alloc_zone_locked_).ParseFromArray(field.data(), field.size());
        break;
      case 310 /* mm_page_free */:
        (*mm_page_free_).ParseFromArray(field.data(), field.size());
        break;
      case 311 /* mm_page_free_batched */:
        (*mm_page_free_batched_).ParseFromArray(field.data(), field.size());
        break;
      case 312 /* mm_page_pcpu_drain */:
        (*mm_page_pcpu_drain_).ParseFromArray(field.data(), field.size());
        break;
      case 313 /* rss_stat */:
        (*rss_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 314 /* ion_heap_shrink */:
        (*ion_heap_shrink_).ParseFromArray(field.data(), field.size());
        break;
      case 315 /* ion_heap_grow */:
        (*ion_heap_grow_).ParseFromArray(field.data(), field.size());
        break;
      case 316 /* fence_init */:
        (*fence_init_).ParseFromArray(field.data(), field.size());
        break;
      case 317 /* fence_destroy */:
        (*fence_destroy_).ParseFromArray(field.data(), field.size());
        break;
      case 318 /* fence_enable_signal */:
        (*fence_enable_signal_).ParseFromArray(field.data(), field.size());
        break;
      case 319 /* fence_signaled */:
        (*fence_signaled_).ParseFromArray(field.data(), field.size());
        break;
      case 320 /* clk_enable */:
        (*clk_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 321 /* clk_disable */:
        (*clk_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 322 /* clk_set_rate */:
        (*clk_set_rate_).ParseFromArray(field.data(), field.size());
        break;
      case 323 /* binder_transaction_alloc_buf */:
        (*binder_transaction_alloc_buf_).ParseFromArray(field.data(), field.size());
        break;
      case 324 /* signal_deliver */:
        (*signal_deliver_).ParseFromArray(field.data(), field.size());
        break;
      case 325 /* signal_generate */:
        (*signal_generate_).ParseFromArray(field.data(), field.size());
        break;
      case 326 /* oom_score_adj_update */:
        (*oom_score_adj_update_).ParseFromArray(field.data(), field.size());
        break;
      case 327 /* generic */:
        (*generic_).ParseFromArray(field.data(), field.size());
        break;
      case 328 /* mm_event_record */:
        (*mm_event_record_).ParseFromArray(field.data(), field.size());
        break;
      case 329 /* sys_enter */:
        (*sys_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 330 /* sys_exit */:
        (*sys_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 331 /* zero */:
        (*zero_).ParseFromArray(field.data(), field.size());
        break;
      case 332 /* gpu_frequency */:
        (*gpu_frequency_).ParseFromArray(field.data(), field.size());
        break;
      case 333 /* sde_tracing_mark_write */:
        (*sde_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 334 /* mark_victim */:
        (*mark_victim_).ParseFromArray(field.data(), field.size());
        break;
      case 335 /* ion_stat */:
        (*ion_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 336 /* ion_buffer_create */:
        (*ion_buffer_create_).ParseFromArray(field.data(), field.size());
        break;
      case 337 /* ion_buffer_destroy */:
        (*ion_buffer_destroy_).ParseFromArray(field.data(), field.size());
        break;
      case 338 /* scm_call_start */:
        (*scm_call_start_).ParseFromArray(field.data(), field.size());
        break;
      case 339 /* scm_call_end */:
        (*scm_call_end_).ParseFromArray(field.data(), field.size());
        break;
      case 340 /* gpu_mem_total */:
        (*gpu_mem_total_).ParseFromArray(field.data(), field.size());
        break;
      case 341 /* thermal_temperature */:
        (*thermal_temperature_).ParseFromArray(field.data(), field.size());
        break;
      case 342 /* cdev_update */:
        (*cdev_update_).ParseFromArray(field.data(), field.size());
        break;
      case 343 /* cpuhp_exit */:
        (*cpuhp_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 344 /* cpuhp_multi_enter */:
        (*cpuhp_multi_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 345 /* cpuhp_enter */:
        (*cpuhp_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 346 /* cpuhp_latency */:
        (*cpuhp_latency_).ParseFromArray(field.data(), field.size());
        break;
      case 347 /* fastrpc_dma_stat */:
        (*fastrpc_dma_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 348 /* dpu_tracing_mark_write */:
        (*dpu_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 349 /* g2d_tracing_mark_write */:
        (*g2d_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 350 /* mali_tracing_mark_write */:
        (*mali_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: timestamp
  if (_has_field_[1]) {
    msg->AppendVarInt(1, timestamp_);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, pid_);
  }

  // Field 3: print
  if (_has_field_[3]) {
    (*print_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: sched_switch
  if (_has_field_[4]) {
    (*sched_switch_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 11: cpu_frequency
  if (_has_field_[11]) {
    (*cpu_frequency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: cpu_frequency_limits
  if (_has_field_[12]) {
    (*cpu_frequency_limits_).Serialize(msg->BeginNestedMessage<::protozero::Message>(12));
  }

  // Field 13: cpu_idle
  if (_has_field_[13]) {
    (*cpu_idle_).Serialize(msg->BeginNestedMessage<::protozero::Message>(13));
  }

  // Field 14: clock_enable
  if (_has_field_[14]) {
    (*clock_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(14));
  }

  // Field 15: clock_disable
  if (_has_field_[15]) {
    (*clock_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(15));
  }

  // Field 16: clock_set_rate
  if (_has_field_[16]) {
    (*clock_set_rate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(16));
  }

  // Field 17: sched_wakeup
  if (_has_field_[17]) {
    (*sched_wakeup_).Serialize(msg->BeginNestedMessage<::protozero::Message>(17));
  }

  // Field 18: sched_blocked_reason
  if (_has_field_[18]) {
    (*sched_blocked_reason_).Serialize(msg->BeginNestedMessage<::protozero::Message>(18));
  }

  // Field 19: sched_cpu_hotplug
  if (_has_field_[19]) {
    (*sched_cpu_hotplug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(19));
  }

  // Field 20: sched_waking
  if (_has_field_[20]) {
    (*sched_waking_).Serialize(msg->BeginNestedMessage<::protozero::Message>(20));
  }

  // Field 21: ipi_entry
  if (_has_field_[21]) {
    (*ipi_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(21));
  }

  // Field 22: ipi_exit
  if (_has_field_[22]) {
    (*ipi_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(22));
  }

  // Field 23: ipi_raise
  if (_has_field_[23]) {
    (*ipi_raise_).Serialize(msg->BeginNestedMessage<::protozero::Message>(23));
  }

  // Field 24: softirq_entry
  if (_has_field_[24]) {
    (*softirq_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(24));
  }

  // Field 25: softirq_exit
  if (_has_field_[25]) {
    (*softirq_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(25));
  }

  // Field 26: softirq_raise
  if (_has_field_[26]) {
    (*softirq_raise_).Serialize(msg->BeginNestedMessage<::protozero::Message>(26));
  }

  // Field 27: i2c_read
  if (_has_field_[27]) {
    (*i2c_read_).Serialize(msg->BeginNestedMessage<::protozero::Message>(27));
  }

  // Field 28: i2c_write
  if (_has_field_[28]) {
    (*i2c_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(28));
  }

  // Field 29: i2c_result
  if (_has_field_[29]) {
    (*i2c_result_).Serialize(msg->BeginNestedMessage<::protozero::Message>(29));
  }

  // Field 30: i2c_reply
  if (_has_field_[30]) {
    (*i2c_reply_).Serialize(msg->BeginNestedMessage<::protozero::Message>(30));
  }

  // Field 31: smbus_read
  if (_has_field_[31]) {
    (*smbus_read_).Serialize(msg->BeginNestedMessage<::protozero::Message>(31));
  }

  // Field 32: smbus_write
  if (_has_field_[32]) {
    (*smbus_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(32));
  }

  // Field 33: smbus_result
  if (_has_field_[33]) {
    (*smbus_result_).Serialize(msg->BeginNestedMessage<::protozero::Message>(33));
  }

  // Field 34: smbus_reply
  if (_has_field_[34]) {
    (*smbus_reply_).Serialize(msg->BeginNestedMessage<::protozero::Message>(34));
  }

  // Field 35: lowmemory_kill
  if (_has_field_[35]) {
    (*lowmemory_kill_).Serialize(msg->BeginNestedMessage<::protozero::Message>(35));
  }

  // Field 36: irq_handler_entry
  if (_has_field_[36]) {
    (*irq_handler_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(36));
  }

  // Field 37: irq_handler_exit
  if (_has_field_[37]) {
    (*irq_handler_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(37));
  }

  // Field 38: sync_pt
  if (_has_field_[38]) {
    (*sync_pt_).Serialize(msg->BeginNestedMessage<::protozero::Message>(38));
  }

  // Field 39: sync_timeline
  if (_has_field_[39]) {
    (*sync_timeline_).Serialize(msg->BeginNestedMessage<::protozero::Message>(39));
  }

  // Field 40: sync_wait
  if (_has_field_[40]) {
    (*sync_wait_).Serialize(msg->BeginNestedMessage<::protozero::Message>(40));
  }

  // Field 41: ext4_da_write_begin
  if (_has_field_[41]) {
    (*ext4_da_write_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(41));
  }

  // Field 42: ext4_da_write_end
  if (_has_field_[42]) {
    (*ext4_da_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(42));
  }

  // Field 43: ext4_sync_file_enter
  if (_has_field_[43]) {
    (*ext4_sync_file_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(43));
  }

  // Field 44: ext4_sync_file_exit
  if (_has_field_[44]) {
    (*ext4_sync_file_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(44));
  }

  // Field 45: block_rq_issue
  if (_has_field_[45]) {
    (*block_rq_issue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(45));
  }

  // Field 46: mm_vmscan_direct_reclaim_begin
  if (_has_field_[46]) {
    (*mm_vmscan_direct_reclaim_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(46));
  }

  // Field 47: mm_vmscan_direct_reclaim_end
  if (_has_field_[47]) {
    (*mm_vmscan_direct_reclaim_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(47));
  }

  // Field 48: mm_vmscan_kswapd_wake
  if (_has_field_[48]) {
    (*mm_vmscan_kswapd_wake_).Serialize(msg->BeginNestedMessage<::protozero::Message>(48));
  }

  // Field 49: mm_vmscan_kswapd_sleep
  if (_has_field_[49]) {
    (*mm_vmscan_kswapd_sleep_).Serialize(msg->BeginNestedMessage<::protozero::Message>(49));
  }

  // Field 50: binder_transaction
  if (_has_field_[50]) {
    (*binder_transaction_).Serialize(msg->BeginNestedMessage<::protozero::Message>(50));
  }

  // Field 51: binder_transaction_received
  if (_has_field_[51]) {
    (*binder_transaction_received_).Serialize(msg->BeginNestedMessage<::protozero::Message>(51));
  }

  // Field 52: binder_set_priority
  if (_has_field_[52]) {
    (*binder_set_priority_).Serialize(msg->BeginNestedMessage<::protozero::Message>(52));
  }

  // Field 53: binder_lock
  if (_has_field_[53]) {
    (*binder_lock_).Serialize(msg->BeginNestedMessage<::protozero::Message>(53));
  }

  // Field 54: binder_locked
  if (_has_field_[54]) {
    (*binder_locked_).Serialize(msg->BeginNestedMessage<::protozero::Message>(54));
  }

  // Field 55: binder_unlock
  if (_has_field_[55]) {
    (*binder_unlock_).Serialize(msg->BeginNestedMessage<::protozero::Message>(55));
  }

  // Field 56: workqueue_activate_work
  if (_has_field_[56]) {
    (*workqueue_activate_work_).Serialize(msg->BeginNestedMessage<::protozero::Message>(56));
  }

  // Field 57: workqueue_execute_end
  if (_has_field_[57]) {
    (*workqueue_execute_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(57));
  }

  // Field 58: workqueue_execute_start
  if (_has_field_[58]) {
    (*workqueue_execute_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(58));
  }

  // Field 59: workqueue_queue_work
  if (_has_field_[59]) {
    (*workqueue_queue_work_).Serialize(msg->BeginNestedMessage<::protozero::Message>(59));
  }

  // Field 60: regulator_disable
  if (_has_field_[60]) {
    (*regulator_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(60));
  }

  // Field 61: regulator_disable_complete
  if (_has_field_[61]) {
    (*regulator_disable_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(61));
  }

  // Field 62: regulator_enable
  if (_has_field_[62]) {
    (*regulator_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(62));
  }

  // Field 63: regulator_enable_complete
  if (_has_field_[63]) {
    (*regulator_enable_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(63));
  }

  // Field 64: regulator_enable_delay
  if (_has_field_[64]) {
    (*regulator_enable_delay_).Serialize(msg->BeginNestedMessage<::protozero::Message>(64));
  }

  // Field 65: regulator_set_voltage
  if (_has_field_[65]) {
    (*regulator_set_voltage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(65));
  }

  // Field 66: regulator_set_voltage_complete
  if (_has_field_[66]) {
    (*regulator_set_voltage_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(66));
  }

  // Field 67: cgroup_attach_task
  if (_has_field_[67]) {
    (*cgroup_attach_task_).Serialize(msg->BeginNestedMessage<::protozero::Message>(67));
  }

  // Field 68: cgroup_mkdir
  if (_has_field_[68]) {
    (*cgroup_mkdir_).Serialize(msg->BeginNestedMessage<::protozero::Message>(68));
  }

  // Field 69: cgroup_remount
  if (_has_field_[69]) {
    (*cgroup_remount_).Serialize(msg->BeginNestedMessage<::protozero::Message>(69));
  }

  // Field 70: cgroup_rmdir
  if (_has_field_[70]) {
    (*cgroup_rmdir_).Serialize(msg->BeginNestedMessage<::protozero::Message>(70));
  }

  // Field 71: cgroup_transfer_tasks
  if (_has_field_[71]) {
    (*cgroup_transfer_tasks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(71));
  }

  // Field 72: cgroup_destroy_root
  if (_has_field_[72]) {
    (*cgroup_destroy_root_).Serialize(msg->BeginNestedMessage<::protozero::Message>(72));
  }

  // Field 73: cgroup_release
  if (_has_field_[73]) {
    (*cgroup_release_).Serialize(msg->BeginNestedMessage<::protozero::Message>(73));
  }

  // Field 74: cgroup_rename
  if (_has_field_[74]) {
    (*cgroup_rename_).Serialize(msg->BeginNestedMessage<::protozero::Message>(74));
  }

  // Field 75: cgroup_setup_root
  if (_has_field_[75]) {
    (*cgroup_setup_root_).Serialize(msg->BeginNestedMessage<::protozero::Message>(75));
  }

  // Field 76: mdp_cmd_kickoff
  if (_has_field_[76]) {
    (*mdp_cmd_kickoff_).Serialize(msg->BeginNestedMessage<::protozero::Message>(76));
  }

  // Field 77: mdp_commit
  if (_has_field_[77]) {
    (*mdp_commit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(77));
  }

  // Field 78: mdp_perf_set_ot
  if (_has_field_[78]) {
    (*mdp_perf_set_ot_).Serialize(msg->BeginNestedMessage<::protozero::Message>(78));
  }

  // Field 79: mdp_sspp_change
  if (_has_field_[79]) {
    (*mdp_sspp_change_).Serialize(msg->BeginNestedMessage<::protozero::Message>(79));
  }

  // Field 80: tracing_mark_write
  if (_has_field_[80]) {
    (*tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(80));
  }

  // Field 81: mdp_cmd_pingpong_done
  if (_has_field_[81]) {
    (*mdp_cmd_pingpong_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(81));
  }

  // Field 82: mdp_compare_bw
  if (_has_field_[82]) {
    (*mdp_compare_bw_).Serialize(msg->BeginNestedMessage<::protozero::Message>(82));
  }

  // Field 83: mdp_perf_set_panic_luts
  if (_has_field_[83]) {
    (*mdp_perf_set_panic_luts_).Serialize(msg->BeginNestedMessage<::protozero::Message>(83));
  }

  // Field 84: mdp_sspp_set
  if (_has_field_[84]) {
    (*mdp_sspp_set_).Serialize(msg->BeginNestedMessage<::protozero::Message>(84));
  }

  // Field 85: mdp_cmd_readptr_done
  if (_has_field_[85]) {
    (*mdp_cmd_readptr_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(85));
  }

  // Field 86: mdp_misr_crc
  if (_has_field_[86]) {
    (*mdp_misr_crc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(86));
  }

  // Field 87: mdp_perf_set_qos_luts
  if (_has_field_[87]) {
    (*mdp_perf_set_qos_luts_).Serialize(msg->BeginNestedMessage<::protozero::Message>(87));
  }

  // Field 88: mdp_trace_counter
  if (_has_field_[88]) {
    (*mdp_trace_counter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(88));
  }

  // Field 89: mdp_cmd_release_bw
  if (_has_field_[89]) {
    (*mdp_cmd_release_bw_).Serialize(msg->BeginNestedMessage<::protozero::Message>(89));
  }

  // Field 90: mdp_mixer_update
  if (_has_field_[90]) {
    (*mdp_mixer_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(90));
  }

  // Field 91: mdp_perf_set_wm_levels
  if (_has_field_[91]) {
    (*mdp_perf_set_wm_levels_).Serialize(msg->BeginNestedMessage<::protozero::Message>(91));
  }

  // Field 92: mdp_video_underrun_done
  if (_has_field_[92]) {
    (*mdp_video_underrun_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(92));
  }

  // Field 93: mdp_cmd_wait_pingpong
  if (_has_field_[93]) {
    (*mdp_cmd_wait_pingpong_).Serialize(msg->BeginNestedMessage<::protozero::Message>(93));
  }

  // Field 94: mdp_perf_prefill_calc
  if (_has_field_[94]) {
    (*mdp_perf_prefill_calc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(94));
  }

  // Field 95: mdp_perf_update_bus
  if (_has_field_[95]) {
    (*mdp_perf_update_bus_).Serialize(msg->BeginNestedMessage<::protozero::Message>(95));
  }

  // Field 96: rotator_bw_ao_as_context
  if (_has_field_[96]) {
    (*rotator_bw_ao_as_context_).Serialize(msg->BeginNestedMessage<::protozero::Message>(96));
  }

  // Field 97: mm_filemap_add_to_page_cache
  if (_has_field_[97]) {
    (*mm_filemap_add_to_page_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(97));
  }

  // Field 98: mm_filemap_delete_from_page_cache
  if (_has_field_[98]) {
    (*mm_filemap_delete_from_page_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(98));
  }

  // Field 99: mm_compaction_begin
  if (_has_field_[99]) {
    (*mm_compaction_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(99));
  }

  // Field 100: mm_compaction_defer_compaction
  if (_has_field_[100]) {
    (*mm_compaction_defer_compaction_).Serialize(msg->BeginNestedMessage<::protozero::Message>(100));
  }

  // Field 101: mm_compaction_deferred
  if (_has_field_[101]) {
    (*mm_compaction_deferred_).Serialize(msg->BeginNestedMessage<::protozero::Message>(101));
  }

  // Field 102: mm_compaction_defer_reset
  if (_has_field_[102]) {
    (*mm_compaction_defer_reset_).Serialize(msg->BeginNestedMessage<::protozero::Message>(102));
  }

  // Field 103: mm_compaction_end
  if (_has_field_[103]) {
    (*mm_compaction_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(103));
  }

  // Field 104: mm_compaction_finished
  if (_has_field_[104]) {
    (*mm_compaction_finished_).Serialize(msg->BeginNestedMessage<::protozero::Message>(104));
  }

  // Field 105: mm_compaction_isolate_freepages
  if (_has_field_[105]) {
    (*mm_compaction_isolate_freepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(105));
  }

  // Field 106: mm_compaction_isolate_migratepages
  if (_has_field_[106]) {
    (*mm_compaction_isolate_migratepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(106));
  }

  // Field 107: mm_compaction_kcompactd_sleep
  if (_has_field_[107]) {
    (*mm_compaction_kcompactd_sleep_).Serialize(msg->BeginNestedMessage<::protozero::Message>(107));
  }

  // Field 108: mm_compaction_kcompactd_wake
  if (_has_field_[108]) {
    (*mm_compaction_kcompactd_wake_).Serialize(msg->BeginNestedMessage<::protozero::Message>(108));
  }

  // Field 109: mm_compaction_migratepages
  if (_has_field_[109]) {
    (*mm_compaction_migratepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(109));
  }

  // Field 110: mm_compaction_suitable
  if (_has_field_[110]) {
    (*mm_compaction_suitable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(110));
  }

  // Field 111: mm_compaction_try_to_compact_pages
  if (_has_field_[111]) {
    (*mm_compaction_try_to_compact_pages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(111));
  }

  // Field 112: mm_compaction_wakeup_kcompactd
  if (_has_field_[112]) {
    (*mm_compaction_wakeup_kcompactd_).Serialize(msg->BeginNestedMessage<::protozero::Message>(112));
  }

  // Field 113: suspend_resume
  if (_has_field_[113]) {
    (*suspend_resume_).Serialize(msg->BeginNestedMessage<::protozero::Message>(113));
  }

  // Field 114: sched_wakeup_new
  if (_has_field_[114]) {
    (*sched_wakeup_new_).Serialize(msg->BeginNestedMessage<::protozero::Message>(114));
  }

  // Field 115: block_bio_backmerge
  if (_has_field_[115]) {
    (*block_bio_backmerge_).Serialize(msg->BeginNestedMessage<::protozero::Message>(115));
  }

  // Field 116: block_bio_bounce
  if (_has_field_[116]) {
    (*block_bio_bounce_).Serialize(msg->BeginNestedMessage<::protozero::Message>(116));
  }

  // Field 117: block_bio_complete
  if (_has_field_[117]) {
    (*block_bio_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(117));
  }

  // Field 118: block_bio_frontmerge
  if (_has_field_[118]) {
    (*block_bio_frontmerge_).Serialize(msg->BeginNestedMessage<::protozero::Message>(118));
  }

  // Field 119: block_bio_queue
  if (_has_field_[119]) {
    (*block_bio_queue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(119));
  }

  // Field 120: block_bio_remap
  if (_has_field_[120]) {
    (*block_bio_remap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(120));
  }

  // Field 121: block_dirty_buffer
  if (_has_field_[121]) {
    (*block_dirty_buffer_).Serialize(msg->BeginNestedMessage<::protozero::Message>(121));
  }

  // Field 122: block_getrq
  if (_has_field_[122]) {
    (*block_getrq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(122));
  }

  // Field 123: block_plug
  if (_has_field_[123]) {
    (*block_plug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(123));
  }

  // Field 124: block_rq_abort
  if (_has_field_[124]) {
    (*block_rq_abort_).Serialize(msg->BeginNestedMessage<::protozero::Message>(124));
  }

  // Field 125: block_rq_complete
  if (_has_field_[125]) {
    (*block_rq_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(125));
  }

  // Field 126: block_rq_insert
  if (_has_field_[126]) {
    (*block_rq_insert_).Serialize(msg->BeginNestedMessage<::protozero::Message>(126));
  }

  // Field 128: block_rq_remap
  if (_has_field_[128]) {
    (*block_rq_remap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(128));
  }

  // Field 129: block_rq_requeue
  if (_has_field_[129]) {
    (*block_rq_requeue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(129));
  }

  // Field 130: block_sleeprq
  if (_has_field_[130]) {
    (*block_sleeprq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(130));
  }

  // Field 131: block_split
  if (_has_field_[131]) {
    (*block_split_).Serialize(msg->BeginNestedMessage<::protozero::Message>(131));
  }

  // Field 132: block_touch_buffer
  if (_has_field_[132]) {
    (*block_touch_buffer_).Serialize(msg->BeginNestedMessage<::protozero::Message>(132));
  }

  // Field 133: block_unplug
  if (_has_field_[133]) {
    (*block_unplug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(133));
  }

  // Field 134: ext4_alloc_da_blocks
  if (_has_field_[134]) {
    (*ext4_alloc_da_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(134));
  }

  // Field 135: ext4_allocate_blocks
  if (_has_field_[135]) {
    (*ext4_allocate_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(135));
  }

  // Field 136: ext4_allocate_inode
  if (_has_field_[136]) {
    (*ext4_allocate_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(136));
  }

  // Field 137: ext4_begin_ordered_truncate
  if (_has_field_[137]) {
    (*ext4_begin_ordered_truncate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(137));
  }

  // Field 138: ext4_collapse_range
  if (_has_field_[138]) {
    (*ext4_collapse_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(138));
  }

  // Field 139: ext4_da_release_space
  if (_has_field_[139]) {
    (*ext4_da_release_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(139));
  }

  // Field 140: ext4_da_reserve_space
  if (_has_field_[140]) {
    (*ext4_da_reserve_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(140));
  }

  // Field 141: ext4_da_update_reserve_space
  if (_has_field_[141]) {
    (*ext4_da_update_reserve_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(141));
  }

  // Field 142: ext4_da_write_pages
  if (_has_field_[142]) {
    (*ext4_da_write_pages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(142));
  }

  // Field 143: ext4_da_write_pages_extent
  if (_has_field_[143]) {
    (*ext4_da_write_pages_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(143));
  }

  // Field 144: ext4_direct_io_enter
  if (_has_field_[144]) {
    (*ext4_direct_io_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(144));
  }

  // Field 145: ext4_direct_io_exit
  if (_has_field_[145]) {
    (*ext4_direct_io_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(145));
  }

  // Field 146: ext4_discard_blocks
  if (_has_field_[146]) {
    (*ext4_discard_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(146));
  }

  // Field 147: ext4_discard_preallocations
  if (_has_field_[147]) {
    (*ext4_discard_preallocations_).Serialize(msg->BeginNestedMessage<::protozero::Message>(147));
  }

  // Field 148: ext4_drop_inode
  if (_has_field_[148]) {
    (*ext4_drop_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(148));
  }

  // Field 149: ext4_es_cache_extent
  if (_has_field_[149]) {
    (*ext4_es_cache_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(149));
  }

  // Field 150: ext4_es_find_delayed_extent_range_enter
  if (_has_field_[150]) {
    (*ext4_es_find_delayed_extent_range_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(150));
  }

  // Field 151: ext4_es_find_delayed_extent_range_exit
  if (_has_field_[151]) {
    (*ext4_es_find_delayed_extent_range_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(151));
  }

  // Field 152: ext4_es_insert_extent
  if (_has_field_[152]) {
    (*ext4_es_insert_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(152));
  }

  // Field 153: ext4_es_lookup_extent_enter
  if (_has_field_[153]) {
    (*ext4_es_lookup_extent_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(153));
  }

  // Field 154: ext4_es_lookup_extent_exit
  if (_has_field_[154]) {
    (*ext4_es_lookup_extent_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(154));
  }

  // Field 155: ext4_es_remove_extent
  if (_has_field_[155]) {
    (*ext4_es_remove_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(155));
  }

  // Field 156: ext4_es_shrink
  if (_has_field_[156]) {
    (*ext4_es_shrink_).Serialize(msg->BeginNestedMessage<::protozero::Message>(156));
  }

  // Field 157: ext4_es_shrink_count
  if (_has_field_[157]) {
    (*ext4_es_shrink_count_).Serialize(msg->BeginNestedMessage<::protozero::Message>(157));
  }

  // Field 158: ext4_es_shrink_scan_enter
  if (_has_field_[158]) {
    (*ext4_es_shrink_scan_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(158));
  }

  // Field 159: ext4_es_shrink_scan_exit
  if (_has_field_[159]) {
    (*ext4_es_shrink_scan_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(159));
  }

  // Field 160: ext4_evict_inode
  if (_has_field_[160]) {
    (*ext4_evict_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(160));
  }

  // Field 161: ext4_ext_convert_to_initialized_enter
  if (_has_field_[161]) {
    (*ext4_ext_convert_to_initialized_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(161));
  }

  // Field 162: ext4_ext_convert_to_initialized_fastpath
  if (_has_field_[162]) {
    (*ext4_ext_convert_to_initialized_fastpath_).Serialize(msg->BeginNestedMessage<::protozero::Message>(162));
  }

  // Field 163: ext4_ext_handle_unwritten_extents
  if (_has_field_[163]) {
    (*ext4_ext_handle_unwritten_extents_).Serialize(msg->BeginNestedMessage<::protozero::Message>(163));
  }

  // Field 164: ext4_ext_in_cache
  if (_has_field_[164]) {
    (*ext4_ext_in_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(164));
  }

  // Field 165: ext4_ext_load_extent
  if (_has_field_[165]) {
    (*ext4_ext_load_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(165));
  }

  // Field 166: ext4_ext_map_blocks_enter
  if (_has_field_[166]) {
    (*ext4_ext_map_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(166));
  }

  // Field 167: ext4_ext_map_blocks_exit
  if (_has_field_[167]) {
    (*ext4_ext_map_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(167));
  }

  // Field 168: ext4_ext_put_in_cache
  if (_has_field_[168]) {
    (*ext4_ext_put_in_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(168));
  }

  // Field 169: ext4_ext_remove_space
  if (_has_field_[169]) {
    (*ext4_ext_remove_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(169));
  }

  // Field 170: ext4_ext_remove_space_done
  if (_has_field_[170]) {
    (*ext4_ext_remove_space_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(170));
  }

  // Field 171: ext4_ext_rm_idx
  if (_has_field_[171]) {
    (*ext4_ext_rm_idx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(171));
  }

  // Field 172: ext4_ext_rm_leaf
  if (_has_field_[172]) {
    (*ext4_ext_rm_leaf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(172));
  }

  // Field 173: ext4_ext_show_extent
  if (_has_field_[173]) {
    (*ext4_ext_show_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(173));
  }

  // Field 174: ext4_fallocate_enter
  if (_has_field_[174]) {
    (*ext4_fallocate_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(174));
  }

  // Field 175: ext4_fallocate_exit
  if (_has_field_[175]) {
    (*ext4_fallocate_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(175));
  }

  // Field 176: ext4_find_delalloc_range
  if (_has_field_[176]) {
    (*ext4_find_delalloc_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(176));
  }

  // Field 177: ext4_forget
  if (_has_field_[177]) {
    (*ext4_forget_).Serialize(msg->BeginNestedMessage<::protozero::Message>(177));
  }

  // Field 178: ext4_free_blocks
  if (_has_field_[178]) {
    (*ext4_free_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(178));
  }

  // Field 179: ext4_free_inode
  if (_has_field_[179]) {
    (*ext4_free_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(179));
  }

  // Field 180: ext4_get_implied_cluster_alloc_exit
  if (_has_field_[180]) {
    (*ext4_get_implied_cluster_alloc_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(180));
  }

  // Field 181: ext4_get_reserved_cluster_alloc
  if (_has_field_[181]) {
    (*ext4_get_reserved_cluster_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(181));
  }

  // Field 182: ext4_ind_map_blocks_enter
  if (_has_field_[182]) {
    (*ext4_ind_map_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(182));
  }

  // Field 183: ext4_ind_map_blocks_exit
  if (_has_field_[183]) {
    (*ext4_ind_map_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(183));
  }

  // Field 184: ext4_insert_range
  if (_has_field_[184]) {
    (*ext4_insert_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(184));
  }

  // Field 185: ext4_invalidatepage
  if (_has_field_[185]) {
    (*ext4_invalidatepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(185));
  }

  // Field 186: ext4_journal_start
  if (_has_field_[186]) {
    (*ext4_journal_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(186));
  }

  // Field 187: ext4_journal_start_reserved
  if (_has_field_[187]) {
    (*ext4_journal_start_reserved_).Serialize(msg->BeginNestedMessage<::protozero::Message>(187));
  }

  // Field 188: ext4_journalled_invalidatepage
  if (_has_field_[188]) {
    (*ext4_journalled_invalidatepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(188));
  }

  // Field 189: ext4_journalled_write_end
  if (_has_field_[189]) {
    (*ext4_journalled_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(189));
  }

  // Field 190: ext4_load_inode
  if (_has_field_[190]) {
    (*ext4_load_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(190));
  }

  // Field 191: ext4_load_inode_bitmap
  if (_has_field_[191]) {
    (*ext4_load_inode_bitmap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(191));
  }

  // Field 192: ext4_mark_inode_dirty
  if (_has_field_[192]) {
    (*ext4_mark_inode_dirty_).Serialize(msg->BeginNestedMessage<::protozero::Message>(192));
  }

  // Field 193: ext4_mb_bitmap_load
  if (_has_field_[193]) {
    (*ext4_mb_bitmap_load_).Serialize(msg->BeginNestedMessage<::protozero::Message>(193));
  }

  // Field 194: ext4_mb_buddy_bitmap_load
  if (_has_field_[194]) {
    (*ext4_mb_buddy_bitmap_load_).Serialize(msg->BeginNestedMessage<::protozero::Message>(194));
  }

  // Field 195: ext4_mb_discard_preallocations
  if (_has_field_[195]) {
    (*ext4_mb_discard_preallocations_).Serialize(msg->BeginNestedMessage<::protozero::Message>(195));
  }

  // Field 196: ext4_mb_new_group_pa
  if (_has_field_[196]) {
    (*ext4_mb_new_group_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(196));
  }

  // Field 197: ext4_mb_new_inode_pa
  if (_has_field_[197]) {
    (*ext4_mb_new_inode_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(197));
  }

  // Field 198: ext4_mb_release_group_pa
  if (_has_field_[198]) {
    (*ext4_mb_release_group_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(198));
  }

  // Field 199: ext4_mb_release_inode_pa
  if (_has_field_[199]) {
    (*ext4_mb_release_inode_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(199));
  }

  // Field 200: ext4_mballoc_alloc
  if (_has_field_[200]) {
    (*ext4_mballoc_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(200));
  }

  // Field 201: ext4_mballoc_discard
  if (_has_field_[201]) {
    (*ext4_mballoc_discard_).Serialize(msg->BeginNestedMessage<::protozero::Message>(201));
  }

  // Field 202: ext4_mballoc_free
  if (_has_field_[202]) {
    (*ext4_mballoc_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(202));
  }

  // Field 203: ext4_mballoc_prealloc
  if (_has_field_[203]) {
    (*ext4_mballoc_prealloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(203));
  }

  // Field 204: ext4_other_inode_update_time
  if (_has_field_[204]) {
    (*ext4_other_inode_update_time_).Serialize(msg->BeginNestedMessage<::protozero::Message>(204));
  }

  // Field 205: ext4_punch_hole
  if (_has_field_[205]) {
    (*ext4_punch_hole_).Serialize(msg->BeginNestedMessage<::protozero::Message>(205));
  }

  // Field 206: ext4_read_block_bitmap_load
  if (_has_field_[206]) {
    (*ext4_read_block_bitmap_load_).Serialize(msg->BeginNestedMessage<::protozero::Message>(206));
  }

  // Field 207: ext4_readpage
  if (_has_field_[207]) {
    (*ext4_readpage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(207));
  }

  // Field 208: ext4_releasepage
  if (_has_field_[208]) {
    (*ext4_releasepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(208));
  }

  // Field 209: ext4_remove_blocks
  if (_has_field_[209]) {
    (*ext4_remove_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(209));
  }

  // Field 210: ext4_request_blocks
  if (_has_field_[210]) {
    (*ext4_request_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(210));
  }

  // Field 211: ext4_request_inode
  if (_has_field_[211]) {
    (*ext4_request_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(211));
  }

  // Field 212: ext4_sync_fs
  if (_has_field_[212]) {
    (*ext4_sync_fs_).Serialize(msg->BeginNestedMessage<::protozero::Message>(212));
  }

  // Field 213: ext4_trim_all_free
  if (_has_field_[213]) {
    (*ext4_trim_all_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(213));
  }

  // Field 214: ext4_trim_extent
  if (_has_field_[214]) {
    (*ext4_trim_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(214));
  }

  // Field 215: ext4_truncate_enter
  if (_has_field_[215]) {
    (*ext4_truncate_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(215));
  }

  // Field 216: ext4_truncate_exit
  if (_has_field_[216]) {
    (*ext4_truncate_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(216));
  }

  // Field 217: ext4_unlink_enter
  if (_has_field_[217]) {
    (*ext4_unlink_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(217));
  }

  // Field 218: ext4_unlink_exit
  if (_has_field_[218]) {
    (*ext4_unlink_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(218));
  }

  // Field 219: ext4_write_begin
  if (_has_field_[219]) {
    (*ext4_write_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(219));
  }

  // Field 230: ext4_write_end
  if (_has_field_[230]) {
    (*ext4_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(230));
  }

  // Field 231: ext4_writepage
  if (_has_field_[231]) {
    (*ext4_writepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(231));
  }

  // Field 232: ext4_writepages
  if (_has_field_[232]) {
    (*ext4_writepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(232));
  }

  // Field 233: ext4_writepages_result
  if (_has_field_[233]) {
    (*ext4_writepages_result_).Serialize(msg->BeginNestedMessage<::protozero::Message>(233));
  }

  // Field 234: ext4_zero_range
  if (_has_field_[234]) {
    (*ext4_zero_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(234));
  }

  // Field 235: task_newtask
  if (_has_field_[235]) {
    (*task_newtask_).Serialize(msg->BeginNestedMessage<::protozero::Message>(235));
  }

  // Field 236: task_rename
  if (_has_field_[236]) {
    (*task_rename_).Serialize(msg->BeginNestedMessage<::protozero::Message>(236));
  }

  // Field 237: sched_process_exec
  if (_has_field_[237]) {
    (*sched_process_exec_).Serialize(msg->BeginNestedMessage<::protozero::Message>(237));
  }

  // Field 238: sched_process_exit
  if (_has_field_[238]) {
    (*sched_process_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(238));
  }

  // Field 239: sched_process_fork
  if (_has_field_[239]) {
    (*sched_process_fork_).Serialize(msg->BeginNestedMessage<::protozero::Message>(239));
  }

  // Field 240: sched_process_free
  if (_has_field_[240]) {
    (*sched_process_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(240));
  }

  // Field 241: sched_process_hang
  if (_has_field_[241]) {
    (*sched_process_hang_).Serialize(msg->BeginNestedMessage<::protozero::Message>(241));
  }

  // Field 242: sched_process_wait
  if (_has_field_[242]) {
    (*sched_process_wait_).Serialize(msg->BeginNestedMessage<::protozero::Message>(242));
  }

  // Field 243: f2fs_do_submit_bio
  if (_has_field_[243]) {
    (*f2fs_do_submit_bio_).Serialize(msg->BeginNestedMessage<::protozero::Message>(243));
  }

  // Field 244: f2fs_evict_inode
  if (_has_field_[244]) {
    (*f2fs_evict_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(244));
  }

  // Field 245: f2fs_fallocate
  if (_has_field_[245]) {
    (*f2fs_fallocate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(245));
  }

  // Field 246: f2fs_get_data_block
  if (_has_field_[246]) {
    (*f2fs_get_data_block_).Serialize(msg->BeginNestedMessage<::protozero::Message>(246));
  }

  // Field 247: f2fs_get_victim
  if (_has_field_[247]) {
    (*f2fs_get_victim_).Serialize(msg->BeginNestedMessage<::protozero::Message>(247));
  }

  // Field 248: f2fs_iget
  if (_has_field_[248]) {
    (*f2fs_iget_).Serialize(msg->BeginNestedMessage<::protozero::Message>(248));
  }

  // Field 249: f2fs_iget_exit
  if (_has_field_[249]) {
    (*f2fs_iget_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(249));
  }

  // Field 250: f2fs_new_inode
  if (_has_field_[250]) {
    (*f2fs_new_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(250));
  }

  // Field 251: f2fs_readpage
  if (_has_field_[251]) {
    (*f2fs_readpage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(251));
  }

  // Field 252: f2fs_reserve_new_block
  if (_has_field_[252]) {
    (*f2fs_reserve_new_block_).Serialize(msg->BeginNestedMessage<::protozero::Message>(252));
  }

  // Field 253: f2fs_set_page_dirty
  if (_has_field_[253]) {
    (*f2fs_set_page_dirty_).Serialize(msg->BeginNestedMessage<::protozero::Message>(253));
  }

  // Field 254: f2fs_submit_write_page
  if (_has_field_[254]) {
    (*f2fs_submit_write_page_).Serialize(msg->BeginNestedMessage<::protozero::Message>(254));
  }

  // Field 255: f2fs_sync_file_enter
  if (_has_field_[255]) {
    (*f2fs_sync_file_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(255));
  }

  // Field 256: f2fs_sync_file_exit
  if (_has_field_[256]) {
    (*f2fs_sync_file_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(256));
  }

  // Field 257: f2fs_sync_fs
  if (_has_field_[257]) {
    (*f2fs_sync_fs_).Serialize(msg->BeginNestedMessage<::protozero::Message>(257));
  }

  // Field 258: f2fs_truncate
  if (_has_field_[258]) {
    (*f2fs_truncate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(258));
  }

  // Field 259: f2fs_truncate_blocks_enter
  if (_has_field_[259]) {
    (*f2fs_truncate_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(259));
  }

  // Field 260: f2fs_truncate_blocks_exit
  if (_has_field_[260]) {
    (*f2fs_truncate_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(260));
  }

  // Field 261: f2fs_truncate_data_blocks_range
  if (_has_field_[261]) {
    (*f2fs_truncate_data_blocks_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(261));
  }

  // Field 262: f2fs_truncate_inode_blocks_enter
  if (_has_field_[262]) {
    (*f2fs_truncate_inode_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(262));
  }

  // Field 263: f2fs_truncate_inode_blocks_exit
  if (_has_field_[263]) {
    (*f2fs_truncate_inode_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(263));
  }

  // Field 264: f2fs_truncate_node
  if (_has_field_[264]) {
    (*f2fs_truncate_node_).Serialize(msg->BeginNestedMessage<::protozero::Message>(264));
  }

  // Field 265: f2fs_truncate_nodes_enter
  if (_has_field_[265]) {
    (*f2fs_truncate_nodes_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(265));
  }

  // Field 266: f2fs_truncate_nodes_exit
  if (_has_field_[266]) {
    (*f2fs_truncate_nodes_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(266));
  }

  // Field 267: f2fs_truncate_partial_nodes
  if (_has_field_[267]) {
    (*f2fs_truncate_partial_nodes_).Serialize(msg->BeginNestedMessage<::protozero::Message>(267));
  }

  // Field 268: f2fs_unlink_enter
  if (_has_field_[268]) {
    (*f2fs_unlink_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(268));
  }

  // Field 269: f2fs_unlink_exit
  if (_has_field_[269]) {
    (*f2fs_unlink_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(269));
  }

  // Field 270: f2fs_vm_page_mkwrite
  if (_has_field_[270]) {
    (*f2fs_vm_page_mkwrite_).Serialize(msg->BeginNestedMessage<::protozero::Message>(270));
  }

  // Field 271: f2fs_write_begin
  if (_has_field_[271]) {
    (*f2fs_write_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(271));
  }

  // Field 272: f2fs_write_checkpoint
  if (_has_field_[272]) {
    (*f2fs_write_checkpoint_).Serialize(msg->BeginNestedMessage<::protozero::Message>(272));
  }

  // Field 273: f2fs_write_end
  if (_has_field_[273]) {
    (*f2fs_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(273));
  }

  // Field 274: alloc_pages_iommu_end
  if (_has_field_[274]) {
    (*alloc_pages_iommu_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(274));
  }

  // Field 275: alloc_pages_iommu_fail
  if (_has_field_[275]) {
    (*alloc_pages_iommu_fail_).Serialize(msg->BeginNestedMessage<::protozero::Message>(275));
  }

  // Field 276: alloc_pages_iommu_start
  if (_has_field_[276]) {
    (*alloc_pages_iommu_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(276));
  }

  // Field 277: alloc_pages_sys_end
  if (_has_field_[277]) {
    (*alloc_pages_sys_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(277));
  }

  // Field 278: alloc_pages_sys_fail
  if (_has_field_[278]) {
    (*alloc_pages_sys_fail_).Serialize(msg->BeginNestedMessage<::protozero::Message>(278));
  }

  // Field 279: alloc_pages_sys_start
  if (_has_field_[279]) {
    (*alloc_pages_sys_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(279));
  }

  // Field 280: dma_alloc_contiguous_retry
  if (_has_field_[280]) {
    (*dma_alloc_contiguous_retry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(280));
  }

  // Field 281: iommu_map_range
  if (_has_field_[281]) {
    (*iommu_map_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(281));
  }

  // Field 282: iommu_sec_ptbl_map_range_end
  if (_has_field_[282]) {
    (*iommu_sec_ptbl_map_range_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(282));
  }

  // Field 283: iommu_sec_ptbl_map_range_start
  if (_has_field_[283]) {
    (*iommu_sec_ptbl_map_range_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(283));
  }

  // Field 284: ion_alloc_buffer_end
  if (_has_field_[284]) {
    (*ion_alloc_buffer_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(284));
  }

  // Field 285: ion_alloc_buffer_fail
  if (_has_field_[285]) {
    (*ion_alloc_buffer_fail_).Serialize(msg->BeginNestedMessage<::protozero::Message>(285));
  }

  // Field 286: ion_alloc_buffer_fallback
  if (_has_field_[286]) {
    (*ion_alloc_buffer_fallback_).Serialize(msg->BeginNestedMessage<::protozero::Message>(286));
  }

  // Field 287: ion_alloc_buffer_start
  if (_has_field_[287]) {
    (*ion_alloc_buffer_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(287));
  }

  // Field 288: ion_cp_alloc_retry
  if (_has_field_[288]) {
    (*ion_cp_alloc_retry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(288));
  }

  // Field 289: ion_cp_secure_buffer_end
  if (_has_field_[289]) {
    (*ion_cp_secure_buffer_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(289));
  }

  // Field 290: ion_cp_secure_buffer_start
  if (_has_field_[290]) {
    (*ion_cp_secure_buffer_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(290));
  }

  // Field 291: ion_prefetching
  if (_has_field_[291]) {
    (*ion_prefetching_).Serialize(msg->BeginNestedMessage<::protozero::Message>(291));
  }

  // Field 292: ion_secure_cma_add_to_pool_end
  if (_has_field_[292]) {
    (*ion_secure_cma_add_to_pool_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(292));
  }

  // Field 293: ion_secure_cma_add_to_pool_start
  if (_has_field_[293]) {
    (*ion_secure_cma_add_to_pool_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(293));
  }

  // Field 294: ion_secure_cma_allocate_end
  if (_has_field_[294]) {
    (*ion_secure_cma_allocate_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(294));
  }

  // Field 295: ion_secure_cma_allocate_start
  if (_has_field_[295]) {
    (*ion_secure_cma_allocate_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(295));
  }

  // Field 296: ion_secure_cma_shrink_pool_end
  if (_has_field_[296]) {
    (*ion_secure_cma_shrink_pool_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(296));
  }

  // Field 297: ion_secure_cma_shrink_pool_start
  if (_has_field_[297]) {
    (*ion_secure_cma_shrink_pool_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(297));
  }

  // Field 298: kfree
  if (_has_field_[298]) {
    (*kfree_).Serialize(msg->BeginNestedMessage<::protozero::Message>(298));
  }

  // Field 299: kmalloc
  if (_has_field_[299]) {
    (*kmalloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(299));
  }

  // Field 300: kmalloc_node
  if (_has_field_[300]) {
    (*kmalloc_node_).Serialize(msg->BeginNestedMessage<::protozero::Message>(300));
  }

  // Field 301: kmem_cache_alloc
  if (_has_field_[301]) {
    (*kmem_cache_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(301));
  }

  // Field 302: kmem_cache_alloc_node
  if (_has_field_[302]) {
    (*kmem_cache_alloc_node_).Serialize(msg->BeginNestedMessage<::protozero::Message>(302));
  }

  // Field 303: kmem_cache_free
  if (_has_field_[303]) {
    (*kmem_cache_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(303));
  }

  // Field 304: migrate_pages_end
  if (_has_field_[304]) {
    (*migrate_pages_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(304));
  }

  // Field 305: migrate_pages_start
  if (_has_field_[305]) {
    (*migrate_pages_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(305));
  }

  // Field 306: migrate_retry
  if (_has_field_[306]) {
    (*migrate_retry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(306));
  }

  // Field 307: mm_page_alloc
  if (_has_field_[307]) {
    (*mm_page_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(307));
  }

  // Field 308: mm_page_alloc_extfrag
  if (_has_field_[308]) {
    (*mm_page_alloc_extfrag_).Serialize(msg->BeginNestedMessage<::protozero::Message>(308));
  }

  // Field 309: mm_page_alloc_zone_locked
  if (_has_field_[309]) {
    (*mm_page_alloc_zone_locked_).Serialize(msg->BeginNestedMessage<::protozero::Message>(309));
  }

  // Field 310: mm_page_free
  if (_has_field_[310]) {
    (*mm_page_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(310));
  }

  // Field 311: mm_page_free_batched
  if (_has_field_[311]) {
    (*mm_page_free_batched_).Serialize(msg->BeginNestedMessage<::protozero::Message>(311));
  }

  // Field 312: mm_page_pcpu_drain
  if (_has_field_[312]) {
    (*mm_page_pcpu_drain_).Serialize(msg->BeginNestedMessage<::protozero::Message>(312));
  }

  // Field 313: rss_stat
  if (_has_field_[313]) {
    (*rss_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(313));
  }

  // Field 314: ion_heap_shrink
  if (_has_field_[314]) {
    (*ion_heap_shrink_).Serialize(msg->BeginNestedMessage<::protozero::Message>(314));
  }

  // Field 315: ion_heap_grow
  if (_has_field_[315]) {
    (*ion_heap_grow_).Serialize(msg->BeginNestedMessage<::protozero::Message>(315));
  }

  // Field 316: fence_init
  if (_has_field_[316]) {
    (*fence_init_).Serialize(msg->BeginNestedMessage<::protozero::Message>(316));
  }

  // Field 317: fence_destroy
  if (_has_field_[317]) {
    (*fence_destroy_).Serialize(msg->BeginNestedMessage<::protozero::Message>(317));
  }

  // Field 318: fence_enable_signal
  if (_has_field_[318]) {
    (*fence_enable_signal_).Serialize(msg->BeginNestedMessage<::protozero::Message>(318));
  }

  // Field 319: fence_signaled
  if (_has_field_[319]) {
    (*fence_signaled_).Serialize(msg->BeginNestedMessage<::protozero::Message>(319));
  }

  // Field 320: clk_enable
  if (_has_field_[320]) {
    (*clk_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(320));
  }

  // Field 321: clk_disable
  if (_has_field_[321]) {
    (*clk_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(321));
  }

  // Field 322: clk_set_rate
  if (_has_field_[322]) {
    (*clk_set_rate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(322));
  }

  // Field 323: binder_transaction_alloc_buf
  if (_has_field_[323]) {
    (*binder_transaction_alloc_buf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(323));
  }

  // Field 324: signal_deliver
  if (_has_field_[324]) {
    (*signal_deliver_).Serialize(msg->BeginNestedMessage<::protozero::Message>(324));
  }

  // Field 325: signal_generate
  if (_has_field_[325]) {
    (*signal_generate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(325));
  }

  // Field 326: oom_score_adj_update
  if (_has_field_[326]) {
    (*oom_score_adj_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(326));
  }

  // Field 327: generic
  if (_has_field_[327]) {
    (*generic_).Serialize(msg->BeginNestedMessage<::protozero::Message>(327));
  }

  // Field 328: mm_event_record
  if (_has_field_[328]) {
    (*mm_event_record_).Serialize(msg->BeginNestedMessage<::protozero::Message>(328));
  }

  // Field 329: sys_enter
  if (_has_field_[329]) {
    (*sys_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(329));
  }

  // Field 330: sys_exit
  if (_has_field_[330]) {
    (*sys_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(330));
  }

  // Field 331: zero
  if (_has_field_[331]) {
    (*zero_).Serialize(msg->BeginNestedMessage<::protozero::Message>(331));
  }

  // Field 332: gpu_frequency
  if (_has_field_[332]) {
    (*gpu_frequency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(332));
  }

  // Field 333: sde_tracing_mark_write
  if (_has_field_[333]) {
    (*sde_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(333));
  }

  // Field 334: mark_victim
  if (_has_field_[334]) {
    (*mark_victim_).Serialize(msg->BeginNestedMessage<::protozero::Message>(334));
  }

  // Field 335: ion_stat
  if (_has_field_[335]) {
    (*ion_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(335));
  }

  // Field 336: ion_buffer_create
  if (_has_field_[336]) {
    (*ion_buffer_create_).Serialize(msg->BeginNestedMessage<::protozero::Message>(336));
  }

  // Field 337: ion_buffer_destroy
  if (_has_field_[337]) {
    (*ion_buffer_destroy_).Serialize(msg->BeginNestedMessage<::protozero::Message>(337));
  }

  // Field 338: scm_call_start
  if (_has_field_[338]) {
    (*scm_call_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(338));
  }

  // Field 339: scm_call_end
  if (_has_field_[339]) {
    (*scm_call_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(339));
  }

  // Field 340: gpu_mem_total
  if (_has_field_[340]) {
    (*gpu_mem_total_).Serialize(msg->BeginNestedMessage<::protozero::Message>(340));
  }

  // Field 341: thermal_temperature
  if (_has_field_[341]) {
    (*thermal_temperature_).Serialize(msg->BeginNestedMessage<::protozero::Message>(341));
  }

  // Field 342: cdev_update
  if (_has_field_[342]) {
    (*cdev_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(342));
  }

  // Field 343: cpuhp_exit
  if (_has_field_[343]) {
    (*cpuhp_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(343));
  }

  // Field 344: cpuhp_multi_enter
  if (_has_field_[344]) {
    (*cpuhp_multi_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(344));
  }

  // Field 345: cpuhp_enter
  if (_has_field_[345]) {
    (*cpuhp_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(345));
  }

  // Field 346: cpuhp_latency
  if (_has_field_[346]) {
    (*cpuhp_latency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(346));
  }

  // Field 347: fastrpc_dma_stat
  if (_has_field_[347]) {
    (*fastrpc_dma_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(347));
  }

  // Field 348: dpu_tracing_mark_write
  if (_has_field_[348]) {
    (*dpu_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(348));
  }

  // Field 349: g2d_tracing_mark_write
  if (_has_field_[349]) {
    (*g2d_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(349));
  }

  // Field 350: mali_tracing_mark_write
  if (_has_field_[350]) {
    (*mali_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(350));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
