// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class SyncPtFtraceEvent;
class SyncPtFtraceEventDefaultTypeInternal;
extern SyncPtFtraceEventDefaultTypeInternal _SyncPtFtraceEvent_default_instance_;
class SyncTimelineFtraceEvent;
class SyncTimelineFtraceEventDefaultTypeInternal;
extern SyncTimelineFtraceEventDefaultTypeInternal _SyncTimelineFtraceEvent_default_instance_;
class SyncWaitFtraceEvent;
class SyncWaitFtraceEventDefaultTypeInternal;
extern SyncWaitFtraceEventDefaultTypeInternal _SyncWaitFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SyncPtFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SyncPtFtraceEvent>(Arena*);
template<> ::perfetto::protos::SyncTimelineFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SyncTimelineFtraceEvent>(Arena*);
template<> ::perfetto::protos::SyncWaitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SyncWaitFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SyncPtFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SyncPtFtraceEvent) */ {
 public:
  SyncPtFtraceEvent();
  virtual ~SyncPtFtraceEvent();

  SyncPtFtraceEvent(const SyncPtFtraceEvent& from);
  SyncPtFtraceEvent(SyncPtFtraceEvent&& from) noexcept
    : SyncPtFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SyncPtFtraceEvent& operator=(const SyncPtFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPtFtraceEvent& operator=(SyncPtFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SyncPtFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPtFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SyncPtFtraceEvent*>(
               &_SyncPtFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPtFtraceEvent& a, SyncPtFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPtFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPtFtraceEvent* New() const final {
    return CreateMaybeMessage<SyncPtFtraceEvent>(nullptr);
  }

  SyncPtFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPtFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SyncPtFtraceEvent& from);
  void MergeFrom(const SyncPtFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncPtFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SyncPtFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimelineFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string timeline = 1;
  bool has_timeline() const;
  void clear_timeline();
  const std::string& timeline() const;
  void set_timeline(const std::string& value);
  void set_timeline(std::string&& value);
  void set_timeline(const char* value);
  void set_timeline(const char* value, size_t size);
  std::string* mutable_timeline();
  std::string* release_timeline();
  void set_allocated_timeline(std::string* timeline);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SyncPtFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto;
};
// -------------------------------------------------------------------

class SyncTimelineFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SyncTimelineFtraceEvent) */ {
 public:
  SyncTimelineFtraceEvent();
  virtual ~SyncTimelineFtraceEvent();

  SyncTimelineFtraceEvent(const SyncTimelineFtraceEvent& from);
  SyncTimelineFtraceEvent(SyncTimelineFtraceEvent&& from) noexcept
    : SyncTimelineFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SyncTimelineFtraceEvent& operator=(const SyncTimelineFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncTimelineFtraceEvent& operator=(SyncTimelineFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SyncTimelineFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncTimelineFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SyncTimelineFtraceEvent*>(
               &_SyncTimelineFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncTimelineFtraceEvent& a, SyncTimelineFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncTimelineFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncTimelineFtraceEvent* New() const final {
    return CreateMaybeMessage<SyncTimelineFtraceEvent>(nullptr);
  }

  SyncTimelineFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncTimelineFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SyncTimelineFtraceEvent& from);
  void MergeFrom(const SyncTimelineFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncTimelineFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SyncTimelineFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SyncTimelineFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto;
};
// -------------------------------------------------------------------

class SyncWaitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SyncWaitFtraceEvent) */ {
 public:
  SyncWaitFtraceEvent();
  virtual ~SyncWaitFtraceEvent();

  SyncWaitFtraceEvent(const SyncWaitFtraceEvent& from);
  SyncWaitFtraceEvent(SyncWaitFtraceEvent&& from) noexcept
    : SyncWaitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SyncWaitFtraceEvent& operator=(const SyncWaitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncWaitFtraceEvent& operator=(SyncWaitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SyncWaitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncWaitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SyncWaitFtraceEvent*>(
               &_SyncWaitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncWaitFtraceEvent& a, SyncWaitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncWaitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncWaitFtraceEvent* New() const final {
    return CreateMaybeMessage<SyncWaitFtraceEvent>(nullptr);
  }

  SyncWaitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncWaitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SyncWaitFtraceEvent& from);
  void MergeFrom(const SyncWaitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncWaitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SyncWaitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kBeginFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 status = 2;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 begin = 3;
  bool has_begin() const;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SyncWaitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPtFtraceEvent

// optional string timeline = 1;
inline bool SyncPtFtraceEvent::has_timeline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncPtFtraceEvent::clear_timeline() {
  timeline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncPtFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncPtFtraceEvent.timeline)
  return timeline_.GetNoArena();
}
inline void SyncPtFtraceEvent::set_timeline(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncPtFtraceEvent.timeline)
}
inline void SyncPtFtraceEvent::set_timeline(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SyncPtFtraceEvent.timeline)
}
inline void SyncPtFtraceEvent::set_timeline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SyncPtFtraceEvent.timeline)
}
inline void SyncPtFtraceEvent::set_timeline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SyncPtFtraceEvent.timeline)
}
inline std::string* SyncPtFtraceEvent::mutable_timeline() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SyncPtFtraceEvent.timeline)
  return timeline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncPtFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SyncPtFtraceEvent.timeline)
  if (!has_timeline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeline_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPtFtraceEvent::set_allocated_timeline(std::string* timeline) {
  if (timeline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SyncPtFtraceEvent.timeline)
}

// optional string value = 2;
inline bool SyncPtFtraceEvent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncPtFtraceEvent::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncPtFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncPtFtraceEvent.value)
  return value_.GetNoArena();
}
inline void SyncPtFtraceEvent::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncPtFtraceEvent.value)
}
inline void SyncPtFtraceEvent::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SyncPtFtraceEvent.value)
}
inline void SyncPtFtraceEvent::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SyncPtFtraceEvent.value)
}
inline void SyncPtFtraceEvent::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SyncPtFtraceEvent.value)
}
inline std::string* SyncPtFtraceEvent::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SyncPtFtraceEvent.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncPtFtraceEvent::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SyncPtFtraceEvent.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPtFtraceEvent::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SyncPtFtraceEvent.value)
}

// -------------------------------------------------------------------

// SyncTimelineFtraceEvent

// optional string name = 1;
inline bool SyncTimelineFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncTimelineFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncTimelineFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncTimelineFtraceEvent.name)
  return name_.GetNoArena();
}
inline void SyncTimelineFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncTimelineFtraceEvent.name)
}
inline void SyncTimelineFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SyncTimelineFtraceEvent.name)
}
inline void SyncTimelineFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SyncTimelineFtraceEvent.name)
}
inline void SyncTimelineFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SyncTimelineFtraceEvent.name)
}
inline std::string* SyncTimelineFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SyncTimelineFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncTimelineFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SyncTimelineFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncTimelineFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SyncTimelineFtraceEvent.name)
}

// optional string value = 2;
inline bool SyncTimelineFtraceEvent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncTimelineFtraceEvent::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncTimelineFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncTimelineFtraceEvent.value)
  return value_.GetNoArena();
}
inline void SyncTimelineFtraceEvent::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncTimelineFtraceEvent.value)
}
inline void SyncTimelineFtraceEvent::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SyncTimelineFtraceEvent.value)
}
inline void SyncTimelineFtraceEvent::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SyncTimelineFtraceEvent.value)
}
inline void SyncTimelineFtraceEvent::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SyncTimelineFtraceEvent.value)
}
inline std::string* SyncTimelineFtraceEvent::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SyncTimelineFtraceEvent.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncTimelineFtraceEvent::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SyncTimelineFtraceEvent.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncTimelineFtraceEvent::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SyncTimelineFtraceEvent.value)
}

// -------------------------------------------------------------------

// SyncWaitFtraceEvent

// optional string name = 1;
inline bool SyncWaitFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncWaitFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncWaitFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncWaitFtraceEvent.name)
  return name_.GetNoArena();
}
inline void SyncWaitFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncWaitFtraceEvent.name)
}
inline void SyncWaitFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SyncWaitFtraceEvent.name)
}
inline void SyncWaitFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SyncWaitFtraceEvent.name)
}
inline void SyncWaitFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SyncWaitFtraceEvent.name)
}
inline std::string* SyncWaitFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SyncWaitFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncWaitFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SyncWaitFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncWaitFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SyncWaitFtraceEvent.name)
}

// optional int32 status = 2;
inline bool SyncWaitFtraceEvent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncWaitFtraceEvent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWaitFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncWaitFtraceEvent.status)
  return status_;
}
inline void SyncWaitFtraceEvent::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncWaitFtraceEvent.status)
}

// optional uint32 begin = 3;
inline bool SyncWaitFtraceEvent::has_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncWaitFtraceEvent::clear_begin() {
  begin_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncWaitFtraceEvent::begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SyncWaitFtraceEvent.begin)
  return begin_;
}
inline void SyncWaitFtraceEvent::set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  begin_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SyncWaitFtraceEvent.begin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto
