// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/mdss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class MdpCmdKickoffFtraceEvent;
class MdpCmdKickoffFtraceEventDefaultTypeInternal;
extern MdpCmdKickoffFtraceEventDefaultTypeInternal _MdpCmdKickoffFtraceEvent_default_instance_;
class MdpCmdPingpongDoneFtraceEvent;
class MdpCmdPingpongDoneFtraceEventDefaultTypeInternal;
extern MdpCmdPingpongDoneFtraceEventDefaultTypeInternal _MdpCmdPingpongDoneFtraceEvent_default_instance_;
class MdpCmdReadptrDoneFtraceEvent;
class MdpCmdReadptrDoneFtraceEventDefaultTypeInternal;
extern MdpCmdReadptrDoneFtraceEventDefaultTypeInternal _MdpCmdReadptrDoneFtraceEvent_default_instance_;
class MdpCmdReleaseBwFtraceEvent;
class MdpCmdReleaseBwFtraceEventDefaultTypeInternal;
extern MdpCmdReleaseBwFtraceEventDefaultTypeInternal _MdpCmdReleaseBwFtraceEvent_default_instance_;
class MdpCmdWaitPingpongFtraceEvent;
class MdpCmdWaitPingpongFtraceEventDefaultTypeInternal;
extern MdpCmdWaitPingpongFtraceEventDefaultTypeInternal _MdpCmdWaitPingpongFtraceEvent_default_instance_;
class MdpCommitFtraceEvent;
class MdpCommitFtraceEventDefaultTypeInternal;
extern MdpCommitFtraceEventDefaultTypeInternal _MdpCommitFtraceEvent_default_instance_;
class MdpCompareBwFtraceEvent;
class MdpCompareBwFtraceEventDefaultTypeInternal;
extern MdpCompareBwFtraceEventDefaultTypeInternal _MdpCompareBwFtraceEvent_default_instance_;
class MdpMisrCrcFtraceEvent;
class MdpMisrCrcFtraceEventDefaultTypeInternal;
extern MdpMisrCrcFtraceEventDefaultTypeInternal _MdpMisrCrcFtraceEvent_default_instance_;
class MdpMixerUpdateFtraceEvent;
class MdpMixerUpdateFtraceEventDefaultTypeInternal;
extern MdpMixerUpdateFtraceEventDefaultTypeInternal _MdpMixerUpdateFtraceEvent_default_instance_;
class MdpPerfPrefillCalcFtraceEvent;
class MdpPerfPrefillCalcFtraceEventDefaultTypeInternal;
extern MdpPerfPrefillCalcFtraceEventDefaultTypeInternal _MdpPerfPrefillCalcFtraceEvent_default_instance_;
class MdpPerfSetOtFtraceEvent;
class MdpPerfSetOtFtraceEventDefaultTypeInternal;
extern MdpPerfSetOtFtraceEventDefaultTypeInternal _MdpPerfSetOtFtraceEvent_default_instance_;
class MdpPerfSetPanicLutsFtraceEvent;
class MdpPerfSetPanicLutsFtraceEventDefaultTypeInternal;
extern MdpPerfSetPanicLutsFtraceEventDefaultTypeInternal _MdpPerfSetPanicLutsFtraceEvent_default_instance_;
class MdpPerfSetQosLutsFtraceEvent;
class MdpPerfSetQosLutsFtraceEventDefaultTypeInternal;
extern MdpPerfSetQosLutsFtraceEventDefaultTypeInternal _MdpPerfSetQosLutsFtraceEvent_default_instance_;
class MdpPerfSetWmLevelsFtraceEvent;
class MdpPerfSetWmLevelsFtraceEventDefaultTypeInternal;
extern MdpPerfSetWmLevelsFtraceEventDefaultTypeInternal _MdpPerfSetWmLevelsFtraceEvent_default_instance_;
class MdpPerfUpdateBusFtraceEvent;
class MdpPerfUpdateBusFtraceEventDefaultTypeInternal;
extern MdpPerfUpdateBusFtraceEventDefaultTypeInternal _MdpPerfUpdateBusFtraceEvent_default_instance_;
class MdpSsppChangeFtraceEvent;
class MdpSsppChangeFtraceEventDefaultTypeInternal;
extern MdpSsppChangeFtraceEventDefaultTypeInternal _MdpSsppChangeFtraceEvent_default_instance_;
class MdpSsppSetFtraceEvent;
class MdpSsppSetFtraceEventDefaultTypeInternal;
extern MdpSsppSetFtraceEventDefaultTypeInternal _MdpSsppSetFtraceEvent_default_instance_;
class MdpTraceCounterFtraceEvent;
class MdpTraceCounterFtraceEventDefaultTypeInternal;
extern MdpTraceCounterFtraceEventDefaultTypeInternal _MdpTraceCounterFtraceEvent_default_instance_;
class MdpVideoUnderrunDoneFtraceEvent;
class MdpVideoUnderrunDoneFtraceEventDefaultTypeInternal;
extern MdpVideoUnderrunDoneFtraceEventDefaultTypeInternal _MdpVideoUnderrunDoneFtraceEvent_default_instance_;
class RotatorBwAoAsContextFtraceEvent;
class RotatorBwAoAsContextFtraceEventDefaultTypeInternal;
extern RotatorBwAoAsContextFtraceEventDefaultTypeInternal _RotatorBwAoAsContextFtraceEvent_default_instance_;
class TracingMarkWriteFtraceEvent;
class TracingMarkWriteFtraceEventDefaultTypeInternal;
extern TracingMarkWriteFtraceEventDefaultTypeInternal _TracingMarkWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::MdpCmdKickoffFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdKickoffFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdPingpongDoneFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdReadptrDoneFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdReleaseBwFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdWaitPingpongFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpCommitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCommitFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpCompareBwFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCompareBwFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpMisrCrcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpMisrCrcFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpMixerUpdateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpMixerUpdateFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfPrefillCalcFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpPerfSetOtFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetOtFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetQosLutsFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfUpdateBusFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpSsppChangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpSsppChangeFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpSsppSetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpSsppSetFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpTraceCounterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpTraceCounterFtraceEvent>(Arena*);
template<> ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent>(Arena*);
template<> ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RotatorBwAoAsContextFtraceEvent>(Arena*);
template<> ::perfetto::protos::TracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TracingMarkWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class MdpCmdKickoffFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdKickoffFtraceEvent) */ {
 public:
  MdpCmdKickoffFtraceEvent();
  virtual ~MdpCmdKickoffFtraceEvent();

  MdpCmdKickoffFtraceEvent(const MdpCmdKickoffFtraceEvent& from);
  MdpCmdKickoffFtraceEvent(MdpCmdKickoffFtraceEvent&& from) noexcept
    : MdpCmdKickoffFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdKickoffFtraceEvent& operator=(const MdpCmdKickoffFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdKickoffFtraceEvent& operator=(MdpCmdKickoffFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCmdKickoffFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCmdKickoffFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdKickoffFtraceEvent*>(
               &_MdpCmdKickoffFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MdpCmdKickoffFtraceEvent& a, MdpCmdKickoffFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdKickoffFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCmdKickoffFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCmdKickoffFtraceEvent>(nullptr);
  }

  MdpCmdKickoffFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCmdKickoffFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCmdKickoffFtraceEvent& from);
  void MergeFrom(const MdpCmdKickoffFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCmdKickoffFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCmdKickoffFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kKickoffCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num() const;
  void set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 kickoff_cnt = 2;
  bool has_kickoff_cnt() const;
  void clear_kickoff_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 kickoff_cnt() const;
  void set_kickoff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdKickoffFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 kickoff_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpCommitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCommitFtraceEvent) */ {
 public:
  MdpCommitFtraceEvent();
  virtual ~MdpCommitFtraceEvent();

  MdpCommitFtraceEvent(const MdpCommitFtraceEvent& from);
  MdpCommitFtraceEvent(MdpCommitFtraceEvent&& from) noexcept
    : MdpCommitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCommitFtraceEvent& operator=(const MdpCommitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCommitFtraceEvent& operator=(MdpCommitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCommitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCommitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCommitFtraceEvent*>(
               &_MdpCommitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MdpCommitFtraceEvent& a, MdpCommitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCommitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCommitFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCommitFtraceEvent>(nullptr);
  }

  MdpCommitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCommitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCommitFtraceEvent& from);
  void MergeFrom(const MdpCommitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCommitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCommitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kPlayCntFieldNumber = 2,
    kBandwidthFieldNumber = 4,
    kClkRateFieldNumber = 3,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 play_cnt = 2;
  bool has_play_cnt() const;
  void clear_play_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_cnt() const;
  void set_play_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 bandwidth = 4;
  bool has_bandwidth() const;
  void clear_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::uint64 bandwidth() const;
  void set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 clk_rate = 3;
  bool has_clk_rate() const;
  void clear_clk_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 clk_rate() const;
  void set_clk_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCommitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clk_rate_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpPerfSetOtFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetOtFtraceEvent) */ {
 public:
  MdpPerfSetOtFtraceEvent();
  virtual ~MdpPerfSetOtFtraceEvent();

  MdpPerfSetOtFtraceEvent(const MdpPerfSetOtFtraceEvent& from);
  MdpPerfSetOtFtraceEvent(MdpPerfSetOtFtraceEvent&& from) noexcept
    : MdpPerfSetOtFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetOtFtraceEvent& operator=(const MdpPerfSetOtFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetOtFtraceEvent& operator=(MdpPerfSetOtFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpPerfSetOtFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpPerfSetOtFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetOtFtraceEvent*>(
               &_MdpPerfSetOtFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MdpPerfSetOtFtraceEvent& a, MdpPerfSetOtFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetOtFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpPerfSetOtFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpPerfSetOtFtraceEvent>(nullptr);
  }

  MdpPerfSetOtFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpPerfSetOtFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpPerfSetOtFtraceEvent& from);
  void MergeFrom(const MdpPerfSetOtFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpPerfSetOtFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpPerfSetOtFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kXinIdFieldNumber = 2,
    kRdLimFieldNumber = 3,
    kIsVbifRtFieldNumber = 4,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum() const;
  void set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 xin_id = 2;
  bool has_xin_id() const;
  void clear_xin_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 xin_id() const;
  void set_xin_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rd_lim = 3;
  bool has_rd_lim() const;
  void clear_rd_lim();
  ::PROTOBUF_NAMESPACE_ID::uint32 rd_lim() const;
  void set_rd_lim(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 is_vbif_rt = 4;
  bool has_is_vbif_rt() const;
  void clear_is_vbif_rt();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_vbif_rt() const;
  void set_is_vbif_rt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetOtFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xin_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rd_lim_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_vbif_rt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpSsppChangeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpSsppChangeFtraceEvent) */ {
 public:
  MdpSsppChangeFtraceEvent();
  virtual ~MdpSsppChangeFtraceEvent();

  MdpSsppChangeFtraceEvent(const MdpSsppChangeFtraceEvent& from);
  MdpSsppChangeFtraceEvent(MdpSsppChangeFtraceEvent&& from) noexcept
    : MdpSsppChangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpSsppChangeFtraceEvent& operator=(const MdpSsppChangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpSsppChangeFtraceEvent& operator=(MdpSsppChangeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpSsppChangeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpSsppChangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpSsppChangeFtraceEvent*>(
               &_MdpSsppChangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MdpSsppChangeFtraceEvent& a, MdpSsppChangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpSsppChangeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpSsppChangeFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpSsppChangeFtraceEvent>(nullptr);
  }

  MdpSsppChangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpSsppChangeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpSsppChangeFtraceEvent& from);
  void MergeFrom(const MdpSsppChangeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpSsppChangeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpSsppChangeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kPlayCntFieldNumber = 2,
    kMixerFieldNumber = 3,
    kStageFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kFormatFieldNumber = 6,
    kImgWFieldNumber = 7,
    kImgHFieldNumber = 8,
    kSrcXFieldNumber = 9,
    kSrcYFieldNumber = 10,
    kSrcWFieldNumber = 11,
    kSrcHFieldNumber = 12,
    kDstXFieldNumber = 13,
    kDstYFieldNumber = 14,
    kDstWFieldNumber = 15,
    kDstHFieldNumber = 16,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 play_cnt = 2;
  bool has_play_cnt() const;
  void clear_play_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_cnt() const;
  void set_play_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mixer = 3;
  bool has_mixer() const;
  void clear_mixer();
  ::PROTOBUF_NAMESPACE_ID::uint32 mixer() const;
  void set_mixer(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 stage = 4;
  bool has_stage() const;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::uint32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 format = 6;
  bool has_format() const;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 img_w = 7;
  bool has_img_w() const;
  void clear_img_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w() const;
  void set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 img_h = 8;
  bool has_img_h() const;
  void clear_img_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h() const;
  void set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_x = 9;
  bool has_src_x() const;
  void clear_src_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_x() const;
  void set_src_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_y = 10;
  bool has_src_y() const;
  void clear_src_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_y() const;
  void set_src_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_w = 11;
  bool has_src_w() const;
  void clear_src_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_w() const;
  void set_src_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_h = 12;
  bool has_src_h() const;
  void clear_src_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_h() const;
  void set_src_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_x = 13;
  bool has_dst_x() const;
  void clear_dst_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_x() const;
  void set_dst_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_y = 14;
  bool has_dst_y() const;
  void clear_dst_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_y() const;
  void set_dst_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_w = 15;
  bool has_dst_w() const;
  void clear_dst_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_w() const;
  void set_dst_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_h = 16;
  bool has_dst_h() const;
  void clear_dst_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_h() const;
  void set_dst_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpSsppChangeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mixer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_h_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class TracingMarkWriteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingMarkWriteFtraceEvent) */ {
 public:
  TracingMarkWriteFtraceEvent();
  virtual ~TracingMarkWriteFtraceEvent();

  TracingMarkWriteFtraceEvent(const TracingMarkWriteFtraceEvent& from);
  TracingMarkWriteFtraceEvent(TracingMarkWriteFtraceEvent&& from) noexcept
    : TracingMarkWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TracingMarkWriteFtraceEvent& operator=(const TracingMarkWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingMarkWriteFtraceEvent& operator=(TracingMarkWriteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingMarkWriteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingMarkWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TracingMarkWriteFtraceEvent*>(
               &_TracingMarkWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TracingMarkWriteFtraceEvent& a, TracingMarkWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingMarkWriteFtraceEvent* New() const final {
    return CreateMaybeMessage<TracingMarkWriteFtraceEvent>(nullptr);
  }

  TracingMarkWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingMarkWriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingMarkWriteFtraceEvent& from);
  void MergeFrom(const TracingMarkWriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingMarkWriteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingMarkWriteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kTraceBeginFieldNumber = 3,
  };
  // optional string trace_name = 2;
  bool has_trace_name() const;
  void clear_trace_name();
  const std::string& trace_name() const;
  void set_trace_name(const std::string& value);
  void set_trace_name(std::string&& value);
  void set_trace_name(const char* value);
  void set_trace_name(const char* value, size_t size);
  std::string* mutable_trace_name();
  std::string* release_trace_name();
  void set_allocated_trace_name(std::string* trace_name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 trace_begin = 3;
  bool has_trace_begin() const;
  void clear_trace_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_begin() const;
  void set_trace_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingMarkWriteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_begin_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpCmdPingpongDoneFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdPingpongDoneFtraceEvent) */ {
 public:
  MdpCmdPingpongDoneFtraceEvent();
  virtual ~MdpCmdPingpongDoneFtraceEvent();

  MdpCmdPingpongDoneFtraceEvent(const MdpCmdPingpongDoneFtraceEvent& from);
  MdpCmdPingpongDoneFtraceEvent(MdpCmdPingpongDoneFtraceEvent&& from) noexcept
    : MdpCmdPingpongDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdPingpongDoneFtraceEvent& operator=(const MdpCmdPingpongDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdPingpongDoneFtraceEvent& operator=(MdpCmdPingpongDoneFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCmdPingpongDoneFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCmdPingpongDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdPingpongDoneFtraceEvent*>(
               &_MdpCmdPingpongDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MdpCmdPingpongDoneFtraceEvent& a, MdpCmdPingpongDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdPingpongDoneFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCmdPingpongDoneFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCmdPingpongDoneFtraceEvent>(nullptr);
  }

  MdpCmdPingpongDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCmdPingpongDoneFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCmdPingpongDoneFtraceEvent& from);
  void MergeFrom(const MdpCmdPingpongDoneFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCmdPingpongDoneFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCmdPingpongDoneFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kIntfNumFieldNumber = 2,
    kPpNumFieldNumber = 3,
    kKoffCntFieldNumber = 4,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num() const;
  void set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 intf_num = 2;
  bool has_intf_num() const;
  void clear_intf_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 intf_num() const;
  void set_intf_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pp_num = 3;
  bool has_pp_num() const;
  void clear_pp_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 pp_num() const;
  void set_pp_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 koff_cnt = 4;
  bool has_koff_cnt() const;
  void clear_koff_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 koff_cnt() const;
  void set_koff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 intf_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pp_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 koff_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpCompareBwFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCompareBwFtraceEvent) */ {
 public:
  MdpCompareBwFtraceEvent();
  virtual ~MdpCompareBwFtraceEvent();

  MdpCompareBwFtraceEvent(const MdpCompareBwFtraceEvent& from);
  MdpCompareBwFtraceEvent(MdpCompareBwFtraceEvent&& from) noexcept
    : MdpCompareBwFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCompareBwFtraceEvent& operator=(const MdpCompareBwFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCompareBwFtraceEvent& operator=(MdpCompareBwFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCompareBwFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCompareBwFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCompareBwFtraceEvent*>(
               &_MdpCompareBwFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MdpCompareBwFtraceEvent& a, MdpCompareBwFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCompareBwFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCompareBwFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCompareBwFtraceEvent>(nullptr);
  }

  MdpCompareBwFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCompareBwFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCompareBwFtraceEvent& from);
  void MergeFrom(const MdpCompareBwFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCompareBwFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCompareBwFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAbFieldNumber = 1,
    kNewIbFieldNumber = 2,
    kNewWbFieldNumber = 3,
    kOldAbFieldNumber = 4,
    kOldIbFieldNumber = 5,
    kOldWbFieldNumber = 6,
    kParamsChangedFieldNumber = 7,
    kUpdateBwFieldNumber = 8,
  };
  // optional uint64 new_ab = 1;
  bool has_new_ab() const;
  void clear_new_ab();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_ab() const;
  void set_new_ab(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 new_ib = 2;
  bool has_new_ib() const;
  void clear_new_ib();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_ib() const;
  void set_new_ib(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 new_wb = 3;
  bool has_new_wb() const;
  void clear_new_wb();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_wb() const;
  void set_new_wb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 old_ab = 4;
  bool has_old_ab() const;
  void clear_old_ab();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_ab() const;
  void set_old_ab(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 old_ib = 5;
  bool has_old_ib() const;
  void clear_old_ib();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_ib() const;
  void set_old_ib(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 old_wb = 6;
  bool has_old_wb() const;
  void clear_old_wb();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_wb() const;
  void set_old_wb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 params_changed = 7;
  bool has_params_changed() const;
  void clear_params_changed();
  ::PROTOBUF_NAMESPACE_ID::uint32 params_changed() const;
  void set_params_changed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 update_bw = 8;
  bool has_update_bw() const;
  void clear_update_bw();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_bw() const;
  void set_update_bw(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCompareBwFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_ab_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_ib_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_wb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_ab_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_ib_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_wb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 params_changed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_bw_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpPerfSetPanicLutsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent) */ {
 public:
  MdpPerfSetPanicLutsFtraceEvent();
  virtual ~MdpPerfSetPanicLutsFtraceEvent();

  MdpPerfSetPanicLutsFtraceEvent(const MdpPerfSetPanicLutsFtraceEvent& from);
  MdpPerfSetPanicLutsFtraceEvent(MdpPerfSetPanicLutsFtraceEvent&& from) noexcept
    : MdpPerfSetPanicLutsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetPanicLutsFtraceEvent& operator=(const MdpPerfSetPanicLutsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetPanicLutsFtraceEvent& operator=(MdpPerfSetPanicLutsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpPerfSetPanicLutsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpPerfSetPanicLutsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetPanicLutsFtraceEvent*>(
               &_MdpPerfSetPanicLutsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MdpPerfSetPanicLutsFtraceEvent& a, MdpPerfSetPanicLutsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetPanicLutsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpPerfSetPanicLutsFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpPerfSetPanicLutsFtraceEvent>(nullptr);
  }

  MdpPerfSetPanicLutsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpPerfSetPanicLutsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpPerfSetPanicLutsFtraceEvent& from);
  void MergeFrom(const MdpPerfSetPanicLutsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpPerfSetPanicLutsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpPerfSetPanicLutsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kFmtFieldNumber = 2,
    kModeFieldNumber = 3,
    kPanicLutFieldNumber = 4,
    kRobustLutFieldNumber = 5,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum() const;
  void set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 fmt = 2;
  bool has_fmt() const;
  void clear_fmt();
  ::PROTOBUF_NAMESPACE_ID::uint32 fmt() const;
  void set_fmt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 panic_lut = 4;
  bool has_panic_lut() const;
  void clear_panic_lut();
  ::PROTOBUF_NAMESPACE_ID::uint32 panic_lut() const;
  void set_panic_lut(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 robust_lut = 5;
  bool has_robust_lut() const;
  void clear_robust_lut();
  ::PROTOBUF_NAMESPACE_ID::uint32 robust_lut() const;
  void set_robust_lut(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fmt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 panic_lut_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robust_lut_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpSsppSetFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpSsppSetFtraceEvent) */ {
 public:
  MdpSsppSetFtraceEvent();
  virtual ~MdpSsppSetFtraceEvent();

  MdpSsppSetFtraceEvent(const MdpSsppSetFtraceEvent& from);
  MdpSsppSetFtraceEvent(MdpSsppSetFtraceEvent&& from) noexcept
    : MdpSsppSetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpSsppSetFtraceEvent& operator=(const MdpSsppSetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpSsppSetFtraceEvent& operator=(MdpSsppSetFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpSsppSetFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpSsppSetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpSsppSetFtraceEvent*>(
               &_MdpSsppSetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MdpSsppSetFtraceEvent& a, MdpSsppSetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpSsppSetFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpSsppSetFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpSsppSetFtraceEvent>(nullptr);
  }

  MdpSsppSetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpSsppSetFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpSsppSetFtraceEvent& from);
  void MergeFrom(const MdpSsppSetFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpSsppSetFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpSsppSetFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kPlayCntFieldNumber = 2,
    kMixerFieldNumber = 3,
    kStageFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kFormatFieldNumber = 6,
    kImgWFieldNumber = 7,
    kImgHFieldNumber = 8,
    kSrcXFieldNumber = 9,
    kSrcYFieldNumber = 10,
    kSrcWFieldNumber = 11,
    kSrcHFieldNumber = 12,
    kDstXFieldNumber = 13,
    kDstYFieldNumber = 14,
    kDstWFieldNumber = 15,
    kDstHFieldNumber = 16,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 play_cnt = 2;
  bool has_play_cnt() const;
  void clear_play_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_cnt() const;
  void set_play_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mixer = 3;
  bool has_mixer() const;
  void clear_mixer();
  ::PROTOBUF_NAMESPACE_ID::uint32 mixer() const;
  void set_mixer(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 stage = 4;
  bool has_stage() const;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::uint32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 format = 6;
  bool has_format() const;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 img_w = 7;
  bool has_img_w() const;
  void clear_img_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w() const;
  void set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 img_h = 8;
  bool has_img_h() const;
  void clear_img_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h() const;
  void set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_x = 9;
  bool has_src_x() const;
  void clear_src_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_x() const;
  void set_src_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_y = 10;
  bool has_src_y() const;
  void clear_src_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_y() const;
  void set_src_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_w = 11;
  bool has_src_w() const;
  void clear_src_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_w() const;
  void set_src_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 src_h = 12;
  bool has_src_h() const;
  void clear_src_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_h() const;
  void set_src_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_x = 13;
  bool has_dst_x() const;
  void clear_dst_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_x() const;
  void set_dst_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_y = 14;
  bool has_dst_y() const;
  void clear_dst_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_y() const;
  void set_dst_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_w = 15;
  bool has_dst_w() const;
  void clear_dst_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_w() const;
  void set_dst_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 dst_h = 16;
  bool has_dst_h() const;
  void clear_dst_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_h() const;
  void set_dst_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpSsppSetFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mixer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_h_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpCmdReadptrDoneFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdReadptrDoneFtraceEvent) */ {
 public:
  MdpCmdReadptrDoneFtraceEvent();
  virtual ~MdpCmdReadptrDoneFtraceEvent();

  MdpCmdReadptrDoneFtraceEvent(const MdpCmdReadptrDoneFtraceEvent& from);
  MdpCmdReadptrDoneFtraceEvent(MdpCmdReadptrDoneFtraceEvent&& from) noexcept
    : MdpCmdReadptrDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdReadptrDoneFtraceEvent& operator=(const MdpCmdReadptrDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdReadptrDoneFtraceEvent& operator=(MdpCmdReadptrDoneFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCmdReadptrDoneFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCmdReadptrDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdReadptrDoneFtraceEvent*>(
               &_MdpCmdReadptrDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MdpCmdReadptrDoneFtraceEvent& a, MdpCmdReadptrDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdReadptrDoneFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCmdReadptrDoneFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCmdReadptrDoneFtraceEvent>(nullptr);
  }

  MdpCmdReadptrDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCmdReadptrDoneFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCmdReadptrDoneFtraceEvent& from);
  void MergeFrom(const MdpCmdReadptrDoneFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCmdReadptrDoneFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCmdReadptrDoneFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kKoffCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num() const;
  void set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 koff_cnt = 2;
  bool has_koff_cnt() const;
  void clear_koff_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 koff_cnt() const;
  void set_koff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 koff_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpMisrCrcFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpMisrCrcFtraceEvent) */ {
 public:
  MdpMisrCrcFtraceEvent();
  virtual ~MdpMisrCrcFtraceEvent();

  MdpMisrCrcFtraceEvent(const MdpMisrCrcFtraceEvent& from);
  MdpMisrCrcFtraceEvent(MdpMisrCrcFtraceEvent&& from) noexcept
    : MdpMisrCrcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpMisrCrcFtraceEvent& operator=(const MdpMisrCrcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpMisrCrcFtraceEvent& operator=(MdpMisrCrcFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpMisrCrcFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpMisrCrcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpMisrCrcFtraceEvent*>(
               &_MdpMisrCrcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MdpMisrCrcFtraceEvent& a, MdpMisrCrcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpMisrCrcFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpMisrCrcFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpMisrCrcFtraceEvent>(nullptr);
  }

  MdpMisrCrcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpMisrCrcFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpMisrCrcFtraceEvent& from);
  void MergeFrom(const MdpMisrCrcFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpMisrCrcFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpMisrCrcFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kVsyncCntFieldNumber = 2,
    kCrcFieldNumber = 3,
  };
  // optional uint32 block_id = 1;
  bool has_block_id() const;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 vsync_cnt = 2;
  bool has_vsync_cnt() const;
  void clear_vsync_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 vsync_cnt() const;
  void set_vsync_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 crc = 3;
  bool has_crc() const;
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpMisrCrcFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vsync_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpPerfSetQosLutsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetQosLutsFtraceEvent) */ {
 public:
  MdpPerfSetQosLutsFtraceEvent();
  virtual ~MdpPerfSetQosLutsFtraceEvent();

  MdpPerfSetQosLutsFtraceEvent(const MdpPerfSetQosLutsFtraceEvent& from);
  MdpPerfSetQosLutsFtraceEvent(MdpPerfSetQosLutsFtraceEvent&& from) noexcept
    : MdpPerfSetQosLutsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetQosLutsFtraceEvent& operator=(const MdpPerfSetQosLutsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetQosLutsFtraceEvent& operator=(MdpPerfSetQosLutsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpPerfSetQosLutsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpPerfSetQosLutsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetQosLutsFtraceEvent*>(
               &_MdpPerfSetQosLutsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MdpPerfSetQosLutsFtraceEvent& a, MdpPerfSetQosLutsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetQosLutsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpPerfSetQosLutsFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpPerfSetQosLutsFtraceEvent>(nullptr);
  }

  MdpPerfSetQosLutsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpPerfSetQosLutsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpPerfSetQosLutsFtraceEvent& from);
  void MergeFrom(const MdpPerfSetQosLutsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpPerfSetQosLutsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpPerfSetQosLutsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kFmtFieldNumber = 2,
    kIntfFieldNumber = 3,
    kRotFieldNumber = 4,
    kFlFieldNumber = 5,
    kLutFieldNumber = 6,
    kLinearFieldNumber = 7,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum() const;
  void set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 fmt = 2;
  bool has_fmt() const;
  void clear_fmt();
  ::PROTOBUF_NAMESPACE_ID::uint32 fmt() const;
  void set_fmt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 intf = 3;
  bool has_intf() const;
  void clear_intf();
  ::PROTOBUF_NAMESPACE_ID::uint32 intf() const;
  void set_intf(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rot = 4;
  bool has_rot() const;
  void clear_rot();
  ::PROTOBUF_NAMESPACE_ID::uint32 rot() const;
  void set_rot(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 fl = 5;
  bool has_fl() const;
  void clear_fl();
  ::PROTOBUF_NAMESPACE_ID::uint32 fl() const;
  void set_fl(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 lut = 6;
  bool has_lut() const;
  void clear_lut();
  ::PROTOBUF_NAMESPACE_ID::uint32 lut() const;
  void set_lut(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 linear = 7;
  bool has_linear() const;
  void clear_linear();
  ::PROTOBUF_NAMESPACE_ID::uint32 linear() const;
  void set_linear(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fmt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 intf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lut_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linear_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpTraceCounterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpTraceCounterFtraceEvent) */ {
 public:
  MdpTraceCounterFtraceEvent();
  virtual ~MdpTraceCounterFtraceEvent();

  MdpTraceCounterFtraceEvent(const MdpTraceCounterFtraceEvent& from);
  MdpTraceCounterFtraceEvent(MdpTraceCounterFtraceEvent&& from) noexcept
    : MdpTraceCounterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpTraceCounterFtraceEvent& operator=(const MdpTraceCounterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpTraceCounterFtraceEvent& operator=(MdpTraceCounterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpTraceCounterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpTraceCounterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpTraceCounterFtraceEvent*>(
               &_MdpTraceCounterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MdpTraceCounterFtraceEvent& a, MdpTraceCounterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpTraceCounterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpTraceCounterFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpTraceCounterFtraceEvent>(nullptr);
  }

  MdpTraceCounterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpTraceCounterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpTraceCounterFtraceEvent& from);
  void MergeFrom(const MdpTraceCounterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpTraceCounterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpTraceCounterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kValueFieldNumber = 3,
  };
  // optional string counter_name = 2;
  bool has_counter_name() const;
  void clear_counter_name();
  const std::string& counter_name() const;
  void set_counter_name(const std::string& value);
  void set_counter_name(std::string&& value);
  void set_counter_name(const char* value);
  void set_counter_name(const char* value, size_t size);
  std::string* mutable_counter_name();
  std::string* release_counter_name();
  void set_allocated_counter_name(std::string* counter_name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 value = 3;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpTraceCounterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpCmdReleaseBwFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdReleaseBwFtraceEvent) */ {
 public:
  MdpCmdReleaseBwFtraceEvent();
  virtual ~MdpCmdReleaseBwFtraceEvent();

  MdpCmdReleaseBwFtraceEvent(const MdpCmdReleaseBwFtraceEvent& from);
  MdpCmdReleaseBwFtraceEvent(MdpCmdReleaseBwFtraceEvent&& from) noexcept
    : MdpCmdReleaseBwFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdReleaseBwFtraceEvent& operator=(const MdpCmdReleaseBwFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdReleaseBwFtraceEvent& operator=(MdpCmdReleaseBwFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCmdReleaseBwFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCmdReleaseBwFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdReleaseBwFtraceEvent*>(
               &_MdpCmdReleaseBwFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MdpCmdReleaseBwFtraceEvent& a, MdpCmdReleaseBwFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdReleaseBwFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCmdReleaseBwFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCmdReleaseBwFtraceEvent>(nullptr);
  }

  MdpCmdReleaseBwFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCmdReleaseBwFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCmdReleaseBwFtraceEvent& from);
  void MergeFrom(const MdpCmdReleaseBwFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCmdReleaseBwFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCmdReleaseBwFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num() const;
  void set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpMixerUpdateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpMixerUpdateFtraceEvent) */ {
 public:
  MdpMixerUpdateFtraceEvent();
  virtual ~MdpMixerUpdateFtraceEvent();

  MdpMixerUpdateFtraceEvent(const MdpMixerUpdateFtraceEvent& from);
  MdpMixerUpdateFtraceEvent(MdpMixerUpdateFtraceEvent&& from) noexcept
    : MdpMixerUpdateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpMixerUpdateFtraceEvent& operator=(const MdpMixerUpdateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpMixerUpdateFtraceEvent& operator=(MdpMixerUpdateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpMixerUpdateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpMixerUpdateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpMixerUpdateFtraceEvent*>(
               &_MdpMixerUpdateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MdpMixerUpdateFtraceEvent& a, MdpMixerUpdateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpMixerUpdateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpMixerUpdateFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpMixerUpdateFtraceEvent>(nullptr);
  }

  MdpMixerUpdateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpMixerUpdateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpMixerUpdateFtraceEvent& from);
  void MergeFrom(const MdpMixerUpdateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpMixerUpdateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpMixerUpdateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMixerNumFieldNumber = 1,
  };
  // optional uint32 mixer_num = 1;
  bool has_mixer_num() const;
  void clear_mixer_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 mixer_num() const;
  void set_mixer_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpMixerUpdateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mixer_num_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpPerfSetWmLevelsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent) */ {
 public:
  MdpPerfSetWmLevelsFtraceEvent();
  virtual ~MdpPerfSetWmLevelsFtraceEvent();

  MdpPerfSetWmLevelsFtraceEvent(const MdpPerfSetWmLevelsFtraceEvent& from);
  MdpPerfSetWmLevelsFtraceEvent(MdpPerfSetWmLevelsFtraceEvent&& from) noexcept
    : MdpPerfSetWmLevelsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetWmLevelsFtraceEvent& operator=(const MdpPerfSetWmLevelsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetWmLevelsFtraceEvent& operator=(MdpPerfSetWmLevelsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpPerfSetWmLevelsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpPerfSetWmLevelsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetWmLevelsFtraceEvent*>(
               &_MdpPerfSetWmLevelsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MdpPerfSetWmLevelsFtraceEvent& a, MdpPerfSetWmLevelsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetWmLevelsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpPerfSetWmLevelsFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpPerfSetWmLevelsFtraceEvent>(nullptr);
  }

  MdpPerfSetWmLevelsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpPerfSetWmLevelsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpPerfSetWmLevelsFtraceEvent& from);
  void MergeFrom(const MdpPerfSetWmLevelsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpPerfSetWmLevelsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpPerfSetWmLevelsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kUseSpaceFieldNumber = 2,
    kPriorityBytesFieldNumber = 3,
    kWm0FieldNumber = 4,
    kWm1FieldNumber = 5,
    kWm2FieldNumber = 6,
    kMbCntFieldNumber = 7,
    kMbSizeFieldNumber = 8,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum() const;
  void set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 use_space = 2;
  bool has_use_space() const;
  void clear_use_space();
  ::PROTOBUF_NAMESPACE_ID::uint32 use_space() const;
  void set_use_space(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 priority_bytes = 3;
  bool has_priority_bytes() const;
  void clear_priority_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_bytes() const;
  void set_priority_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 wm0 = 4;
  bool has_wm0() const;
  void clear_wm0();
  ::PROTOBUF_NAMESPACE_ID::uint32 wm0() const;
  void set_wm0(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 wm1 = 5;
  bool has_wm1() const;
  void clear_wm1();
  ::PROTOBUF_NAMESPACE_ID::uint32 wm1() const;
  void set_wm1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 wm2 = 6;
  bool has_wm2() const;
  void clear_wm2();
  ::PROTOBUF_NAMESPACE_ID::uint32 wm2() const;
  void set_wm2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mb_cnt = 7;
  bool has_mb_cnt() const;
  void clear_mb_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 mb_cnt() const;
  void set_mb_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mb_size = 8;
  bool has_mb_size() const;
  void clear_mb_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 mb_size() const;
  void set_mb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 use_space_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wm0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wm1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wm2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mb_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mb_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpVideoUnderrunDoneFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent) */ {
 public:
  MdpVideoUnderrunDoneFtraceEvent();
  virtual ~MdpVideoUnderrunDoneFtraceEvent();

  MdpVideoUnderrunDoneFtraceEvent(const MdpVideoUnderrunDoneFtraceEvent& from);
  MdpVideoUnderrunDoneFtraceEvent(MdpVideoUnderrunDoneFtraceEvent&& from) noexcept
    : MdpVideoUnderrunDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpVideoUnderrunDoneFtraceEvent& operator=(const MdpVideoUnderrunDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpVideoUnderrunDoneFtraceEvent& operator=(MdpVideoUnderrunDoneFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpVideoUnderrunDoneFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpVideoUnderrunDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpVideoUnderrunDoneFtraceEvent*>(
               &_MdpVideoUnderrunDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MdpVideoUnderrunDoneFtraceEvent& a, MdpVideoUnderrunDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpVideoUnderrunDoneFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpVideoUnderrunDoneFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpVideoUnderrunDoneFtraceEvent>(nullptr);
  }

  MdpVideoUnderrunDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpVideoUnderrunDoneFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpVideoUnderrunDoneFtraceEvent& from);
  void MergeFrom(const MdpVideoUnderrunDoneFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpVideoUnderrunDoneFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpVideoUnderrunDoneFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kUnderrunCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num() const;
  void set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 underrun_cnt = 2;
  bool has_underrun_cnt() const;
  void clear_underrun_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 underrun_cnt() const;
  void set_underrun_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 underrun_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpCmdWaitPingpongFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdWaitPingpongFtraceEvent) */ {
 public:
  MdpCmdWaitPingpongFtraceEvent();
  virtual ~MdpCmdWaitPingpongFtraceEvent();

  MdpCmdWaitPingpongFtraceEvent(const MdpCmdWaitPingpongFtraceEvent& from);
  MdpCmdWaitPingpongFtraceEvent(MdpCmdWaitPingpongFtraceEvent&& from) noexcept
    : MdpCmdWaitPingpongFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdWaitPingpongFtraceEvent& operator=(const MdpCmdWaitPingpongFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdWaitPingpongFtraceEvent& operator=(MdpCmdWaitPingpongFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpCmdWaitPingpongFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpCmdWaitPingpongFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdWaitPingpongFtraceEvent*>(
               &_MdpCmdWaitPingpongFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MdpCmdWaitPingpongFtraceEvent& a, MdpCmdWaitPingpongFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdWaitPingpongFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpCmdWaitPingpongFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpCmdWaitPingpongFtraceEvent>(nullptr);
  }

  MdpCmdWaitPingpongFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpCmdWaitPingpongFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpCmdWaitPingpongFtraceEvent& from);
  void MergeFrom(const MdpCmdWaitPingpongFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpCmdWaitPingpongFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpCmdWaitPingpongFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kKickoffCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num() const;
  void set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 kickoff_cnt = 2;
  bool has_kickoff_cnt() const;
  void clear_kickoff_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 kickoff_cnt() const;
  void set_kickoff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctl_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 kickoff_cnt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpPerfPrefillCalcFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfPrefillCalcFtraceEvent) */ {
 public:
  MdpPerfPrefillCalcFtraceEvent();
  virtual ~MdpPerfPrefillCalcFtraceEvent();

  MdpPerfPrefillCalcFtraceEvent(const MdpPerfPrefillCalcFtraceEvent& from);
  MdpPerfPrefillCalcFtraceEvent(MdpPerfPrefillCalcFtraceEvent&& from) noexcept
    : MdpPerfPrefillCalcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfPrefillCalcFtraceEvent& operator=(const MdpPerfPrefillCalcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfPrefillCalcFtraceEvent& operator=(MdpPerfPrefillCalcFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpPerfPrefillCalcFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpPerfPrefillCalcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfPrefillCalcFtraceEvent*>(
               &_MdpPerfPrefillCalcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MdpPerfPrefillCalcFtraceEvent& a, MdpPerfPrefillCalcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfPrefillCalcFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpPerfPrefillCalcFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpPerfPrefillCalcFtraceEvent>(nullptr);
  }

  MdpPerfPrefillCalcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpPerfPrefillCalcFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpPerfPrefillCalcFtraceEvent& from);
  void MergeFrom(const MdpPerfPrefillCalcFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpPerfPrefillCalcFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpPerfPrefillCalcFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kLatencyBufFieldNumber = 2,
    kOtFieldNumber = 3,
    kYBufFieldNumber = 4,
    kYScalerFieldNumber = 5,
    kPpLinesFieldNumber = 6,
    kPpBytesFieldNumber = 7,
    kPostScFieldNumber = 8,
    kFbcBytesFieldNumber = 9,
    kPrefillBytesFieldNumber = 10,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum() const;
  void set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 latency_buf = 2;
  bool has_latency_buf() const;
  void clear_latency_buf();
  ::PROTOBUF_NAMESPACE_ID::uint32 latency_buf() const;
  void set_latency_buf(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ot = 3;
  bool has_ot() const;
  void clear_ot();
  ::PROTOBUF_NAMESPACE_ID::uint32 ot() const;
  void set_ot(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 y_buf = 4;
  bool has_y_buf() const;
  void clear_y_buf();
  ::PROTOBUF_NAMESPACE_ID::uint32 y_buf() const;
  void set_y_buf(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 y_scaler = 5;
  bool has_y_scaler() const;
  void clear_y_scaler();
  ::PROTOBUF_NAMESPACE_ID::uint32 y_scaler() const;
  void set_y_scaler(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pp_lines = 6;
  bool has_pp_lines() const;
  void clear_pp_lines();
  ::PROTOBUF_NAMESPACE_ID::uint32 pp_lines() const;
  void set_pp_lines(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pp_bytes = 7;
  bool has_pp_bytes() const;
  void clear_pp_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 pp_bytes() const;
  void set_pp_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 post_sc = 8;
  bool has_post_sc() const;
  void clear_post_sc();
  ::PROTOBUF_NAMESPACE_ID::uint32 post_sc() const;
  void set_post_sc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 fbc_bytes = 9;
  bool has_fbc_bytes() const;
  void clear_fbc_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 fbc_bytes() const;
  void set_fbc_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 prefill_bytes = 10;
  bool has_prefill_bytes() const;
  void clear_prefill_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefill_bytes() const;
  void set_prefill_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latency_buf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_buf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_scaler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pp_lines_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pp_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 post_sc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fbc_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefill_bytes_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class MdpPerfUpdateBusFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfUpdateBusFtraceEvent) */ {
 public:
  MdpPerfUpdateBusFtraceEvent();
  virtual ~MdpPerfUpdateBusFtraceEvent();

  MdpPerfUpdateBusFtraceEvent(const MdpPerfUpdateBusFtraceEvent& from);
  MdpPerfUpdateBusFtraceEvent(MdpPerfUpdateBusFtraceEvent&& from) noexcept
    : MdpPerfUpdateBusFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfUpdateBusFtraceEvent& operator=(const MdpPerfUpdateBusFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfUpdateBusFtraceEvent& operator=(MdpPerfUpdateBusFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MdpPerfUpdateBusFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdpPerfUpdateBusFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfUpdateBusFtraceEvent*>(
               &_MdpPerfUpdateBusFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MdpPerfUpdateBusFtraceEvent& a, MdpPerfUpdateBusFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfUpdateBusFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdpPerfUpdateBusFtraceEvent* New() const final {
    return CreateMaybeMessage<MdpPerfUpdateBusFtraceEvent>(nullptr);
  }

  MdpPerfUpdateBusFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdpPerfUpdateBusFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MdpPerfUpdateBusFtraceEvent& from);
  void MergeFrom(const MdpPerfUpdateBusFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MdpPerfUpdateBusFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MdpPerfUpdateBusFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbQuotaFieldNumber = 2,
    kIbQuotaFieldNumber = 3,
    kClientFieldNumber = 1,
  };
  // optional uint64 ab_quota = 2;
  bool has_ab_quota() const;
  void clear_ab_quota();
  ::PROTOBUF_NAMESPACE_ID::uint64 ab_quota() const;
  void set_ab_quota(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ib_quota = 3;
  bool has_ib_quota() const;
  void clear_ib_quota();
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_quota() const;
  void set_ib_quota(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 client = 1;
  bool has_client() const;
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ab_quota_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_quota_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// -------------------------------------------------------------------

class RotatorBwAoAsContextFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RotatorBwAoAsContextFtraceEvent) */ {
 public:
  RotatorBwAoAsContextFtraceEvent();
  virtual ~RotatorBwAoAsContextFtraceEvent();

  RotatorBwAoAsContextFtraceEvent(const RotatorBwAoAsContextFtraceEvent& from);
  RotatorBwAoAsContextFtraceEvent(RotatorBwAoAsContextFtraceEvent&& from) noexcept
    : RotatorBwAoAsContextFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RotatorBwAoAsContextFtraceEvent& operator=(const RotatorBwAoAsContextFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotatorBwAoAsContextFtraceEvent& operator=(RotatorBwAoAsContextFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RotatorBwAoAsContextFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RotatorBwAoAsContextFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RotatorBwAoAsContextFtraceEvent*>(
               &_RotatorBwAoAsContextFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RotatorBwAoAsContextFtraceEvent& a, RotatorBwAoAsContextFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RotatorBwAoAsContextFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RotatorBwAoAsContextFtraceEvent* New() const final {
    return CreateMaybeMessage<RotatorBwAoAsContextFtraceEvent>(nullptr);
  }

  RotatorBwAoAsContextFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RotatorBwAoAsContextFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RotatorBwAoAsContextFtraceEvent& from);
  void MergeFrom(const RotatorBwAoAsContextFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RotatorBwAoAsContextFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RotatorBwAoAsContextFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MdpCmdKickoffFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdKickoffFtraceEvent::has_ctl_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCmdKickoffFtraceEvent::clear_ctl_num() {
  ctl_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdKickoffFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdKickoffFtraceEvent.ctl_num)
  return ctl_num_;
}
inline void MdpCmdKickoffFtraceEvent::set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctl_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdKickoffFtraceEvent.ctl_num)
}

// optional int32 kickoff_cnt = 2;
inline bool MdpCmdKickoffFtraceEvent::has_kickoff_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpCmdKickoffFtraceEvent::clear_kickoff_cnt() {
  kickoff_cnt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpCmdKickoffFtraceEvent::kickoff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdKickoffFtraceEvent.kickoff_cnt)
  return kickoff_cnt_;
}
inline void MdpCmdKickoffFtraceEvent::set_kickoff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  kickoff_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdKickoffFtraceEvent.kickoff_cnt)
}

// -------------------------------------------------------------------

// MdpCommitFtraceEvent

// optional uint32 num = 1;
inline bool MdpCommitFtraceEvent::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCommitFtraceEvent::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCommitFtraceEvent::num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.num)
  return num_;
}
inline void MdpCommitFtraceEvent::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.num)
}

// optional uint32 play_cnt = 2;
inline bool MdpCommitFtraceEvent::has_play_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpCommitFtraceEvent::clear_play_cnt() {
  play_cnt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCommitFtraceEvent::play_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.play_cnt)
  return play_cnt_;
}
inline void MdpCommitFtraceEvent::set_play_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  play_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.play_cnt)
}

// optional uint32 clk_rate = 3;
inline bool MdpCommitFtraceEvent::has_clk_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpCommitFtraceEvent::clear_clk_rate() {
  clk_rate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCommitFtraceEvent::clk_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.clk_rate)
  return clk_rate_;
}
inline void MdpCommitFtraceEvent::set_clk_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  clk_rate_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.clk_rate)
}

// optional uint64 bandwidth = 4;
inline bool MdpCommitFtraceEvent::has_bandwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpCommitFtraceEvent::clear_bandwidth() {
  bandwidth_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCommitFtraceEvent::bandwidth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.bandwidth)
  return bandwidth_;
}
inline void MdpCommitFtraceEvent::set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.bandwidth)
}

// -------------------------------------------------------------------

// MdpPerfSetOtFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetOtFtraceEvent::has_pnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpPerfSetOtFtraceEvent::clear_pnum() {
  pnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetOtFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.pnum)
  return pnum_;
}
inline void MdpPerfSetOtFtraceEvent::set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pnum_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.pnum)
}

// optional uint32 xin_id = 2;
inline bool MdpPerfSetOtFtraceEvent::has_xin_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpPerfSetOtFtraceEvent::clear_xin_id() {
  xin_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetOtFtraceEvent::xin_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.xin_id)
  return xin_id_;
}
inline void MdpPerfSetOtFtraceEvent::set_xin_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  xin_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.xin_id)
}

// optional uint32 rd_lim = 3;
inline bool MdpPerfSetOtFtraceEvent::has_rd_lim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpPerfSetOtFtraceEvent::clear_rd_lim() {
  rd_lim_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetOtFtraceEvent::rd_lim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.rd_lim)
  return rd_lim_;
}
inline void MdpPerfSetOtFtraceEvent::set_rd_lim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rd_lim_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.rd_lim)
}

// optional uint32 is_vbif_rt = 4;
inline bool MdpPerfSetOtFtraceEvent::has_is_vbif_rt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpPerfSetOtFtraceEvent::clear_is_vbif_rt() {
  is_vbif_rt_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetOtFtraceEvent::is_vbif_rt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.is_vbif_rt)
  return is_vbif_rt_;
}
inline void MdpPerfSetOtFtraceEvent::set_is_vbif_rt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  is_vbif_rt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.is_vbif_rt)
}

// -------------------------------------------------------------------

// MdpSsppChangeFtraceEvent

// optional uint32 num = 1;
inline bool MdpSsppChangeFtraceEvent::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.num)
  return num_;
}
inline void MdpSsppChangeFtraceEvent::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.num)
}

// optional uint32 play_cnt = 2;
inline bool MdpSsppChangeFtraceEvent::has_play_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_play_cnt() {
  play_cnt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::play_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.play_cnt)
  return play_cnt_;
}
inline void MdpSsppChangeFtraceEvent::set_play_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  play_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.play_cnt)
}

// optional uint32 mixer = 3;
inline bool MdpSsppChangeFtraceEvent::has_mixer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_mixer() {
  mixer_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::mixer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.mixer)
  return mixer_;
}
inline void MdpSsppChangeFtraceEvent::set_mixer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mixer_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.mixer)
}

// optional uint32 stage = 4;
inline bool MdpSsppChangeFtraceEvent::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_stage() {
  stage_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::stage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.stage)
  return stage_;
}
inline void MdpSsppChangeFtraceEvent::set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stage_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.stage)
}

// optional uint32 flags = 5;
inline bool MdpSsppChangeFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.flags)
  return flags_;
}
inline void MdpSsppChangeFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.flags)
}

// optional uint32 format = 6;
inline bool MdpSsppChangeFtraceEvent::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_format() {
  format_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.format)
  return format_;
}
inline void MdpSsppChangeFtraceEvent::set_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.format)
}

// optional uint32 img_w = 7;
inline bool MdpSsppChangeFtraceEvent::has_img_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_img_w() {
  img_w_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::img_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.img_w)
  return img_w_;
}
inline void MdpSsppChangeFtraceEvent::set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  img_w_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.img_w)
}

// optional uint32 img_h = 8;
inline bool MdpSsppChangeFtraceEvent::has_img_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_img_h() {
  img_h_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::img_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.img_h)
  return img_h_;
}
inline void MdpSsppChangeFtraceEvent::set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  img_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.img_h)
}

// optional uint32 src_x = 9;
inline bool MdpSsppChangeFtraceEvent::has_src_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_src_x() {
  src_x_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::src_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_x)
  return src_x_;
}
inline void MdpSsppChangeFtraceEvent::set_src_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  src_x_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_x)
}

// optional uint32 src_y = 10;
inline bool MdpSsppChangeFtraceEvent::has_src_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_src_y() {
  src_y_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::src_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_y)
  return src_y_;
}
inline void MdpSsppChangeFtraceEvent::set_src_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  src_y_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_y)
}

// optional uint32 src_w = 11;
inline bool MdpSsppChangeFtraceEvent::has_src_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_src_w() {
  src_w_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::src_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_w)
  return src_w_;
}
inline void MdpSsppChangeFtraceEvent::set_src_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  src_w_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_w)
}

// optional uint32 src_h = 12;
inline bool MdpSsppChangeFtraceEvent::has_src_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_src_h() {
  src_h_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::src_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_h)
  return src_h_;
}
inline void MdpSsppChangeFtraceEvent::set_src_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  src_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_h)
}

// optional uint32 dst_x = 13;
inline bool MdpSsppChangeFtraceEvent::has_dst_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_x() {
  dst_x_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::dst_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_x)
  return dst_x_;
}
inline void MdpSsppChangeFtraceEvent::set_dst_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  dst_x_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_x)
}

// optional uint32 dst_y = 14;
inline bool MdpSsppChangeFtraceEvent::has_dst_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_y() {
  dst_y_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::dst_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_y)
  return dst_y_;
}
inline void MdpSsppChangeFtraceEvent::set_dst_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  dst_y_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_y)
}

// optional uint32 dst_w = 15;
inline bool MdpSsppChangeFtraceEvent::has_dst_w() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_w() {
  dst_w_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::dst_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_w)
  return dst_w_;
}
inline void MdpSsppChangeFtraceEvent::set_dst_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  dst_w_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_w)
}

// optional uint32 dst_h = 16;
inline bool MdpSsppChangeFtraceEvent::has_dst_h() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_h() {
  dst_h_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppChangeFtraceEvent::dst_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_h)
  return dst_h_;
}
inline void MdpSsppChangeFtraceEvent::set_dst_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  dst_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_h)
}

// -------------------------------------------------------------------

// TracingMarkWriteFtraceEvent

// optional int32 pid = 1;
inline bool TracingMarkWriteFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingMarkWriteFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingMarkWriteFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingMarkWriteFtraceEvent.pid)
  return pid_;
}
inline void TracingMarkWriteFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingMarkWriteFtraceEvent.pid)
}

// optional string trace_name = 2;
inline bool TracingMarkWriteFtraceEvent::has_trace_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingMarkWriteFtraceEvent::clear_trace_name() {
  trace_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TracingMarkWriteFtraceEvent::trace_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
  return trace_name_.GetNoArena();
}
inline void TracingMarkWriteFtraceEvent::set_trace_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}
inline void TracingMarkWriteFtraceEvent::set_trace_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}
inline void TracingMarkWriteFtraceEvent::set_trace_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}
inline void TracingMarkWriteFtraceEvent::set_trace_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}
inline std::string* TracingMarkWriteFtraceEvent::mutable_trace_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
  return trace_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TracingMarkWriteFtraceEvent::release_trace_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
  if (!has_trace_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trace_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TracingMarkWriteFtraceEvent::set_allocated_trace_name(std::string* trace_name) {
  if (trace_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}

// optional uint32 trace_begin = 3;
inline bool TracingMarkWriteFtraceEvent::has_trace_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TracingMarkWriteFtraceEvent::clear_trace_begin() {
  trace_begin_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TracingMarkWriteFtraceEvent::trace_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingMarkWriteFtraceEvent.trace_begin)
  return trace_begin_;
}
inline void TracingMarkWriteFtraceEvent::set_trace_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  trace_begin_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingMarkWriteFtraceEvent.trace_begin)
}

// -------------------------------------------------------------------

// MdpCmdPingpongDoneFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdPingpongDoneFtraceEvent::has_ctl_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_ctl_num() {
  ctl_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdPingpongDoneFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.ctl_num)
  return ctl_num_;
}
inline void MdpCmdPingpongDoneFtraceEvent::set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctl_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.ctl_num)
}

// optional uint32 intf_num = 2;
inline bool MdpCmdPingpongDoneFtraceEvent::has_intf_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_intf_num() {
  intf_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdPingpongDoneFtraceEvent::intf_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.intf_num)
  return intf_num_;
}
inline void MdpCmdPingpongDoneFtraceEvent::set_intf_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  intf_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.intf_num)
}

// optional uint32 pp_num = 3;
inline bool MdpCmdPingpongDoneFtraceEvent::has_pp_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_pp_num() {
  pp_num_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdPingpongDoneFtraceEvent::pp_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.pp_num)
  return pp_num_;
}
inline void MdpCmdPingpongDoneFtraceEvent::set_pp_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pp_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.pp_num)
}

// optional int32 koff_cnt = 4;
inline bool MdpCmdPingpongDoneFtraceEvent::has_koff_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_koff_cnt() {
  koff_cnt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpCmdPingpongDoneFtraceEvent::koff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.koff_cnt)
  return koff_cnt_;
}
inline void MdpCmdPingpongDoneFtraceEvent::set_koff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  koff_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.koff_cnt)
}

// -------------------------------------------------------------------

// MdpCompareBwFtraceEvent

// optional uint64 new_ab = 1;
inline bool MdpCompareBwFtraceEvent::has_new_ab() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_new_ab() {
  new_ab_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCompareBwFtraceEvent::new_ab() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.new_ab)
  return new_ab_;
}
inline void MdpCompareBwFtraceEvent::set_new_ab(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  new_ab_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.new_ab)
}

// optional uint64 new_ib = 2;
inline bool MdpCompareBwFtraceEvent::has_new_ib() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_new_ib() {
  new_ib_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCompareBwFtraceEvent::new_ib() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.new_ib)
  return new_ib_;
}
inline void MdpCompareBwFtraceEvent::set_new_ib(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  new_ib_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.new_ib)
}

// optional uint64 new_wb = 3;
inline bool MdpCompareBwFtraceEvent::has_new_wb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_new_wb() {
  new_wb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCompareBwFtraceEvent::new_wb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.new_wb)
  return new_wb_;
}
inline void MdpCompareBwFtraceEvent::set_new_wb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  new_wb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.new_wb)
}

// optional uint64 old_ab = 4;
inline bool MdpCompareBwFtraceEvent::has_old_ab() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_old_ab() {
  old_ab_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCompareBwFtraceEvent::old_ab() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.old_ab)
  return old_ab_;
}
inline void MdpCompareBwFtraceEvent::set_old_ab(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  old_ab_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.old_ab)
}

// optional uint64 old_ib = 5;
inline bool MdpCompareBwFtraceEvent::has_old_ib() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_old_ib() {
  old_ib_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCompareBwFtraceEvent::old_ib() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.old_ib)
  return old_ib_;
}
inline void MdpCompareBwFtraceEvent::set_old_ib(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  old_ib_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.old_ib)
}

// optional uint64 old_wb = 6;
inline bool MdpCompareBwFtraceEvent::has_old_wb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_old_wb() {
  old_wb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpCompareBwFtraceEvent::old_wb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.old_wb)
  return old_wb_;
}
inline void MdpCompareBwFtraceEvent::set_old_wb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  old_wb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.old_wb)
}

// optional uint32 params_changed = 7;
inline bool MdpCompareBwFtraceEvent::has_params_changed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_params_changed() {
  params_changed_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCompareBwFtraceEvent::params_changed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.params_changed)
  return params_changed_;
}
inline void MdpCompareBwFtraceEvent::set_params_changed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  params_changed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.params_changed)
}

// optional uint32 update_bw = 8;
inline bool MdpCompareBwFtraceEvent::has_update_bw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MdpCompareBwFtraceEvent::clear_update_bw() {
  update_bw_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCompareBwFtraceEvent::update_bw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.update_bw)
  return update_bw_;
}
inline void MdpCompareBwFtraceEvent::set_update_bw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  update_bw_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.update_bw)
}

// -------------------------------------------------------------------

// MdpPerfSetPanicLutsFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_pnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_pnum() {
  pnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetPanicLutsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.pnum)
  return pnum_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pnum_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.pnum)
}

// optional uint32 fmt = 2;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_fmt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_fmt() {
  fmt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetPanicLutsFtraceEvent::fmt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.fmt)
  return fmt_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_fmt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fmt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.fmt)
}

// optional uint32 mode = 3;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetPanicLutsFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.mode)
  return mode_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.mode)
}

// optional uint32 panic_lut = 4;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_panic_lut() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_panic_lut() {
  panic_lut_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetPanicLutsFtraceEvent::panic_lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.panic_lut)
  return panic_lut_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_panic_lut(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  panic_lut_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.panic_lut)
}

// optional uint32 robust_lut = 5;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_robust_lut() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_robust_lut() {
  robust_lut_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetPanicLutsFtraceEvent::robust_lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.robust_lut)
  return robust_lut_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_robust_lut(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  robust_lut_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.robust_lut)
}

// -------------------------------------------------------------------

// MdpSsppSetFtraceEvent

// optional uint32 num = 1;
inline bool MdpSsppSetFtraceEvent::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.num)
  return num_;
}
inline void MdpSsppSetFtraceEvent::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.num)
}

// optional uint32 play_cnt = 2;
inline bool MdpSsppSetFtraceEvent::has_play_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_play_cnt() {
  play_cnt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::play_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.play_cnt)
  return play_cnt_;
}
inline void MdpSsppSetFtraceEvent::set_play_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  play_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.play_cnt)
}

// optional uint32 mixer = 3;
inline bool MdpSsppSetFtraceEvent::has_mixer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_mixer() {
  mixer_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::mixer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.mixer)
  return mixer_;
}
inline void MdpSsppSetFtraceEvent::set_mixer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mixer_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.mixer)
}

// optional uint32 stage = 4;
inline bool MdpSsppSetFtraceEvent::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_stage() {
  stage_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::stage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.stage)
  return stage_;
}
inline void MdpSsppSetFtraceEvent::set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stage_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.stage)
}

// optional uint32 flags = 5;
inline bool MdpSsppSetFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.flags)
  return flags_;
}
inline void MdpSsppSetFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.flags)
}

// optional uint32 format = 6;
inline bool MdpSsppSetFtraceEvent::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_format() {
  format_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.format)
  return format_;
}
inline void MdpSsppSetFtraceEvent::set_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.format)
}

// optional uint32 img_w = 7;
inline bool MdpSsppSetFtraceEvent::has_img_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_img_w() {
  img_w_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::img_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.img_w)
  return img_w_;
}
inline void MdpSsppSetFtraceEvent::set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  img_w_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.img_w)
}

// optional uint32 img_h = 8;
inline bool MdpSsppSetFtraceEvent::has_img_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_img_h() {
  img_h_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::img_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.img_h)
  return img_h_;
}
inline void MdpSsppSetFtraceEvent::set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  img_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.img_h)
}

// optional uint32 src_x = 9;
inline bool MdpSsppSetFtraceEvent::has_src_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_src_x() {
  src_x_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::src_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_x)
  return src_x_;
}
inline void MdpSsppSetFtraceEvent::set_src_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  src_x_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_x)
}

// optional uint32 src_y = 10;
inline bool MdpSsppSetFtraceEvent::has_src_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_src_y() {
  src_y_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::src_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_y)
  return src_y_;
}
inline void MdpSsppSetFtraceEvent::set_src_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  src_y_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_y)
}

// optional uint32 src_w = 11;
inline bool MdpSsppSetFtraceEvent::has_src_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_src_w() {
  src_w_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::src_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_w)
  return src_w_;
}
inline void MdpSsppSetFtraceEvent::set_src_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  src_w_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_w)
}

// optional uint32 src_h = 12;
inline bool MdpSsppSetFtraceEvent::has_src_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_src_h() {
  src_h_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::src_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_h)
  return src_h_;
}
inline void MdpSsppSetFtraceEvent::set_src_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  src_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_h)
}

// optional uint32 dst_x = 13;
inline bool MdpSsppSetFtraceEvent::has_dst_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_dst_x() {
  dst_x_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::dst_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_x)
  return dst_x_;
}
inline void MdpSsppSetFtraceEvent::set_dst_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  dst_x_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_x)
}

// optional uint32 dst_y = 14;
inline bool MdpSsppSetFtraceEvent::has_dst_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_dst_y() {
  dst_y_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::dst_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_y)
  return dst_y_;
}
inline void MdpSsppSetFtraceEvent::set_dst_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  dst_y_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_y)
}

// optional uint32 dst_w = 15;
inline bool MdpSsppSetFtraceEvent::has_dst_w() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_dst_w() {
  dst_w_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::dst_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_w)
  return dst_w_;
}
inline void MdpSsppSetFtraceEvent::set_dst_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  dst_w_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_w)
}

// optional uint32 dst_h = 16;
inline bool MdpSsppSetFtraceEvent::has_dst_h() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MdpSsppSetFtraceEvent::clear_dst_h() {
  dst_h_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpSsppSetFtraceEvent::dst_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_h)
  return dst_h_;
}
inline void MdpSsppSetFtraceEvent::set_dst_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  dst_h_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_h)
}

// -------------------------------------------------------------------

// MdpCmdReadptrDoneFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdReadptrDoneFtraceEvent::has_ctl_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCmdReadptrDoneFtraceEvent::clear_ctl_num() {
  ctl_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdReadptrDoneFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.ctl_num)
  return ctl_num_;
}
inline void MdpCmdReadptrDoneFtraceEvent::set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctl_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.ctl_num)
}

// optional int32 koff_cnt = 2;
inline bool MdpCmdReadptrDoneFtraceEvent::has_koff_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpCmdReadptrDoneFtraceEvent::clear_koff_cnt() {
  koff_cnt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpCmdReadptrDoneFtraceEvent::koff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.koff_cnt)
  return koff_cnt_;
}
inline void MdpCmdReadptrDoneFtraceEvent::set_koff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  koff_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.koff_cnt)
}

// -------------------------------------------------------------------

// MdpMisrCrcFtraceEvent

// optional uint32 block_id = 1;
inline bool MdpMisrCrcFtraceEvent::has_block_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpMisrCrcFtraceEvent::clear_block_id() {
  block_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpMisrCrcFtraceEvent::block_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMisrCrcFtraceEvent.block_id)
  return block_id_;
}
inline void MdpMisrCrcFtraceEvent::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  block_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMisrCrcFtraceEvent.block_id)
}

// optional uint32 vsync_cnt = 2;
inline bool MdpMisrCrcFtraceEvent::has_vsync_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpMisrCrcFtraceEvent::clear_vsync_cnt() {
  vsync_cnt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpMisrCrcFtraceEvent::vsync_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMisrCrcFtraceEvent.vsync_cnt)
  return vsync_cnt_;
}
inline void MdpMisrCrcFtraceEvent::set_vsync_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  vsync_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMisrCrcFtraceEvent.vsync_cnt)
}

// optional uint32 crc = 3;
inline bool MdpMisrCrcFtraceEvent::has_crc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpMisrCrcFtraceEvent::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpMisrCrcFtraceEvent::crc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMisrCrcFtraceEvent.crc)
  return crc_;
}
inline void MdpMisrCrcFtraceEvent::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  crc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMisrCrcFtraceEvent.crc)
}

// -------------------------------------------------------------------

// MdpPerfSetQosLutsFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetQosLutsFtraceEvent::has_pnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_pnum() {
  pnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.pnum)
  return pnum_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pnum_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.pnum)
}

// optional uint32 fmt = 2;
inline bool MdpPerfSetQosLutsFtraceEvent::has_fmt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_fmt() {
  fmt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::fmt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fmt)
  return fmt_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_fmt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fmt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fmt)
}

// optional uint32 intf = 3;
inline bool MdpPerfSetQosLutsFtraceEvent::has_intf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_intf() {
  intf_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::intf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.intf)
  return intf_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_intf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  intf_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.intf)
}

// optional uint32 rot = 4;
inline bool MdpPerfSetQosLutsFtraceEvent::has_rot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_rot() {
  rot_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::rot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.rot)
  return rot_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_rot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rot_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.rot)
}

// optional uint32 fl = 5;
inline bool MdpPerfSetQosLutsFtraceEvent::has_fl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_fl() {
  fl_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::fl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fl)
  return fl_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_fl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fl_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fl)
}

// optional uint32 lut = 6;
inline bool MdpPerfSetQosLutsFtraceEvent::has_lut() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_lut() {
  lut_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.lut)
  return lut_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_lut(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lut_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.lut)
}

// optional uint32 linear = 7;
inline bool MdpPerfSetQosLutsFtraceEvent::has_linear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_linear() {
  linear_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetQosLutsFtraceEvent::linear() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.linear)
  return linear_;
}
inline void MdpPerfSetQosLutsFtraceEvent::set_linear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  linear_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.linear)
}

// -------------------------------------------------------------------

// MdpTraceCounterFtraceEvent

// optional int32 pid = 1;
inline bool MdpTraceCounterFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpTraceCounterFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpTraceCounterFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpTraceCounterFtraceEvent.pid)
  return pid_;
}
inline void MdpTraceCounterFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpTraceCounterFtraceEvent.pid)
}

// optional string counter_name = 2;
inline bool MdpTraceCounterFtraceEvent::has_counter_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpTraceCounterFtraceEvent::clear_counter_name() {
  counter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MdpTraceCounterFtraceEvent::counter_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
  return counter_name_.GetNoArena();
}
inline void MdpTraceCounterFtraceEvent::set_counter_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}
inline void MdpTraceCounterFtraceEvent::set_counter_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  counter_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}
inline void MdpTraceCounterFtraceEvent::set_counter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}
inline void MdpTraceCounterFtraceEvent::set_counter_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  counter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}
inline std::string* MdpTraceCounterFtraceEvent::mutable_counter_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
  return counter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MdpTraceCounterFtraceEvent::release_counter_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
  if (!has_counter_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return counter_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MdpTraceCounterFtraceEvent::set_allocated_counter_name(std::string* counter_name) {
  if (counter_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  counter_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), counter_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}

// optional int32 value = 3;
inline bool MdpTraceCounterFtraceEvent::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpTraceCounterFtraceEvent::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpTraceCounterFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpTraceCounterFtraceEvent.value)
  return value_;
}
inline void MdpTraceCounterFtraceEvent::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpTraceCounterFtraceEvent.value)
}

// -------------------------------------------------------------------

// MdpCmdReleaseBwFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdReleaseBwFtraceEvent::has_ctl_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCmdReleaseBwFtraceEvent::clear_ctl_num() {
  ctl_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdReleaseBwFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdReleaseBwFtraceEvent.ctl_num)
  return ctl_num_;
}
inline void MdpCmdReleaseBwFtraceEvent::set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctl_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdReleaseBwFtraceEvent.ctl_num)
}

// -------------------------------------------------------------------

// MdpMixerUpdateFtraceEvent

// optional uint32 mixer_num = 1;
inline bool MdpMixerUpdateFtraceEvent::has_mixer_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpMixerUpdateFtraceEvent::clear_mixer_num() {
  mixer_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpMixerUpdateFtraceEvent::mixer_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMixerUpdateFtraceEvent.mixer_num)
  return mixer_num_;
}
inline void MdpMixerUpdateFtraceEvent::set_mixer_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  mixer_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMixerUpdateFtraceEvent.mixer_num)
}

// -------------------------------------------------------------------

// MdpPerfSetWmLevelsFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_pnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_pnum() {
  pnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.pnum)
  return pnum_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pnum_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.pnum)
}

// optional uint32 use_space = 2;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_use_space() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_use_space() {
  use_space_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::use_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.use_space)
  return use_space_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_use_space(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  use_space_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.use_space)
}

// optional uint32 priority_bytes = 3;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_priority_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_priority_bytes() {
  priority_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::priority_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.priority_bytes)
  return priority_bytes_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_priority_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  priority_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.priority_bytes)
}

// optional uint32 wm0 = 4;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_wm0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_wm0() {
  wm0_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::wm0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm0)
  return wm0_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_wm0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  wm0_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm0)
}

// optional uint32 wm1 = 5;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_wm1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_wm1() {
  wm1_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::wm1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm1)
  return wm1_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_wm1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  wm1_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm1)
}

// optional uint32 wm2 = 6;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_wm2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_wm2() {
  wm2_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::wm2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm2)
  return wm2_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_wm2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  wm2_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm2)
}

// optional uint32 mb_cnt = 7;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_mb_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_mb_cnt() {
  mb_cnt_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::mb_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_cnt)
  return mb_cnt_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_mb_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  mb_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_cnt)
}

// optional uint32 mb_size = 8;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_mb_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_mb_size() {
  mb_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfSetWmLevelsFtraceEvent::mb_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_size)
  return mb_size_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_mb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  mb_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_size)
}

// -------------------------------------------------------------------

// MdpVideoUnderrunDoneFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpVideoUnderrunDoneFtraceEvent::has_ctl_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpVideoUnderrunDoneFtraceEvent::clear_ctl_num() {
  ctl_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpVideoUnderrunDoneFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.ctl_num)
  return ctl_num_;
}
inline void MdpVideoUnderrunDoneFtraceEvent::set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctl_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.ctl_num)
}

// optional uint32 underrun_cnt = 2;
inline bool MdpVideoUnderrunDoneFtraceEvent::has_underrun_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpVideoUnderrunDoneFtraceEvent::clear_underrun_cnt() {
  underrun_cnt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpVideoUnderrunDoneFtraceEvent::underrun_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.underrun_cnt)
  return underrun_cnt_;
}
inline void MdpVideoUnderrunDoneFtraceEvent::set_underrun_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  underrun_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.underrun_cnt)
}

// -------------------------------------------------------------------

// MdpCmdWaitPingpongFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdWaitPingpongFtraceEvent::has_ctl_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpCmdWaitPingpongFtraceEvent::clear_ctl_num() {
  ctl_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpCmdWaitPingpongFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.ctl_num)
  return ctl_num_;
}
inline void MdpCmdWaitPingpongFtraceEvent::set_ctl_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctl_num_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.ctl_num)
}

// optional int32 kickoff_cnt = 2;
inline bool MdpCmdWaitPingpongFtraceEvent::has_kickoff_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpCmdWaitPingpongFtraceEvent::clear_kickoff_cnt() {
  kickoff_cnt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpCmdWaitPingpongFtraceEvent::kickoff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.kickoff_cnt)
  return kickoff_cnt_;
}
inline void MdpCmdWaitPingpongFtraceEvent::set_kickoff_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  kickoff_cnt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.kickoff_cnt)
}

// -------------------------------------------------------------------

// MdpPerfPrefillCalcFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfPrefillCalcFtraceEvent::has_pnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_pnum() {
  pnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pnum)
  return pnum_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pnum_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pnum)
}

// optional uint32 latency_buf = 2;
inline bool MdpPerfPrefillCalcFtraceEvent::has_latency_buf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_latency_buf() {
  latency_buf_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::latency_buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.latency_buf)
  return latency_buf_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_latency_buf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  latency_buf_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.latency_buf)
}

// optional uint32 ot = 3;
inline bool MdpPerfPrefillCalcFtraceEvent::has_ot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_ot() {
  ot_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::ot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.ot)
  return ot_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_ot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ot_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.ot)
}

// optional uint32 y_buf = 4;
inline bool MdpPerfPrefillCalcFtraceEvent::has_y_buf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_y_buf() {
  y_buf_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::y_buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_buf)
  return y_buf_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_y_buf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  y_buf_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_buf)
}

// optional uint32 y_scaler = 5;
inline bool MdpPerfPrefillCalcFtraceEvent::has_y_scaler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_y_scaler() {
  y_scaler_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::y_scaler() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_scaler)
  return y_scaler_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_y_scaler(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  y_scaler_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_scaler)
}

// optional uint32 pp_lines = 6;
inline bool MdpPerfPrefillCalcFtraceEvent::has_pp_lines() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_pp_lines() {
  pp_lines_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::pp_lines() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_lines)
  return pp_lines_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_pp_lines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  pp_lines_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_lines)
}

// optional uint32 pp_bytes = 7;
inline bool MdpPerfPrefillCalcFtraceEvent::has_pp_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_pp_bytes() {
  pp_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::pp_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_bytes)
  return pp_bytes_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_pp_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  pp_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_bytes)
}

// optional uint32 post_sc = 8;
inline bool MdpPerfPrefillCalcFtraceEvent::has_post_sc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_post_sc() {
  post_sc_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::post_sc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.post_sc)
  return post_sc_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_post_sc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  post_sc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.post_sc)
}

// optional uint32 fbc_bytes = 9;
inline bool MdpPerfPrefillCalcFtraceEvent::has_fbc_bytes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_fbc_bytes() {
  fbc_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::fbc_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.fbc_bytes)
  return fbc_bytes_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_fbc_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  fbc_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.fbc_bytes)
}

// optional uint32 prefill_bytes = 10;
inline bool MdpPerfPrefillCalcFtraceEvent::has_prefill_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_prefill_bytes() {
  prefill_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MdpPerfPrefillCalcFtraceEvent::prefill_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.prefill_bytes)
  return prefill_bytes_;
}
inline void MdpPerfPrefillCalcFtraceEvent::set_prefill_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  prefill_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.prefill_bytes)
}

// -------------------------------------------------------------------

// MdpPerfUpdateBusFtraceEvent

// optional int32 client = 1;
inline bool MdpPerfUpdateBusFtraceEvent::has_client() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MdpPerfUpdateBusFtraceEvent::clear_client() {
  client_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MdpPerfUpdateBusFtraceEvent::client() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfUpdateBusFtraceEvent.client)
  return client_;
}
inline void MdpPerfUpdateBusFtraceEvent::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfUpdateBusFtraceEvent.client)
}

// optional uint64 ab_quota = 2;
inline bool MdpPerfUpdateBusFtraceEvent::has_ab_quota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MdpPerfUpdateBusFtraceEvent::clear_ab_quota() {
  ab_quota_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpPerfUpdateBusFtraceEvent::ab_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ab_quota)
  return ab_quota_;
}
inline void MdpPerfUpdateBusFtraceEvent::set_ab_quota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ab_quota_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ab_quota)
}

// optional uint64 ib_quota = 3;
inline bool MdpPerfUpdateBusFtraceEvent::has_ib_quota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MdpPerfUpdateBusFtraceEvent::clear_ib_quota() {
  ib_quota_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MdpPerfUpdateBusFtraceEvent::ib_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ib_quota)
  return ib_quota_;
}
inline void MdpPerfUpdateBusFtraceEvent::set_ib_quota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ib_quota_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ib_quota)
}

// -------------------------------------------------------------------

// RotatorBwAoAsContextFtraceEvent

// optional uint32 state = 1;
inline bool RotatorBwAoAsContextFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotatorBwAoAsContextFtraceEvent::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RotatorBwAoAsContextFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RotatorBwAoAsContextFtraceEvent.state)
  return state_;
}
inline void RotatorBwAoAsContextFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.RotatorBwAoAsContextFtraceEvent.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto
