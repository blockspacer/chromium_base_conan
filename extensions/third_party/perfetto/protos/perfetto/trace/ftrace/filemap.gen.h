// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FILEMAP_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FILEMAP_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class MmFilemapDeleteFromPageCacheFtraceEvent;
class MmFilemapAddToPageCacheFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT MmFilemapDeleteFromPageCacheFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPfnFieldNumber = 1,
    kIInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kSDevFieldNumber = 4,
    kPageFieldNumber = 5,
  };

  MmFilemapDeleteFromPageCacheFtraceEvent();
  ~MmFilemapDeleteFromPageCacheFtraceEvent() override;
  MmFilemapDeleteFromPageCacheFtraceEvent(MmFilemapDeleteFromPageCacheFtraceEvent&&) noexcept;
  MmFilemapDeleteFromPageCacheFtraceEvent& operator=(MmFilemapDeleteFromPageCacheFtraceEvent&&);
  MmFilemapDeleteFromPageCacheFtraceEvent(const MmFilemapDeleteFromPageCacheFtraceEvent&);
  MmFilemapDeleteFromPageCacheFtraceEvent& operator=(const MmFilemapDeleteFromPageCacheFtraceEvent&);
  bool operator==(const MmFilemapDeleteFromPageCacheFtraceEvent&) const;
  bool operator!=(const MmFilemapDeleteFromPageCacheFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pfn() const { return _has_field_[1]; }
  uint64_t pfn() const { return pfn_; }
  void set_pfn(uint64_t value) { pfn_ = value; _has_field_.set(1); }

  bool has_i_ino() const { return _has_field_[2]; }
  uint64_t i_ino() const { return i_ino_; }
  void set_i_ino(uint64_t value) { i_ino_ = value; _has_field_.set(2); }

  bool has_index() const { return _has_field_[3]; }
  uint64_t index() const { return index_; }
  void set_index(uint64_t value) { index_ = value; _has_field_.set(3); }

  bool has_s_dev() const { return _has_field_[4]; }
  uint64_t s_dev() const { return s_dev_; }
  void set_s_dev(uint64_t value) { s_dev_ = value; _has_field_.set(4); }

  bool has_page() const { return _has_field_[5]; }
  uint64_t page() const { return page_; }
  void set_page(uint64_t value) { page_ = value; _has_field_.set(5); }

 private:
  uint64_t pfn_{};
  uint64_t i_ino_{};
  uint64_t index_{};
  uint64_t s_dev_{};
  uint64_t page_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT MmFilemapAddToPageCacheFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPfnFieldNumber = 1,
    kIInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kSDevFieldNumber = 4,
    kPageFieldNumber = 5,
  };

  MmFilemapAddToPageCacheFtraceEvent();
  ~MmFilemapAddToPageCacheFtraceEvent() override;
  MmFilemapAddToPageCacheFtraceEvent(MmFilemapAddToPageCacheFtraceEvent&&) noexcept;
  MmFilemapAddToPageCacheFtraceEvent& operator=(MmFilemapAddToPageCacheFtraceEvent&&);
  MmFilemapAddToPageCacheFtraceEvent(const MmFilemapAddToPageCacheFtraceEvent&);
  MmFilemapAddToPageCacheFtraceEvent& operator=(const MmFilemapAddToPageCacheFtraceEvent&);
  bool operator==(const MmFilemapAddToPageCacheFtraceEvent&) const;
  bool operator!=(const MmFilemapAddToPageCacheFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pfn() const { return _has_field_[1]; }
  uint64_t pfn() const { return pfn_; }
  void set_pfn(uint64_t value) { pfn_ = value; _has_field_.set(1); }

  bool has_i_ino() const { return _has_field_[2]; }
  uint64_t i_ino() const { return i_ino_; }
  void set_i_ino(uint64_t value) { i_ino_ = value; _has_field_.set(2); }

  bool has_index() const { return _has_field_[3]; }
  uint64_t index() const { return index_; }
  void set_index(uint64_t value) { index_ = value; _has_field_.set(3); }

  bool has_s_dev() const { return _has_field_[4]; }
  uint64_t s_dev() const { return s_dev_; }
  void set_s_dev(uint64_t value) { s_dev_ = value; _has_field_.set(4); }

  bool has_page() const { return _has_field_[5]; }
  uint64_t page() const { return page_; }
  void set_page(uint64_t value) { page_ = value; _has_field_.set(5); }

 private:
  uint64_t pfn_{};
  uint64_t i_ino_{};
  uint64_t index_{};
  uint64_t s_dev_{};
  uint64_t page_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FILEMAP_PROTO_CPP_H_
