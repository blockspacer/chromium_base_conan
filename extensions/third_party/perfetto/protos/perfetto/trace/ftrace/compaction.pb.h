// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/compaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class MmCompactionBeginFtraceEvent;
class MmCompactionBeginFtraceEventDefaultTypeInternal;
extern MmCompactionBeginFtraceEventDefaultTypeInternal _MmCompactionBeginFtraceEvent_default_instance_;
class MmCompactionDeferCompactionFtraceEvent;
class MmCompactionDeferCompactionFtraceEventDefaultTypeInternal;
extern MmCompactionDeferCompactionFtraceEventDefaultTypeInternal _MmCompactionDeferCompactionFtraceEvent_default_instance_;
class MmCompactionDeferResetFtraceEvent;
class MmCompactionDeferResetFtraceEventDefaultTypeInternal;
extern MmCompactionDeferResetFtraceEventDefaultTypeInternal _MmCompactionDeferResetFtraceEvent_default_instance_;
class MmCompactionDeferredFtraceEvent;
class MmCompactionDeferredFtraceEventDefaultTypeInternal;
extern MmCompactionDeferredFtraceEventDefaultTypeInternal _MmCompactionDeferredFtraceEvent_default_instance_;
class MmCompactionEndFtraceEvent;
class MmCompactionEndFtraceEventDefaultTypeInternal;
extern MmCompactionEndFtraceEventDefaultTypeInternal _MmCompactionEndFtraceEvent_default_instance_;
class MmCompactionFinishedFtraceEvent;
class MmCompactionFinishedFtraceEventDefaultTypeInternal;
extern MmCompactionFinishedFtraceEventDefaultTypeInternal _MmCompactionFinishedFtraceEvent_default_instance_;
class MmCompactionIsolateFreepagesFtraceEvent;
class MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal;
extern MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal _MmCompactionIsolateFreepagesFtraceEvent_default_instance_;
class MmCompactionIsolateMigratepagesFtraceEvent;
class MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal;
extern MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal _MmCompactionIsolateMigratepagesFtraceEvent_default_instance_;
class MmCompactionKcompactdSleepFtraceEvent;
class MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal;
extern MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal _MmCompactionKcompactdSleepFtraceEvent_default_instance_;
class MmCompactionKcompactdWakeFtraceEvent;
class MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal;
extern MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal _MmCompactionKcompactdWakeFtraceEvent_default_instance_;
class MmCompactionMigratepagesFtraceEvent;
class MmCompactionMigratepagesFtraceEventDefaultTypeInternal;
extern MmCompactionMigratepagesFtraceEventDefaultTypeInternal _MmCompactionMigratepagesFtraceEvent_default_instance_;
class MmCompactionSuitableFtraceEvent;
class MmCompactionSuitableFtraceEventDefaultTypeInternal;
extern MmCompactionSuitableFtraceEventDefaultTypeInternal _MmCompactionSuitableFtraceEvent_default_instance_;
class MmCompactionTryToCompactPagesFtraceEvent;
class MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal;
extern MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal _MmCompactionTryToCompactPagesFtraceEvent_default_instance_;
class MmCompactionWakeupKcompactdFtraceEvent;
class MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal;
extern MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal _MmCompactionWakeupKcompactdFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::MmCompactionBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionBeginFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionDeferCompactionFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionDeferResetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionDeferResetFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionDeferredFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionDeferredFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionEndFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionFinishedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionFinishedFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionMigratepagesFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionSuitableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionSuitableFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent>(Arena*);
template<> ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class MmCompactionBeginFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionBeginFtraceEvent) */ {
 public:
  MmCompactionBeginFtraceEvent();
  virtual ~MmCompactionBeginFtraceEvent();

  MmCompactionBeginFtraceEvent(const MmCompactionBeginFtraceEvent& from);
  MmCompactionBeginFtraceEvent(MmCompactionBeginFtraceEvent&& from) noexcept
    : MmCompactionBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionBeginFtraceEvent& operator=(const MmCompactionBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionBeginFtraceEvent& operator=(MmCompactionBeginFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionBeginFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionBeginFtraceEvent*>(
               &_MmCompactionBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MmCompactionBeginFtraceEvent& a, MmCompactionBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionBeginFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionBeginFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionBeginFtraceEvent>(nullptr);
  }

  MmCompactionBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionBeginFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionBeginFtraceEvent& from);
  void MergeFrom(const MmCompactionBeginFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionBeginFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionBeginFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneStartFieldNumber = 1,
    kMigratePfnFieldNumber = 2,
    kFreePfnFieldNumber = 3,
    kZoneEndFieldNumber = 4,
    kSyncFieldNumber = 5,
  };
  // optional uint64 zone_start = 1;
  bool has_zone_start() const;
  void clear_zone_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_start() const;
  void set_zone_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 migrate_pfn = 2;
  bool has_migrate_pfn() const;
  void clear_migrate_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 migrate_pfn() const;
  void set_migrate_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 free_pfn = 3;
  bool has_free_pfn() const;
  void clear_free_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 free_pfn() const;
  void set_free_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 zone_end = 4;
  bool has_zone_end() const;
  void clear_zone_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_end() const;
  void set_zone_end(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 sync = 5;
  bool has_sync() const;
  void clear_sync();
  ::PROTOBUF_NAMESPACE_ID::uint32 sync() const;
  void set_sync(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionBeginFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 migrate_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 free_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sync_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionDeferCompactionFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionDeferCompactionFtraceEvent) */ {
 public:
  MmCompactionDeferCompactionFtraceEvent();
  virtual ~MmCompactionDeferCompactionFtraceEvent();

  MmCompactionDeferCompactionFtraceEvent(const MmCompactionDeferCompactionFtraceEvent& from);
  MmCompactionDeferCompactionFtraceEvent(MmCompactionDeferCompactionFtraceEvent&& from) noexcept
    : MmCompactionDeferCompactionFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionDeferCompactionFtraceEvent& operator=(const MmCompactionDeferCompactionFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionDeferCompactionFtraceEvent& operator=(MmCompactionDeferCompactionFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionDeferCompactionFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionDeferCompactionFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionDeferCompactionFtraceEvent*>(
               &_MmCompactionDeferCompactionFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MmCompactionDeferCompactionFtraceEvent& a, MmCompactionDeferCompactionFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionDeferCompactionFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionDeferCompactionFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionDeferCompactionFtraceEvent>(nullptr);
  }

  MmCompactionDeferCompactionFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionDeferCompactionFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionDeferCompactionFtraceEvent& from);
  void MergeFrom(const MmCompactionDeferCompactionFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionDeferCompactionFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionDeferCompactionFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kIdxFieldNumber = 2,
    kOrderFieldNumber = 3,
    kConsideredFieldNumber = 4,
    kDeferShiftFieldNumber = 5,
    kOrderFailedFieldNumber = 6,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 idx = 2;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order = 3;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 considered = 4;
  bool has_considered() const;
  void clear_considered();
  ::PROTOBUF_NAMESPACE_ID::uint32 considered() const;
  void set_considered(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 defer_shift = 5;
  bool has_defer_shift() const;
  void clear_defer_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 defer_shift() const;
  void set_defer_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order_failed = 6;
  bool has_order_failed() const;
  void clear_order_failed();
  ::PROTOBUF_NAMESPACE_ID::int32 order_failed() const;
  void set_order_failed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 considered_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defer_shift_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_failed_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionDeferredFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionDeferredFtraceEvent) */ {
 public:
  MmCompactionDeferredFtraceEvent();
  virtual ~MmCompactionDeferredFtraceEvent();

  MmCompactionDeferredFtraceEvent(const MmCompactionDeferredFtraceEvent& from);
  MmCompactionDeferredFtraceEvent(MmCompactionDeferredFtraceEvent&& from) noexcept
    : MmCompactionDeferredFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionDeferredFtraceEvent& operator=(const MmCompactionDeferredFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionDeferredFtraceEvent& operator=(MmCompactionDeferredFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionDeferredFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionDeferredFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionDeferredFtraceEvent*>(
               &_MmCompactionDeferredFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MmCompactionDeferredFtraceEvent& a, MmCompactionDeferredFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionDeferredFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionDeferredFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionDeferredFtraceEvent>(nullptr);
  }

  MmCompactionDeferredFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionDeferredFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionDeferredFtraceEvent& from);
  void MergeFrom(const MmCompactionDeferredFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionDeferredFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionDeferredFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kIdxFieldNumber = 2,
    kOrderFieldNumber = 3,
    kConsideredFieldNumber = 4,
    kDeferShiftFieldNumber = 5,
    kOrderFailedFieldNumber = 6,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 idx = 2;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order = 3;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 considered = 4;
  bool has_considered() const;
  void clear_considered();
  ::PROTOBUF_NAMESPACE_ID::uint32 considered() const;
  void set_considered(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 defer_shift = 5;
  bool has_defer_shift() const;
  void clear_defer_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 defer_shift() const;
  void set_defer_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order_failed = 6;
  bool has_order_failed() const;
  void clear_order_failed();
  ::PROTOBUF_NAMESPACE_ID::int32 order_failed() const;
  void set_order_failed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionDeferredFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 considered_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defer_shift_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_failed_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionDeferResetFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionDeferResetFtraceEvent) */ {
 public:
  MmCompactionDeferResetFtraceEvent();
  virtual ~MmCompactionDeferResetFtraceEvent();

  MmCompactionDeferResetFtraceEvent(const MmCompactionDeferResetFtraceEvent& from);
  MmCompactionDeferResetFtraceEvent(MmCompactionDeferResetFtraceEvent&& from) noexcept
    : MmCompactionDeferResetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionDeferResetFtraceEvent& operator=(const MmCompactionDeferResetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionDeferResetFtraceEvent& operator=(MmCompactionDeferResetFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionDeferResetFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionDeferResetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionDeferResetFtraceEvent*>(
               &_MmCompactionDeferResetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MmCompactionDeferResetFtraceEvent& a, MmCompactionDeferResetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionDeferResetFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionDeferResetFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionDeferResetFtraceEvent>(nullptr);
  }

  MmCompactionDeferResetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionDeferResetFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionDeferResetFtraceEvent& from);
  void MergeFrom(const MmCompactionDeferResetFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionDeferResetFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionDeferResetFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kIdxFieldNumber = 2,
    kOrderFieldNumber = 3,
    kConsideredFieldNumber = 4,
    kDeferShiftFieldNumber = 5,
    kOrderFailedFieldNumber = 6,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 idx = 2;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order = 3;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 considered = 4;
  bool has_considered() const;
  void clear_considered();
  ::PROTOBUF_NAMESPACE_ID::uint32 considered() const;
  void set_considered(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 defer_shift = 5;
  bool has_defer_shift() const;
  void clear_defer_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 defer_shift() const;
  void set_defer_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order_failed = 6;
  bool has_order_failed() const;
  void clear_order_failed();
  ::PROTOBUF_NAMESPACE_ID::int32 order_failed() const;
  void set_order_failed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionDeferResetFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 considered_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defer_shift_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_failed_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionEndFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionEndFtraceEvent) */ {
 public:
  MmCompactionEndFtraceEvent();
  virtual ~MmCompactionEndFtraceEvent();

  MmCompactionEndFtraceEvent(const MmCompactionEndFtraceEvent& from);
  MmCompactionEndFtraceEvent(MmCompactionEndFtraceEvent&& from) noexcept
    : MmCompactionEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionEndFtraceEvent& operator=(const MmCompactionEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionEndFtraceEvent& operator=(MmCompactionEndFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionEndFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionEndFtraceEvent*>(
               &_MmCompactionEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MmCompactionEndFtraceEvent& a, MmCompactionEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionEndFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionEndFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionEndFtraceEvent>(nullptr);
  }

  MmCompactionEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionEndFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionEndFtraceEvent& from);
  void MergeFrom(const MmCompactionEndFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionEndFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionEndFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneStartFieldNumber = 1,
    kMigratePfnFieldNumber = 2,
    kFreePfnFieldNumber = 3,
    kZoneEndFieldNumber = 4,
    kSyncFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 zone_start = 1;
  bool has_zone_start() const;
  void clear_zone_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_start() const;
  void set_zone_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 migrate_pfn = 2;
  bool has_migrate_pfn() const;
  void clear_migrate_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 migrate_pfn() const;
  void set_migrate_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 free_pfn = 3;
  bool has_free_pfn() const;
  void clear_free_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 free_pfn() const;
  void set_free_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 zone_end = 4;
  bool has_zone_end() const;
  void clear_zone_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_end() const;
  void set_zone_end(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 sync = 5;
  bool has_sync() const;
  void clear_sync();
  ::PROTOBUF_NAMESPACE_ID::uint32 sync() const;
  void set_sync(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 status = 6;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionEndFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 migrate_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 free_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 zone_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sync_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionFinishedFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionFinishedFtraceEvent) */ {
 public:
  MmCompactionFinishedFtraceEvent();
  virtual ~MmCompactionFinishedFtraceEvent();

  MmCompactionFinishedFtraceEvent(const MmCompactionFinishedFtraceEvent& from);
  MmCompactionFinishedFtraceEvent(MmCompactionFinishedFtraceEvent&& from) noexcept
    : MmCompactionFinishedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionFinishedFtraceEvent& operator=(const MmCompactionFinishedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionFinishedFtraceEvent& operator=(MmCompactionFinishedFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionFinishedFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionFinishedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionFinishedFtraceEvent*>(
               &_MmCompactionFinishedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MmCompactionFinishedFtraceEvent& a, MmCompactionFinishedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionFinishedFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionFinishedFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionFinishedFtraceEvent>(nullptr);
  }

  MmCompactionFinishedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionFinishedFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionFinishedFtraceEvent& from);
  void MergeFrom(const MmCompactionFinishedFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionFinishedFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionFinishedFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kIdxFieldNumber = 2,
    kOrderFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 idx = 2;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order = 3;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 4;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionFinishedFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionIsolateFreepagesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent) */ {
 public:
  MmCompactionIsolateFreepagesFtraceEvent();
  virtual ~MmCompactionIsolateFreepagesFtraceEvent();

  MmCompactionIsolateFreepagesFtraceEvent(const MmCompactionIsolateFreepagesFtraceEvent& from);
  MmCompactionIsolateFreepagesFtraceEvent(MmCompactionIsolateFreepagesFtraceEvent&& from) noexcept
    : MmCompactionIsolateFreepagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionIsolateFreepagesFtraceEvent& operator=(const MmCompactionIsolateFreepagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionIsolateFreepagesFtraceEvent& operator=(MmCompactionIsolateFreepagesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionIsolateFreepagesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionIsolateFreepagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionIsolateFreepagesFtraceEvent*>(
               &_MmCompactionIsolateFreepagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MmCompactionIsolateFreepagesFtraceEvent& a, MmCompactionIsolateFreepagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionIsolateFreepagesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionIsolateFreepagesFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionIsolateFreepagesFtraceEvent>(nullptr);
  }

  MmCompactionIsolateFreepagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionIsolateFreepagesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionIsolateFreepagesFtraceEvent& from);
  void MergeFrom(const MmCompactionIsolateFreepagesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionIsolateFreepagesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPfnFieldNumber = 1,
    kEndPfnFieldNumber = 2,
    kNrScannedFieldNumber = 3,
    kNrTakenFieldNumber = 4,
  };
  // optional uint64 start_pfn = 1;
  bool has_start_pfn() const;
  void clear_start_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_pfn() const;
  void set_start_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 end_pfn = 2;
  bool has_end_pfn() const;
  void clear_end_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_pfn() const;
  void set_end_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nr_scanned = 3;
  bool has_nr_scanned() const;
  void clear_nr_scanned();
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_scanned() const;
  void set_nr_scanned(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nr_taken = 4;
  bool has_nr_taken() const;
  void clear_nr_taken();
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_taken() const;
  void set_nr_taken(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_scanned_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_taken_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionIsolateMigratepagesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent) */ {
 public:
  MmCompactionIsolateMigratepagesFtraceEvent();
  virtual ~MmCompactionIsolateMigratepagesFtraceEvent();

  MmCompactionIsolateMigratepagesFtraceEvent(const MmCompactionIsolateMigratepagesFtraceEvent& from);
  MmCompactionIsolateMigratepagesFtraceEvent(MmCompactionIsolateMigratepagesFtraceEvent&& from) noexcept
    : MmCompactionIsolateMigratepagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionIsolateMigratepagesFtraceEvent& operator=(const MmCompactionIsolateMigratepagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionIsolateMigratepagesFtraceEvent& operator=(MmCompactionIsolateMigratepagesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionIsolateMigratepagesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionIsolateMigratepagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionIsolateMigratepagesFtraceEvent*>(
               &_MmCompactionIsolateMigratepagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MmCompactionIsolateMigratepagesFtraceEvent& a, MmCompactionIsolateMigratepagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionIsolateMigratepagesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionIsolateMigratepagesFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionIsolateMigratepagesFtraceEvent>(nullptr);
  }

  MmCompactionIsolateMigratepagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionIsolateMigratepagesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionIsolateMigratepagesFtraceEvent& from);
  void MergeFrom(const MmCompactionIsolateMigratepagesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionIsolateMigratepagesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPfnFieldNumber = 1,
    kEndPfnFieldNumber = 2,
    kNrScannedFieldNumber = 3,
    kNrTakenFieldNumber = 4,
  };
  // optional uint64 start_pfn = 1;
  bool has_start_pfn() const;
  void clear_start_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_pfn() const;
  void set_start_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 end_pfn = 2;
  bool has_end_pfn() const;
  void clear_end_pfn();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_pfn() const;
  void set_end_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nr_scanned = 3;
  bool has_nr_scanned() const;
  void clear_nr_scanned();
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_scanned() const;
  void set_nr_scanned(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nr_taken = 4;
  bool has_nr_taken() const;
  void clear_nr_taken();
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_taken() const;
  void set_nr_taken(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_pfn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_scanned_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_taken_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionKcompactdSleepFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent) */ {
 public:
  MmCompactionKcompactdSleepFtraceEvent();
  virtual ~MmCompactionKcompactdSleepFtraceEvent();

  MmCompactionKcompactdSleepFtraceEvent(const MmCompactionKcompactdSleepFtraceEvent& from);
  MmCompactionKcompactdSleepFtraceEvent(MmCompactionKcompactdSleepFtraceEvent&& from) noexcept
    : MmCompactionKcompactdSleepFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionKcompactdSleepFtraceEvent& operator=(const MmCompactionKcompactdSleepFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionKcompactdSleepFtraceEvent& operator=(MmCompactionKcompactdSleepFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionKcompactdSleepFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionKcompactdSleepFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionKcompactdSleepFtraceEvent*>(
               &_MmCompactionKcompactdSleepFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MmCompactionKcompactdSleepFtraceEvent& a, MmCompactionKcompactdSleepFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionKcompactdSleepFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionKcompactdSleepFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionKcompactdSleepFtraceEvent>(nullptr);
  }

  MmCompactionKcompactdSleepFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionKcompactdSleepFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionKcompactdSleepFtraceEvent& from);
  void MergeFrom(const MmCompactionKcompactdSleepFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionKcompactdSleepFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionKcompactdSleepFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionKcompactdWakeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent) */ {
 public:
  MmCompactionKcompactdWakeFtraceEvent();
  virtual ~MmCompactionKcompactdWakeFtraceEvent();

  MmCompactionKcompactdWakeFtraceEvent(const MmCompactionKcompactdWakeFtraceEvent& from);
  MmCompactionKcompactdWakeFtraceEvent(MmCompactionKcompactdWakeFtraceEvent&& from) noexcept
    : MmCompactionKcompactdWakeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionKcompactdWakeFtraceEvent& operator=(const MmCompactionKcompactdWakeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionKcompactdWakeFtraceEvent& operator=(MmCompactionKcompactdWakeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionKcompactdWakeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionKcompactdWakeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionKcompactdWakeFtraceEvent*>(
               &_MmCompactionKcompactdWakeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MmCompactionKcompactdWakeFtraceEvent& a, MmCompactionKcompactdWakeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionKcompactdWakeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionKcompactdWakeFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionKcompactdWakeFtraceEvent>(nullptr);
  }

  MmCompactionKcompactdWakeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionKcompactdWakeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionKcompactdWakeFtraceEvent& from);
  void MergeFrom(const MmCompactionKcompactdWakeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionKcompactdWakeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionKcompactdWakeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kOrderFieldNumber = 2,
    kClasszoneIdxFieldNumber = 3,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 order = 2;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 classzone_idx = 3;
  bool has_classzone_idx() const;
  void clear_classzone_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 classzone_idx() const;
  void set_classzone_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 classzone_idx_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionMigratepagesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionMigratepagesFtraceEvent) */ {
 public:
  MmCompactionMigratepagesFtraceEvent();
  virtual ~MmCompactionMigratepagesFtraceEvent();

  MmCompactionMigratepagesFtraceEvent(const MmCompactionMigratepagesFtraceEvent& from);
  MmCompactionMigratepagesFtraceEvent(MmCompactionMigratepagesFtraceEvent&& from) noexcept
    : MmCompactionMigratepagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionMigratepagesFtraceEvent& operator=(const MmCompactionMigratepagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionMigratepagesFtraceEvent& operator=(MmCompactionMigratepagesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionMigratepagesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionMigratepagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionMigratepagesFtraceEvent*>(
               &_MmCompactionMigratepagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MmCompactionMigratepagesFtraceEvent& a, MmCompactionMigratepagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionMigratepagesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionMigratepagesFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionMigratepagesFtraceEvent>(nullptr);
  }

  MmCompactionMigratepagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionMigratepagesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionMigratepagesFtraceEvent& from);
  void MergeFrom(const MmCompactionMigratepagesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionMigratepagesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionMigratepagesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNrMigratedFieldNumber = 1,
    kNrFailedFieldNumber = 2,
  };
  // optional uint64 nr_migrated = 1;
  bool has_nr_migrated() const;
  void clear_nr_migrated();
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_migrated() const;
  void set_nr_migrated(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nr_failed = 2;
  bool has_nr_failed() const;
  void clear_nr_failed();
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_failed() const;
  void set_nr_failed(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_migrated_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nr_failed_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionSuitableFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionSuitableFtraceEvent) */ {
 public:
  MmCompactionSuitableFtraceEvent();
  virtual ~MmCompactionSuitableFtraceEvent();

  MmCompactionSuitableFtraceEvent(const MmCompactionSuitableFtraceEvent& from);
  MmCompactionSuitableFtraceEvent(MmCompactionSuitableFtraceEvent&& from) noexcept
    : MmCompactionSuitableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionSuitableFtraceEvent& operator=(const MmCompactionSuitableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionSuitableFtraceEvent& operator=(MmCompactionSuitableFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionSuitableFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionSuitableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionSuitableFtraceEvent*>(
               &_MmCompactionSuitableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MmCompactionSuitableFtraceEvent& a, MmCompactionSuitableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionSuitableFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionSuitableFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionSuitableFtraceEvent>(nullptr);
  }

  MmCompactionSuitableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionSuitableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionSuitableFtraceEvent& from);
  void MergeFrom(const MmCompactionSuitableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionSuitableFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionSuitableFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kIdxFieldNumber = 2,
    kOrderFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 idx = 2;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 order = 3;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 4;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionSuitableFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionTryToCompactPagesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent) */ {
 public:
  MmCompactionTryToCompactPagesFtraceEvent();
  virtual ~MmCompactionTryToCompactPagesFtraceEvent();

  MmCompactionTryToCompactPagesFtraceEvent(const MmCompactionTryToCompactPagesFtraceEvent& from);
  MmCompactionTryToCompactPagesFtraceEvent(MmCompactionTryToCompactPagesFtraceEvent&& from) noexcept
    : MmCompactionTryToCompactPagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionTryToCompactPagesFtraceEvent& operator=(const MmCompactionTryToCompactPagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionTryToCompactPagesFtraceEvent& operator=(MmCompactionTryToCompactPagesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionTryToCompactPagesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionTryToCompactPagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionTryToCompactPagesFtraceEvent*>(
               &_MmCompactionTryToCompactPagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MmCompactionTryToCompactPagesFtraceEvent& a, MmCompactionTryToCompactPagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionTryToCompactPagesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionTryToCompactPagesFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionTryToCompactPagesFtraceEvent>(nullptr);
  }

  MmCompactionTryToCompactPagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionTryToCompactPagesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionTryToCompactPagesFtraceEvent& from);
  void MergeFrom(const MmCompactionTryToCompactPagesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionTryToCompactPagesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
    kGfpMaskFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // optional int32 order = 1;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 gfp_mask = 2;
  bool has_gfp_mask() const;
  void clear_gfp_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 gfp_mask() const;
  void set_gfp_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gfp_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// -------------------------------------------------------------------

class MmCompactionWakeupKcompactdFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent) */ {
 public:
  MmCompactionWakeupKcompactdFtraceEvent();
  virtual ~MmCompactionWakeupKcompactdFtraceEvent();

  MmCompactionWakeupKcompactdFtraceEvent(const MmCompactionWakeupKcompactdFtraceEvent& from);
  MmCompactionWakeupKcompactdFtraceEvent(MmCompactionWakeupKcompactdFtraceEvent&& from) noexcept
    : MmCompactionWakeupKcompactdFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmCompactionWakeupKcompactdFtraceEvent& operator=(const MmCompactionWakeupKcompactdFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmCompactionWakeupKcompactdFtraceEvent& operator=(MmCompactionWakeupKcompactdFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MmCompactionWakeupKcompactdFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MmCompactionWakeupKcompactdFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmCompactionWakeupKcompactdFtraceEvent*>(
               &_MmCompactionWakeupKcompactdFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MmCompactionWakeupKcompactdFtraceEvent& a, MmCompactionWakeupKcompactdFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmCompactionWakeupKcompactdFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MmCompactionWakeupKcompactdFtraceEvent* New() const final {
    return CreateMaybeMessage<MmCompactionWakeupKcompactdFtraceEvent>(nullptr);
  }

  MmCompactionWakeupKcompactdFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MmCompactionWakeupKcompactdFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MmCompactionWakeupKcompactdFtraceEvent& from);
  void MergeFrom(const MmCompactionWakeupKcompactdFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MmCompactionWakeupKcompactdFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kOrderFieldNumber = 2,
    kClasszoneIdxFieldNumber = 3,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 order = 2;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 classzone_idx = 3;
  bool has_classzone_idx() const;
  void clear_classzone_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 classzone_idx() const;
  void set_classzone_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 classzone_idx_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MmCompactionBeginFtraceEvent

// optional uint64 zone_start = 1;
inline bool MmCompactionBeginFtraceEvent::has_zone_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionBeginFtraceEvent::clear_zone_start() {
  zone_start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionBeginFtraceEvent::zone_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionBeginFtraceEvent.zone_start)
  return zone_start_;
}
inline void MmCompactionBeginFtraceEvent::set_zone_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  zone_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionBeginFtraceEvent.zone_start)
}

// optional uint64 migrate_pfn = 2;
inline bool MmCompactionBeginFtraceEvent::has_migrate_pfn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionBeginFtraceEvent::clear_migrate_pfn() {
  migrate_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionBeginFtraceEvent::migrate_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionBeginFtraceEvent.migrate_pfn)
  return migrate_pfn_;
}
inline void MmCompactionBeginFtraceEvent::set_migrate_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  migrate_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionBeginFtraceEvent.migrate_pfn)
}

// optional uint64 free_pfn = 3;
inline bool MmCompactionBeginFtraceEvent::has_free_pfn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionBeginFtraceEvent::clear_free_pfn() {
  free_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionBeginFtraceEvent::free_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionBeginFtraceEvent.free_pfn)
  return free_pfn_;
}
inline void MmCompactionBeginFtraceEvent::set_free_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  free_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionBeginFtraceEvent.free_pfn)
}

// optional uint64 zone_end = 4;
inline bool MmCompactionBeginFtraceEvent::has_zone_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionBeginFtraceEvent::clear_zone_end() {
  zone_end_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionBeginFtraceEvent::zone_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionBeginFtraceEvent.zone_end)
  return zone_end_;
}
inline void MmCompactionBeginFtraceEvent::set_zone_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  zone_end_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionBeginFtraceEvent.zone_end)
}

// optional uint32 sync = 5;
inline bool MmCompactionBeginFtraceEvent::has_sync() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmCompactionBeginFtraceEvent::clear_sync() {
  sync_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionBeginFtraceEvent::sync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionBeginFtraceEvent.sync)
  return sync_;
}
inline void MmCompactionBeginFtraceEvent::set_sync(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sync_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionBeginFtraceEvent.sync)
}

// -------------------------------------------------------------------

// MmCompactionDeferCompactionFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionDeferCompactionFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionDeferCompactionFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferCompactionFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionDeferCompactionFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.nid)
}

// optional uint32 idx = 2;
inline bool MmCompactionDeferCompactionFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionDeferCompactionFtraceEvent::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferCompactionFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.idx)
  return idx_;
}
inline void MmCompactionDeferCompactionFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.idx)
}

// optional int32 order = 3;
inline bool MmCompactionDeferCompactionFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionDeferCompactionFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferCompactionFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.order)
  return order_;
}
inline void MmCompactionDeferCompactionFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.order)
}

// optional uint32 considered = 4;
inline bool MmCompactionDeferCompactionFtraceEvent::has_considered() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionDeferCompactionFtraceEvent::clear_considered() {
  considered_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferCompactionFtraceEvent::considered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.considered)
  return considered_;
}
inline void MmCompactionDeferCompactionFtraceEvent::set_considered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  considered_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.considered)
}

// optional uint32 defer_shift = 5;
inline bool MmCompactionDeferCompactionFtraceEvent::has_defer_shift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmCompactionDeferCompactionFtraceEvent::clear_defer_shift() {
  defer_shift_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferCompactionFtraceEvent::defer_shift() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.defer_shift)
  return defer_shift_;
}
inline void MmCompactionDeferCompactionFtraceEvent::set_defer_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  defer_shift_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.defer_shift)
}

// optional int32 order_failed = 6;
inline bool MmCompactionDeferCompactionFtraceEvent::has_order_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MmCompactionDeferCompactionFtraceEvent::clear_order_failed() {
  order_failed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferCompactionFtraceEvent::order_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.order_failed)
  return order_failed_;
}
inline void MmCompactionDeferCompactionFtraceEvent::set_order_failed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  order_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferCompactionFtraceEvent.order_failed)
}

// -------------------------------------------------------------------

// MmCompactionDeferredFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionDeferredFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionDeferredFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferredFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferredFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionDeferredFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferredFtraceEvent.nid)
}

// optional uint32 idx = 2;
inline bool MmCompactionDeferredFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionDeferredFtraceEvent::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferredFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferredFtraceEvent.idx)
  return idx_;
}
inline void MmCompactionDeferredFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferredFtraceEvent.idx)
}

// optional int32 order = 3;
inline bool MmCompactionDeferredFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionDeferredFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferredFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferredFtraceEvent.order)
  return order_;
}
inline void MmCompactionDeferredFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferredFtraceEvent.order)
}

// optional uint32 considered = 4;
inline bool MmCompactionDeferredFtraceEvent::has_considered() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionDeferredFtraceEvent::clear_considered() {
  considered_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferredFtraceEvent::considered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferredFtraceEvent.considered)
  return considered_;
}
inline void MmCompactionDeferredFtraceEvent::set_considered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  considered_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferredFtraceEvent.considered)
}

// optional uint32 defer_shift = 5;
inline bool MmCompactionDeferredFtraceEvent::has_defer_shift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmCompactionDeferredFtraceEvent::clear_defer_shift() {
  defer_shift_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferredFtraceEvent::defer_shift() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferredFtraceEvent.defer_shift)
  return defer_shift_;
}
inline void MmCompactionDeferredFtraceEvent::set_defer_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  defer_shift_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferredFtraceEvent.defer_shift)
}

// optional int32 order_failed = 6;
inline bool MmCompactionDeferredFtraceEvent::has_order_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MmCompactionDeferredFtraceEvent::clear_order_failed() {
  order_failed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferredFtraceEvent::order_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferredFtraceEvent.order_failed)
  return order_failed_;
}
inline void MmCompactionDeferredFtraceEvent::set_order_failed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  order_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferredFtraceEvent.order_failed)
}

// -------------------------------------------------------------------

// MmCompactionDeferResetFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionDeferResetFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionDeferResetFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferResetFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferResetFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionDeferResetFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferResetFtraceEvent.nid)
}

// optional uint32 idx = 2;
inline bool MmCompactionDeferResetFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionDeferResetFtraceEvent::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferResetFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferResetFtraceEvent.idx)
  return idx_;
}
inline void MmCompactionDeferResetFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferResetFtraceEvent.idx)
}

// optional int32 order = 3;
inline bool MmCompactionDeferResetFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionDeferResetFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferResetFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferResetFtraceEvent.order)
  return order_;
}
inline void MmCompactionDeferResetFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferResetFtraceEvent.order)
}

// optional uint32 considered = 4;
inline bool MmCompactionDeferResetFtraceEvent::has_considered() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionDeferResetFtraceEvent::clear_considered() {
  considered_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferResetFtraceEvent::considered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferResetFtraceEvent.considered)
  return considered_;
}
inline void MmCompactionDeferResetFtraceEvent::set_considered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  considered_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferResetFtraceEvent.considered)
}

// optional uint32 defer_shift = 5;
inline bool MmCompactionDeferResetFtraceEvent::has_defer_shift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmCompactionDeferResetFtraceEvent::clear_defer_shift() {
  defer_shift_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionDeferResetFtraceEvent::defer_shift() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferResetFtraceEvent.defer_shift)
  return defer_shift_;
}
inline void MmCompactionDeferResetFtraceEvent::set_defer_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  defer_shift_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferResetFtraceEvent.defer_shift)
}

// optional int32 order_failed = 6;
inline bool MmCompactionDeferResetFtraceEvent::has_order_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MmCompactionDeferResetFtraceEvent::clear_order_failed() {
  order_failed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionDeferResetFtraceEvent::order_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionDeferResetFtraceEvent.order_failed)
  return order_failed_;
}
inline void MmCompactionDeferResetFtraceEvent::set_order_failed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  order_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionDeferResetFtraceEvent.order_failed)
}

// -------------------------------------------------------------------

// MmCompactionEndFtraceEvent

// optional uint64 zone_start = 1;
inline bool MmCompactionEndFtraceEvent::has_zone_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionEndFtraceEvent::clear_zone_start() {
  zone_start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionEndFtraceEvent::zone_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionEndFtraceEvent.zone_start)
  return zone_start_;
}
inline void MmCompactionEndFtraceEvent::set_zone_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  zone_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionEndFtraceEvent.zone_start)
}

// optional uint64 migrate_pfn = 2;
inline bool MmCompactionEndFtraceEvent::has_migrate_pfn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionEndFtraceEvent::clear_migrate_pfn() {
  migrate_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionEndFtraceEvent::migrate_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionEndFtraceEvent.migrate_pfn)
  return migrate_pfn_;
}
inline void MmCompactionEndFtraceEvent::set_migrate_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  migrate_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionEndFtraceEvent.migrate_pfn)
}

// optional uint64 free_pfn = 3;
inline bool MmCompactionEndFtraceEvent::has_free_pfn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionEndFtraceEvent::clear_free_pfn() {
  free_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionEndFtraceEvent::free_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionEndFtraceEvent.free_pfn)
  return free_pfn_;
}
inline void MmCompactionEndFtraceEvent::set_free_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  free_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionEndFtraceEvent.free_pfn)
}

// optional uint64 zone_end = 4;
inline bool MmCompactionEndFtraceEvent::has_zone_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionEndFtraceEvent::clear_zone_end() {
  zone_end_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionEndFtraceEvent::zone_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionEndFtraceEvent.zone_end)
  return zone_end_;
}
inline void MmCompactionEndFtraceEvent::set_zone_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  zone_end_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionEndFtraceEvent.zone_end)
}

// optional uint32 sync = 5;
inline bool MmCompactionEndFtraceEvent::has_sync() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmCompactionEndFtraceEvent::clear_sync() {
  sync_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionEndFtraceEvent::sync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionEndFtraceEvent.sync)
  return sync_;
}
inline void MmCompactionEndFtraceEvent::set_sync(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sync_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionEndFtraceEvent.sync)
}

// optional int32 status = 6;
inline bool MmCompactionEndFtraceEvent::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MmCompactionEndFtraceEvent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionEndFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionEndFtraceEvent.status)
  return status_;
}
inline void MmCompactionEndFtraceEvent::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionEndFtraceEvent.status)
}

// -------------------------------------------------------------------

// MmCompactionFinishedFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionFinishedFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionFinishedFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionFinishedFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionFinishedFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionFinishedFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionFinishedFtraceEvent.nid)
}

// optional uint32 idx = 2;
inline bool MmCompactionFinishedFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionFinishedFtraceEvent::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionFinishedFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionFinishedFtraceEvent.idx)
  return idx_;
}
inline void MmCompactionFinishedFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionFinishedFtraceEvent.idx)
}

// optional int32 order = 3;
inline bool MmCompactionFinishedFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionFinishedFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionFinishedFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionFinishedFtraceEvent.order)
  return order_;
}
inline void MmCompactionFinishedFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionFinishedFtraceEvent.order)
}

// optional int32 ret = 4;
inline bool MmCompactionFinishedFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionFinishedFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionFinishedFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionFinishedFtraceEvent.ret)
  return ret_;
}
inline void MmCompactionFinishedFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionFinishedFtraceEvent.ret)
}

// -------------------------------------------------------------------

// MmCompactionIsolateFreepagesFtraceEvent

// optional uint64 start_pfn = 1;
inline bool MmCompactionIsolateFreepagesFtraceEvent::has_start_pfn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::clear_start_pfn() {
  start_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateFreepagesFtraceEvent::start_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.start_pfn)
  return start_pfn_;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::set_start_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.start_pfn)
}

// optional uint64 end_pfn = 2;
inline bool MmCompactionIsolateFreepagesFtraceEvent::has_end_pfn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::clear_end_pfn() {
  end_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateFreepagesFtraceEvent::end_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.end_pfn)
  return end_pfn_;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::set_end_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.end_pfn)
}

// optional uint64 nr_scanned = 3;
inline bool MmCompactionIsolateFreepagesFtraceEvent::has_nr_scanned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::clear_nr_scanned() {
  nr_scanned_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateFreepagesFtraceEvent::nr_scanned() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.nr_scanned)
  return nr_scanned_;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::set_nr_scanned(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  nr_scanned_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.nr_scanned)
}

// optional uint64 nr_taken = 4;
inline bool MmCompactionIsolateFreepagesFtraceEvent::has_nr_taken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::clear_nr_taken() {
  nr_taken_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateFreepagesFtraceEvent::nr_taken() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.nr_taken)
  return nr_taken_;
}
inline void MmCompactionIsolateFreepagesFtraceEvent::set_nr_taken(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nr_taken_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent.nr_taken)
}

// -------------------------------------------------------------------

// MmCompactionIsolateMigratepagesFtraceEvent

// optional uint64 start_pfn = 1;
inline bool MmCompactionIsolateMigratepagesFtraceEvent::has_start_pfn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::clear_start_pfn() {
  start_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateMigratepagesFtraceEvent::start_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.start_pfn)
  return start_pfn_;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::set_start_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.start_pfn)
}

// optional uint64 end_pfn = 2;
inline bool MmCompactionIsolateMigratepagesFtraceEvent::has_end_pfn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::clear_end_pfn() {
  end_pfn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateMigratepagesFtraceEvent::end_pfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.end_pfn)
  return end_pfn_;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::set_end_pfn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_pfn_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.end_pfn)
}

// optional uint64 nr_scanned = 3;
inline bool MmCompactionIsolateMigratepagesFtraceEvent::has_nr_scanned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::clear_nr_scanned() {
  nr_scanned_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateMigratepagesFtraceEvent::nr_scanned() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.nr_scanned)
  return nr_scanned_;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::set_nr_scanned(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  nr_scanned_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.nr_scanned)
}

// optional uint64 nr_taken = 4;
inline bool MmCompactionIsolateMigratepagesFtraceEvent::has_nr_taken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::clear_nr_taken() {
  nr_taken_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionIsolateMigratepagesFtraceEvent::nr_taken() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.nr_taken)
  return nr_taken_;
}
inline void MmCompactionIsolateMigratepagesFtraceEvent::set_nr_taken(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nr_taken_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent.nr_taken)
}

// -------------------------------------------------------------------

// MmCompactionKcompactdSleepFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionKcompactdSleepFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionKcompactdSleepFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionKcompactdSleepFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionKcompactdSleepFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent.nid)
}

// -------------------------------------------------------------------

// MmCompactionKcompactdWakeFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionKcompactdWakeFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionKcompactdWakeFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionKcompactdWakeFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionKcompactdWakeFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent.nid)
}

// optional int32 order = 2;
inline bool MmCompactionKcompactdWakeFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionKcompactdWakeFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionKcompactdWakeFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent.order)
  return order_;
}
inline void MmCompactionKcompactdWakeFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent.order)
}

// optional uint32 classzone_idx = 3;
inline bool MmCompactionKcompactdWakeFtraceEvent::has_classzone_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionKcompactdWakeFtraceEvent::clear_classzone_idx() {
  classzone_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionKcompactdWakeFtraceEvent::classzone_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent.classzone_idx)
  return classzone_idx_;
}
inline void MmCompactionKcompactdWakeFtraceEvent::set_classzone_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  classzone_idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent.classzone_idx)
}

// -------------------------------------------------------------------

// MmCompactionMigratepagesFtraceEvent

// optional uint64 nr_migrated = 1;
inline bool MmCompactionMigratepagesFtraceEvent::has_nr_migrated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionMigratepagesFtraceEvent::clear_nr_migrated() {
  nr_migrated_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionMigratepagesFtraceEvent::nr_migrated() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionMigratepagesFtraceEvent.nr_migrated)
  return nr_migrated_;
}
inline void MmCompactionMigratepagesFtraceEvent::set_nr_migrated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  nr_migrated_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionMigratepagesFtraceEvent.nr_migrated)
}

// optional uint64 nr_failed = 2;
inline bool MmCompactionMigratepagesFtraceEvent::has_nr_failed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionMigratepagesFtraceEvent::clear_nr_failed() {
  nr_failed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MmCompactionMigratepagesFtraceEvent::nr_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionMigratepagesFtraceEvent.nr_failed)
  return nr_failed_;
}
inline void MmCompactionMigratepagesFtraceEvent::set_nr_failed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionMigratepagesFtraceEvent.nr_failed)
}

// -------------------------------------------------------------------

// MmCompactionSuitableFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionSuitableFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionSuitableFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionSuitableFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionSuitableFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionSuitableFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionSuitableFtraceEvent.nid)
}

// optional uint32 idx = 2;
inline bool MmCompactionSuitableFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionSuitableFtraceEvent::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionSuitableFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionSuitableFtraceEvent.idx)
  return idx_;
}
inline void MmCompactionSuitableFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionSuitableFtraceEvent.idx)
}

// optional int32 order = 3;
inline bool MmCompactionSuitableFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionSuitableFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionSuitableFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionSuitableFtraceEvent.order)
  return order_;
}
inline void MmCompactionSuitableFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionSuitableFtraceEvent.order)
}

// optional int32 ret = 4;
inline bool MmCompactionSuitableFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmCompactionSuitableFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionSuitableFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionSuitableFtraceEvent.ret)
  return ret_;
}
inline void MmCompactionSuitableFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionSuitableFtraceEvent.ret)
}

// -------------------------------------------------------------------

// MmCompactionTryToCompactPagesFtraceEvent

// optional int32 order = 1;
inline bool MmCompactionTryToCompactPagesFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionTryToCompactPagesFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionTryToCompactPagesFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent.order)
  return order_;
}
inline void MmCompactionTryToCompactPagesFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent.order)
}

// optional uint32 gfp_mask = 2;
inline bool MmCompactionTryToCompactPagesFtraceEvent::has_gfp_mask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionTryToCompactPagesFtraceEvent::clear_gfp_mask() {
  gfp_mask_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionTryToCompactPagesFtraceEvent::gfp_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent.gfp_mask)
  return gfp_mask_;
}
inline void MmCompactionTryToCompactPagesFtraceEvent::set_gfp_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gfp_mask_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent.gfp_mask)
}

// optional uint32 mode = 3;
inline bool MmCompactionTryToCompactPagesFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionTryToCompactPagesFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionTryToCompactPagesFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent.mode)
  return mode_;
}
inline void MmCompactionTryToCompactPagesFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent.mode)
}

// -------------------------------------------------------------------

// MmCompactionWakeupKcompactdFtraceEvent

// optional int32 nid = 1;
inline bool MmCompactionWakeupKcompactdFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmCompactionWakeupKcompactdFtraceEvent::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionWakeupKcompactdFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent.nid)
  return nid_;
}
inline void MmCompactionWakeupKcompactdFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent.nid)
}

// optional int32 order = 2;
inline bool MmCompactionWakeupKcompactdFtraceEvent::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmCompactionWakeupKcompactdFtraceEvent::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MmCompactionWakeupKcompactdFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent.order)
  return order_;
}
inline void MmCompactionWakeupKcompactdFtraceEvent::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent.order)
}

// optional uint32 classzone_idx = 3;
inline bool MmCompactionWakeupKcompactdFtraceEvent::has_classzone_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmCompactionWakeupKcompactdFtraceEvent::clear_classzone_idx() {
  classzone_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MmCompactionWakeupKcompactdFtraceEvent::classzone_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent.classzone_idx)
  return classzone_idx_;
}
inline void MmCompactionWakeupKcompactdFtraceEvent::set_classzone_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  classzone_idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent.classzone_idx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto
