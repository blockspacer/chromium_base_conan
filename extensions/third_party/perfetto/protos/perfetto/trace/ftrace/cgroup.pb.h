// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cgroup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class CgroupAttachTaskFtraceEvent;
class CgroupAttachTaskFtraceEventDefaultTypeInternal;
extern CgroupAttachTaskFtraceEventDefaultTypeInternal _CgroupAttachTaskFtraceEvent_default_instance_;
class CgroupDestroyRootFtraceEvent;
class CgroupDestroyRootFtraceEventDefaultTypeInternal;
extern CgroupDestroyRootFtraceEventDefaultTypeInternal _CgroupDestroyRootFtraceEvent_default_instance_;
class CgroupMkdirFtraceEvent;
class CgroupMkdirFtraceEventDefaultTypeInternal;
extern CgroupMkdirFtraceEventDefaultTypeInternal _CgroupMkdirFtraceEvent_default_instance_;
class CgroupReleaseFtraceEvent;
class CgroupReleaseFtraceEventDefaultTypeInternal;
extern CgroupReleaseFtraceEventDefaultTypeInternal _CgroupReleaseFtraceEvent_default_instance_;
class CgroupRemountFtraceEvent;
class CgroupRemountFtraceEventDefaultTypeInternal;
extern CgroupRemountFtraceEventDefaultTypeInternal _CgroupRemountFtraceEvent_default_instance_;
class CgroupRenameFtraceEvent;
class CgroupRenameFtraceEventDefaultTypeInternal;
extern CgroupRenameFtraceEventDefaultTypeInternal _CgroupRenameFtraceEvent_default_instance_;
class CgroupRmdirFtraceEvent;
class CgroupRmdirFtraceEventDefaultTypeInternal;
extern CgroupRmdirFtraceEventDefaultTypeInternal _CgroupRmdirFtraceEvent_default_instance_;
class CgroupSetupRootFtraceEvent;
class CgroupSetupRootFtraceEventDefaultTypeInternal;
extern CgroupSetupRootFtraceEventDefaultTypeInternal _CgroupSetupRootFtraceEvent_default_instance_;
class CgroupTransferTasksFtraceEvent;
class CgroupTransferTasksFtraceEventDefaultTypeInternal;
extern CgroupTransferTasksFtraceEventDefaultTypeInternal _CgroupTransferTasksFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CgroupAttachTaskFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupAttachTaskFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupDestroyRootFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupDestroyRootFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupMkdirFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupMkdirFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupReleaseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupReleaseFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupRemountFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupRemountFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupRenameFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupRenameFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupRmdirFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupRmdirFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupSetupRootFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupSetupRootFtraceEvent>(Arena*);
template<> ::perfetto::protos::CgroupTransferTasksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupTransferTasksFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class CgroupAttachTaskFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupAttachTaskFtraceEvent) */ {
 public:
  CgroupAttachTaskFtraceEvent();
  virtual ~CgroupAttachTaskFtraceEvent();

  CgroupAttachTaskFtraceEvent(const CgroupAttachTaskFtraceEvent& from);
  CgroupAttachTaskFtraceEvent(CgroupAttachTaskFtraceEvent&& from) noexcept
    : CgroupAttachTaskFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupAttachTaskFtraceEvent& operator=(const CgroupAttachTaskFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupAttachTaskFtraceEvent& operator=(CgroupAttachTaskFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupAttachTaskFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupAttachTaskFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupAttachTaskFtraceEvent*>(
               &_CgroupAttachTaskFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CgroupAttachTaskFtraceEvent& a, CgroupAttachTaskFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupAttachTaskFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupAttachTaskFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupAttachTaskFtraceEvent>(nullptr);
  }

  CgroupAttachTaskFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupAttachTaskFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupAttachTaskFtraceEvent& from);
  void MergeFrom(const CgroupAttachTaskFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupAttachTaskFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupAttachTaskFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 4,
    kCnameFieldNumber = 5,
    kDstRootFieldNumber = 1,
    kDstIdFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // optional string comm = 4;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional string cname = 5;
  bool has_cname() const;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);

  // optional int32 dst_root = 1;
  bool has_dst_root() const;
  void clear_dst_root();
  ::PROTOBUF_NAMESPACE_ID::int32 dst_root() const;
  void set_dst_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dst_id = 2;
  bool has_dst_id() const;
  void clear_dst_id();
  ::PROTOBUF_NAMESPACE_ID::int32 dst_id() const;
  void set_dst_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupAttachTaskFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_root_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupMkdirFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupMkdirFtraceEvent) */ {
 public:
  CgroupMkdirFtraceEvent();
  virtual ~CgroupMkdirFtraceEvent();

  CgroupMkdirFtraceEvent(const CgroupMkdirFtraceEvent& from);
  CgroupMkdirFtraceEvent(CgroupMkdirFtraceEvent&& from) noexcept
    : CgroupMkdirFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupMkdirFtraceEvent& operator=(const CgroupMkdirFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupMkdirFtraceEvent& operator=(CgroupMkdirFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupMkdirFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupMkdirFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupMkdirFtraceEvent*>(
               &_CgroupMkdirFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CgroupMkdirFtraceEvent& a, CgroupMkdirFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupMkdirFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupMkdirFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupMkdirFtraceEvent>(nullptr);
  }

  CgroupMkdirFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupMkdirFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupMkdirFtraceEvent& from);
  void MergeFrom(const CgroupMkdirFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupMkdirFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupMkdirFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupMkdirFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupRemountFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupRemountFtraceEvent) */ {
 public:
  CgroupRemountFtraceEvent();
  virtual ~CgroupRemountFtraceEvent();

  CgroupRemountFtraceEvent(const CgroupRemountFtraceEvent& from);
  CgroupRemountFtraceEvent(CgroupRemountFtraceEvent&& from) noexcept
    : CgroupRemountFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupRemountFtraceEvent& operator=(const CgroupRemountFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupRemountFtraceEvent& operator=(CgroupRemountFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupRemountFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupRemountFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupRemountFtraceEvent*>(
               &_CgroupRemountFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CgroupRemountFtraceEvent& a, CgroupRemountFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupRemountFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupRemountFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupRemountFtraceEvent>(nullptr);
  }

  CgroupRemountFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupRemountFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupRemountFtraceEvent& from);
  void MergeFrom(const CgroupRemountFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupRemountFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupRemountFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 ss_mask = 2;
  bool has_ss_mask() const;
  void clear_ss_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 ss_mask() const;
  void set_ss_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupRemountFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ss_mask_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupRmdirFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupRmdirFtraceEvent) */ {
 public:
  CgroupRmdirFtraceEvent();
  virtual ~CgroupRmdirFtraceEvent();

  CgroupRmdirFtraceEvent(const CgroupRmdirFtraceEvent& from);
  CgroupRmdirFtraceEvent(CgroupRmdirFtraceEvent&& from) noexcept
    : CgroupRmdirFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupRmdirFtraceEvent& operator=(const CgroupRmdirFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupRmdirFtraceEvent& operator=(CgroupRmdirFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupRmdirFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupRmdirFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupRmdirFtraceEvent*>(
               &_CgroupRmdirFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CgroupRmdirFtraceEvent& a, CgroupRmdirFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupRmdirFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupRmdirFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupRmdirFtraceEvent>(nullptr);
  }

  CgroupRmdirFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupRmdirFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupRmdirFtraceEvent& from);
  void MergeFrom(const CgroupRmdirFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupRmdirFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupRmdirFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupRmdirFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupTransferTasksFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupTransferTasksFtraceEvent) */ {
 public:
  CgroupTransferTasksFtraceEvent();
  virtual ~CgroupTransferTasksFtraceEvent();

  CgroupTransferTasksFtraceEvent(const CgroupTransferTasksFtraceEvent& from);
  CgroupTransferTasksFtraceEvent(CgroupTransferTasksFtraceEvent&& from) noexcept
    : CgroupTransferTasksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupTransferTasksFtraceEvent& operator=(const CgroupTransferTasksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupTransferTasksFtraceEvent& operator=(CgroupTransferTasksFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupTransferTasksFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupTransferTasksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupTransferTasksFtraceEvent*>(
               &_CgroupTransferTasksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CgroupTransferTasksFtraceEvent& a, CgroupTransferTasksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupTransferTasksFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupTransferTasksFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupTransferTasksFtraceEvent>(nullptr);
  }

  CgroupTransferTasksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupTransferTasksFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupTransferTasksFtraceEvent& from);
  void MergeFrom(const CgroupTransferTasksFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupTransferTasksFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupTransferTasksFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 4,
    kCnameFieldNumber = 5,
    kDstRootFieldNumber = 1,
    kDstIdFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // optional string comm = 4;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional string cname = 5;
  bool has_cname() const;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);

  // optional int32 dst_root = 1;
  bool has_dst_root() const;
  void clear_dst_root();
  ::PROTOBUF_NAMESPACE_ID::int32 dst_root() const;
  void set_dst_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dst_id = 2;
  bool has_dst_id() const;
  void clear_dst_id();
  ::PROTOBUF_NAMESPACE_ID::int32 dst_id() const;
  void set_dst_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupTransferTasksFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_root_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupDestroyRootFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupDestroyRootFtraceEvent) */ {
 public:
  CgroupDestroyRootFtraceEvent();
  virtual ~CgroupDestroyRootFtraceEvent();

  CgroupDestroyRootFtraceEvent(const CgroupDestroyRootFtraceEvent& from);
  CgroupDestroyRootFtraceEvent(CgroupDestroyRootFtraceEvent&& from) noexcept
    : CgroupDestroyRootFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupDestroyRootFtraceEvent& operator=(const CgroupDestroyRootFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupDestroyRootFtraceEvent& operator=(CgroupDestroyRootFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupDestroyRootFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupDestroyRootFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupDestroyRootFtraceEvent*>(
               &_CgroupDestroyRootFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CgroupDestroyRootFtraceEvent& a, CgroupDestroyRootFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupDestroyRootFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupDestroyRootFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupDestroyRootFtraceEvent>(nullptr);
  }

  CgroupDestroyRootFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupDestroyRootFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupDestroyRootFtraceEvent& from);
  void MergeFrom(const CgroupDestroyRootFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupDestroyRootFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupDestroyRootFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 ss_mask = 2;
  bool has_ss_mask() const;
  void clear_ss_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 ss_mask() const;
  void set_ss_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupDestroyRootFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ss_mask_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupReleaseFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupReleaseFtraceEvent) */ {
 public:
  CgroupReleaseFtraceEvent();
  virtual ~CgroupReleaseFtraceEvent();

  CgroupReleaseFtraceEvent(const CgroupReleaseFtraceEvent& from);
  CgroupReleaseFtraceEvent(CgroupReleaseFtraceEvent&& from) noexcept
    : CgroupReleaseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupReleaseFtraceEvent& operator=(const CgroupReleaseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupReleaseFtraceEvent& operator=(CgroupReleaseFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupReleaseFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupReleaseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupReleaseFtraceEvent*>(
               &_CgroupReleaseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CgroupReleaseFtraceEvent& a, CgroupReleaseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupReleaseFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupReleaseFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupReleaseFtraceEvent>(nullptr);
  }

  CgroupReleaseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupReleaseFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupReleaseFtraceEvent& from);
  void MergeFrom(const CgroupReleaseFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupReleaseFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupReleaseFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupReleaseFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupRenameFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupRenameFtraceEvent) */ {
 public:
  CgroupRenameFtraceEvent();
  virtual ~CgroupRenameFtraceEvent();

  CgroupRenameFtraceEvent(const CgroupRenameFtraceEvent& from);
  CgroupRenameFtraceEvent(CgroupRenameFtraceEvent&& from) noexcept
    : CgroupRenameFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupRenameFtraceEvent& operator=(const CgroupRenameFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupRenameFtraceEvent& operator=(CgroupRenameFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupRenameFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupRenameFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupRenameFtraceEvent*>(
               &_CgroupRenameFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CgroupRenameFtraceEvent& a, CgroupRenameFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupRenameFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupRenameFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupRenameFtraceEvent>(nullptr);
  }

  CgroupRenameFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupRenameFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupRenameFtraceEvent& from);
  void MergeFrom(const CgroupRenameFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupRenameFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupRenameFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupRenameFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// -------------------------------------------------------------------

class CgroupSetupRootFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupSetupRootFtraceEvent) */ {
 public:
  CgroupSetupRootFtraceEvent();
  virtual ~CgroupSetupRootFtraceEvent();

  CgroupSetupRootFtraceEvent(const CgroupSetupRootFtraceEvent& from);
  CgroupSetupRootFtraceEvent(CgroupSetupRootFtraceEvent&& from) noexcept
    : CgroupSetupRootFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupSetupRootFtraceEvent& operator=(const CgroupSetupRootFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupSetupRootFtraceEvent& operator=(CgroupSetupRootFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CgroupSetupRootFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CgroupSetupRootFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupSetupRootFtraceEvent*>(
               &_CgroupSetupRootFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CgroupSetupRootFtraceEvent& a, CgroupSetupRootFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupSetupRootFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgroupSetupRootFtraceEvent* New() const final {
    return CreateMaybeMessage<CgroupSetupRootFtraceEvent>(nullptr);
  }

  CgroupSetupRootFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgroupSetupRootFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CgroupSetupRootFtraceEvent& from);
  void MergeFrom(const CgroupSetupRootFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CgroupSetupRootFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CgroupSetupRootFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 root = 1;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 ss_mask = 2;
  bool has_ss_mask() const;
  void clear_ss_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 ss_mask() const;
  void set_ss_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupSetupRootFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ss_mask_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CgroupAttachTaskFtraceEvent

// optional int32 dst_root = 1;
inline bool CgroupAttachTaskFtraceEvent::has_dst_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupAttachTaskFtraceEvent::clear_dst_root() {
  dst_root_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupAttachTaskFtraceEvent::dst_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_root)
  return dst_root_;
}
inline void CgroupAttachTaskFtraceEvent::set_dst_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  dst_root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_root)
}

// optional int32 dst_id = 2;
inline bool CgroupAttachTaskFtraceEvent::has_dst_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CgroupAttachTaskFtraceEvent::clear_dst_id() {
  dst_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupAttachTaskFtraceEvent::dst_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_id)
  return dst_id_;
}
inline void CgroupAttachTaskFtraceEvent::set_dst_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_id)
}

// optional int32 pid = 3;
inline bool CgroupAttachTaskFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CgroupAttachTaskFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupAttachTaskFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.pid)
  return pid_;
}
inline void CgroupAttachTaskFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.pid)
}

// optional string comm = 4;
inline bool CgroupAttachTaskFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupAttachTaskFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupAttachTaskFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void CgroupAttachTaskFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}
inline void CgroupAttachTaskFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}
inline void CgroupAttachTaskFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}
inline void CgroupAttachTaskFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}
inline std::string* CgroupAttachTaskFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupAttachTaskFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupAttachTaskFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}

// optional string cname = 5;
inline bool CgroupAttachTaskFtraceEvent::has_cname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupAttachTaskFtraceEvent::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupAttachTaskFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
  return cname_.GetNoArena();
}
inline void CgroupAttachTaskFtraceEvent::set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}
inline void CgroupAttachTaskFtraceEvent::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}
inline void CgroupAttachTaskFtraceEvent::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}
inline void CgroupAttachTaskFtraceEvent::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}
inline std::string* CgroupAttachTaskFtraceEvent::mutable_cname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupAttachTaskFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupAttachTaskFtraceEvent::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}

// -------------------------------------------------------------------

// CgroupMkdirFtraceEvent

// optional int32 root = 1;
inline bool CgroupMkdirFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupMkdirFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupMkdirFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.root)
  return root_;
}
inline void CgroupMkdirFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.root)
}

// optional int32 id = 2;
inline bool CgroupMkdirFtraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupMkdirFtraceEvent::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupMkdirFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.id)
  return id_;
}
inline void CgroupMkdirFtraceEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.id)
}

// optional string cname = 3;
inline bool CgroupMkdirFtraceEvent::has_cname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupMkdirFtraceEvent::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupMkdirFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.cname)
  return cname_.GetNoArena();
}
inline void CgroupMkdirFtraceEvent::set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}
inline void CgroupMkdirFtraceEvent::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}
inline void CgroupMkdirFtraceEvent::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}
inline void CgroupMkdirFtraceEvent::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}
inline std::string* CgroupMkdirFtraceEvent::mutable_cname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupMkdirFtraceEvent.cname)
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupMkdirFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupMkdirFtraceEvent.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupMkdirFtraceEvent::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}

// -------------------------------------------------------------------

// CgroupRemountFtraceEvent

// optional int32 root = 1;
inline bool CgroupRemountFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupRemountFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupRemountFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRemountFtraceEvent.root)
  return root_;
}
inline void CgroupRemountFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRemountFtraceEvent.root)
}

// optional uint32 ss_mask = 2;
inline bool CgroupRemountFtraceEvent::has_ss_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupRemountFtraceEvent::clear_ss_mask() {
  ss_mask_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CgroupRemountFtraceEvent::ss_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRemountFtraceEvent.ss_mask)
  return ss_mask_;
}
inline void CgroupRemountFtraceEvent::set_ss_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ss_mask_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRemountFtraceEvent.ss_mask)
}

// optional string name = 3;
inline bool CgroupRemountFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupRemountFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupRemountFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRemountFtraceEvent.name)
  return name_.GetNoArena();
}
inline void CgroupRemountFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRemountFtraceEvent.name)
}
inline void CgroupRemountFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupRemountFtraceEvent.name)
}
inline void CgroupRemountFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupRemountFtraceEvent.name)
}
inline void CgroupRemountFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupRemountFtraceEvent.name)
}
inline std::string* CgroupRemountFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRemountFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupRemountFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRemountFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupRemountFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRemountFtraceEvent.name)
}

// -------------------------------------------------------------------

// CgroupRmdirFtraceEvent

// optional int32 root = 1;
inline bool CgroupRmdirFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupRmdirFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupRmdirFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.root)
  return root_;
}
inline void CgroupRmdirFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.root)
}

// optional int32 id = 2;
inline bool CgroupRmdirFtraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupRmdirFtraceEvent::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupRmdirFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.id)
  return id_;
}
inline void CgroupRmdirFtraceEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.id)
}

// optional string cname = 3;
inline bool CgroupRmdirFtraceEvent::has_cname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupRmdirFtraceEvent::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupRmdirFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.cname)
  return cname_.GetNoArena();
}
inline void CgroupRmdirFtraceEvent::set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}
inline void CgroupRmdirFtraceEvent::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}
inline void CgroupRmdirFtraceEvent::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}
inline void CgroupRmdirFtraceEvent::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}
inline std::string* CgroupRmdirFtraceEvent::mutable_cname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRmdirFtraceEvent.cname)
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupRmdirFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRmdirFtraceEvent.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupRmdirFtraceEvent::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}

// -------------------------------------------------------------------

// CgroupTransferTasksFtraceEvent

// optional int32 dst_root = 1;
inline bool CgroupTransferTasksFtraceEvent::has_dst_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupTransferTasksFtraceEvent::clear_dst_root() {
  dst_root_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupTransferTasksFtraceEvent::dst_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_root)
  return dst_root_;
}
inline void CgroupTransferTasksFtraceEvent::set_dst_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  dst_root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_root)
}

// optional int32 dst_id = 2;
inline bool CgroupTransferTasksFtraceEvent::has_dst_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CgroupTransferTasksFtraceEvent::clear_dst_id() {
  dst_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupTransferTasksFtraceEvent::dst_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_id)
  return dst_id_;
}
inline void CgroupTransferTasksFtraceEvent::set_dst_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_id)
}

// optional int32 pid = 3;
inline bool CgroupTransferTasksFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CgroupTransferTasksFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupTransferTasksFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.pid)
  return pid_;
}
inline void CgroupTransferTasksFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.pid)
}

// optional string comm = 4;
inline bool CgroupTransferTasksFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupTransferTasksFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupTransferTasksFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void CgroupTransferTasksFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}
inline void CgroupTransferTasksFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}
inline void CgroupTransferTasksFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}
inline void CgroupTransferTasksFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}
inline std::string* CgroupTransferTasksFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupTransferTasksFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupTransferTasksFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}

// optional string cname = 5;
inline bool CgroupTransferTasksFtraceEvent::has_cname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupTransferTasksFtraceEvent::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupTransferTasksFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
  return cname_.GetNoArena();
}
inline void CgroupTransferTasksFtraceEvent::set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}
inline void CgroupTransferTasksFtraceEvent::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}
inline void CgroupTransferTasksFtraceEvent::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}
inline void CgroupTransferTasksFtraceEvent::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}
inline std::string* CgroupTransferTasksFtraceEvent::mutable_cname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupTransferTasksFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupTransferTasksFtraceEvent::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}

// -------------------------------------------------------------------

// CgroupDestroyRootFtraceEvent

// optional int32 root = 1;
inline bool CgroupDestroyRootFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupDestroyRootFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupDestroyRootFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupDestroyRootFtraceEvent.root)
  return root_;
}
inline void CgroupDestroyRootFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupDestroyRootFtraceEvent.root)
}

// optional uint32 ss_mask = 2;
inline bool CgroupDestroyRootFtraceEvent::has_ss_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupDestroyRootFtraceEvent::clear_ss_mask() {
  ss_mask_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CgroupDestroyRootFtraceEvent::ss_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupDestroyRootFtraceEvent.ss_mask)
  return ss_mask_;
}
inline void CgroupDestroyRootFtraceEvent::set_ss_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ss_mask_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupDestroyRootFtraceEvent.ss_mask)
}

// optional string name = 3;
inline bool CgroupDestroyRootFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupDestroyRootFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupDestroyRootFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
  return name_.GetNoArena();
}
inline void CgroupDestroyRootFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}
inline void CgroupDestroyRootFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}
inline void CgroupDestroyRootFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}
inline void CgroupDestroyRootFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}
inline std::string* CgroupDestroyRootFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupDestroyRootFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupDestroyRootFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}

// -------------------------------------------------------------------

// CgroupReleaseFtraceEvent

// optional int32 root = 1;
inline bool CgroupReleaseFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupReleaseFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupReleaseFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.root)
  return root_;
}
inline void CgroupReleaseFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.root)
}

// optional int32 id = 2;
inline bool CgroupReleaseFtraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupReleaseFtraceEvent::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupReleaseFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.id)
  return id_;
}
inline void CgroupReleaseFtraceEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.id)
}

// optional string cname = 3;
inline bool CgroupReleaseFtraceEvent::has_cname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupReleaseFtraceEvent::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupReleaseFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.cname)
  return cname_.GetNoArena();
}
inline void CgroupReleaseFtraceEvent::set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}
inline void CgroupReleaseFtraceEvent::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}
inline void CgroupReleaseFtraceEvent::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}
inline void CgroupReleaseFtraceEvent::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}
inline std::string* CgroupReleaseFtraceEvent::mutable_cname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupReleaseFtraceEvent.cname)
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupReleaseFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupReleaseFtraceEvent.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupReleaseFtraceEvent::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}

// -------------------------------------------------------------------

// CgroupRenameFtraceEvent

// optional int32 root = 1;
inline bool CgroupRenameFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupRenameFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupRenameFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.root)
  return root_;
}
inline void CgroupRenameFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.root)
}

// optional int32 id = 2;
inline bool CgroupRenameFtraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupRenameFtraceEvent::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupRenameFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.id)
  return id_;
}
inline void CgroupRenameFtraceEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.id)
}

// optional string cname = 3;
inline bool CgroupRenameFtraceEvent::has_cname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupRenameFtraceEvent::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupRenameFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.cname)
  return cname_.GetNoArena();
}
inline void CgroupRenameFtraceEvent::set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.cname)
}
inline void CgroupRenameFtraceEvent::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupRenameFtraceEvent.cname)
}
inline void CgroupRenameFtraceEvent::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupRenameFtraceEvent.cname)
}
inline void CgroupRenameFtraceEvent::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupRenameFtraceEvent.cname)
}
inline std::string* CgroupRenameFtraceEvent::mutable_cname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRenameFtraceEvent.cname)
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupRenameFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRenameFtraceEvent.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupRenameFtraceEvent::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRenameFtraceEvent.cname)
}

// -------------------------------------------------------------------

// CgroupSetupRootFtraceEvent

// optional int32 root = 1;
inline bool CgroupSetupRootFtraceEvent::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CgroupSetupRootFtraceEvent::clear_root() {
  root_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgroupSetupRootFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupSetupRootFtraceEvent.root)
  return root_;
}
inline void CgroupSetupRootFtraceEvent::set_root(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  root_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupSetupRootFtraceEvent.root)
}

// optional uint32 ss_mask = 2;
inline bool CgroupSetupRootFtraceEvent::has_ss_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CgroupSetupRootFtraceEvent::clear_ss_mask() {
  ss_mask_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CgroupSetupRootFtraceEvent::ss_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupSetupRootFtraceEvent.ss_mask)
  return ss_mask_;
}
inline void CgroupSetupRootFtraceEvent::set_ss_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ss_mask_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupSetupRootFtraceEvent.ss_mask)
}

// optional string name = 3;
inline bool CgroupSetupRootFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CgroupSetupRootFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupSetupRootFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupSetupRootFtraceEvent.name)
  return name_.GetNoArena();
}
inline void CgroupSetupRootFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}
inline void CgroupSetupRootFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}
inline void CgroupSetupRootFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}
inline void CgroupSetupRootFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}
inline std::string* CgroupSetupRootFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupSetupRootFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CgroupSetupRootFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupSetupRootFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CgroupSetupRootFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto
