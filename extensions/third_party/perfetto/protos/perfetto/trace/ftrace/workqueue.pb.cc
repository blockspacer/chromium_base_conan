// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/workqueue.proto

#include "protos/perfetto/trace/ftrace/workqueue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class WorkqueueActivateWorkFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkqueueActivateWorkFtraceEvent> _instance;
} _WorkqueueActivateWorkFtraceEvent_default_instance_;
class WorkqueueExecuteEndFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkqueueExecuteEndFtraceEvent> _instance;
} _WorkqueueExecuteEndFtraceEvent_default_instance_;
class WorkqueueExecuteStartFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkqueueExecuteStartFtraceEvent> _instance;
} _WorkqueueExecuteStartFtraceEvent_default_instance_;
class WorkqueueQueueWorkFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkqueueQueueWorkFtraceEvent> _instance;
} _WorkqueueQueueWorkFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_WorkqueueActivateWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_WorkqueueActivateWorkFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::WorkqueueActivateWorkFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueActivateWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorkqueueActivateWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto}, {}};

static void InitDefaultsscc_info_WorkqueueExecuteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_WorkqueueExecuteEndFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::WorkqueueExecuteEndFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueExecuteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorkqueueExecuteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto}, {}};

static void InitDefaultsscc_info_WorkqueueExecuteStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_WorkqueueExecuteStartFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::WorkqueueExecuteStartFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueExecuteStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorkqueueExecuteStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto}, {}};

static void InitDefaultsscc_info_WorkqueueQueueWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_WorkqueueQueueWorkFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::WorkqueueQueueWorkFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkqueueQueueWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorkqueueQueueWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void WorkqueueActivateWorkFtraceEvent::InitAsDefaultInstance() {
}
class WorkqueueActivateWorkFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueActivateWorkFtraceEvent>()._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
}
WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent(const WorkqueueActivateWorkFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  work_ = from.work_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
}

void WorkqueueActivateWorkFtraceEvent::SharedCtor() {
  work_ = PROTOBUF_ULONGLONG(0);
}

WorkqueueActivateWorkFtraceEvent::~WorkqueueActivateWorkFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  SharedDtor();
}

void WorkqueueActivateWorkFtraceEvent::SharedDtor() {
}

void WorkqueueActivateWorkFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkqueueActivateWorkFtraceEvent& WorkqueueActivateWorkFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkqueueActivateWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base);
  return *internal_default_instance();
}


void WorkqueueActivateWorkFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkqueueActivateWorkFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkqueueActivateWorkFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 work = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_work(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &work_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkqueueActivateWorkFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->work(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
}

size_t WorkqueueActivateWorkFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 work = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->work());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueActivateWorkFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WorkqueueActivateWorkFtraceEvent*>(
      &from));
}

void WorkqueueActivateWorkFtraceEvent::MergeFrom(const WorkqueueActivateWorkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work()) {
    set_work(from.work());
  }
}

void WorkqueueActivateWorkFtraceEvent::CopyFrom(const WorkqueueActivateWorkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueActivateWorkFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueActivateWorkFtraceEvent::InternalSwap(WorkqueueActivateWorkFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(work_, other->work_);
}

std::string WorkqueueActivateWorkFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueActivateWorkFtraceEvent";
}


// ===================================================================

void WorkqueueExecuteEndFtraceEvent::InitAsDefaultInstance() {
}
class WorkqueueExecuteEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueExecuteEndFtraceEvent>()._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
}
WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent(const WorkqueueExecuteEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  work_ = from.work_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
}

void WorkqueueExecuteEndFtraceEvent::SharedCtor() {
  work_ = PROTOBUF_ULONGLONG(0);
}

WorkqueueExecuteEndFtraceEvent::~WorkqueueExecuteEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  SharedDtor();
}

void WorkqueueExecuteEndFtraceEvent::SharedDtor() {
}

void WorkqueueExecuteEndFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkqueueExecuteEndFtraceEvent& WorkqueueExecuteEndFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkqueueExecuteEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base);
  return *internal_default_instance();
}


void WorkqueueExecuteEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkqueueExecuteEndFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkqueueExecuteEndFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 work = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_work(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &work_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkqueueExecuteEndFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->work(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
}

size_t WorkqueueExecuteEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 work = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->work());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueExecuteEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WorkqueueExecuteEndFtraceEvent*>(
      &from));
}

void WorkqueueExecuteEndFtraceEvent::MergeFrom(const WorkqueueExecuteEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work()) {
    set_work(from.work());
  }
}

void WorkqueueExecuteEndFtraceEvent::CopyFrom(const WorkqueueExecuteEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueExecuteEndFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueExecuteEndFtraceEvent::InternalSwap(WorkqueueExecuteEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(work_, other->work_);
}

std::string WorkqueueExecuteEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueExecuteEndFtraceEvent";
}


// ===================================================================

void WorkqueueExecuteStartFtraceEvent::InitAsDefaultInstance() {
}
class WorkqueueExecuteStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueExecuteStartFtraceEvent>()._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
}
WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent(const WorkqueueExecuteStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&work_, &from.work_,
    static_cast<size_t>(reinterpret_cast<char*>(&function_) -
    reinterpret_cast<char*>(&work_)) + sizeof(function_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
}

void WorkqueueExecuteStartFtraceEvent::SharedCtor() {
  ::memset(&work_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_) -
      reinterpret_cast<char*>(&work_)) + sizeof(function_));
}

WorkqueueExecuteStartFtraceEvent::~WorkqueueExecuteStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  SharedDtor();
}

void WorkqueueExecuteStartFtraceEvent::SharedDtor() {
}

void WorkqueueExecuteStartFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkqueueExecuteStartFtraceEvent& WorkqueueExecuteStartFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkqueueExecuteStartFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base);
  return *internal_default_instance();
}


void WorkqueueExecuteStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&work_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&function_) -
        reinterpret_cast<char*>(&work_)) + sizeof(function_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkqueueExecuteStartFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_function(&has_bits);
          function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkqueueExecuteStartFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 work = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_work(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &work_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_function(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkqueueExecuteStartFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->work(), output);
  }

  // optional uint64 function = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->function(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
}

size_t WorkqueueExecuteStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 work = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->work());
    }

    // optional uint64 function = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->function());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueExecuteStartFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WorkqueueExecuteStartFtraceEvent*>(
      &from));
}

void WorkqueueExecuteStartFtraceEvent::MergeFrom(const WorkqueueExecuteStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      work_ = from.work_;
    }
    if (cached_has_bits & 0x00000002u) {
      function_ = from.function_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkqueueExecuteStartFtraceEvent::CopyFrom(const WorkqueueExecuteStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueExecuteStartFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueExecuteStartFtraceEvent::InternalSwap(WorkqueueExecuteStartFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(work_, other->work_);
  swap(function_, other->function_);
}

std::string WorkqueueExecuteStartFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueExecuteStartFtraceEvent";
}


// ===================================================================

void WorkqueueQueueWorkFtraceEvent::InitAsDefaultInstance() {
}
class WorkqueueQueueWorkFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueQueueWorkFtraceEvent>()._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_workqueue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_req_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
}
WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent(const WorkqueueQueueWorkFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&work_, &from.work_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&work_)) + sizeof(cpu_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
}

void WorkqueueQueueWorkFtraceEvent::SharedCtor() {
  ::memset(&work_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_) -
      reinterpret_cast<char*>(&work_)) + sizeof(cpu_));
}

WorkqueueQueueWorkFtraceEvent::~WorkqueueQueueWorkFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  SharedDtor();
}

void WorkqueueQueueWorkFtraceEvent::SharedDtor() {
}

void WorkqueueQueueWorkFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkqueueQueueWorkFtraceEvent& WorkqueueQueueWorkFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkqueueQueueWorkFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto.base);
  return *internal_default_instance();
}


void WorkqueueQueueWorkFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&work_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_) -
        reinterpret_cast<char*>(&work_)) + sizeof(cpu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkqueueQueueWorkFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_function(&has_bits);
          function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 workqueue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_workqueue(&has_bits);
          workqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 req_cpu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_req_cpu(&has_bits);
          req_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cpu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkqueueQueueWorkFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 work = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_work(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &work_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_function(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 workqueue = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_workqueue(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 req_cpu = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_req_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkqueueQueueWorkFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->work(), output);
  }

  // optional uint64 function = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->function(), output);
  }

  // optional uint64 workqueue = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->workqueue(), output);
  }

  // optional uint32 req_cpu = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->req_cpu(), output);
  }

  // optional uint32 cpu = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->cpu(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
}

size_t WorkqueueQueueWorkFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 work = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->work());
    }

    // optional uint64 function = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->function());
    }

    // optional uint64 workqueue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->workqueue());
    }

    // optional uint32 req_cpu = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->req_cpu());
    }

    // optional uint32 cpu = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueQueueWorkFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WorkqueueQueueWorkFtraceEvent*>(
      &from));
}

void WorkqueueQueueWorkFtraceEvent::MergeFrom(const WorkqueueQueueWorkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      work_ = from.work_;
    }
    if (cached_has_bits & 0x00000002u) {
      function_ = from.function_;
    }
    if (cached_has_bits & 0x00000004u) {
      workqueue_ = from.workqueue_;
    }
    if (cached_has_bits & 0x00000008u) {
      req_cpu_ = from.req_cpu_;
    }
    if (cached_has_bits & 0x00000010u) {
      cpu_ = from.cpu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkqueueQueueWorkFtraceEvent::CopyFrom(const WorkqueueQueueWorkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueQueueWorkFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueQueueWorkFtraceEvent::InternalSwap(WorkqueueQueueWorkFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(work_, other->work_);
  swap(function_, other->function_);
  swap(workqueue_, other->workqueue_);
  swap(req_cpu_, other->req_cpu_);
  swap(cpu_, other->cpu_);
}

std::string WorkqueueQueueWorkFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueQueueWorkFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
