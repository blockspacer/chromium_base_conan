// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class TaskNewtaskFtraceEvent;
class TaskNewtaskFtraceEventDefaultTypeInternal;
extern TaskNewtaskFtraceEventDefaultTypeInternal _TaskNewtaskFtraceEvent_default_instance_;
class TaskRenameFtraceEvent;
class TaskRenameFtraceEventDefaultTypeInternal;
extern TaskRenameFtraceEventDefaultTypeInternal _TaskRenameFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TaskNewtaskFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TaskNewtaskFtraceEvent>(Arena*);
template<> ::perfetto::protos::TaskRenameFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TaskRenameFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TaskNewtaskFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TaskNewtaskFtraceEvent) */ {
 public:
  TaskNewtaskFtraceEvent();
  virtual ~TaskNewtaskFtraceEvent();

  TaskNewtaskFtraceEvent(const TaskNewtaskFtraceEvent& from);
  TaskNewtaskFtraceEvent(TaskNewtaskFtraceEvent&& from) noexcept
    : TaskNewtaskFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TaskNewtaskFtraceEvent& operator=(const TaskNewtaskFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskNewtaskFtraceEvent& operator=(TaskNewtaskFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskNewtaskFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNewtaskFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TaskNewtaskFtraceEvent*>(
               &_TaskNewtaskFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskNewtaskFtraceEvent& a, TaskNewtaskFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskNewtaskFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskNewtaskFtraceEvent* New() const final {
    return CreateMaybeMessage<TaskNewtaskFtraceEvent>(nullptr);
  }

  TaskNewtaskFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskNewtaskFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskNewtaskFtraceEvent& from);
  void MergeFrom(const TaskNewtaskFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskNewtaskFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TaskNewtaskFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 2,
    kPidFieldNumber = 1,
    kOomScoreAdjFieldNumber = 4,
    kCloneFlagsFieldNumber = 3,
  };
  // optional string comm = 2;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 oom_score_adj = 4;
  bool has_oom_score_adj() const;
  void clear_oom_score_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 oom_score_adj() const;
  void set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 clone_flags = 3;
  bool has_clone_flags() const;
  void clear_clone_flags();
  ::PROTOBUF_NAMESPACE_ID::uint64 clone_flags() const;
  void set_clone_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TaskNewtaskFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 oom_score_adj_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clone_flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskRenameFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TaskRenameFtraceEvent) */ {
 public:
  TaskRenameFtraceEvent();
  virtual ~TaskRenameFtraceEvent();

  TaskRenameFtraceEvent(const TaskRenameFtraceEvent& from);
  TaskRenameFtraceEvent(TaskRenameFtraceEvent&& from) noexcept
    : TaskRenameFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TaskRenameFtraceEvent& operator=(const TaskRenameFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRenameFtraceEvent& operator=(TaskRenameFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskRenameFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRenameFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TaskRenameFtraceEvent*>(
               &_TaskRenameFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskRenameFtraceEvent& a, TaskRenameFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRenameFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRenameFtraceEvent* New() const final {
    return CreateMaybeMessage<TaskRenameFtraceEvent>(nullptr);
  }

  TaskRenameFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRenameFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskRenameFtraceEvent& from);
  void MergeFrom(const TaskRenameFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskRenameFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TaskRenameFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldcommFieldNumber = 2,
    kNewcommFieldNumber = 3,
    kPidFieldNumber = 1,
    kOomScoreAdjFieldNumber = 4,
  };
  // optional string oldcomm = 2;
  bool has_oldcomm() const;
  void clear_oldcomm();
  const std::string& oldcomm() const;
  void set_oldcomm(const std::string& value);
  void set_oldcomm(std::string&& value);
  void set_oldcomm(const char* value);
  void set_oldcomm(const char* value, size_t size);
  std::string* mutable_oldcomm();
  std::string* release_oldcomm();
  void set_allocated_oldcomm(std::string* oldcomm);

  // optional string newcomm = 3;
  bool has_newcomm() const;
  void clear_newcomm();
  const std::string& newcomm() const;
  void set_newcomm(const std::string& value);
  void set_newcomm(std::string&& value);
  void set_newcomm(const char* value);
  void set_newcomm(const char* value, size_t size);
  std::string* mutable_newcomm();
  std::string* release_newcomm();
  void set_allocated_newcomm(std::string* newcomm);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 oom_score_adj = 4;
  bool has_oom_score_adj() const;
  void clear_oom_score_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 oom_score_adj() const;
  void set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TaskRenameFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldcomm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcomm_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 oom_score_adj_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskNewtaskFtraceEvent

// optional int32 pid = 1;
inline bool TaskNewtaskFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskNewtaskFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskNewtaskFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.pid)
  return pid_;
}
inline void TaskNewtaskFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.pid)
}

// optional string comm = 2;
inline bool TaskNewtaskFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskNewtaskFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskNewtaskFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void TaskNewtaskFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}
inline void TaskNewtaskFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}
inline void TaskNewtaskFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}
inline void TaskNewtaskFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}
inline std::string* TaskNewtaskFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TaskNewtaskFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskNewtaskFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TaskNewtaskFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskNewtaskFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}

// optional uint64 clone_flags = 3;
inline bool TaskNewtaskFtraceEvent::has_clone_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskNewtaskFtraceEvent::clear_clone_flags() {
  clone_flags_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskNewtaskFtraceEvent::clone_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.clone_flags)
  return clone_flags_;
}
inline void TaskNewtaskFtraceEvent::set_clone_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  clone_flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.clone_flags)
}

// optional int32 oom_score_adj = 4;
inline bool TaskNewtaskFtraceEvent::has_oom_score_adj() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskNewtaskFtraceEvent::clear_oom_score_adj() {
  oom_score_adj_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskNewtaskFtraceEvent::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.oom_score_adj)
  return oom_score_adj_;
}
inline void TaskNewtaskFtraceEvent::set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  oom_score_adj_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.oom_score_adj)
}

// -------------------------------------------------------------------

// TaskRenameFtraceEvent

// optional int32 pid = 1;
inline bool TaskRenameFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskRenameFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskRenameFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.pid)
  return pid_;
}
inline void TaskRenameFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.pid)
}

// optional string oldcomm = 2;
inline bool TaskRenameFtraceEvent::has_oldcomm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskRenameFtraceEvent::clear_oldcomm() {
  oldcomm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskRenameFtraceEvent::oldcomm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
  return oldcomm_.GetNoArena();
}
inline void TaskRenameFtraceEvent::set_oldcomm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oldcomm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}
inline void TaskRenameFtraceEvent::set_oldcomm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  oldcomm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}
inline void TaskRenameFtraceEvent::set_oldcomm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  oldcomm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}
inline void TaskRenameFtraceEvent::set_oldcomm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  oldcomm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}
inline std::string* TaskRenameFtraceEvent::mutable_oldcomm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
  return oldcomm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskRenameFtraceEvent::release_oldcomm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
  if (!has_oldcomm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oldcomm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRenameFtraceEvent::set_allocated_oldcomm(std::string* oldcomm) {
  if (oldcomm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oldcomm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldcomm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}

// optional string newcomm = 3;
inline bool TaskRenameFtraceEvent::has_newcomm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskRenameFtraceEvent::clear_newcomm() {
  newcomm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskRenameFtraceEvent::newcomm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.newcomm)
  return newcomm_.GetNoArena();
}
inline void TaskRenameFtraceEvent::set_newcomm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  newcomm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}
inline void TaskRenameFtraceEvent::set_newcomm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  newcomm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}
inline void TaskRenameFtraceEvent::set_newcomm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  newcomm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}
inline void TaskRenameFtraceEvent::set_newcomm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  newcomm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}
inline std::string* TaskRenameFtraceEvent::mutable_newcomm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TaskRenameFtraceEvent.newcomm)
  return newcomm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskRenameFtraceEvent::release_newcomm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TaskRenameFtraceEvent.newcomm)
  if (!has_newcomm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return newcomm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRenameFtraceEvent::set_allocated_newcomm(std::string* newcomm) {
  if (newcomm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newcomm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newcomm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}

// optional int32 oom_score_adj = 4;
inline bool TaskRenameFtraceEvent::has_oom_score_adj() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskRenameFtraceEvent::clear_oom_score_adj() {
  oom_score_adj_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskRenameFtraceEvent::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.oom_score_adj)
  return oom_score_adj_;
}
inline void TaskRenameFtraceEvent::set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  oom_score_adj_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.oom_score_adj)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto
