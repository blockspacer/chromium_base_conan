// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_IPI_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_IPI_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class IpiRaiseFtraceEvent;
class IpiExitFtraceEvent;
class IpiEntryFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT IpiRaiseFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTargetCpusFieldNumber = 1,
    kReasonFieldNumber = 2,
  };

  IpiRaiseFtraceEvent();
  ~IpiRaiseFtraceEvent() override;
  IpiRaiseFtraceEvent(IpiRaiseFtraceEvent&&) noexcept;
  IpiRaiseFtraceEvent& operator=(IpiRaiseFtraceEvent&&);
  IpiRaiseFtraceEvent(const IpiRaiseFtraceEvent&);
  IpiRaiseFtraceEvent& operator=(const IpiRaiseFtraceEvent&);
  bool operator==(const IpiRaiseFtraceEvent&) const;
  bool operator!=(const IpiRaiseFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_target_cpus() const { return _has_field_[1]; }
  uint32_t target_cpus() const { return target_cpus_; }
  void set_target_cpus(uint32_t value) { target_cpus_ = value; _has_field_.set(1); }

  bool has_reason() const { return _has_field_[2]; }
  const std::string& reason() const { return reason_; }
  void set_reason(const std::string& value) { reason_ = value; _has_field_.set(2); }

 private:
  uint32_t target_cpus_{};
  std::string reason_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT IpiExitFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kReasonFieldNumber = 1,
  };

  IpiExitFtraceEvent();
  ~IpiExitFtraceEvent() override;
  IpiExitFtraceEvent(IpiExitFtraceEvent&&) noexcept;
  IpiExitFtraceEvent& operator=(IpiExitFtraceEvent&&);
  IpiExitFtraceEvent(const IpiExitFtraceEvent&);
  IpiExitFtraceEvent& operator=(const IpiExitFtraceEvent&);
  bool operator==(const IpiExitFtraceEvent&) const;
  bool operator!=(const IpiExitFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_reason() const { return _has_field_[1]; }
  const std::string& reason() const { return reason_; }
  void set_reason(const std::string& value) { reason_ = value; _has_field_.set(1); }

 private:
  std::string reason_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT IpiEntryFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kReasonFieldNumber = 1,
  };

  IpiEntryFtraceEvent();
  ~IpiEntryFtraceEvent() override;
  IpiEntryFtraceEvent(IpiEntryFtraceEvent&&) noexcept;
  IpiEntryFtraceEvent& operator=(IpiEntryFtraceEvent&&);
  IpiEntryFtraceEvent(const IpiEntryFtraceEvent&);
  IpiEntryFtraceEvent& operator=(const IpiEntryFtraceEvent&);
  bool operator==(const IpiEntryFtraceEvent&) const;
  bool operator!=(const IpiEntryFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_reason() const { return _has_field_[1]; }
  const std::string& reason() const { return reason_; }
  void set_reason(const std::string& value) { reason_ = value; _has_field_.set(1); }

 private:
  std::string reason_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_IPI_PROTO_CPP_H_
