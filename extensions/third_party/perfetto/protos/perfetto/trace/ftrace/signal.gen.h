// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SIGNAL_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SIGNAL_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class SignalGenerateFtraceEvent;
class SignalDeliverFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT SignalGenerateFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCodeFieldNumber = 1,
    kCommFieldNumber = 2,
    kGroupFieldNumber = 3,
    kPidFieldNumber = 4,
    kResultFieldNumber = 5,
    kSigFieldNumber = 6,
  };

  SignalGenerateFtraceEvent();
  ~SignalGenerateFtraceEvent() override;
  SignalGenerateFtraceEvent(SignalGenerateFtraceEvent&&) noexcept;
  SignalGenerateFtraceEvent& operator=(SignalGenerateFtraceEvent&&);
  SignalGenerateFtraceEvent(const SignalGenerateFtraceEvent&);
  SignalGenerateFtraceEvent& operator=(const SignalGenerateFtraceEvent&);
  bool operator==(const SignalGenerateFtraceEvent&) const;
  bool operator!=(const SignalGenerateFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_code() const { return _has_field_[1]; }
  int32_t code() const { return code_; }
  void set_code(int32_t value) { code_ = value; _has_field_.set(1); }

  bool has_comm() const { return _has_field_[2]; }
  const std::string& comm() const { return comm_; }
  void set_comm(const std::string& value) { comm_ = value; _has_field_.set(2); }

  bool has_group() const { return _has_field_[3]; }
  int32_t group() const { return group_; }
  void set_group(int32_t value) { group_ = value; _has_field_.set(3); }

  bool has_pid() const { return _has_field_[4]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(4); }

  bool has_result() const { return _has_field_[5]; }
  int32_t result() const { return result_; }
  void set_result(int32_t value) { result_ = value; _has_field_.set(5); }

  bool has_sig() const { return _has_field_[6]; }
  int32_t sig() const { return sig_; }
  void set_sig(int32_t value) { sig_ = value; _has_field_.set(6); }

 private:
  int32_t code_{};
  std::string comm_{};
  int32_t group_{};
  int32_t pid_{};
  int32_t result_{};
  int32_t sig_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT SignalDeliverFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCodeFieldNumber = 1,
    kSaFlagsFieldNumber = 2,
    kSigFieldNumber = 3,
  };

  SignalDeliverFtraceEvent();
  ~SignalDeliverFtraceEvent() override;
  SignalDeliverFtraceEvent(SignalDeliverFtraceEvent&&) noexcept;
  SignalDeliverFtraceEvent& operator=(SignalDeliverFtraceEvent&&);
  SignalDeliverFtraceEvent(const SignalDeliverFtraceEvent&);
  SignalDeliverFtraceEvent& operator=(const SignalDeliverFtraceEvent&);
  bool operator==(const SignalDeliverFtraceEvent&) const;
  bool operator!=(const SignalDeliverFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_code() const { return _has_field_[1]; }
  int32_t code() const { return code_; }
  void set_code(int32_t value) { code_ = value; _has_field_.set(1); }

  bool has_sa_flags() const { return _has_field_[2]; }
  uint64_t sa_flags() const { return sa_flags_; }
  void set_sa_flags(uint64_t value) { sa_flags_ = value; _has_field_.set(2); }

  bool has_sig() const { return _has_field_[3]; }
  int32_t sig() const { return sig_; }
  void set_sig(int32_t value) { sig_ = value; _has_field_.set(3); }

 private:
  int32_t code_{};
  uint64_t sa_flags_{};
  int32_t sig_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SIGNAL_PROTO_CPP_H_
