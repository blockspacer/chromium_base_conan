// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/ftrace/ftrace_event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class FtraceEventBundle;
class FtraceEventBundleDefaultTypeInternal;
extern FtraceEventBundleDefaultTypeInternal _FtraceEventBundle_default_instance_;
class FtraceEventBundle_CompactSched;
class FtraceEventBundle_CompactSchedDefaultTypeInternal;
extern FtraceEventBundle_CompactSchedDefaultTypeInternal _FtraceEventBundle_CompactSched_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::FtraceEventBundle* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle>(Arena*);
template<> ::perfetto::protos::FtraceEventBundle_CompactSched* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_CompactSched>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class FtraceEventBundle_CompactSched :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle.CompactSched) */ {
 public:
  FtraceEventBundle_CompactSched();
  virtual ~FtraceEventBundle_CompactSched();

  FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched& from);
  FtraceEventBundle_CompactSched(FtraceEventBundle_CompactSched&& from) noexcept
    : FtraceEventBundle_CompactSched() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle_CompactSched& operator=(const FtraceEventBundle_CompactSched& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle_CompactSched& operator=(FtraceEventBundle_CompactSched&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceEventBundle_CompactSched& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceEventBundle_CompactSched* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle_CompactSched*>(
               &_FtraceEventBundle_CompactSched_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceEventBundle_CompactSched& a, FtraceEventBundle_CompactSched& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceEventBundle_CompactSched* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceEventBundle_CompactSched* New() const final {
    return CreateMaybeMessage<FtraceEventBundle_CompactSched>(nullptr);
  }

  FtraceEventBundle_CompactSched* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceEventBundle_CompactSched>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceEventBundle_CompactSched& from);
  void MergeFrom(const FtraceEventBundle_CompactSched& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceEventBundle_CompactSched* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceEventBundle.CompactSched";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchTimestampFieldNumber = 1,
    kSwitchPrevStateFieldNumber = 2,
    kSwitchNextPidFieldNumber = 3,
    kSwitchNextPrioFieldNumber = 4,
    kInternTableFieldNumber = 5,
    kSwitchNextCommIndexFieldNumber = 6,
    kWakingTimestampFieldNumber = 7,
    kWakingPidFieldNumber = 8,
    kWakingTargetCpuFieldNumber = 9,
    kWakingPrioFieldNumber = 10,
    kWakingCommIndexFieldNumber = 11,
  };
  // repeated uint64 switch_timestamp = 1 [packed = true];
  int switch_timestamp_size() const;
  void clear_switch_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 switch_timestamp(int index) const;
  void set_switch_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_switch_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      switch_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_switch_timestamp();

  // repeated int64 switch_prev_state = 2 [packed = true];
  int switch_prev_state_size() const;
  void clear_switch_prev_state();
  ::PROTOBUF_NAMESPACE_ID::int64 switch_prev_state(int index) const;
  void set_switch_prev_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_switch_prev_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      switch_prev_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_switch_prev_state();

  // repeated int32 switch_next_pid = 3 [packed = true];
  int switch_next_pid_size() const;
  void clear_switch_next_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 switch_next_pid(int index) const;
  void set_switch_next_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_switch_next_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      switch_next_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_switch_next_pid();

  // repeated int32 switch_next_prio = 4 [packed = true];
  int switch_next_prio_size() const;
  void clear_switch_next_prio();
  ::PROTOBUF_NAMESPACE_ID::int32 switch_next_prio(int index) const;
  void set_switch_next_prio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_switch_next_prio(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      switch_next_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_switch_next_prio();

  // repeated string intern_table = 5;
  int intern_table_size() const;
  void clear_intern_table();
  const std::string& intern_table(int index) const;
  std::string* mutable_intern_table(int index);
  void set_intern_table(int index, const std::string& value);
  void set_intern_table(int index, std::string&& value);
  void set_intern_table(int index, const char* value);
  void set_intern_table(int index, const char* value, size_t size);
  std::string* add_intern_table();
  void add_intern_table(const std::string& value);
  void add_intern_table(std::string&& value);
  void add_intern_table(const char* value);
  void add_intern_table(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intern_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intern_table();

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  int switch_next_comm_index_size() const;
  void clear_switch_next_comm_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 switch_next_comm_index(int index) const;
  void set_switch_next_comm_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_switch_next_comm_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      switch_next_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_switch_next_comm_index();

  // repeated uint64 waking_timestamp = 7 [packed = true];
  int waking_timestamp_size() const;
  void clear_waking_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 waking_timestamp(int index) const;
  void set_waking_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_waking_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      waking_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_waking_timestamp();

  // repeated int32 waking_pid = 8 [packed = true];
  int waking_pid_size() const;
  void clear_waking_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 waking_pid(int index) const;
  void set_waking_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_waking_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      waking_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_waking_pid();

  // repeated int32 waking_target_cpu = 9 [packed = true];
  int waking_target_cpu_size() const;
  void clear_waking_target_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 waking_target_cpu(int index) const;
  void set_waking_target_cpu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_waking_target_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      waking_target_cpu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_waking_target_cpu();

  // repeated int32 waking_prio = 10 [packed = true];
  int waking_prio_size() const;
  void clear_waking_prio();
  ::PROTOBUF_NAMESPACE_ID::int32 waking_prio(int index) const;
  void set_waking_prio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_waking_prio(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      waking_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_waking_prio();

  // repeated uint32 waking_comm_index = 11 [packed = true];
  int waking_comm_index_size() const;
  void clear_waking_comm_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 waking_comm_index(int index) const;
  void set_waking_comm_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_waking_comm_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      waking_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_waking_comm_index();

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle.CompactSched)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > switch_timestamp_;
  mutable std::atomic<int> _switch_timestamp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > switch_prev_state_;
  mutable std::atomic<int> _switch_prev_state_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > switch_next_pid_;
  mutable std::atomic<int> _switch_next_pid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > switch_next_prio_;
  mutable std::atomic<int> _switch_next_prio_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intern_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > switch_next_comm_index_;
  mutable std::atomic<int> _switch_next_comm_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > waking_timestamp_;
  mutable std::atomic<int> _waking_timestamp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > waking_pid_;
  mutable std::atomic<int> _waking_pid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > waking_target_cpu_;
  mutable std::atomic<int> _waking_target_cpu_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > waking_prio_;
  mutable std::atomic<int> _waking_prio_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > waking_comm_index_;
  mutable std::atomic<int> _waking_comm_index_cached_byte_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};
// -------------------------------------------------------------------

class FtraceEventBundle :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle) */ {
 public:
  FtraceEventBundle();
  virtual ~FtraceEventBundle();

  FtraceEventBundle(const FtraceEventBundle& from);
  FtraceEventBundle(FtraceEventBundle&& from) noexcept
    : FtraceEventBundle() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle& operator=(const FtraceEventBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle& operator=(FtraceEventBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceEventBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceEventBundle* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle*>(
               &_FtraceEventBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtraceEventBundle& a, FtraceEventBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceEventBundle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceEventBundle* New() const final {
    return CreateMaybeMessage<FtraceEventBundle>(nullptr);
  }

  FtraceEventBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceEventBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceEventBundle& from);
  void MergeFrom(const FtraceEventBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceEventBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceEventBundle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FtraceEventBundle_CompactSched CompactSched;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kCompactSchedFieldNumber = 4,
    kCpuFieldNumber = 1,
    kLostEventsFieldNumber = 3,
  };
  // repeated .perfetto.protos.FtraceEvent event = 2;
  int event_size() const;
  void clear_event();
  ::perfetto::protos::FtraceEvent* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >*
      mutable_event();
  const ::perfetto::protos::FtraceEvent& event(int index) const;
  ::perfetto::protos::FtraceEvent* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >&
      event() const;

  // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
  bool has_compact_sched() const;
  void clear_compact_sched();
  const ::perfetto::protos::FtraceEventBundle_CompactSched& compact_sched() const;
  ::perfetto::protos::FtraceEventBundle_CompactSched* release_compact_sched();
  ::perfetto::protos::FtraceEventBundle_CompactSched* mutable_compact_sched();
  void set_allocated_compact_sched(::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched);

  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool lost_events = 3;
  bool has_lost_events() const;
  void clear_lost_events();
  bool lost_events() const;
  void set_lost_events(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent > event_;
  ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  bool lost_events_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtraceEventBundle_CompactSched

// repeated string intern_table = 5;
inline int FtraceEventBundle_CompactSched::intern_table_size() const {
  return intern_table_.size();
}
inline void FtraceEventBundle_CompactSched::clear_intern_table() {
  intern_table_.Clear();
}
inline const std::string& FtraceEventBundle_CompactSched::intern_table(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return intern_table_.Get(index);
}
inline std::string* FtraceEventBundle_CompactSched::mutable_intern_table(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return intern_table_.Mutable(index);
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  intern_table_.Mutable(index)->assign(value);
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  intern_table_.Mutable(index)->assign(std::move(value));
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intern_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const char* value, size_t size) {
  intern_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline std::string* FtraceEventBundle_CompactSched::add_intern_table() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return intern_table_.Add();
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const std::string& value) {
  intern_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(std::string&& value) {
  intern_table_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intern_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const char* value, size_t size) {
  intern_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceEventBundle_CompactSched::intern_table() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return intern_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceEventBundle_CompactSched::mutable_intern_table() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return &intern_table_;
}

// repeated uint64 switch_timestamp = 1 [packed = true];
inline int FtraceEventBundle_CompactSched::switch_timestamp_size() const {
  return switch_timestamp_.size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_timestamp() {
  switch_timestamp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FtraceEventBundle_CompactSched::switch_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return switch_timestamp_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  switch_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
}
inline void FtraceEventBundle_CompactSched::add_switch_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  switch_timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FtraceEventBundle_CompactSched::switch_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return switch_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FtraceEventBundle_CompactSched::mutable_switch_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return &switch_timestamp_;
}

// repeated int64 switch_prev_state = 2 [packed = true];
inline int FtraceEventBundle_CompactSched::switch_prev_state_size() const {
  return switch_prev_state_.size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_prev_state() {
  switch_prev_state_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FtraceEventBundle_CompactSched::switch_prev_state(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return switch_prev_state_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_prev_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  switch_prev_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
}
inline void FtraceEventBundle_CompactSched::add_switch_prev_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  switch_prev_state_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FtraceEventBundle_CompactSched::switch_prev_state() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return switch_prev_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FtraceEventBundle_CompactSched::mutable_switch_prev_state() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return &switch_prev_state_;
}

// repeated int32 switch_next_pid = 3 [packed = true];
inline int FtraceEventBundle_CompactSched::switch_next_pid_size() const {
  return switch_next_pid_.size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_pid() {
  switch_next_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FtraceEventBundle_CompactSched::switch_next_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return switch_next_pid_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  switch_next_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
}
inline void FtraceEventBundle_CompactSched::add_switch_next_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  switch_next_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FtraceEventBundle_CompactSched::switch_next_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return switch_next_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FtraceEventBundle_CompactSched::mutable_switch_next_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return &switch_next_pid_;
}

// repeated int32 switch_next_prio = 4 [packed = true];
inline int FtraceEventBundle_CompactSched::switch_next_prio_size() const {
  return switch_next_prio_.size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_prio() {
  switch_next_prio_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FtraceEventBundle_CompactSched::switch_next_prio(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return switch_next_prio_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_prio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  switch_next_prio_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
}
inline void FtraceEventBundle_CompactSched::add_switch_next_prio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  switch_next_prio_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FtraceEventBundle_CompactSched::switch_next_prio() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return switch_next_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FtraceEventBundle_CompactSched::mutable_switch_next_prio() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return &switch_next_prio_;
}

// repeated uint32 switch_next_comm_index = 6 [packed = true];
inline int FtraceEventBundle_CompactSched::switch_next_comm_index_size() const {
  return switch_next_comm_index_.size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_comm_index() {
  switch_next_comm_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceEventBundle_CompactSched::switch_next_comm_index(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return switch_next_comm_index_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_comm_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  switch_next_comm_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
}
inline void FtraceEventBundle_CompactSched::add_switch_next_comm_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  switch_next_comm_index_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FtraceEventBundle_CompactSched::switch_next_comm_index() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return switch_next_comm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FtraceEventBundle_CompactSched::mutable_switch_next_comm_index() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return &switch_next_comm_index_;
}

// repeated uint64 waking_timestamp = 7 [packed = true];
inline int FtraceEventBundle_CompactSched::waking_timestamp_size() const {
  return waking_timestamp_.size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_timestamp() {
  waking_timestamp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FtraceEventBundle_CompactSched::waking_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return waking_timestamp_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  waking_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
}
inline void FtraceEventBundle_CompactSched::add_waking_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  waking_timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FtraceEventBundle_CompactSched::waking_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return waking_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FtraceEventBundle_CompactSched::mutable_waking_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return &waking_timestamp_;
}

// repeated int32 waking_pid = 8 [packed = true];
inline int FtraceEventBundle_CompactSched::waking_pid_size() const {
  return waking_pid_.size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_pid() {
  waking_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FtraceEventBundle_CompactSched::waking_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return waking_pid_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  waking_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
}
inline void FtraceEventBundle_CompactSched::add_waking_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  waking_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FtraceEventBundle_CompactSched::waking_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return waking_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FtraceEventBundle_CompactSched::mutable_waking_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return &waking_pid_;
}

// repeated int32 waking_target_cpu = 9 [packed = true];
inline int FtraceEventBundle_CompactSched::waking_target_cpu_size() const {
  return waking_target_cpu_.size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_target_cpu() {
  waking_target_cpu_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FtraceEventBundle_CompactSched::waking_target_cpu(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return waking_target_cpu_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_target_cpu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  waking_target_cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
}
inline void FtraceEventBundle_CompactSched::add_waking_target_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  waking_target_cpu_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FtraceEventBundle_CompactSched::waking_target_cpu() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return waking_target_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FtraceEventBundle_CompactSched::mutable_waking_target_cpu() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return &waking_target_cpu_;
}

// repeated int32 waking_prio = 10 [packed = true];
inline int FtraceEventBundle_CompactSched::waking_prio_size() const {
  return waking_prio_.size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_prio() {
  waking_prio_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FtraceEventBundle_CompactSched::waking_prio(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return waking_prio_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_prio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  waking_prio_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
}
inline void FtraceEventBundle_CompactSched::add_waking_prio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  waking_prio_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FtraceEventBundle_CompactSched::waking_prio() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return waking_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FtraceEventBundle_CompactSched::mutable_waking_prio() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return &waking_prio_;
}

// repeated uint32 waking_comm_index = 11 [packed = true];
inline int FtraceEventBundle_CompactSched::waking_comm_index_size() const {
  return waking_comm_index_.size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_comm_index() {
  waking_comm_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceEventBundle_CompactSched::waking_comm_index(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return waking_comm_index_.Get(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_comm_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  waking_comm_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
}
inline void FtraceEventBundle_CompactSched::add_waking_comm_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  waking_comm_index_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FtraceEventBundle_CompactSched::waking_comm_index() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return waking_comm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FtraceEventBundle_CompactSched::mutable_waking_comm_index() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return &waking_comm_index_;
}

// -------------------------------------------------------------------

// FtraceEventBundle

// optional uint32 cpu = 1;
inline bool FtraceEventBundle::has_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FtraceEventBundle::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceEventBundle::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.cpu)
  return cpu_;
}
inline void FtraceEventBundle::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.cpu)
}

// repeated .perfetto.protos.FtraceEvent event = 2;
inline int FtraceEventBundle::event_size() const {
  return event_.size();
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.event)
  return event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >*
FtraceEventBundle::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.event)
  return &event_;
}
inline const ::perfetto::protos::FtraceEvent& FtraceEventBundle::event(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.event)
  return event_.Get(index);
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::add_event() {
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.event)
  return event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >&
FtraceEventBundle::event() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.event)
  return event_;
}

// optional bool lost_events = 3;
inline bool FtraceEventBundle::has_lost_events() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FtraceEventBundle::clear_lost_events() {
  lost_events_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FtraceEventBundle::lost_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.lost_events)
  return lost_events_;
}
inline void FtraceEventBundle::set_lost_events(bool value) {
  _has_bits_[0] |= 0x00000004u;
  lost_events_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.lost_events)
}

// optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
inline bool FtraceEventBundle::has_compact_sched() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceEventBundle::clear_compact_sched() {
  if (compact_sched_ != nullptr) compact_sched_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::FtraceEventBundle_CompactSched& FtraceEventBundle::compact_sched() const {
  const ::perfetto::protos::FtraceEventBundle_CompactSched* p = compact_sched_;
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.compact_sched)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::FtraceEventBundle_CompactSched*>(
      &::perfetto::protos::_FtraceEventBundle_CompactSched_default_instance_);
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::release_compact_sched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEventBundle.compact_sched)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceEventBundle_CompactSched* temp = compact_sched_;
  compact_sched_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::mutable_compact_sched() {
  _has_bits_[0] |= 0x00000001u;
  if (compact_sched_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_CompactSched>(GetArenaNoVirtual());
    compact_sched_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.compact_sched)
  return compact_sched_;
}
inline void FtraceEventBundle::set_allocated_compact_sched(::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compact_sched_;
  }
  if (compact_sched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compact_sched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_sched, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  compact_sched_ = compact_sched;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEventBundle.compact_sched)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto
