#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

CpuhpLatencyFtraceEvent::CpuhpLatencyFtraceEvent() = default;
CpuhpLatencyFtraceEvent::~CpuhpLatencyFtraceEvent() = default;
CpuhpLatencyFtraceEvent::CpuhpLatencyFtraceEvent(const CpuhpLatencyFtraceEvent&) = default;
CpuhpLatencyFtraceEvent& CpuhpLatencyFtraceEvent::operator=(const CpuhpLatencyFtraceEvent&) = default;
CpuhpLatencyFtraceEvent::CpuhpLatencyFtraceEvent(CpuhpLatencyFtraceEvent&&) noexcept = default;
CpuhpLatencyFtraceEvent& CpuhpLatencyFtraceEvent::operator=(CpuhpLatencyFtraceEvent&&) = default;

bool CpuhpLatencyFtraceEvent::operator==(const CpuhpLatencyFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cpu_ == other.cpu_
   && ret_ == other.ret_
   && state_ == other.state_
   && time_ == other.time_;
}

bool CpuhpLatencyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* ret */:
        field.get(&ret_);
        break;
      case 3 /* state */:
        field.get(&state_);
        break;
      case 4 /* time */:
        field.get(&time_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuhpLatencyFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuhpLatencyFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuhpLatencyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cpu_);
  }

  // Field 2: ret
  if (_has_field_[2]) {
    msg->AppendVarInt(2, ret_);
  }

  // Field 3: state
  if (_has_field_[3]) {
    msg->AppendVarInt(3, state_);
  }

  // Field 4: time
  if (_has_field_[4]) {
    msg->AppendVarInt(4, time_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


CpuhpEnterFtraceEvent::CpuhpEnterFtraceEvent() = default;
CpuhpEnterFtraceEvent::~CpuhpEnterFtraceEvent() = default;
CpuhpEnterFtraceEvent::CpuhpEnterFtraceEvent(const CpuhpEnterFtraceEvent&) = default;
CpuhpEnterFtraceEvent& CpuhpEnterFtraceEvent::operator=(const CpuhpEnterFtraceEvent&) = default;
CpuhpEnterFtraceEvent::CpuhpEnterFtraceEvent(CpuhpEnterFtraceEvent&&) noexcept = default;
CpuhpEnterFtraceEvent& CpuhpEnterFtraceEvent::operator=(CpuhpEnterFtraceEvent&&) = default;

bool CpuhpEnterFtraceEvent::operator==(const CpuhpEnterFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cpu_ == other.cpu_
   && fun_ == other.fun_
   && idx_ == other.idx_
   && target_ == other.target_;
}

bool CpuhpEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* fun */:
        field.get(&fun_);
        break;
      case 3 /* idx */:
        field.get(&idx_);
        break;
      case 4 /* target */:
        field.get(&target_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuhpEnterFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuhpEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuhpEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cpu_);
  }

  // Field 2: fun
  if (_has_field_[2]) {
    msg->AppendVarInt(2, fun_);
  }

  // Field 3: idx
  if (_has_field_[3]) {
    msg->AppendVarInt(3, idx_);
  }

  // Field 4: target
  if (_has_field_[4]) {
    msg->AppendVarInt(4, target_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


CpuhpMultiEnterFtraceEvent::CpuhpMultiEnterFtraceEvent() = default;
CpuhpMultiEnterFtraceEvent::~CpuhpMultiEnterFtraceEvent() = default;
CpuhpMultiEnterFtraceEvent::CpuhpMultiEnterFtraceEvent(const CpuhpMultiEnterFtraceEvent&) = default;
CpuhpMultiEnterFtraceEvent& CpuhpMultiEnterFtraceEvent::operator=(const CpuhpMultiEnterFtraceEvent&) = default;
CpuhpMultiEnterFtraceEvent::CpuhpMultiEnterFtraceEvent(CpuhpMultiEnterFtraceEvent&&) noexcept = default;
CpuhpMultiEnterFtraceEvent& CpuhpMultiEnterFtraceEvent::operator=(CpuhpMultiEnterFtraceEvent&&) = default;

bool CpuhpMultiEnterFtraceEvent::operator==(const CpuhpMultiEnterFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cpu_ == other.cpu_
   && fun_ == other.fun_
   && idx_ == other.idx_
   && target_ == other.target_;
}

bool CpuhpMultiEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* fun */:
        field.get(&fun_);
        break;
      case 3 /* idx */:
        field.get(&idx_);
        break;
      case 4 /* target */:
        field.get(&target_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuhpMultiEnterFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuhpMultiEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuhpMultiEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cpu_);
  }

  // Field 2: fun
  if (_has_field_[2]) {
    msg->AppendVarInt(2, fun_);
  }

  // Field 3: idx
  if (_has_field_[3]) {
    msg->AppendVarInt(3, idx_);
  }

  // Field 4: target
  if (_has_field_[4]) {
    msg->AppendVarInt(4, target_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


CpuhpExitFtraceEvent::CpuhpExitFtraceEvent() = default;
CpuhpExitFtraceEvent::~CpuhpExitFtraceEvent() = default;
CpuhpExitFtraceEvent::CpuhpExitFtraceEvent(const CpuhpExitFtraceEvent&) = default;
CpuhpExitFtraceEvent& CpuhpExitFtraceEvent::operator=(const CpuhpExitFtraceEvent&) = default;
CpuhpExitFtraceEvent::CpuhpExitFtraceEvent(CpuhpExitFtraceEvent&&) noexcept = default;
CpuhpExitFtraceEvent& CpuhpExitFtraceEvent::operator=(CpuhpExitFtraceEvent&&) = default;

bool CpuhpExitFtraceEvent::operator==(const CpuhpExitFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cpu_ == other.cpu_
   && idx_ == other.idx_
   && ret_ == other.ret_
   && state_ == other.state_;
}

bool CpuhpExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* idx */:
        field.get(&idx_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      case 4 /* state */:
        field.get(&state_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuhpExitFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuhpExitFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuhpExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cpu_);
  }

  // Field 2: idx
  if (_has_field_[2]) {
    msg->AppendVarInt(2, idx_);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    msg->AppendVarInt(3, ret_);
  }

  // Field 4: state
  if (_has_field_[4]) {
    msg->AppendVarInt(4, state_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
