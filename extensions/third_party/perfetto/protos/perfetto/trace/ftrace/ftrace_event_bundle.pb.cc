// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<331> scc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
namespace perfetto {
namespace protos {
class FtraceEventBundle_CompactSchedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceEventBundle_CompactSched> _instance;
} _FtraceEventBundle_CompactSched_default_instance_;
class FtraceEventBundleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceEventBundle> _instance;
} _FtraceEventBundle_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceEventBundle_default_instance_;
    new (ptr) ::perfetto::protos::FtraceEventBundle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceEventBundle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto}, {
      &scc_info_FtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto.base,
      &scc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto.base,}};

static void InitDefaultsscc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceEventBundle_CompactSched_default_instance_;
    new (ptr) ::perfetto::protos::FtraceEventBundle_CompactSched();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceEventBundle_CompactSched::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void FtraceEventBundle_CompactSched::InitAsDefaultInstance() {
}
class FtraceEventBundle_CompactSched::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceEventBundle_CompactSched>()._has_bits_);
};

FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceEventBundle.CompactSched)
}
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      switch_timestamp_(from.switch_timestamp_),
      switch_prev_state_(from.switch_prev_state_),
      switch_next_pid_(from.switch_next_pid_),
      switch_next_prio_(from.switch_next_prio_),
      intern_table_(from.intern_table_),
      switch_next_comm_index_(from.switch_next_comm_index_),
      waking_timestamp_(from.waking_timestamp_),
      waking_pid_(from.waking_pid_),
      waking_target_cpu_(from.waking_target_cpu_),
      waking_prio_(from.waking_prio_),
      waking_comm_index_(from.waking_comm_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEventBundle.CompactSched)
}

void FtraceEventBundle_CompactSched::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto.base);
}

FtraceEventBundle_CompactSched::~FtraceEventBundle_CompactSched() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEventBundle.CompactSched)
  SharedDtor();
}

void FtraceEventBundle_CompactSched::SharedDtor() {
}

void FtraceEventBundle_CompactSched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceEventBundle_CompactSched& FtraceEventBundle_CompactSched::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceEventBundle_CompactSched_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto.base);
  return *internal_default_instance();
}


void FtraceEventBundle_CompactSched::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEventBundle.CompactSched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch_timestamp_.Clear();
  switch_prev_state_.Clear();
  switch_next_pid_.Clear();
  switch_next_prio_.Clear();
  intern_table_.Clear();
  switch_next_comm_index_.Clear();
  waking_timestamp_.Clear();
  waking_pid_.Clear();
  waking_target_cpu_.Clear();
  waking_prio_.Clear();
  waking_comm_index_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceEventBundle_CompactSched::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 switch_timestamp = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_switch_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_switch_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 switch_prev_state = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_switch_prev_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_switch_prev_state(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 switch_next_pid = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_switch_next_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_switch_next_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 switch_next_prio = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_switch_next_prio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_switch_next_prio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string intern_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_intern_table(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated uint32 switch_next_comm_index = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_switch_next_comm_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_switch_next_comm_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 waking_timestamp = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_waking_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          add_waking_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 waking_pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_waking_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          add_waking_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 waking_target_cpu = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_waking_target_cpu(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          add_waking_target_cpu(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 waking_prio = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_waking_prio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          add_waking_prio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 waking_comm_index = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_waking_comm_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          add_waking_comm_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceEventBundle_CompactSched::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceEventBundle.CompactSched)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 switch_timestamp = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_switch_timestamp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_switch_timestamp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 switch_prev_state = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_switch_prev_state())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_switch_prev_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 switch_next_pid = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_switch_next_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_switch_next_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 switch_next_prio = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_switch_next_prio())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_switch_next_prio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string intern_table = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_intern_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 switch_next_comm_index = 6 [packed = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_switch_next_comm_index())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_switch_next_comm_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 waking_timestamp = 7 [packed = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_waking_timestamp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 58u, input, this->mutable_waking_timestamp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 waking_pid = 8 [packed = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_waking_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_waking_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 waking_target_cpu = 9 [packed = true];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_waking_target_cpu())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_waking_target_cpu())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 waking_prio = 10 [packed = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_waking_prio())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 82u, input, this->mutable_waking_prio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 waking_comm_index = 11 [packed = true];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_waking_comm_index())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_waking_comm_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceEventBundle.CompactSched)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceEventBundle.CompactSched)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceEventBundle_CompactSched::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceEventBundle.CompactSched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 switch_timestamp = 1 [packed = true];
  if (this->switch_timestamp_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_switch_timestamp_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->switch_timestamp_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->switch_timestamp(i), output);
  }

  // repeated int64 switch_prev_state = 2 [packed = true];
  if (this->switch_prev_state_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_switch_prev_state_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->switch_prev_state_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->switch_prev_state(i), output);
  }

  // repeated int32 switch_next_pid = 3 [packed = true];
  if (this->switch_next_pid_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_switch_next_pid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->switch_next_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->switch_next_pid(i), output);
  }

  // repeated int32 switch_next_prio = 4 [packed = true];
  if (this->switch_next_prio_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_switch_next_prio_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->switch_next_prio_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->switch_next_prio(i), output);
  }

  // repeated string intern_table = 5;
  for (int i = 0, n = this->intern_table_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->intern_table(i), output);
  }

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  if (this->switch_next_comm_index_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_switch_next_comm_index_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->switch_next_comm_index_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->switch_next_comm_index(i), output);
  }

  // repeated uint64 waking_timestamp = 7 [packed = true];
  if (this->waking_timestamp_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waking_timestamp_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->waking_timestamp_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->waking_timestamp(i), output);
  }

  // repeated int32 waking_pid = 8 [packed = true];
  if (this->waking_pid_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waking_pid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->waking_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->waking_pid(i), output);
  }

  // repeated int32 waking_target_cpu = 9 [packed = true];
  if (this->waking_target_cpu_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waking_target_cpu_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->waking_target_cpu_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->waking_target_cpu(i), output);
  }

  // repeated int32 waking_prio = 10 [packed = true];
  if (this->waking_prio_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waking_prio_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->waking_prio_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->waking_prio(i), output);
  }

  // repeated uint32 waking_comm_index = 11 [packed = true];
  if (this->waking_comm_index_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waking_comm_index_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->waking_comm_index_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->waking_comm_index(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceEventBundle.CompactSched)
}

size_t FtraceEventBundle_CompactSched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEventBundle.CompactSched)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 switch_timestamp = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->switch_timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _switch_timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 switch_prev_state = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->switch_prev_state_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _switch_prev_state_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 switch_next_pid = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->switch_next_pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _switch_next_pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 switch_next_prio = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->switch_next_prio_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _switch_next_prio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string intern_table = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->intern_table_size());
  for (int i = 0, n = this->intern_table_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->intern_table(i));
  }

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->switch_next_comm_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _switch_next_comm_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 waking_timestamp = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->waking_timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waking_timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 waking_pid = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->waking_pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waking_pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 waking_target_cpu = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->waking_target_cpu_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waking_target_cpu_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 waking_prio = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->waking_prio_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waking_prio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 waking_comm_index = 11 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->waking_comm_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waking_comm_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceEventBundle_CompactSched::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceEventBundle_CompactSched*>(
      &from));
}

void FtraceEventBundle_CompactSched::MergeFrom(const FtraceEventBundle_CompactSched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEventBundle.CompactSched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch_timestamp_.MergeFrom(from.switch_timestamp_);
  switch_prev_state_.MergeFrom(from.switch_prev_state_);
  switch_next_pid_.MergeFrom(from.switch_next_pid_);
  switch_next_prio_.MergeFrom(from.switch_next_prio_);
  intern_table_.MergeFrom(from.intern_table_);
  switch_next_comm_index_.MergeFrom(from.switch_next_comm_index_);
  waking_timestamp_.MergeFrom(from.waking_timestamp_);
  waking_pid_.MergeFrom(from.waking_pid_);
  waking_target_cpu_.MergeFrom(from.waking_target_cpu_);
  waking_prio_.MergeFrom(from.waking_prio_);
  waking_comm_index_.MergeFrom(from.waking_comm_index_);
}

void FtraceEventBundle_CompactSched::CopyFrom(const FtraceEventBundle_CompactSched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEventBundle.CompactSched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEventBundle_CompactSched::IsInitialized() const {
  return true;
}

void FtraceEventBundle_CompactSched::InternalSwap(FtraceEventBundle_CompactSched* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  switch_timestamp_.InternalSwap(&other->switch_timestamp_);
  switch_prev_state_.InternalSwap(&other->switch_prev_state_);
  switch_next_pid_.InternalSwap(&other->switch_next_pid_);
  switch_next_prio_.InternalSwap(&other->switch_next_prio_);
  intern_table_.InternalSwap(CastToBase(&other->intern_table_));
  switch_next_comm_index_.InternalSwap(&other->switch_next_comm_index_);
  waking_timestamp_.InternalSwap(&other->waking_timestamp_);
  waking_pid_.InternalSwap(&other->waking_pid_);
  waking_target_cpu_.InternalSwap(&other->waking_target_cpu_);
  waking_prio_.InternalSwap(&other->waking_prio_);
  waking_comm_index_.InternalSwap(&other->waking_comm_index_);
}

std::string FtraceEventBundle_CompactSched::GetTypeName() const {
  return "perfetto.protos.FtraceEventBundle.CompactSched";
}


// ===================================================================

void FtraceEventBundle::InitAsDefaultInstance() {
  ::perfetto::protos::_FtraceEventBundle_default_instance_._instance.get_mutable()->compact_sched_ = const_cast< ::perfetto::protos::FtraceEventBundle_CompactSched*>(
      ::perfetto::protos::FtraceEventBundle_CompactSched::internal_default_instance());
}
class FtraceEventBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceEventBundle>()._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lost_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::FtraceEventBundle_CompactSched& compact_sched(const FtraceEventBundle* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::FtraceEventBundle_CompactSched&
FtraceEventBundle::_Internal::compact_sched(const FtraceEventBundle* msg) {
  return *msg->compact_sched_;
}
void FtraceEventBundle::clear_event() {
  event_.Clear();
}
FtraceEventBundle::FtraceEventBundle()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceEventBundle)
}
FtraceEventBundle::FtraceEventBundle(const FtraceEventBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_(from.event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compact_sched()) {
    compact_sched_ = new ::perfetto::protos::FtraceEventBundle_CompactSched(*from.compact_sched_);
  } else {
    compact_sched_ = nullptr;
  }
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&lost_events_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(lost_events_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEventBundle)
}

void FtraceEventBundle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto.base);
  ::memset(&compact_sched_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lost_events_) -
      reinterpret_cast<char*>(&compact_sched_)) + sizeof(lost_events_));
}

FtraceEventBundle::~FtraceEventBundle() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEventBundle)
  SharedDtor();
}

void FtraceEventBundle::SharedDtor() {
  if (this != internal_default_instance()) delete compact_sched_;
}

void FtraceEventBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceEventBundle& FtraceEventBundle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceEventBundle_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto.base);
  return *internal_default_instance();
}


void FtraceEventBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEventBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compact_sched_ != nullptr);
    compact_sched_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lost_events_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(lost_events_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceEventBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.FtraceEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bool lost_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lost_events(&has_bits);
          lost_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceEventBundle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceEventBundle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cpu = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.FtraceEvent event = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lost_events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_lost_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lost_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compact_sched()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceEventBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceEventBundle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceEventBundle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceEventBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->cpu(), output);
  }

  // repeated .perfetto.protos.FtraceEvent event = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->event(static_cast<int>(i)),
      output);
  }

  // optional bool lost_events = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->lost_events(), output);
  }

  // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::compact_sched(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceEventBundle)
}

size_t FtraceEventBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEventBundle)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceEvent event = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->event(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compact_sched_);
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

    // optional bool lost_events = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceEventBundle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceEventBundle*>(
      &from));
}

void FtraceEventBundle::MergeFrom(const FtraceEventBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEventBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_compact_sched()->::perfetto::protos::FtraceEventBundle_CompactSched::MergeFrom(from.compact_sched());
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      lost_events_ = from.lost_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FtraceEventBundle::CopyFrom(const FtraceEventBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEventBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEventBundle::IsInitialized() const {
  return true;
}

void FtraceEventBundle::InternalSwap(FtraceEventBundle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&event_)->InternalSwap(CastToBase(&other->event_));
  swap(compact_sched_, other->compact_sched_);
  swap(cpu_, other->cpu_);
  swap(lost_events_, other->lost_events_);
}

std::string FtraceEventBundle::GetTypeName() const {
  return "perfetto.protos.FtraceEventBundle";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEventBundle_CompactSched* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle_CompactSched >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceEventBundle_CompactSched >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEventBundle* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceEventBundle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
