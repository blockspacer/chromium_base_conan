// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_LOWMEMORYKILLER_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_LOWMEMORYKILLER_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class LowmemoryKillFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT LowmemoryKillFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCommFieldNumber = 1,
    kPidFieldNumber = 2,
    kPagecacheSizeFieldNumber = 3,
    kPagecacheLimitFieldNumber = 4,
    kFreeFieldNumber = 5,
  };

  LowmemoryKillFtraceEvent();
  ~LowmemoryKillFtraceEvent() override;
  LowmemoryKillFtraceEvent(LowmemoryKillFtraceEvent&&) noexcept;
  LowmemoryKillFtraceEvent& operator=(LowmemoryKillFtraceEvent&&);
  LowmemoryKillFtraceEvent(const LowmemoryKillFtraceEvent&);
  LowmemoryKillFtraceEvent& operator=(const LowmemoryKillFtraceEvent&);
  bool operator==(const LowmemoryKillFtraceEvent&) const;
  bool operator!=(const LowmemoryKillFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_comm() const { return _has_field_[1]; }
  const std::string& comm() const { return comm_; }
  void set_comm(const std::string& value) { comm_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_pagecache_size() const { return _has_field_[3]; }
  int64_t pagecache_size() const { return pagecache_size_; }
  void set_pagecache_size(int64_t value) { pagecache_size_ = value; _has_field_.set(3); }

  bool has_pagecache_limit() const { return _has_field_[4]; }
  int64_t pagecache_limit() const { return pagecache_limit_; }
  void set_pagecache_limit(int64_t value) { pagecache_limit_ = value; _has_field_.set(4); }

  bool has_free() const { return _has_field_[5]; }
  int64_t free() const { return free_; }
  void set_free(int64_t value) { free_ = value; _has_field_.set(5); }

 private:
  std::string comm_{};
  int32_t pid_{};
  int64_t pagecache_size_{};
  int64_t pagecache_limit_{};
  int64_t free_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_LOWMEMORYKILLER_PROTO_CPP_H_
