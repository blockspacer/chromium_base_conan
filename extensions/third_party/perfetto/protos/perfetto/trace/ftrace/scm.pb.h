// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/scm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ScmCallEndFtraceEvent;
class ScmCallEndFtraceEventDefaultTypeInternal;
extern ScmCallEndFtraceEventDefaultTypeInternal _ScmCallEndFtraceEvent_default_instance_;
class ScmCallStartFtraceEvent;
class ScmCallStartFtraceEventDefaultTypeInternal;
extern ScmCallStartFtraceEventDefaultTypeInternal _ScmCallStartFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ScmCallEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ScmCallEndFtraceEvent>(Arena*);
template<> ::perfetto::protos::ScmCallStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ScmCallStartFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ScmCallStartFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ScmCallStartFtraceEvent) */ {
 public:
  ScmCallStartFtraceEvent();
  virtual ~ScmCallStartFtraceEvent();

  ScmCallStartFtraceEvent(const ScmCallStartFtraceEvent& from);
  ScmCallStartFtraceEvent(ScmCallStartFtraceEvent&& from) noexcept
    : ScmCallStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ScmCallStartFtraceEvent& operator=(const ScmCallStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScmCallStartFtraceEvent& operator=(ScmCallStartFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ScmCallStartFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScmCallStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ScmCallStartFtraceEvent*>(
               &_ScmCallStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScmCallStartFtraceEvent& a, ScmCallStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ScmCallStartFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScmCallStartFtraceEvent* New() const final {
    return CreateMaybeMessage<ScmCallStartFtraceEvent>(nullptr);
  }

  ScmCallStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScmCallStartFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScmCallStartFtraceEvent& from);
  void MergeFrom(const ScmCallStartFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScmCallStartFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ScmCallStartFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX0FieldNumber = 2,
    kX5FieldNumber = 3,
    kArginfoFieldNumber = 1,
  };
  // optional uint64 x0 = 2;
  bool has_x0() const;
  void clear_x0();
  ::PROTOBUF_NAMESPACE_ID::uint64 x0() const;
  void set_x0(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 x5 = 3;
  bool has_x5() const;
  void clear_x5();
  ::PROTOBUF_NAMESPACE_ID::uint64 x5() const;
  void set_x5(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 arginfo = 1;
  bool has_arginfo() const;
  void clear_arginfo();
  ::PROTOBUF_NAMESPACE_ID::uint32 arginfo() const;
  void set_arginfo(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ScmCallStartFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 x0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 x5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 arginfo_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto;
};
// -------------------------------------------------------------------

class ScmCallEndFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ScmCallEndFtraceEvent) */ {
 public:
  ScmCallEndFtraceEvent();
  virtual ~ScmCallEndFtraceEvent();

  ScmCallEndFtraceEvent(const ScmCallEndFtraceEvent& from);
  ScmCallEndFtraceEvent(ScmCallEndFtraceEvent&& from) noexcept
    : ScmCallEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ScmCallEndFtraceEvent& operator=(const ScmCallEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScmCallEndFtraceEvent& operator=(ScmCallEndFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ScmCallEndFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScmCallEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ScmCallEndFtraceEvent*>(
               &_ScmCallEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScmCallEndFtraceEvent& a, ScmCallEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ScmCallEndFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScmCallEndFtraceEvent* New() const final {
    return CreateMaybeMessage<ScmCallEndFtraceEvent>(nullptr);
  }

  ScmCallEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScmCallEndFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScmCallEndFtraceEvent& from);
  void MergeFrom(const ScmCallEndFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScmCallEndFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ScmCallEndFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.ScmCallEndFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScmCallStartFtraceEvent

// optional uint32 arginfo = 1;
inline bool ScmCallStartFtraceEvent::has_arginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScmCallStartFtraceEvent::clear_arginfo() {
  arginfo_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScmCallStartFtraceEvent::arginfo() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ScmCallStartFtraceEvent.arginfo)
  return arginfo_;
}
inline void ScmCallStartFtraceEvent::set_arginfo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  arginfo_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ScmCallStartFtraceEvent.arginfo)
}

// optional uint64 x0 = 2;
inline bool ScmCallStartFtraceEvent::has_x0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScmCallStartFtraceEvent::clear_x0() {
  x0_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScmCallStartFtraceEvent::x0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ScmCallStartFtraceEvent.x0)
  return x0_;
}
inline void ScmCallStartFtraceEvent::set_x0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  x0_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ScmCallStartFtraceEvent.x0)
}

// optional uint64 x5 = 3;
inline bool ScmCallStartFtraceEvent::has_x5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScmCallStartFtraceEvent::clear_x5() {
  x5_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScmCallStartFtraceEvent::x5() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ScmCallStartFtraceEvent.x5)
  return x5_;
}
inline void ScmCallStartFtraceEvent::set_x5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  x5_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ScmCallStartFtraceEvent.x5)
}

// -------------------------------------------------------------------

// ScmCallEndFtraceEvent

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto
