#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/scm.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ScmCallEndFtraceEvent::ScmCallEndFtraceEvent() = default;
ScmCallEndFtraceEvent::~ScmCallEndFtraceEvent() = default;
ScmCallEndFtraceEvent::ScmCallEndFtraceEvent(const ScmCallEndFtraceEvent&) = default;
ScmCallEndFtraceEvent& ScmCallEndFtraceEvent::operator=(const ScmCallEndFtraceEvent&) = default;
ScmCallEndFtraceEvent::ScmCallEndFtraceEvent(ScmCallEndFtraceEvent&&) noexcept = default;
ScmCallEndFtraceEvent& ScmCallEndFtraceEvent::operator=(ScmCallEndFtraceEvent&&) = default;

bool ScmCallEndFtraceEvent::operator==(const ScmCallEndFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_;
}

bool ScmCallEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ScmCallEndFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ScmCallEndFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ScmCallEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


ScmCallStartFtraceEvent::ScmCallStartFtraceEvent() = default;
ScmCallStartFtraceEvent::~ScmCallStartFtraceEvent() = default;
ScmCallStartFtraceEvent::ScmCallStartFtraceEvent(const ScmCallStartFtraceEvent&) = default;
ScmCallStartFtraceEvent& ScmCallStartFtraceEvent::operator=(const ScmCallStartFtraceEvent&) = default;
ScmCallStartFtraceEvent::ScmCallStartFtraceEvent(ScmCallStartFtraceEvent&&) noexcept = default;
ScmCallStartFtraceEvent& ScmCallStartFtraceEvent::operator=(ScmCallStartFtraceEvent&&) = default;

bool ScmCallStartFtraceEvent::operator==(const ScmCallStartFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && arginfo_ == other.arginfo_
   && x0_ == other.x0_
   && x5_ == other.x5_;
}

bool ScmCallStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* arginfo */:
        field.get(&arginfo_);
        break;
      case 2 /* x0 */:
        field.get(&x0_);
        break;
      case 3 /* x5 */:
        field.get(&x5_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ScmCallStartFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ScmCallStartFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ScmCallStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: arginfo
  if (_has_field_[1]) {
    msg->AppendVarInt(1, arginfo_);
  }

  // Field 2: x0
  if (_has_field_[2]) {
    msg->AppendVarInt(2, x0_);
  }

  // Field 3: x5
  if (_has_field_[3]) {
    msg->AppendVarInt(3, x5_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
