// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class BlockBioBackmergeFtraceEvent;
class BlockBioBackmergeFtraceEventDefaultTypeInternal;
extern BlockBioBackmergeFtraceEventDefaultTypeInternal _BlockBioBackmergeFtraceEvent_default_instance_;
class BlockBioBounceFtraceEvent;
class BlockBioBounceFtraceEventDefaultTypeInternal;
extern BlockBioBounceFtraceEventDefaultTypeInternal _BlockBioBounceFtraceEvent_default_instance_;
class BlockBioCompleteFtraceEvent;
class BlockBioCompleteFtraceEventDefaultTypeInternal;
extern BlockBioCompleteFtraceEventDefaultTypeInternal _BlockBioCompleteFtraceEvent_default_instance_;
class BlockBioFrontmergeFtraceEvent;
class BlockBioFrontmergeFtraceEventDefaultTypeInternal;
extern BlockBioFrontmergeFtraceEventDefaultTypeInternal _BlockBioFrontmergeFtraceEvent_default_instance_;
class BlockBioQueueFtraceEvent;
class BlockBioQueueFtraceEventDefaultTypeInternal;
extern BlockBioQueueFtraceEventDefaultTypeInternal _BlockBioQueueFtraceEvent_default_instance_;
class BlockBioRemapFtraceEvent;
class BlockBioRemapFtraceEventDefaultTypeInternal;
extern BlockBioRemapFtraceEventDefaultTypeInternal _BlockBioRemapFtraceEvent_default_instance_;
class BlockDirtyBufferFtraceEvent;
class BlockDirtyBufferFtraceEventDefaultTypeInternal;
extern BlockDirtyBufferFtraceEventDefaultTypeInternal _BlockDirtyBufferFtraceEvent_default_instance_;
class BlockGetrqFtraceEvent;
class BlockGetrqFtraceEventDefaultTypeInternal;
extern BlockGetrqFtraceEventDefaultTypeInternal _BlockGetrqFtraceEvent_default_instance_;
class BlockPlugFtraceEvent;
class BlockPlugFtraceEventDefaultTypeInternal;
extern BlockPlugFtraceEventDefaultTypeInternal _BlockPlugFtraceEvent_default_instance_;
class BlockRqAbortFtraceEvent;
class BlockRqAbortFtraceEventDefaultTypeInternal;
extern BlockRqAbortFtraceEventDefaultTypeInternal _BlockRqAbortFtraceEvent_default_instance_;
class BlockRqCompleteFtraceEvent;
class BlockRqCompleteFtraceEventDefaultTypeInternal;
extern BlockRqCompleteFtraceEventDefaultTypeInternal _BlockRqCompleteFtraceEvent_default_instance_;
class BlockRqInsertFtraceEvent;
class BlockRqInsertFtraceEventDefaultTypeInternal;
extern BlockRqInsertFtraceEventDefaultTypeInternal _BlockRqInsertFtraceEvent_default_instance_;
class BlockRqIssueFtraceEvent;
class BlockRqIssueFtraceEventDefaultTypeInternal;
extern BlockRqIssueFtraceEventDefaultTypeInternal _BlockRqIssueFtraceEvent_default_instance_;
class BlockRqRemapFtraceEvent;
class BlockRqRemapFtraceEventDefaultTypeInternal;
extern BlockRqRemapFtraceEventDefaultTypeInternal _BlockRqRemapFtraceEvent_default_instance_;
class BlockRqRequeueFtraceEvent;
class BlockRqRequeueFtraceEventDefaultTypeInternal;
extern BlockRqRequeueFtraceEventDefaultTypeInternal _BlockRqRequeueFtraceEvent_default_instance_;
class BlockSleeprqFtraceEvent;
class BlockSleeprqFtraceEventDefaultTypeInternal;
extern BlockSleeprqFtraceEventDefaultTypeInternal _BlockSleeprqFtraceEvent_default_instance_;
class BlockSplitFtraceEvent;
class BlockSplitFtraceEventDefaultTypeInternal;
extern BlockSplitFtraceEventDefaultTypeInternal _BlockSplitFtraceEvent_default_instance_;
class BlockTouchBufferFtraceEvent;
class BlockTouchBufferFtraceEventDefaultTypeInternal;
extern BlockTouchBufferFtraceEventDefaultTypeInternal _BlockTouchBufferFtraceEvent_default_instance_;
class BlockUnplugFtraceEvent;
class BlockUnplugFtraceEventDefaultTypeInternal;
extern BlockUnplugFtraceEventDefaultTypeInternal _BlockUnplugFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BlockBioBackmergeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockBioBackmergeFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockBioBounceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockBioBounceFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockBioCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockBioCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockBioFrontmergeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockBioFrontmergeFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockBioQueueFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockBioQueueFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockBioRemapFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockBioRemapFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockDirtyBufferFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockDirtyBufferFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockGetrqFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockGetrqFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockPlugFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockPlugFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockRqAbortFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockRqAbortFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockRqCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockRqCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockRqInsertFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockRqInsertFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockRqIssueFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockRqIssueFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockRqRemapFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockRqRemapFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockRqRequeueFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockRqRequeueFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockSleeprqFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockSleeprqFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockSplitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockSplitFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockTouchBufferFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockTouchBufferFtraceEvent>(Arena*);
template<> ::perfetto::protos::BlockUnplugFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BlockUnplugFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class BlockRqIssueFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockRqIssueFtraceEvent) */ {
 public:
  BlockRqIssueFtraceEvent();
  virtual ~BlockRqIssueFtraceEvent();

  BlockRqIssueFtraceEvent(const BlockRqIssueFtraceEvent& from);
  BlockRqIssueFtraceEvent(BlockRqIssueFtraceEvent&& from) noexcept
    : BlockRqIssueFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockRqIssueFtraceEvent& operator=(const BlockRqIssueFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRqIssueFtraceEvent& operator=(BlockRqIssueFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockRqIssueFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRqIssueFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockRqIssueFtraceEvent*>(
               &_BlockRqIssueFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockRqIssueFtraceEvent& a, BlockRqIssueFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRqIssueFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRqIssueFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockRqIssueFtraceEvent>(nullptr);
  }

  BlockRqIssueFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRqIssueFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockRqIssueFtraceEvent& from);
  void MergeFrom(const BlockRqIssueFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRqIssueFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockRqIssueFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 5,
    kCommFieldNumber = 6,
    kCmdFieldNumber = 7,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
    kBytesFieldNumber = 4,
  };
  // optional string rwbs = 5;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 6;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional string cmd = 7;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 bytes = 4;
  bool has_bytes() const;
  void clear_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes() const;
  void set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockRqIssueFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockBioBackmergeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockBioBackmergeFtraceEvent) */ {
 public:
  BlockBioBackmergeFtraceEvent();
  virtual ~BlockBioBackmergeFtraceEvent();

  BlockBioBackmergeFtraceEvent(const BlockBioBackmergeFtraceEvent& from);
  BlockBioBackmergeFtraceEvent(BlockBioBackmergeFtraceEvent&& from) noexcept
    : BlockBioBackmergeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockBioBackmergeFtraceEvent& operator=(const BlockBioBackmergeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBioBackmergeFtraceEvent& operator=(BlockBioBackmergeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockBioBackmergeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockBioBackmergeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockBioBackmergeFtraceEvent*>(
               &_BlockBioBackmergeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockBioBackmergeFtraceEvent& a, BlockBioBackmergeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBioBackmergeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBioBackmergeFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockBioBackmergeFtraceEvent>(nullptr);
  }

  BlockBioBackmergeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBioBackmergeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockBioBackmergeFtraceEvent& from);
  void MergeFrom(const BlockBioBackmergeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockBioBackmergeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockBioBackmergeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockBioBackmergeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockBioBounceFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockBioBounceFtraceEvent) */ {
 public:
  BlockBioBounceFtraceEvent();
  virtual ~BlockBioBounceFtraceEvent();

  BlockBioBounceFtraceEvent(const BlockBioBounceFtraceEvent& from);
  BlockBioBounceFtraceEvent(BlockBioBounceFtraceEvent&& from) noexcept
    : BlockBioBounceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockBioBounceFtraceEvent& operator=(const BlockBioBounceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBioBounceFtraceEvent& operator=(BlockBioBounceFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockBioBounceFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockBioBounceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockBioBounceFtraceEvent*>(
               &_BlockBioBounceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockBioBounceFtraceEvent& a, BlockBioBounceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBioBounceFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBioBounceFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockBioBounceFtraceEvent>(nullptr);
  }

  BlockBioBounceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBioBounceFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockBioBounceFtraceEvent& from);
  void MergeFrom(const BlockBioBounceFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockBioBounceFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockBioBounceFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockBioBounceFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockBioCompleteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockBioCompleteFtraceEvent) */ {
 public:
  BlockBioCompleteFtraceEvent();
  virtual ~BlockBioCompleteFtraceEvent();

  BlockBioCompleteFtraceEvent(const BlockBioCompleteFtraceEvent& from);
  BlockBioCompleteFtraceEvent(BlockBioCompleteFtraceEvent&& from) noexcept
    : BlockBioCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockBioCompleteFtraceEvent& operator=(const BlockBioCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBioCompleteFtraceEvent& operator=(BlockBioCompleteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockBioCompleteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockBioCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockBioCompleteFtraceEvent*>(
               &_BlockBioCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockBioCompleteFtraceEvent& a, BlockBioCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBioCompleteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBioCompleteFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockBioCompleteFtraceEvent>(nullptr);
  }

  BlockBioCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBioCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockBioCompleteFtraceEvent& from);
  void MergeFrom(const BlockBioCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockBioCompleteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockBioCompleteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // optional string rwbs = 5;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 error = 4;
  bool has_error() const;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockBioCompleteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockBioFrontmergeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockBioFrontmergeFtraceEvent) */ {
 public:
  BlockBioFrontmergeFtraceEvent();
  virtual ~BlockBioFrontmergeFtraceEvent();

  BlockBioFrontmergeFtraceEvent(const BlockBioFrontmergeFtraceEvent& from);
  BlockBioFrontmergeFtraceEvent(BlockBioFrontmergeFtraceEvent&& from) noexcept
    : BlockBioFrontmergeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockBioFrontmergeFtraceEvent& operator=(const BlockBioFrontmergeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBioFrontmergeFtraceEvent& operator=(BlockBioFrontmergeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockBioFrontmergeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockBioFrontmergeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockBioFrontmergeFtraceEvent*>(
               &_BlockBioFrontmergeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlockBioFrontmergeFtraceEvent& a, BlockBioFrontmergeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBioFrontmergeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBioFrontmergeFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockBioFrontmergeFtraceEvent>(nullptr);
  }

  BlockBioFrontmergeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBioFrontmergeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockBioFrontmergeFtraceEvent& from);
  void MergeFrom(const BlockBioFrontmergeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockBioFrontmergeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockBioFrontmergeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockBioFrontmergeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockBioQueueFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockBioQueueFtraceEvent) */ {
 public:
  BlockBioQueueFtraceEvent();
  virtual ~BlockBioQueueFtraceEvent();

  BlockBioQueueFtraceEvent(const BlockBioQueueFtraceEvent& from);
  BlockBioQueueFtraceEvent(BlockBioQueueFtraceEvent&& from) noexcept
    : BlockBioQueueFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockBioQueueFtraceEvent& operator=(const BlockBioQueueFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBioQueueFtraceEvent& operator=(BlockBioQueueFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockBioQueueFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockBioQueueFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockBioQueueFtraceEvent*>(
               &_BlockBioQueueFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BlockBioQueueFtraceEvent& a, BlockBioQueueFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBioQueueFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBioQueueFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockBioQueueFtraceEvent>(nullptr);
  }

  BlockBioQueueFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBioQueueFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockBioQueueFtraceEvent& from);
  void MergeFrom(const BlockBioQueueFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockBioQueueFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockBioQueueFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockBioQueueFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockBioRemapFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockBioRemapFtraceEvent) */ {
 public:
  BlockBioRemapFtraceEvent();
  virtual ~BlockBioRemapFtraceEvent();

  BlockBioRemapFtraceEvent(const BlockBioRemapFtraceEvent& from);
  BlockBioRemapFtraceEvent(BlockBioRemapFtraceEvent&& from) noexcept
    : BlockBioRemapFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockBioRemapFtraceEvent& operator=(const BlockBioRemapFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBioRemapFtraceEvent& operator=(BlockBioRemapFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockBioRemapFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockBioRemapFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockBioRemapFtraceEvent*>(
               &_BlockBioRemapFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlockBioRemapFtraceEvent& a, BlockBioRemapFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBioRemapFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBioRemapFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockBioRemapFtraceEvent>(nullptr);
  }

  BlockBioRemapFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBioRemapFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockBioRemapFtraceEvent& from);
  void MergeFrom(const BlockBioRemapFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockBioRemapFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockBioRemapFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 6,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kOldDevFieldNumber = 4,
    kOldSectorFieldNumber = 5,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 6;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 old_dev = 4;
  bool has_old_dev() const;
  void clear_old_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_dev() const;
  void set_old_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 old_sector = 5;
  bool has_old_sector() const;
  void clear_old_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_sector() const;
  void set_old_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockBioRemapFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockDirtyBufferFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockDirtyBufferFtraceEvent) */ {
 public:
  BlockDirtyBufferFtraceEvent();
  virtual ~BlockDirtyBufferFtraceEvent();

  BlockDirtyBufferFtraceEvent(const BlockDirtyBufferFtraceEvent& from);
  BlockDirtyBufferFtraceEvent(BlockDirtyBufferFtraceEvent&& from) noexcept
    : BlockDirtyBufferFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockDirtyBufferFtraceEvent& operator=(const BlockDirtyBufferFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDirtyBufferFtraceEvent& operator=(BlockDirtyBufferFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockDirtyBufferFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockDirtyBufferFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockDirtyBufferFtraceEvent*>(
               &_BlockDirtyBufferFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockDirtyBufferFtraceEvent& a, BlockDirtyBufferFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDirtyBufferFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockDirtyBufferFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockDirtyBufferFtraceEvent>(nullptr);
  }

  BlockDirtyBufferFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockDirtyBufferFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockDirtyBufferFtraceEvent& from);
  void MergeFrom(const BlockDirtyBufferFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockDirtyBufferFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockDirtyBufferFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockDirtyBufferFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockGetrqFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockGetrqFtraceEvent) */ {
 public:
  BlockGetrqFtraceEvent();
  virtual ~BlockGetrqFtraceEvent();

  BlockGetrqFtraceEvent(const BlockGetrqFtraceEvent& from);
  BlockGetrqFtraceEvent(BlockGetrqFtraceEvent&& from) noexcept
    : BlockGetrqFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockGetrqFtraceEvent& operator=(const BlockGetrqFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockGetrqFtraceEvent& operator=(BlockGetrqFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockGetrqFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockGetrqFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockGetrqFtraceEvent*>(
               &_BlockGetrqFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BlockGetrqFtraceEvent& a, BlockGetrqFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockGetrqFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockGetrqFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockGetrqFtraceEvent>(nullptr);
  }

  BlockGetrqFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockGetrqFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockGetrqFtraceEvent& from);
  void MergeFrom(const BlockGetrqFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockGetrqFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockGetrqFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockGetrqFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockPlugFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockPlugFtraceEvent) */ {
 public:
  BlockPlugFtraceEvent();
  virtual ~BlockPlugFtraceEvent();

  BlockPlugFtraceEvent(const BlockPlugFtraceEvent& from);
  BlockPlugFtraceEvent(BlockPlugFtraceEvent&& from) noexcept
    : BlockPlugFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockPlugFtraceEvent& operator=(const BlockPlugFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPlugFtraceEvent& operator=(BlockPlugFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockPlugFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockPlugFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockPlugFtraceEvent*>(
               &_BlockPlugFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BlockPlugFtraceEvent& a, BlockPlugFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockPlugFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockPlugFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockPlugFtraceEvent>(nullptr);
  }

  BlockPlugFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockPlugFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockPlugFtraceEvent& from);
  void MergeFrom(const BlockPlugFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockPlugFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockPlugFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 1,
  };
  // optional string comm = 1;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockPlugFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockRqAbortFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockRqAbortFtraceEvent) */ {
 public:
  BlockRqAbortFtraceEvent();
  virtual ~BlockRqAbortFtraceEvent();

  BlockRqAbortFtraceEvent(const BlockRqAbortFtraceEvent& from);
  BlockRqAbortFtraceEvent(BlockRqAbortFtraceEvent&& from) noexcept
    : BlockRqAbortFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockRqAbortFtraceEvent& operator=(const BlockRqAbortFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRqAbortFtraceEvent& operator=(BlockRqAbortFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockRqAbortFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRqAbortFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockRqAbortFtraceEvent*>(
               &_BlockRqAbortFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockRqAbortFtraceEvent& a, BlockRqAbortFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRqAbortFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRqAbortFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockRqAbortFtraceEvent>(nullptr);
  }

  BlockRqAbortFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRqAbortFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockRqAbortFtraceEvent& from);
  void MergeFrom(const BlockRqAbortFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRqAbortFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockRqAbortFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 5,
    kCmdFieldNumber = 6,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
    kErrorsFieldNumber = 4,
  };
  // optional string rwbs = 5;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string cmd = 6;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 errors = 4;
  bool has_errors() const;
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::int32 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockRqAbortFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::int32 errors_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockRqCompleteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockRqCompleteFtraceEvent) */ {
 public:
  BlockRqCompleteFtraceEvent();
  virtual ~BlockRqCompleteFtraceEvent();

  BlockRqCompleteFtraceEvent(const BlockRqCompleteFtraceEvent& from);
  BlockRqCompleteFtraceEvent(BlockRqCompleteFtraceEvent&& from) noexcept
    : BlockRqCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockRqCompleteFtraceEvent& operator=(const BlockRqCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRqCompleteFtraceEvent& operator=(BlockRqCompleteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockRqCompleteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRqCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockRqCompleteFtraceEvent*>(
               &_BlockRqCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockRqCompleteFtraceEvent& a, BlockRqCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRqCompleteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRqCompleteFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockRqCompleteFtraceEvent>(nullptr);
  }

  BlockRqCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRqCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockRqCompleteFtraceEvent& from);
  void MergeFrom(const BlockRqCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRqCompleteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockRqCompleteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 5,
    kCmdFieldNumber = 6,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
    kErrorsFieldNumber = 4,
  };
  // optional string rwbs = 5;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string cmd = 6;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 errors = 4;
  bool has_errors() const;
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::int32 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockRqCompleteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::int32 errors_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockRqInsertFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockRqInsertFtraceEvent) */ {
 public:
  BlockRqInsertFtraceEvent();
  virtual ~BlockRqInsertFtraceEvent();

  BlockRqInsertFtraceEvent(const BlockRqInsertFtraceEvent& from);
  BlockRqInsertFtraceEvent(BlockRqInsertFtraceEvent&& from) noexcept
    : BlockRqInsertFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockRqInsertFtraceEvent& operator=(const BlockRqInsertFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRqInsertFtraceEvent& operator=(BlockRqInsertFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockRqInsertFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRqInsertFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockRqInsertFtraceEvent*>(
               &_BlockRqInsertFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BlockRqInsertFtraceEvent& a, BlockRqInsertFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRqInsertFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRqInsertFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockRqInsertFtraceEvent>(nullptr);
  }

  BlockRqInsertFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRqInsertFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockRqInsertFtraceEvent& from);
  void MergeFrom(const BlockRqInsertFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRqInsertFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockRqInsertFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 5,
    kCommFieldNumber = 6,
    kCmdFieldNumber = 7,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
    kBytesFieldNumber = 4,
  };
  // optional string rwbs = 5;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 6;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional string cmd = 7;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 bytes = 4;
  bool has_bytes() const;
  void clear_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes() const;
  void set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockRqInsertFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockRqRemapFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockRqRemapFtraceEvent) */ {
 public:
  BlockRqRemapFtraceEvent();
  virtual ~BlockRqRemapFtraceEvent();

  BlockRqRemapFtraceEvent(const BlockRqRemapFtraceEvent& from);
  BlockRqRemapFtraceEvent(BlockRqRemapFtraceEvent&& from) noexcept
    : BlockRqRemapFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockRqRemapFtraceEvent& operator=(const BlockRqRemapFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRqRemapFtraceEvent& operator=(BlockRqRemapFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockRqRemapFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRqRemapFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockRqRemapFtraceEvent*>(
               &_BlockRqRemapFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BlockRqRemapFtraceEvent& a, BlockRqRemapFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRqRemapFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRqRemapFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockRqRemapFtraceEvent>(nullptr);
  }

  BlockRqRemapFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRqRemapFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockRqRemapFtraceEvent& from);
  void MergeFrom(const BlockRqRemapFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRqRemapFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockRqRemapFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 7,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kOldDevFieldNumber = 4,
    kNrSectorFieldNumber = 3,
    kNrBiosFieldNumber = 6,
    kOldSectorFieldNumber = 5,
  };
  // optional string rwbs = 7;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 old_dev = 4;
  bool has_old_dev() const;
  void clear_old_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_dev() const;
  void set_old_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nr_bios = 6;
  bool has_nr_bios() const;
  void clear_nr_bios();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_bios() const;
  void set_nr_bios(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 old_sector = 5;
  bool has_old_sector() const;
  void clear_old_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_sector() const;
  void set_old_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockRqRemapFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_bios_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockRqRequeueFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockRqRequeueFtraceEvent) */ {
 public:
  BlockRqRequeueFtraceEvent();
  virtual ~BlockRqRequeueFtraceEvent();

  BlockRqRequeueFtraceEvent(const BlockRqRequeueFtraceEvent& from);
  BlockRqRequeueFtraceEvent(BlockRqRequeueFtraceEvent&& from) noexcept
    : BlockRqRequeueFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockRqRequeueFtraceEvent& operator=(const BlockRqRequeueFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRqRequeueFtraceEvent& operator=(BlockRqRequeueFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockRqRequeueFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRqRequeueFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockRqRequeueFtraceEvent*>(
               &_BlockRqRequeueFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BlockRqRequeueFtraceEvent& a, BlockRqRequeueFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRqRequeueFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRqRequeueFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockRqRequeueFtraceEvent>(nullptr);
  }

  BlockRqRequeueFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRqRequeueFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockRqRequeueFtraceEvent& from);
  void MergeFrom(const BlockRqRequeueFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRqRequeueFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockRqRequeueFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 5,
    kCmdFieldNumber = 6,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
    kErrorsFieldNumber = 4,
  };
  // optional string rwbs = 5;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string cmd = 6;
  bool has_cmd() const;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 errors = 4;
  bool has_errors() const;
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::int32 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockRqRequeueFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  ::PROTOBUF_NAMESPACE_ID::int32 errors_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockSleeprqFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockSleeprqFtraceEvent) */ {
 public:
  BlockSleeprqFtraceEvent();
  virtual ~BlockSleeprqFtraceEvent();

  BlockSleeprqFtraceEvent(const BlockSleeprqFtraceEvent& from);
  BlockSleeprqFtraceEvent(BlockSleeprqFtraceEvent&& from) noexcept
    : BlockSleeprqFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockSleeprqFtraceEvent& operator=(const BlockSleeprqFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockSleeprqFtraceEvent& operator=(BlockSleeprqFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockSleeprqFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockSleeprqFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockSleeprqFtraceEvent*>(
               &_BlockSleeprqFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BlockSleeprqFtraceEvent& a, BlockSleeprqFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockSleeprqFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockSleeprqFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockSleeprqFtraceEvent>(nullptr);
  }

  BlockSleeprqFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockSleeprqFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockSleeprqFtraceEvent& from);
  void MergeFrom(const BlockSleeprqFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockSleeprqFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockSleeprqFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNrSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_sector = 3;
  bool has_nr_sector() const;
  void clear_nr_sector();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector() const;
  void set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockSleeprqFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockSplitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockSplitFtraceEvent) */ {
 public:
  BlockSplitFtraceEvent();
  virtual ~BlockSplitFtraceEvent();

  BlockSplitFtraceEvent(const BlockSplitFtraceEvent& from);
  BlockSplitFtraceEvent(BlockSplitFtraceEvent&& from) noexcept
    : BlockSplitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockSplitFtraceEvent& operator=(const BlockSplitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockSplitFtraceEvent& operator=(BlockSplitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockSplitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockSplitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockSplitFtraceEvent*>(
               &_BlockSplitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BlockSplitFtraceEvent& a, BlockSplitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockSplitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockSplitFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockSplitFtraceEvent>(nullptr);
  }

  BlockSplitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockSplitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockSplitFtraceEvent& from);
  void MergeFrom(const BlockSplitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockSplitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockSplitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwbsFieldNumber = 4,
    kCommFieldNumber = 5,
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kNewSectorFieldNumber = 3,
  };
  // optional string rwbs = 4;
  bool has_rwbs() const;
  void clear_rwbs();
  const std::string& rwbs() const;
  void set_rwbs(const std::string& value);
  void set_rwbs(std::string&& value);
  void set_rwbs(const char* value);
  void set_rwbs(const char* value, size_t size);
  std::string* mutable_rwbs();
  std::string* release_rwbs();
  void set_allocated_rwbs(std::string* rwbs);

  // optional string comm = 5;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 new_sector = 3;
  bool has_new_sector() const;
  void clear_new_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_sector() const;
  void set_new_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockSplitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rwbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_sector_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockTouchBufferFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockTouchBufferFtraceEvent) */ {
 public:
  BlockTouchBufferFtraceEvent();
  virtual ~BlockTouchBufferFtraceEvent();

  BlockTouchBufferFtraceEvent(const BlockTouchBufferFtraceEvent& from);
  BlockTouchBufferFtraceEvent(BlockTouchBufferFtraceEvent&& from) noexcept
    : BlockTouchBufferFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockTouchBufferFtraceEvent& operator=(const BlockTouchBufferFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockTouchBufferFtraceEvent& operator=(BlockTouchBufferFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockTouchBufferFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockTouchBufferFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockTouchBufferFtraceEvent*>(
               &_BlockTouchBufferFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BlockTouchBufferFtraceEvent& a, BlockTouchBufferFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockTouchBufferFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockTouchBufferFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockTouchBufferFtraceEvent>(nullptr);
  }

  BlockTouchBufferFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockTouchBufferFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockTouchBufferFtraceEvent& from);
  void MergeFrom(const BlockTouchBufferFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockTouchBufferFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockTouchBufferFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kSectorFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sector = 2;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockTouchBufferFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockUnplugFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BlockUnplugFtraceEvent) */ {
 public:
  BlockUnplugFtraceEvent();
  virtual ~BlockUnplugFtraceEvent();

  BlockUnplugFtraceEvent(const BlockUnplugFtraceEvent& from);
  BlockUnplugFtraceEvent(BlockUnplugFtraceEvent&& from) noexcept
    : BlockUnplugFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BlockUnplugFtraceEvent& operator=(const BlockUnplugFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockUnplugFtraceEvent& operator=(BlockUnplugFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockUnplugFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockUnplugFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BlockUnplugFtraceEvent*>(
               &_BlockUnplugFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BlockUnplugFtraceEvent& a, BlockUnplugFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockUnplugFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockUnplugFtraceEvent* New() const final {
    return CreateMaybeMessage<BlockUnplugFtraceEvent>(nullptr);
  }

  BlockUnplugFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockUnplugFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlockUnplugFtraceEvent& from);
  void MergeFrom(const BlockUnplugFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockUnplugFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BlockUnplugFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 2,
    kNrRqFieldNumber = 1,
  };
  // optional string comm = 2;
  bool has_comm() const;
  void clear_comm();
  const std::string& comm() const;
  void set_comm(const std::string& value);
  void set_comm(std::string&& value);
  void set_comm(const char* value);
  void set_comm(const char* value, size_t size);
  std::string* mutable_comm();
  std::string* release_comm();
  void set_allocated_comm(std::string* comm);

  // optional int32 nr_rq = 1;
  bool has_nr_rq() const;
  void clear_nr_rq();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_rq() const;
  void set_nr_rq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.BlockUnplugFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_rq_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockRqIssueFtraceEvent

// optional uint64 dev = 1;
inline bool BlockRqIssueFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqIssueFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.dev)
  return dev_;
}
inline void BlockRqIssueFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockRqIssueFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqIssueFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.sector)
  return sector_;
}
inline void BlockRqIssueFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockRqIssueFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqIssueFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockRqIssueFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.nr_sector)
}

// optional uint32 bytes = 4;
inline bool BlockRqIssueFtraceEvent::has_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_bytes() {
  bytes_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqIssueFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.bytes)
  return bytes_;
}
inline void BlockRqIssueFtraceEvent::set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.bytes)
}

// optional string rwbs = 5;
inline bool BlockRqIssueFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockRqIssueFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockRqIssueFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
}
inline void BlockRqIssueFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
}
inline void BlockRqIssueFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
}
inline void BlockRqIssueFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
}
inline std::string* BlockRqIssueFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqIssueFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqIssueFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqIssueFtraceEvent.rwbs)
}

// optional string comm = 6;
inline bool BlockRqIssueFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockRqIssueFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockRqIssueFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.comm)
}
inline void BlockRqIssueFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqIssueFtraceEvent.comm)
}
inline void BlockRqIssueFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqIssueFtraceEvent.comm)
}
inline void BlockRqIssueFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqIssueFtraceEvent.comm)
}
inline std::string* BlockRqIssueFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqIssueFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqIssueFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqIssueFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqIssueFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqIssueFtraceEvent.comm)
}

// optional string cmd = 7;
inline bool BlockRqIssueFtraceEvent::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRqIssueFtraceEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BlockRqIssueFtraceEvent::cmd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
  return cmd_.GetNoArena();
}
inline void BlockRqIssueFtraceEvent::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
}
inline void BlockRqIssueFtraceEvent::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
}
inline void BlockRqIssueFtraceEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
}
inline void BlockRqIssueFtraceEvent::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
}
inline std::string* BlockRqIssueFtraceEvent::mutable_cmd() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqIssueFtraceEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqIssueFtraceEvent::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqIssueFtraceEvent.cmd)
}

// -------------------------------------------------------------------

// BlockBioBackmergeFtraceEvent

// optional uint64 dev = 1;
inline bool BlockBioBackmergeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockBioBackmergeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioBackmergeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBackmergeFtraceEvent.dev)
  return dev_;
}
inline void BlockBioBackmergeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBackmergeFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockBioBackmergeFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockBioBackmergeFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioBackmergeFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBackmergeFtraceEvent.sector)
  return sector_;
}
inline void BlockBioBackmergeFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBackmergeFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockBioBackmergeFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockBioBackmergeFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockBioBackmergeFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBackmergeFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockBioBackmergeFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBackmergeFtraceEvent.nr_sector)
}

// optional string rwbs = 4;
inline bool BlockBioBackmergeFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockBioBackmergeFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockBioBackmergeFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockBioBackmergeFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
}
inline void BlockBioBackmergeFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
}
inline void BlockBioBackmergeFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
}
inline void BlockBioBackmergeFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
}
inline std::string* BlockBioBackmergeFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioBackmergeFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioBackmergeFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockBioBackmergeFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockBioBackmergeFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockBioBackmergeFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockBioBackmergeFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
}
inline void BlockBioBackmergeFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
}
inline void BlockBioBackmergeFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
}
inline void BlockBioBackmergeFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
}
inline std::string* BlockBioBackmergeFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioBackmergeFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioBackmergeFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioBackmergeFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockBioBounceFtraceEvent

// optional uint64 dev = 1;
inline bool BlockBioBounceFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockBioBounceFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioBounceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBounceFtraceEvent.dev)
  return dev_;
}
inline void BlockBioBounceFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBounceFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockBioBounceFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockBioBounceFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioBounceFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBounceFtraceEvent.sector)
  return sector_;
}
inline void BlockBioBounceFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBounceFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockBioBounceFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockBioBounceFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockBioBounceFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBounceFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockBioBounceFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBounceFtraceEvent.nr_sector)
}

// optional string rwbs = 4;
inline bool BlockBioBounceFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockBioBounceFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockBioBounceFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockBioBounceFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
}
inline void BlockBioBounceFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
}
inline void BlockBioBounceFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
}
inline void BlockBioBounceFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
}
inline std::string* BlockBioBounceFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioBounceFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioBounceFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioBounceFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockBioBounceFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockBioBounceFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockBioBounceFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioBounceFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockBioBounceFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioBounceFtraceEvent.comm)
}
inline void BlockBioBounceFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioBounceFtraceEvent.comm)
}
inline void BlockBioBounceFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioBounceFtraceEvent.comm)
}
inline void BlockBioBounceFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioBounceFtraceEvent.comm)
}
inline std::string* BlockBioBounceFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioBounceFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioBounceFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioBounceFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioBounceFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioBounceFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockBioCompleteFtraceEvent

// optional uint64 dev = 1;
inline bool BlockBioCompleteFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockBioCompleteFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioCompleteFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioCompleteFtraceEvent.dev)
  return dev_;
}
inline void BlockBioCompleteFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioCompleteFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockBioCompleteFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockBioCompleteFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioCompleteFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioCompleteFtraceEvent.sector)
  return sector_;
}
inline void BlockBioCompleteFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioCompleteFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockBioCompleteFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockBioCompleteFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockBioCompleteFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioCompleteFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockBioCompleteFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioCompleteFtraceEvent.nr_sector)
}

// optional int32 error = 4;
inline bool BlockBioCompleteFtraceEvent::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockBioCompleteFtraceEvent::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockBioCompleteFtraceEvent::error() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioCompleteFtraceEvent.error)
  return error_;
}
inline void BlockBioCompleteFtraceEvent::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  error_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioCompleteFtraceEvent.error)
}

// optional string rwbs = 5;
inline bool BlockBioCompleteFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockBioCompleteFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockBioCompleteFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockBioCompleteFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
}
inline void BlockBioCompleteFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
}
inline void BlockBioCompleteFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
}
inline void BlockBioCompleteFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
}
inline std::string* BlockBioCompleteFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioCompleteFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioCompleteFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioCompleteFtraceEvent.rwbs)
}

// -------------------------------------------------------------------

// BlockBioFrontmergeFtraceEvent

// optional uint64 dev = 1;
inline bool BlockBioFrontmergeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockBioFrontmergeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioFrontmergeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioFrontmergeFtraceEvent.dev)
  return dev_;
}
inline void BlockBioFrontmergeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioFrontmergeFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockBioFrontmergeFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockBioFrontmergeFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioFrontmergeFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioFrontmergeFtraceEvent.sector)
  return sector_;
}
inline void BlockBioFrontmergeFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioFrontmergeFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockBioFrontmergeFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockBioFrontmergeFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockBioFrontmergeFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioFrontmergeFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockBioFrontmergeFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioFrontmergeFtraceEvent.nr_sector)
}

// optional string rwbs = 4;
inline bool BlockBioFrontmergeFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockBioFrontmergeFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockBioFrontmergeFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockBioFrontmergeFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
}
inline void BlockBioFrontmergeFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
}
inline void BlockBioFrontmergeFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
}
inline void BlockBioFrontmergeFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
}
inline std::string* BlockBioFrontmergeFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioFrontmergeFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioFrontmergeFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockBioFrontmergeFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockBioFrontmergeFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockBioFrontmergeFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockBioFrontmergeFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
}
inline void BlockBioFrontmergeFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
}
inline void BlockBioFrontmergeFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
}
inline void BlockBioFrontmergeFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
}
inline std::string* BlockBioFrontmergeFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioFrontmergeFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioFrontmergeFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioFrontmergeFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockBioQueueFtraceEvent

// optional uint64 dev = 1;
inline bool BlockBioQueueFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockBioQueueFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioQueueFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioQueueFtraceEvent.dev)
  return dev_;
}
inline void BlockBioQueueFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioQueueFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockBioQueueFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockBioQueueFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioQueueFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioQueueFtraceEvent.sector)
  return sector_;
}
inline void BlockBioQueueFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioQueueFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockBioQueueFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockBioQueueFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockBioQueueFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioQueueFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockBioQueueFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioQueueFtraceEvent.nr_sector)
}

// optional string rwbs = 4;
inline bool BlockBioQueueFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockBioQueueFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockBioQueueFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockBioQueueFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
}
inline void BlockBioQueueFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
}
inline void BlockBioQueueFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
}
inline void BlockBioQueueFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
}
inline std::string* BlockBioQueueFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioQueueFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioQueueFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioQueueFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockBioQueueFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockBioQueueFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockBioQueueFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioQueueFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockBioQueueFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioQueueFtraceEvent.comm)
}
inline void BlockBioQueueFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioQueueFtraceEvent.comm)
}
inline void BlockBioQueueFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioQueueFtraceEvent.comm)
}
inline void BlockBioQueueFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioQueueFtraceEvent.comm)
}
inline std::string* BlockBioQueueFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioQueueFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioQueueFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioQueueFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioQueueFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioQueueFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockBioRemapFtraceEvent

// optional uint64 dev = 1;
inline bool BlockBioRemapFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockBioRemapFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioRemapFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioRemapFtraceEvent.dev)
  return dev_;
}
inline void BlockBioRemapFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioRemapFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockBioRemapFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockBioRemapFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioRemapFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioRemapFtraceEvent.sector)
  return sector_;
}
inline void BlockBioRemapFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioRemapFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockBioRemapFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockBioRemapFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockBioRemapFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioRemapFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockBioRemapFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioRemapFtraceEvent.nr_sector)
}

// optional uint64 old_dev = 4;
inline bool BlockBioRemapFtraceEvent::has_old_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockBioRemapFtraceEvent::clear_old_dev() {
  old_dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioRemapFtraceEvent::old_dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioRemapFtraceEvent.old_dev)
  return old_dev_;
}
inline void BlockBioRemapFtraceEvent::set_old_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  old_dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioRemapFtraceEvent.old_dev)
}

// optional uint64 old_sector = 5;
inline bool BlockBioRemapFtraceEvent::has_old_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockBioRemapFtraceEvent::clear_old_sector() {
  old_sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockBioRemapFtraceEvent::old_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioRemapFtraceEvent.old_sector)
  return old_sector_;
}
inline void BlockBioRemapFtraceEvent::set_old_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  old_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioRemapFtraceEvent.old_sector)
}

// optional string rwbs = 6;
inline bool BlockBioRemapFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockBioRemapFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockBioRemapFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockBioRemapFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
}
inline void BlockBioRemapFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
}
inline void BlockBioRemapFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
}
inline void BlockBioRemapFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
}
inline std::string* BlockBioRemapFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockBioRemapFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockBioRemapFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockBioRemapFtraceEvent.rwbs)
}

// -------------------------------------------------------------------

// BlockDirtyBufferFtraceEvent

// optional uint64 dev = 1;
inline bool BlockDirtyBufferFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockDirtyBufferFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockDirtyBufferFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockDirtyBufferFtraceEvent.dev)
  return dev_;
}
inline void BlockDirtyBufferFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockDirtyBufferFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockDirtyBufferFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockDirtyBufferFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockDirtyBufferFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockDirtyBufferFtraceEvent.sector)
  return sector_;
}
inline void BlockDirtyBufferFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockDirtyBufferFtraceEvent.sector)
}

// optional uint64 size = 3;
inline bool BlockDirtyBufferFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockDirtyBufferFtraceEvent::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockDirtyBufferFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockDirtyBufferFtraceEvent.size)
  return size_;
}
inline void BlockDirtyBufferFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockDirtyBufferFtraceEvent.size)
}

// -------------------------------------------------------------------

// BlockGetrqFtraceEvent

// optional uint64 dev = 1;
inline bool BlockGetrqFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockGetrqFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGetrqFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockGetrqFtraceEvent.dev)
  return dev_;
}
inline void BlockGetrqFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockGetrqFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockGetrqFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockGetrqFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGetrqFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockGetrqFtraceEvent.sector)
  return sector_;
}
inline void BlockGetrqFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockGetrqFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockGetrqFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockGetrqFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockGetrqFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockGetrqFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockGetrqFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockGetrqFtraceEvent.nr_sector)
}

// optional string rwbs = 4;
inline bool BlockGetrqFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockGetrqFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockGetrqFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockGetrqFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
}
inline void BlockGetrqFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
}
inline void BlockGetrqFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
}
inline void BlockGetrqFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
}
inline std::string* BlockGetrqFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockGetrqFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockGetrqFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockGetrqFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockGetrqFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockGetrqFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockGetrqFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockGetrqFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockGetrqFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockGetrqFtraceEvent.comm)
}
inline void BlockGetrqFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockGetrqFtraceEvent.comm)
}
inline void BlockGetrqFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockGetrqFtraceEvent.comm)
}
inline void BlockGetrqFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockGetrqFtraceEvent.comm)
}
inline std::string* BlockGetrqFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockGetrqFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockGetrqFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockGetrqFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockGetrqFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockGetrqFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockPlugFtraceEvent

// optional string comm = 1;
inline bool BlockPlugFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPlugFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockPlugFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockPlugFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockPlugFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockPlugFtraceEvent.comm)
}
inline void BlockPlugFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockPlugFtraceEvent.comm)
}
inline void BlockPlugFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockPlugFtraceEvent.comm)
}
inline void BlockPlugFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockPlugFtraceEvent.comm)
}
inline std::string* BlockPlugFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockPlugFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockPlugFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockPlugFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockPlugFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockPlugFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockRqAbortFtraceEvent

// optional uint64 dev = 1;
inline bool BlockRqAbortFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRqAbortFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqAbortFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqAbortFtraceEvent.dev)
  return dev_;
}
inline void BlockRqAbortFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqAbortFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockRqAbortFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRqAbortFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqAbortFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqAbortFtraceEvent.sector)
  return sector_;
}
inline void BlockRqAbortFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqAbortFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockRqAbortFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRqAbortFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqAbortFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqAbortFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockRqAbortFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqAbortFtraceEvent.nr_sector)
}

// optional int32 errors = 4;
inline bool BlockRqAbortFtraceEvent::has_errors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockRqAbortFtraceEvent::clear_errors() {
  errors_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockRqAbortFtraceEvent::errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqAbortFtraceEvent.errors)
  return errors_;
}
inline void BlockRqAbortFtraceEvent::set_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  errors_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqAbortFtraceEvent.errors)
}

// optional string rwbs = 5;
inline bool BlockRqAbortFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRqAbortFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockRqAbortFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockRqAbortFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
}
inline void BlockRqAbortFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
}
inline void BlockRqAbortFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
}
inline void BlockRqAbortFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
}
inline std::string* BlockRqAbortFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqAbortFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqAbortFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqAbortFtraceEvent.rwbs)
}

// optional string cmd = 6;
inline bool BlockRqAbortFtraceEvent::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRqAbortFtraceEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockRqAbortFtraceEvent::cmd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
  return cmd_.GetNoArena();
}
inline void BlockRqAbortFtraceEvent::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
}
inline void BlockRqAbortFtraceEvent::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
}
inline void BlockRqAbortFtraceEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
}
inline void BlockRqAbortFtraceEvent::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
}
inline std::string* BlockRqAbortFtraceEvent::mutable_cmd() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqAbortFtraceEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqAbortFtraceEvent::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqAbortFtraceEvent.cmd)
}

// -------------------------------------------------------------------

// BlockRqCompleteFtraceEvent

// optional uint64 dev = 1;
inline bool BlockRqCompleteFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRqCompleteFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqCompleteFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqCompleteFtraceEvent.dev)
  return dev_;
}
inline void BlockRqCompleteFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqCompleteFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockRqCompleteFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRqCompleteFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqCompleteFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqCompleteFtraceEvent.sector)
  return sector_;
}
inline void BlockRqCompleteFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqCompleteFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockRqCompleteFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRqCompleteFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqCompleteFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqCompleteFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockRqCompleteFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqCompleteFtraceEvent.nr_sector)
}

// optional int32 errors = 4;
inline bool BlockRqCompleteFtraceEvent::has_errors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockRqCompleteFtraceEvent::clear_errors() {
  errors_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockRqCompleteFtraceEvent::errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqCompleteFtraceEvent.errors)
  return errors_;
}
inline void BlockRqCompleteFtraceEvent::set_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  errors_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqCompleteFtraceEvent.errors)
}

// optional string rwbs = 5;
inline bool BlockRqCompleteFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRqCompleteFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockRqCompleteFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockRqCompleteFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
}
inline void BlockRqCompleteFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
}
inline void BlockRqCompleteFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
}
inline void BlockRqCompleteFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
}
inline std::string* BlockRqCompleteFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqCompleteFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqCompleteFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqCompleteFtraceEvent.rwbs)
}

// optional string cmd = 6;
inline bool BlockRqCompleteFtraceEvent::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRqCompleteFtraceEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockRqCompleteFtraceEvent::cmd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
  return cmd_.GetNoArena();
}
inline void BlockRqCompleteFtraceEvent::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
}
inline void BlockRqCompleteFtraceEvent::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
}
inline void BlockRqCompleteFtraceEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
}
inline void BlockRqCompleteFtraceEvent::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
}
inline std::string* BlockRqCompleteFtraceEvent::mutable_cmd() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqCompleteFtraceEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqCompleteFtraceEvent::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqCompleteFtraceEvent.cmd)
}

// -------------------------------------------------------------------

// BlockRqInsertFtraceEvent

// optional uint64 dev = 1;
inline bool BlockRqInsertFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqInsertFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.dev)
  return dev_;
}
inline void BlockRqInsertFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockRqInsertFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqInsertFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.sector)
  return sector_;
}
inline void BlockRqInsertFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockRqInsertFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqInsertFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockRqInsertFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.nr_sector)
}

// optional uint32 bytes = 4;
inline bool BlockRqInsertFtraceEvent::has_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_bytes() {
  bytes_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqInsertFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.bytes)
  return bytes_;
}
inline void BlockRqInsertFtraceEvent::set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.bytes)
}

// optional string rwbs = 5;
inline bool BlockRqInsertFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockRqInsertFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockRqInsertFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
}
inline void BlockRqInsertFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
}
inline void BlockRqInsertFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
}
inline void BlockRqInsertFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
}
inline std::string* BlockRqInsertFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqInsertFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqInsertFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqInsertFtraceEvent.rwbs)
}

// optional string comm = 6;
inline bool BlockRqInsertFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockRqInsertFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockRqInsertFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.comm)
}
inline void BlockRqInsertFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqInsertFtraceEvent.comm)
}
inline void BlockRqInsertFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqInsertFtraceEvent.comm)
}
inline void BlockRqInsertFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqInsertFtraceEvent.comm)
}
inline std::string* BlockRqInsertFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqInsertFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqInsertFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqInsertFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqInsertFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqInsertFtraceEvent.comm)
}

// optional string cmd = 7;
inline bool BlockRqInsertFtraceEvent::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRqInsertFtraceEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BlockRqInsertFtraceEvent::cmd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
  return cmd_.GetNoArena();
}
inline void BlockRqInsertFtraceEvent::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
}
inline void BlockRqInsertFtraceEvent::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
}
inline void BlockRqInsertFtraceEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
}
inline void BlockRqInsertFtraceEvent::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
}
inline std::string* BlockRqInsertFtraceEvent::mutable_cmd() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqInsertFtraceEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqInsertFtraceEvent::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqInsertFtraceEvent.cmd)
}

// -------------------------------------------------------------------

// BlockRqRemapFtraceEvent

// optional uint64 dev = 1;
inline bool BlockRqRemapFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqRemapFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.dev)
  return dev_;
}
inline void BlockRqRemapFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockRqRemapFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqRemapFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.sector)
  return sector_;
}
inline void BlockRqRemapFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockRqRemapFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqRemapFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockRqRemapFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.nr_sector)
}

// optional uint64 old_dev = 4;
inline bool BlockRqRemapFtraceEvent::has_old_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_old_dev() {
  old_dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqRemapFtraceEvent::old_dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.old_dev)
  return old_dev_;
}
inline void BlockRqRemapFtraceEvent::set_old_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  old_dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.old_dev)
}

// optional uint64 old_sector = 5;
inline bool BlockRqRemapFtraceEvent::has_old_sector() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_old_sector() {
  old_sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqRemapFtraceEvent::old_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.old_sector)
  return old_sector_;
}
inline void BlockRqRemapFtraceEvent::set_old_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  old_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.old_sector)
}

// optional uint32 nr_bios = 6;
inline bool BlockRqRemapFtraceEvent::has_nr_bios() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_nr_bios() {
  nr_bios_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqRemapFtraceEvent::nr_bios() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.nr_bios)
  return nr_bios_;
}
inline void BlockRqRemapFtraceEvent::set_nr_bios(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nr_bios_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.nr_bios)
}

// optional string rwbs = 7;
inline bool BlockRqRemapFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRqRemapFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockRqRemapFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockRqRemapFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
}
inline void BlockRqRemapFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
}
inline void BlockRqRemapFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
}
inline void BlockRqRemapFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
}
inline std::string* BlockRqRemapFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqRemapFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqRemapFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqRemapFtraceEvent.rwbs)
}

// -------------------------------------------------------------------

// BlockRqRequeueFtraceEvent

// optional uint64 dev = 1;
inline bool BlockRqRequeueFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockRqRequeueFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqRequeueFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRequeueFtraceEvent.dev)
  return dev_;
}
inline void BlockRqRequeueFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRequeueFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockRqRequeueFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockRqRequeueFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRqRequeueFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRequeueFtraceEvent.sector)
  return sector_;
}
inline void BlockRqRequeueFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRequeueFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockRqRequeueFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockRqRequeueFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockRqRequeueFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRequeueFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockRqRequeueFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRequeueFtraceEvent.nr_sector)
}

// optional int32 errors = 4;
inline bool BlockRqRequeueFtraceEvent::has_errors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockRqRequeueFtraceEvent::clear_errors() {
  errors_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockRqRequeueFtraceEvent::errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRequeueFtraceEvent.errors)
  return errors_;
}
inline void BlockRqRequeueFtraceEvent::set_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  errors_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRequeueFtraceEvent.errors)
}

// optional string rwbs = 5;
inline bool BlockRqRequeueFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRqRequeueFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockRqRequeueFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockRqRequeueFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
}
inline void BlockRqRequeueFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
}
inline void BlockRqRequeueFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
}
inline void BlockRqRequeueFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
}
inline std::string* BlockRqRequeueFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqRequeueFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqRequeueFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqRequeueFtraceEvent.rwbs)
}

// optional string cmd = 6;
inline bool BlockRqRequeueFtraceEvent::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockRqRequeueFtraceEvent::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockRqRequeueFtraceEvent::cmd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
  return cmd_.GetNoArena();
}
inline void BlockRqRequeueFtraceEvent::set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
}
inline void BlockRqRequeueFtraceEvent::set_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
}
inline void BlockRqRequeueFtraceEvent::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
}
inline void BlockRqRequeueFtraceEvent::set_cmd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
}
inline std::string* BlockRqRequeueFtraceEvent::mutable_cmd() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockRqRequeueFtraceEvent::release_cmd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
  if (!has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockRqRequeueFtraceEvent::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockRqRequeueFtraceEvent.cmd)
}

// -------------------------------------------------------------------

// BlockSleeprqFtraceEvent

// optional uint64 dev = 1;
inline bool BlockSleeprqFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockSleeprqFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockSleeprqFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSleeprqFtraceEvent.dev)
  return dev_;
}
inline void BlockSleeprqFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSleeprqFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockSleeprqFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockSleeprqFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockSleeprqFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSleeprqFtraceEvent.sector)
  return sector_;
}
inline void BlockSleeprqFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSleeprqFtraceEvent.sector)
}

// optional uint32 nr_sector = 3;
inline bool BlockSleeprqFtraceEvent::has_nr_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockSleeprqFtraceEvent::clear_nr_sector() {
  nr_sector_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockSleeprqFtraceEvent::nr_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSleeprqFtraceEvent.nr_sector)
  return nr_sector_;
}
inline void BlockSleeprqFtraceEvent::set_nr_sector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nr_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSleeprqFtraceEvent.nr_sector)
}

// optional string rwbs = 4;
inline bool BlockSleeprqFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockSleeprqFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockSleeprqFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockSleeprqFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
}
inline void BlockSleeprqFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
}
inline void BlockSleeprqFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
}
inline void BlockSleeprqFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
}
inline std::string* BlockSleeprqFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockSleeprqFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockSleeprqFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockSleeprqFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockSleeprqFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockSleeprqFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockSleeprqFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSleeprqFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockSleeprqFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSleeprqFtraceEvent.comm)
}
inline void BlockSleeprqFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockSleeprqFtraceEvent.comm)
}
inline void BlockSleeprqFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockSleeprqFtraceEvent.comm)
}
inline void BlockSleeprqFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockSleeprqFtraceEvent.comm)
}
inline std::string* BlockSleeprqFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockSleeprqFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockSleeprqFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockSleeprqFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockSleeprqFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockSleeprqFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockSplitFtraceEvent

// optional uint64 dev = 1;
inline bool BlockSplitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockSplitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockSplitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSplitFtraceEvent.dev)
  return dev_;
}
inline void BlockSplitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSplitFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockSplitFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockSplitFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockSplitFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSplitFtraceEvent.sector)
  return sector_;
}
inline void BlockSplitFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSplitFtraceEvent.sector)
}

// optional uint64 new_sector = 3;
inline bool BlockSplitFtraceEvent::has_new_sector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockSplitFtraceEvent::clear_new_sector() {
  new_sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockSplitFtraceEvent::new_sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSplitFtraceEvent.new_sector)
  return new_sector_;
}
inline void BlockSplitFtraceEvent::set_new_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  new_sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSplitFtraceEvent.new_sector)
}

// optional string rwbs = 4;
inline bool BlockSplitFtraceEvent::has_rwbs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockSplitFtraceEvent::clear_rwbs() {
  rwbs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockSplitFtraceEvent::rwbs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSplitFtraceEvent.rwbs)
  return rwbs_.GetNoArena();
}
inline void BlockSplitFtraceEvent::set_rwbs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSplitFtraceEvent.rwbs)
}
inline void BlockSplitFtraceEvent::set_rwbs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockSplitFtraceEvent.rwbs)
}
inline void BlockSplitFtraceEvent::set_rwbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockSplitFtraceEvent.rwbs)
}
inline void BlockSplitFtraceEvent::set_rwbs(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rwbs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockSplitFtraceEvent.rwbs)
}
inline std::string* BlockSplitFtraceEvent::mutable_rwbs() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockSplitFtraceEvent.rwbs)
  return rwbs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockSplitFtraceEvent::release_rwbs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockSplitFtraceEvent.rwbs)
  if (!has_rwbs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rwbs_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockSplitFtraceEvent::set_allocated_rwbs(std::string* rwbs) {
  if (rwbs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rwbs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rwbs);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockSplitFtraceEvent.rwbs)
}

// optional string comm = 5;
inline bool BlockSplitFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockSplitFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockSplitFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockSplitFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockSplitFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockSplitFtraceEvent.comm)
}
inline void BlockSplitFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockSplitFtraceEvent.comm)
}
inline void BlockSplitFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockSplitFtraceEvent.comm)
}
inline void BlockSplitFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockSplitFtraceEvent.comm)
}
inline std::string* BlockSplitFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockSplitFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockSplitFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockSplitFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockSplitFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockSplitFtraceEvent.comm)
}

// -------------------------------------------------------------------

// BlockTouchBufferFtraceEvent

// optional uint64 dev = 1;
inline bool BlockTouchBufferFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockTouchBufferFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockTouchBufferFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockTouchBufferFtraceEvent.dev)
  return dev_;
}
inline void BlockTouchBufferFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockTouchBufferFtraceEvent.dev)
}

// optional uint64 sector = 2;
inline bool BlockTouchBufferFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockTouchBufferFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockTouchBufferFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockTouchBufferFtraceEvent.sector)
  return sector_;
}
inline void BlockTouchBufferFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockTouchBufferFtraceEvent.sector)
}

// optional uint64 size = 3;
inline bool BlockTouchBufferFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockTouchBufferFtraceEvent::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockTouchBufferFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockTouchBufferFtraceEvent.size)
  return size_;
}
inline void BlockTouchBufferFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockTouchBufferFtraceEvent.size)
}

// -------------------------------------------------------------------

// BlockUnplugFtraceEvent

// optional int32 nr_rq = 1;
inline bool BlockUnplugFtraceEvent::has_nr_rq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockUnplugFtraceEvent::clear_nr_rq() {
  nr_rq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockUnplugFtraceEvent::nr_rq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockUnplugFtraceEvent.nr_rq)
  return nr_rq_;
}
inline void BlockUnplugFtraceEvent::set_nr_rq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_rq_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockUnplugFtraceEvent.nr_rq)
}

// optional string comm = 2;
inline bool BlockUnplugFtraceEvent::has_comm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockUnplugFtraceEvent::clear_comm() {
  comm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockUnplugFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BlockUnplugFtraceEvent.comm)
  return comm_.GetNoArena();
}
inline void BlockUnplugFtraceEvent::set_comm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BlockUnplugFtraceEvent.comm)
}
inline void BlockUnplugFtraceEvent::set_comm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.BlockUnplugFtraceEvent.comm)
}
inline void BlockUnplugFtraceEvent::set_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.BlockUnplugFtraceEvent.comm)
}
inline void BlockUnplugFtraceEvent::set_comm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.BlockUnplugFtraceEvent.comm)
}
inline std::string* BlockUnplugFtraceEvent::mutable_comm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BlockUnplugFtraceEvent.comm)
  return comm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockUnplugFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BlockUnplugFtraceEvent.comm)
  if (!has_comm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockUnplugFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comm);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BlockUnplugFtraceEvent.comm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto
