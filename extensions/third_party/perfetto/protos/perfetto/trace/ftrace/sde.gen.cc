#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/sde.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent() = default;
SdeTracingMarkWriteFtraceEvent::~SdeTracingMarkWriteFtraceEvent() = default;
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent&) = default;
SdeTracingMarkWriteFtraceEvent& SdeTracingMarkWriteFtraceEvent::operator=(const SdeTracingMarkWriteFtraceEvent&) = default;
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(SdeTracingMarkWriteFtraceEvent&&) noexcept = default;
SdeTracingMarkWriteFtraceEvent& SdeTracingMarkWriteFtraceEvent::operator=(SdeTracingMarkWriteFtraceEvent&&) = default;

bool SdeTracingMarkWriteFtraceEvent::operator==(const SdeTracingMarkWriteFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_
   && trace_name_ == other.trace_name_
   && trace_type_ == other.trace_type_
   && value_ == other.value_
   && trace_begin_ == other.trace_begin_;
}

bool SdeTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* trace_name */:
        field.get(&trace_name_);
        break;
      case 3 /* trace_type */:
        field.get(&trace_type_);
        break;
      case 4 /* value */:
        field.get(&value_);
        break;
      case 5 /* trace_begin */:
        field.get(&trace_begin_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  // Field 2: trace_name
  if (_has_field_[2]) {
    msg->AppendString(2, trace_name_);
  }

  // Field 3: trace_type
  if (_has_field_[3]) {
    msg->AppendVarInt(3, trace_type_);
  }

  // Field 4: value
  if (_has_field_[4]) {
    msg->AppendVarInt(4, value_);
  }

  // Field 5: trace_begin
  if (_has_field_[5]) {
    msg->AppendVarInt(5, trace_begin_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
