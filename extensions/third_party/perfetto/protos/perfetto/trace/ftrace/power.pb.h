// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/power.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ClockDisableFtraceEvent;
class ClockDisableFtraceEventDefaultTypeInternal;
extern ClockDisableFtraceEventDefaultTypeInternal _ClockDisableFtraceEvent_default_instance_;
class ClockEnableFtraceEvent;
class ClockEnableFtraceEventDefaultTypeInternal;
extern ClockEnableFtraceEventDefaultTypeInternal _ClockEnableFtraceEvent_default_instance_;
class ClockSetRateFtraceEvent;
class ClockSetRateFtraceEventDefaultTypeInternal;
extern ClockSetRateFtraceEventDefaultTypeInternal _ClockSetRateFtraceEvent_default_instance_;
class CpuFrequencyFtraceEvent;
class CpuFrequencyFtraceEventDefaultTypeInternal;
extern CpuFrequencyFtraceEventDefaultTypeInternal _CpuFrequencyFtraceEvent_default_instance_;
class CpuFrequencyLimitsFtraceEvent;
class CpuFrequencyLimitsFtraceEventDefaultTypeInternal;
extern CpuFrequencyLimitsFtraceEventDefaultTypeInternal _CpuFrequencyLimitsFtraceEvent_default_instance_;
class CpuIdleFtraceEvent;
class CpuIdleFtraceEventDefaultTypeInternal;
extern CpuIdleFtraceEventDefaultTypeInternal _CpuIdleFtraceEvent_default_instance_;
class GpuFrequencyFtraceEvent;
class GpuFrequencyFtraceEventDefaultTypeInternal;
extern GpuFrequencyFtraceEventDefaultTypeInternal _GpuFrequencyFtraceEvent_default_instance_;
class SuspendResumeFtraceEvent;
class SuspendResumeFtraceEventDefaultTypeInternal;
extern SuspendResumeFtraceEventDefaultTypeInternal _SuspendResumeFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ClockDisableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ClockDisableFtraceEvent>(Arena*);
template<> ::perfetto::protos::ClockEnableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ClockEnableFtraceEvent>(Arena*);
template<> ::perfetto::protos::ClockSetRateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ClockSetRateFtraceEvent>(Arena*);
template<> ::perfetto::protos::CpuFrequencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuFrequencyFtraceEvent>(Arena*);
template<> ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuFrequencyLimitsFtraceEvent>(Arena*);
template<> ::perfetto::protos::CpuIdleFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuIdleFtraceEvent>(Arena*);
template<> ::perfetto::protos::GpuFrequencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::GpuFrequencyFtraceEvent>(Arena*);
template<> ::perfetto::protos::SuspendResumeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SuspendResumeFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class CpuFrequencyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuFrequencyFtraceEvent) */ {
 public:
  CpuFrequencyFtraceEvent();
  virtual ~CpuFrequencyFtraceEvent();

  CpuFrequencyFtraceEvent(const CpuFrequencyFtraceEvent& from);
  CpuFrequencyFtraceEvent(CpuFrequencyFtraceEvent&& from) noexcept
    : CpuFrequencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuFrequencyFtraceEvent& operator=(const CpuFrequencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFrequencyFtraceEvent& operator=(CpuFrequencyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuFrequencyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuFrequencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuFrequencyFtraceEvent*>(
               &_CpuFrequencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuFrequencyFtraceEvent& a, CpuFrequencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFrequencyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuFrequencyFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuFrequencyFtraceEvent>(nullptr);
  }

  CpuFrequencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuFrequencyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuFrequencyFtraceEvent& from);
  void MergeFrom(const CpuFrequencyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuFrequencyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuFrequencyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCpuIdFieldNumber = 2,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 cpu_id = 2;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuFrequencyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class CpuFrequencyLimitsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuFrequencyLimitsFtraceEvent) */ {
 public:
  CpuFrequencyLimitsFtraceEvent();
  virtual ~CpuFrequencyLimitsFtraceEvent();

  CpuFrequencyLimitsFtraceEvent(const CpuFrequencyLimitsFtraceEvent& from);
  CpuFrequencyLimitsFtraceEvent(CpuFrequencyLimitsFtraceEvent&& from) noexcept
    : CpuFrequencyLimitsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuFrequencyLimitsFtraceEvent& operator=(const CpuFrequencyLimitsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFrequencyLimitsFtraceEvent& operator=(CpuFrequencyLimitsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuFrequencyLimitsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuFrequencyLimitsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuFrequencyLimitsFtraceEvent*>(
               &_CpuFrequencyLimitsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuFrequencyLimitsFtraceEvent& a, CpuFrequencyLimitsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFrequencyLimitsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuFrequencyLimitsFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuFrequencyLimitsFtraceEvent>(nullptr);
  }

  CpuFrequencyLimitsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuFrequencyLimitsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuFrequencyLimitsFtraceEvent& from);
  void MergeFrom(const CpuFrequencyLimitsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuFrequencyLimitsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuFrequencyLimitsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFreqFieldNumber = 1,
    kMaxFreqFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional uint32 min_freq = 1;
  bool has_min_freq() const;
  void clear_min_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_freq() const;
  void set_min_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_freq = 2;
  bool has_max_freq() const;
  void clear_max_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_freq() const;
  void set_max_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuFrequencyLimitsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class CpuIdleFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuIdleFtraceEvent) */ {
 public:
  CpuIdleFtraceEvent();
  virtual ~CpuIdleFtraceEvent();

  CpuIdleFtraceEvent(const CpuIdleFtraceEvent& from);
  CpuIdleFtraceEvent(CpuIdleFtraceEvent&& from) noexcept
    : CpuIdleFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuIdleFtraceEvent& operator=(const CpuIdleFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuIdleFtraceEvent& operator=(CpuIdleFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuIdleFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuIdleFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuIdleFtraceEvent*>(
               &_CpuIdleFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuIdleFtraceEvent& a, CpuIdleFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuIdleFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuIdleFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuIdleFtraceEvent>(nullptr);
  }

  CpuIdleFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuIdleFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuIdleFtraceEvent& from);
  void MergeFrom(const CpuIdleFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuIdleFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuIdleFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCpuIdFieldNumber = 2,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 cpu_id = 2;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuIdleFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class ClockEnableFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockEnableFtraceEvent) */ {
 public:
  ClockEnableFtraceEvent();
  virtual ~ClockEnableFtraceEvent();

  ClockEnableFtraceEvent(const ClockEnableFtraceEvent& from);
  ClockEnableFtraceEvent(ClockEnableFtraceEvent&& from) noexcept
    : ClockEnableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ClockEnableFtraceEvent& operator=(const ClockEnableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockEnableFtraceEvent& operator=(ClockEnableFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClockEnableFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockEnableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ClockEnableFtraceEvent*>(
               &_ClockEnableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClockEnableFtraceEvent& a, ClockEnableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockEnableFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClockEnableFtraceEvent* New() const final {
    return CreateMaybeMessage<ClockEnableFtraceEvent>(nullptr);
  }

  ClockEnableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClockEnableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClockEnableFtraceEvent& from);
  void MergeFrom(const ClockEnableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockEnableFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ClockEnableFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockEnableFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class ClockDisableFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockDisableFtraceEvent) */ {
 public:
  ClockDisableFtraceEvent();
  virtual ~ClockDisableFtraceEvent();

  ClockDisableFtraceEvent(const ClockDisableFtraceEvent& from);
  ClockDisableFtraceEvent(ClockDisableFtraceEvent&& from) noexcept
    : ClockDisableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ClockDisableFtraceEvent& operator=(const ClockDisableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockDisableFtraceEvent& operator=(ClockDisableFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClockDisableFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockDisableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ClockDisableFtraceEvent*>(
               &_ClockDisableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClockDisableFtraceEvent& a, ClockDisableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockDisableFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClockDisableFtraceEvent* New() const final {
    return CreateMaybeMessage<ClockDisableFtraceEvent>(nullptr);
  }

  ClockDisableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClockDisableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClockDisableFtraceEvent& from);
  void MergeFrom(const ClockDisableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockDisableFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ClockDisableFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockDisableFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class ClockSetRateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockSetRateFtraceEvent) */ {
 public:
  ClockSetRateFtraceEvent();
  virtual ~ClockSetRateFtraceEvent();

  ClockSetRateFtraceEvent(const ClockSetRateFtraceEvent& from);
  ClockSetRateFtraceEvent(ClockSetRateFtraceEvent&& from) noexcept
    : ClockSetRateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ClockSetRateFtraceEvent& operator=(const ClockSetRateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockSetRateFtraceEvent& operator=(ClockSetRateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClockSetRateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockSetRateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ClockSetRateFtraceEvent*>(
               &_ClockSetRateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClockSetRateFtraceEvent& a, ClockSetRateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockSetRateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClockSetRateFtraceEvent* New() const final {
    return CreateMaybeMessage<ClockSetRateFtraceEvent>(nullptr);
  }

  ClockSetRateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClockSetRateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClockSetRateFtraceEvent& from);
  void MergeFrom(const ClockSetRateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockSetRateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ClockSetRateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_id() const;
  void set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSetRateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class SuspendResumeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SuspendResumeFtraceEvent) */ {
 public:
  SuspendResumeFtraceEvent();
  virtual ~SuspendResumeFtraceEvent();

  SuspendResumeFtraceEvent(const SuspendResumeFtraceEvent& from);
  SuspendResumeFtraceEvent(SuspendResumeFtraceEvent&& from) noexcept
    : SuspendResumeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SuspendResumeFtraceEvent& operator=(const SuspendResumeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendResumeFtraceEvent& operator=(SuspendResumeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SuspendResumeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuspendResumeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SuspendResumeFtraceEvent*>(
               &_SuspendResumeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SuspendResumeFtraceEvent& a, SuspendResumeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendResumeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendResumeFtraceEvent* New() const final {
    return CreateMaybeMessage<SuspendResumeFtraceEvent>(nullptr);
  }

  SuspendResumeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendResumeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SuspendResumeFtraceEvent& from);
  void MergeFrom(const SuspendResumeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuspendResumeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SuspendResumeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kValFieldNumber = 2,
    kStartFieldNumber = 3,
  };
  // optional string action = 1;
  bool has_action() const;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // optional int32 val = 2;
  bool has_val() const;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 start = 3;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SuspendResumeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// -------------------------------------------------------------------

class GpuFrequencyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuFrequencyFtraceEvent) */ {
 public:
  GpuFrequencyFtraceEvent();
  virtual ~GpuFrequencyFtraceEvent();

  GpuFrequencyFtraceEvent(const GpuFrequencyFtraceEvent& from);
  GpuFrequencyFtraceEvent(GpuFrequencyFtraceEvent&& from) noexcept
    : GpuFrequencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline GpuFrequencyFtraceEvent& operator=(const GpuFrequencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuFrequencyFtraceEvent& operator=(GpuFrequencyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuFrequencyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuFrequencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const GpuFrequencyFtraceEvent*>(
               &_GpuFrequencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GpuFrequencyFtraceEvent& a, GpuFrequencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuFrequencyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuFrequencyFtraceEvent* New() const final {
    return CreateMaybeMessage<GpuFrequencyFtraceEvent>(nullptr);
  }

  GpuFrequencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuFrequencyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuFrequencyFtraceEvent& from);
  void MergeFrom(const GpuFrequencyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuFrequencyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuFrequencyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional uint32 gpu_id = 1;
  bool has_gpu_id() const;
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 state = 2;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuFrequencyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuFrequencyFtraceEvent

// optional uint32 state = 1;
inline bool CpuFrequencyFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuFrequencyFtraceEvent::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuFrequencyFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyFtraceEvent.state)
  return state_;
}
inline void CpuFrequencyFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyFtraceEvent.state)
}

// optional uint32 cpu_id = 2;
inline bool CpuFrequencyFtraceEvent::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuFrequencyFtraceEvent::clear_cpu_id() {
  cpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuFrequencyFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyFtraceEvent.cpu_id)
  return cpu_id_;
}
inline void CpuFrequencyFtraceEvent::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyFtraceEvent.cpu_id)
}

// -------------------------------------------------------------------

// CpuFrequencyLimitsFtraceEvent

// optional uint32 min_freq = 1;
inline bool CpuFrequencyLimitsFtraceEvent::has_min_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuFrequencyLimitsFtraceEvent::clear_min_freq() {
  min_freq_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuFrequencyLimitsFtraceEvent::min_freq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyLimitsFtraceEvent.min_freq)
  return min_freq_;
}
inline void CpuFrequencyLimitsFtraceEvent::set_min_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_freq_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyLimitsFtraceEvent.min_freq)
}

// optional uint32 max_freq = 2;
inline bool CpuFrequencyLimitsFtraceEvent::has_max_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuFrequencyLimitsFtraceEvent::clear_max_freq() {
  max_freq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuFrequencyLimitsFtraceEvent::max_freq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyLimitsFtraceEvent.max_freq)
  return max_freq_;
}
inline void CpuFrequencyLimitsFtraceEvent::set_max_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_freq_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyLimitsFtraceEvent.max_freq)
}

// optional uint32 cpu_id = 3;
inline bool CpuFrequencyLimitsFtraceEvent::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuFrequencyLimitsFtraceEvent::clear_cpu_id() {
  cpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuFrequencyLimitsFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyLimitsFtraceEvent.cpu_id)
  return cpu_id_;
}
inline void CpuFrequencyLimitsFtraceEvent::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyLimitsFtraceEvent.cpu_id)
}

// -------------------------------------------------------------------

// CpuIdleFtraceEvent

// optional uint32 state = 1;
inline bool CpuIdleFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuIdleFtraceEvent::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuIdleFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuIdleFtraceEvent.state)
  return state_;
}
inline void CpuIdleFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuIdleFtraceEvent.state)
}

// optional uint32 cpu_id = 2;
inline bool CpuIdleFtraceEvent::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuIdleFtraceEvent::clear_cpu_id() {
  cpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuIdleFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuIdleFtraceEvent.cpu_id)
  return cpu_id_;
}
inline void CpuIdleFtraceEvent::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuIdleFtraceEvent.cpu_id)
}

// -------------------------------------------------------------------

// ClockEnableFtraceEvent

// optional string name = 1;
inline bool ClockEnableFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClockEnableFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockEnableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockEnableFtraceEvent.name)
  return name_.GetNoArena();
}
inline void ClockEnableFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockEnableFtraceEvent.name)
}
inline void ClockEnableFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ClockEnableFtraceEvent.name)
}
inline void ClockEnableFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ClockEnableFtraceEvent.name)
}
inline void ClockEnableFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ClockEnableFtraceEvent.name)
}
inline std::string* ClockEnableFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockEnableFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClockEnableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ClockEnableFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClockEnableFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ClockEnableFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool ClockEnableFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClockEnableFtraceEvent::clear_state() {
  state_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClockEnableFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockEnableFtraceEvent.state)
  return state_;
}
inline void ClockEnableFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockEnableFtraceEvent.state)
}

// optional uint64 cpu_id = 3;
inline bool ClockEnableFtraceEvent::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClockEnableFtraceEvent::clear_cpu_id() {
  cpu_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClockEnableFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockEnableFtraceEvent.cpu_id)
  return cpu_id_;
}
inline void ClockEnableFtraceEvent::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockEnableFtraceEvent.cpu_id)
}

// -------------------------------------------------------------------

// ClockDisableFtraceEvent

// optional string name = 1;
inline bool ClockDisableFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClockDisableFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockDisableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockDisableFtraceEvent.name)
  return name_.GetNoArena();
}
inline void ClockDisableFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockDisableFtraceEvent.name)
}
inline void ClockDisableFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ClockDisableFtraceEvent.name)
}
inline void ClockDisableFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ClockDisableFtraceEvent.name)
}
inline void ClockDisableFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ClockDisableFtraceEvent.name)
}
inline std::string* ClockDisableFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockDisableFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClockDisableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ClockDisableFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClockDisableFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ClockDisableFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool ClockDisableFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClockDisableFtraceEvent::clear_state() {
  state_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClockDisableFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockDisableFtraceEvent.state)
  return state_;
}
inline void ClockDisableFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockDisableFtraceEvent.state)
}

// optional uint64 cpu_id = 3;
inline bool ClockDisableFtraceEvent::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClockDisableFtraceEvent::clear_cpu_id() {
  cpu_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClockDisableFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockDisableFtraceEvent.cpu_id)
  return cpu_id_;
}
inline void ClockDisableFtraceEvent::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockDisableFtraceEvent.cpu_id)
}

// -------------------------------------------------------------------

// ClockSetRateFtraceEvent

// optional string name = 1;
inline bool ClockSetRateFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClockSetRateFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockSetRateFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSetRateFtraceEvent.name)
  return name_.GetNoArena();
}
inline void ClockSetRateFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSetRateFtraceEvent.name)
}
inline void ClockSetRateFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ClockSetRateFtraceEvent.name)
}
inline void ClockSetRateFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ClockSetRateFtraceEvent.name)
}
inline void ClockSetRateFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ClockSetRateFtraceEvent.name)
}
inline std::string* ClockSetRateFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockSetRateFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClockSetRateFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ClockSetRateFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClockSetRateFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ClockSetRateFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool ClockSetRateFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClockSetRateFtraceEvent::clear_state() {
  state_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClockSetRateFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSetRateFtraceEvent.state)
  return state_;
}
inline void ClockSetRateFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSetRateFtraceEvent.state)
}

// optional uint64 cpu_id = 3;
inline bool ClockSetRateFtraceEvent::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClockSetRateFtraceEvent::clear_cpu_id() {
  cpu_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClockSetRateFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSetRateFtraceEvent.cpu_id)
  return cpu_id_;
}
inline void ClockSetRateFtraceEvent::set_cpu_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSetRateFtraceEvent.cpu_id)
}

// -------------------------------------------------------------------

// SuspendResumeFtraceEvent

// optional string action = 1;
inline bool SuspendResumeFtraceEvent::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuspendResumeFtraceEvent::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SuspendResumeFtraceEvent::action() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SuspendResumeFtraceEvent.action)
  return action_.GetNoArena();
}
inline void SuspendResumeFtraceEvent::set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SuspendResumeFtraceEvent.action)
}
inline void SuspendResumeFtraceEvent::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SuspendResumeFtraceEvent.action)
}
inline void SuspendResumeFtraceEvent::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SuspendResumeFtraceEvent.action)
}
inline void SuspendResumeFtraceEvent::set_action(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SuspendResumeFtraceEvent.action)
}
inline std::string* SuspendResumeFtraceEvent::mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SuspendResumeFtraceEvent.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SuspendResumeFtraceEvent::release_action() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SuspendResumeFtraceEvent.action)
  if (!has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SuspendResumeFtraceEvent::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SuspendResumeFtraceEvent.action)
}

// optional int32 val = 2;
inline bool SuspendResumeFtraceEvent::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuspendResumeFtraceEvent::clear_val() {
  val_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SuspendResumeFtraceEvent::val() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SuspendResumeFtraceEvent.val)
  return val_;
}
inline void SuspendResumeFtraceEvent::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  val_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SuspendResumeFtraceEvent.val)
}

// optional uint32 start = 3;
inline bool SuspendResumeFtraceEvent::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuspendResumeFtraceEvent::clear_start() {
  start_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuspendResumeFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SuspendResumeFtraceEvent.start)
  return start_;
}
inline void SuspendResumeFtraceEvent::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SuspendResumeFtraceEvent.start)
}

// -------------------------------------------------------------------

// GpuFrequencyFtraceEvent

// optional uint32 gpu_id = 1;
inline bool GpuFrequencyFtraceEvent::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuFrequencyFtraceEvent::clear_gpu_id() {
  gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuFrequencyFtraceEvent::gpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuFrequencyFtraceEvent.gpu_id)
  return gpu_id_;
}
inline void GpuFrequencyFtraceEvent::set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuFrequencyFtraceEvent.gpu_id)
}

// optional uint32 state = 2;
inline bool GpuFrequencyFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuFrequencyFtraceEvent::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuFrequencyFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuFrequencyFtraceEvent.state)
  return state_;
}
inline void GpuFrequencyFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuFrequencyFtraceEvent.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto
