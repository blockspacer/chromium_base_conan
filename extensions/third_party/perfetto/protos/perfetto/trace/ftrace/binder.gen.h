// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BINDER_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BINDER_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class BinderTransactionAllocBufFtraceEvent;
class BinderUnlockFtraceEvent;
class BinderLockedFtraceEvent;
class BinderLockFtraceEvent;
class BinderSetPriorityFtraceEvent;
class BinderTransactionReceivedFtraceEvent;
class BinderTransactionFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT BinderTransactionAllocBufFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDataSizeFieldNumber = 1,
    kDebugIdFieldNumber = 2,
    kOffsetsSizeFieldNumber = 3,
  };

  BinderTransactionAllocBufFtraceEvent();
  ~BinderTransactionAllocBufFtraceEvent() override;
  BinderTransactionAllocBufFtraceEvent(BinderTransactionAllocBufFtraceEvent&&) noexcept;
  BinderTransactionAllocBufFtraceEvent& operator=(BinderTransactionAllocBufFtraceEvent&&);
  BinderTransactionAllocBufFtraceEvent(const BinderTransactionAllocBufFtraceEvent&);
  BinderTransactionAllocBufFtraceEvent& operator=(const BinderTransactionAllocBufFtraceEvent&);
  bool operator==(const BinderTransactionAllocBufFtraceEvent&) const;
  bool operator!=(const BinderTransactionAllocBufFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_data_size() const { return _has_field_[1]; }
  uint64_t data_size() const { return data_size_; }
  void set_data_size(uint64_t value) { data_size_ = value; _has_field_.set(1); }

  bool has_debug_id() const { return _has_field_[2]; }
  int32_t debug_id() const { return debug_id_; }
  void set_debug_id(int32_t value) { debug_id_ = value; _has_field_.set(2); }

  bool has_offsets_size() const { return _has_field_[3]; }
  uint64_t offsets_size() const { return offsets_size_; }
  void set_offsets_size(uint64_t value) { offsets_size_ = value; _has_field_.set(3); }

 private:
  uint64_t data_size_{};
  int32_t debug_id_{};
  uint64_t offsets_size_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT BinderUnlockFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTagFieldNumber = 1,
  };

  BinderUnlockFtraceEvent();
  ~BinderUnlockFtraceEvent() override;
  BinderUnlockFtraceEvent(BinderUnlockFtraceEvent&&) noexcept;
  BinderUnlockFtraceEvent& operator=(BinderUnlockFtraceEvent&&);
  BinderUnlockFtraceEvent(const BinderUnlockFtraceEvent&);
  BinderUnlockFtraceEvent& operator=(const BinderUnlockFtraceEvent&);
  bool operator==(const BinderUnlockFtraceEvent&) const;
  bool operator!=(const BinderUnlockFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tag() const { return _has_field_[1]; }
  const std::string& tag() const { return tag_; }
  void set_tag(const std::string& value) { tag_ = value; _has_field_.set(1); }

 private:
  std::string tag_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT BinderLockedFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTagFieldNumber = 1,
  };

  BinderLockedFtraceEvent();
  ~BinderLockedFtraceEvent() override;
  BinderLockedFtraceEvent(BinderLockedFtraceEvent&&) noexcept;
  BinderLockedFtraceEvent& operator=(BinderLockedFtraceEvent&&);
  BinderLockedFtraceEvent(const BinderLockedFtraceEvent&);
  BinderLockedFtraceEvent& operator=(const BinderLockedFtraceEvent&);
  bool operator==(const BinderLockedFtraceEvent&) const;
  bool operator!=(const BinderLockedFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tag() const { return _has_field_[1]; }
  const std::string& tag() const { return tag_; }
  void set_tag(const std::string& value) { tag_ = value; _has_field_.set(1); }

 private:
  std::string tag_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT BinderLockFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTagFieldNumber = 1,
  };

  BinderLockFtraceEvent();
  ~BinderLockFtraceEvent() override;
  BinderLockFtraceEvent(BinderLockFtraceEvent&&) noexcept;
  BinderLockFtraceEvent& operator=(BinderLockFtraceEvent&&);
  BinderLockFtraceEvent(const BinderLockFtraceEvent&);
  BinderLockFtraceEvent& operator=(const BinderLockFtraceEvent&);
  bool operator==(const BinderLockFtraceEvent&) const;
  bool operator!=(const BinderLockFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tag() const { return _has_field_[1]; }
  const std::string& tag() const { return tag_; }
  void set_tag(const std::string& value) { tag_ = value; _has_field_.set(1); }

 private:
  std::string tag_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT BinderSetPriorityFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kProcFieldNumber = 1,
    kThreadFieldNumber = 2,
    kOldPrioFieldNumber = 3,
    kNewPrioFieldNumber = 4,
    kDesiredPrioFieldNumber = 5,
  };

  BinderSetPriorityFtraceEvent();
  ~BinderSetPriorityFtraceEvent() override;
  BinderSetPriorityFtraceEvent(BinderSetPriorityFtraceEvent&&) noexcept;
  BinderSetPriorityFtraceEvent& operator=(BinderSetPriorityFtraceEvent&&);
  BinderSetPriorityFtraceEvent(const BinderSetPriorityFtraceEvent&);
  BinderSetPriorityFtraceEvent& operator=(const BinderSetPriorityFtraceEvent&);
  bool operator==(const BinderSetPriorityFtraceEvent&) const;
  bool operator!=(const BinderSetPriorityFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_proc() const { return _has_field_[1]; }
  int32_t proc() const { return proc_; }
  void set_proc(int32_t value) { proc_ = value; _has_field_.set(1); }

  bool has_thread() const { return _has_field_[2]; }
  int32_t thread() const { return thread_; }
  void set_thread(int32_t value) { thread_ = value; _has_field_.set(2); }

  bool has_old_prio() const { return _has_field_[3]; }
  uint32_t old_prio() const { return old_prio_; }
  void set_old_prio(uint32_t value) { old_prio_ = value; _has_field_.set(3); }

  bool has_new_prio() const { return _has_field_[4]; }
  uint32_t new_prio() const { return new_prio_; }
  void set_new_prio(uint32_t value) { new_prio_ = value; _has_field_.set(4); }

  bool has_desired_prio() const { return _has_field_[5]; }
  uint32_t desired_prio() const { return desired_prio_; }
  void set_desired_prio(uint32_t value) { desired_prio_ = value; _has_field_.set(5); }

 private:
  int32_t proc_{};
  int32_t thread_{};
  uint32_t old_prio_{};
  uint32_t new_prio_{};
  uint32_t desired_prio_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT BinderTransactionReceivedFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDebugIdFieldNumber = 1,
  };

  BinderTransactionReceivedFtraceEvent();
  ~BinderTransactionReceivedFtraceEvent() override;
  BinderTransactionReceivedFtraceEvent(BinderTransactionReceivedFtraceEvent&&) noexcept;
  BinderTransactionReceivedFtraceEvent& operator=(BinderTransactionReceivedFtraceEvent&&);
  BinderTransactionReceivedFtraceEvent(const BinderTransactionReceivedFtraceEvent&);
  BinderTransactionReceivedFtraceEvent& operator=(const BinderTransactionReceivedFtraceEvent&);
  bool operator==(const BinderTransactionReceivedFtraceEvent&) const;
  bool operator!=(const BinderTransactionReceivedFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_debug_id() const { return _has_field_[1]; }
  int32_t debug_id() const { return debug_id_; }
  void set_debug_id(int32_t value) { debug_id_ = value; _has_field_.set(1); }

 private:
  int32_t debug_id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT BinderTransactionFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDebugIdFieldNumber = 1,
    kTargetNodeFieldNumber = 2,
    kToProcFieldNumber = 3,
    kToThreadFieldNumber = 4,
    kReplyFieldNumber = 5,
    kCodeFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };

  BinderTransactionFtraceEvent();
  ~BinderTransactionFtraceEvent() override;
  BinderTransactionFtraceEvent(BinderTransactionFtraceEvent&&) noexcept;
  BinderTransactionFtraceEvent& operator=(BinderTransactionFtraceEvent&&);
  BinderTransactionFtraceEvent(const BinderTransactionFtraceEvent&);
  BinderTransactionFtraceEvent& operator=(const BinderTransactionFtraceEvent&);
  bool operator==(const BinderTransactionFtraceEvent&) const;
  bool operator!=(const BinderTransactionFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_debug_id() const { return _has_field_[1]; }
  int32_t debug_id() const { return debug_id_; }
  void set_debug_id(int32_t value) { debug_id_ = value; _has_field_.set(1); }

  bool has_target_node() const { return _has_field_[2]; }
  int32_t target_node() const { return target_node_; }
  void set_target_node(int32_t value) { target_node_ = value; _has_field_.set(2); }

  bool has_to_proc() const { return _has_field_[3]; }
  int32_t to_proc() const { return to_proc_; }
  void set_to_proc(int32_t value) { to_proc_ = value; _has_field_.set(3); }

  bool has_to_thread() const { return _has_field_[4]; }
  int32_t to_thread() const { return to_thread_; }
  void set_to_thread(int32_t value) { to_thread_ = value; _has_field_.set(4); }

  bool has_reply() const { return _has_field_[5]; }
  int32_t reply() const { return reply_; }
  void set_reply(int32_t value) { reply_ = value; _has_field_.set(5); }

  bool has_code() const { return _has_field_[6]; }
  uint32_t code() const { return code_; }
  void set_code(uint32_t value) { code_ = value; _has_field_.set(6); }

  bool has_flags() const { return _has_field_[7]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(7); }

 private:
  int32_t debug_id_{};
  int32_t target_node_{};
  int32_t to_proc_{};
  int32_t to_thread_{};
  int32_t reply_{};
  uint32_t code_{};
  uint32_t flags_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BINDER_PROTO_CPP_H_
