// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SCM_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SCM_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ScmCallEndFtraceEvent;
class ScmCallStartFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT ScmCallEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
  };

  ScmCallEndFtraceEvent();
  ~ScmCallEndFtraceEvent() override;
  ScmCallEndFtraceEvent(ScmCallEndFtraceEvent&&) noexcept;
  ScmCallEndFtraceEvent& operator=(ScmCallEndFtraceEvent&&);
  ScmCallEndFtraceEvent(const ScmCallEndFtraceEvent&);
  ScmCallEndFtraceEvent& operator=(const ScmCallEndFtraceEvent&);
  bool operator==(const ScmCallEndFtraceEvent&) const;
  bool operator!=(const ScmCallEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

 private:

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT ScmCallStartFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kArginfoFieldNumber = 1,
    kX0FieldNumber = 2,
    kX5FieldNumber = 3,
  };

  ScmCallStartFtraceEvent();
  ~ScmCallStartFtraceEvent() override;
  ScmCallStartFtraceEvent(ScmCallStartFtraceEvent&&) noexcept;
  ScmCallStartFtraceEvent& operator=(ScmCallStartFtraceEvent&&);
  ScmCallStartFtraceEvent(const ScmCallStartFtraceEvent&);
  ScmCallStartFtraceEvent& operator=(const ScmCallStartFtraceEvent&);
  bool operator==(const ScmCallStartFtraceEvent&) const;
  bool operator!=(const ScmCallStartFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_arginfo() const { return _has_field_[1]; }
  uint32_t arginfo() const { return arginfo_; }
  void set_arginfo(uint32_t value) { arginfo_ = value; _has_field_.set(1); }

  bool has_x0() const { return _has_field_[2]; }
  uint64_t x0() const { return x0_; }
  void set_x0(uint64_t value) { x0_ = value; _has_field_.set(2); }

  bool has_x5() const { return _has_field_[3]; }
  uint64_t x5() const { return x5_; }
  void set_x5(uint64_t value) { x5_ = value; _has_field_.set(3); }

 private:
  uint32_t arginfo_{};
  uint64_t x0_{};
  uint64_t x5_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SCM_PROTO_CPP_H_
