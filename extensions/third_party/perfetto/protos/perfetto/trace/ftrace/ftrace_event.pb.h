// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/ftrace/binder.pb.h"
#include "protos/perfetto/trace/ftrace/block.pb.h"
#include "protos/perfetto/trace/ftrace/cgroup.pb.h"
#include "protos/perfetto/trace/ftrace/clk.pb.h"
#include "protos/perfetto/trace/ftrace/compaction.pb.h"
#include "protos/perfetto/trace/ftrace/cpuhp.pb.h"
#include "protos/perfetto/trace/ftrace/dpu.pb.h"
#include "protos/perfetto/trace/ftrace/ext4.pb.h"
#include "protos/perfetto/trace/ftrace/f2fs.pb.h"
#include "protos/perfetto/trace/ftrace/fastrpc.pb.h"
#include "protos/perfetto/trace/ftrace/fence.pb.h"
#include "protos/perfetto/trace/ftrace/filemap.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace.pb.h"
#include "protos/perfetto/trace/ftrace/g2d.pb.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.pb.h"
#include "protos/perfetto/trace/ftrace/i2c.pb.h"
#include "protos/perfetto/trace/ftrace/ion.pb.h"
#include "protos/perfetto/trace/ftrace/ipi.pb.h"
#include "protos/perfetto/trace/ftrace/irq.pb.h"
#include "protos/perfetto/trace/ftrace/kmem.pb.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.pb.h"
#include "protos/perfetto/trace/ftrace/mali.pb.h"
#include "protos/perfetto/trace/ftrace/mdss.pb.h"
#include "protos/perfetto/trace/ftrace/mm_event.pb.h"
#include "protos/perfetto/trace/ftrace/oom.pb.h"
#include "protos/perfetto/trace/ftrace/power.pb.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.pb.h"
#include "protos/perfetto/trace/ftrace/regulator.pb.h"
#include "protos/perfetto/trace/ftrace/sched.pb.h"
#include "protos/perfetto/trace/ftrace/scm.pb.h"
#include "protos/perfetto/trace/ftrace/sde.pb.h"
#include "protos/perfetto/trace/ftrace/signal.pb.h"
#include "protos/perfetto/trace/ftrace/sync.pb.h"
#include "protos/perfetto/trace/ftrace/systrace.pb.h"
#include "protos/perfetto/trace/ftrace/task.pb.h"
#include "protos/perfetto/trace/ftrace/thermal.pb.h"
#include "protos/perfetto/trace/ftrace/vmscan.pb.h"
#include "protos/perfetto/trace/ftrace/workqueue.pb.h"
#include "protos/perfetto/trace/ftrace/generic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class FtraceEvent;
class FtraceEventDefaultTypeInternal;
extern FtraceEventDefaultTypeInternal _FtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::FtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class FtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEvent) */ {
 public:
  FtraceEvent();
  virtual ~FtraceEvent();

  FtraceEvent(const FtraceEvent& from);
  FtraceEvent(FtraceEvent&& from) noexcept
    : FtraceEvent() {
    *this = ::std::move(from);
  }

  inline FtraceEvent& operator=(const FtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEvent& operator=(FtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceEvent& default_instance();

  enum EventCase {
    kPrint = 3,
    kSchedSwitch = 4,
    kCpuFrequency = 11,
    kCpuFrequencyLimits = 12,
    kCpuIdle = 13,
    kClockEnable = 14,
    kClockDisable = 15,
    kClockSetRate = 16,
    kSchedWakeup = 17,
    kSchedBlockedReason = 18,
    kSchedCpuHotplug = 19,
    kSchedWaking = 20,
    kIpiEntry = 21,
    kIpiExit = 22,
    kIpiRaise = 23,
    kSoftirqEntry = 24,
    kSoftirqExit = 25,
    kSoftirqRaise = 26,
    kI2CRead = 27,
    kI2CWrite = 28,
    kI2CResult = 29,
    kI2CReply = 30,
    kSmbusRead = 31,
    kSmbusWrite = 32,
    kSmbusResult = 33,
    kSmbusReply = 34,
    kLowmemoryKill = 35,
    kIrqHandlerEntry = 36,
    kIrqHandlerExit = 37,
    kSyncPt = 38,
    kSyncTimeline = 39,
    kSyncWait = 40,
    kExt4DaWriteBegin = 41,
    kExt4DaWriteEnd = 42,
    kExt4SyncFileEnter = 43,
    kExt4SyncFileExit = 44,
    kBlockRqIssue = 45,
    kMmVmscanDirectReclaimBegin = 46,
    kMmVmscanDirectReclaimEnd = 47,
    kMmVmscanKswapdWake = 48,
    kMmVmscanKswapdSleep = 49,
    kBinderTransaction = 50,
    kBinderTransactionReceived = 51,
    kBinderSetPriority = 52,
    kBinderLock = 53,
    kBinderLocked = 54,
    kBinderUnlock = 55,
    kWorkqueueActivateWork = 56,
    kWorkqueueExecuteEnd = 57,
    kWorkqueueExecuteStart = 58,
    kWorkqueueQueueWork = 59,
    kRegulatorDisable = 60,
    kRegulatorDisableComplete = 61,
    kRegulatorEnable = 62,
    kRegulatorEnableComplete = 63,
    kRegulatorEnableDelay = 64,
    kRegulatorSetVoltage = 65,
    kRegulatorSetVoltageComplete = 66,
    kCgroupAttachTask = 67,
    kCgroupMkdir = 68,
    kCgroupRemount = 69,
    kCgroupRmdir = 70,
    kCgroupTransferTasks = 71,
    kCgroupDestroyRoot = 72,
    kCgroupRelease = 73,
    kCgroupRename = 74,
    kCgroupSetupRoot = 75,
    kMdpCmdKickoff = 76,
    kMdpCommit = 77,
    kMdpPerfSetOt = 78,
    kMdpSsppChange = 79,
    kTracingMarkWrite = 80,
    kMdpCmdPingpongDone = 81,
    kMdpCompareBw = 82,
    kMdpPerfSetPanicLuts = 83,
    kMdpSsppSet = 84,
    kMdpCmdReadptrDone = 85,
    kMdpMisrCrc = 86,
    kMdpPerfSetQosLuts = 87,
    kMdpTraceCounter = 88,
    kMdpCmdReleaseBw = 89,
    kMdpMixerUpdate = 90,
    kMdpPerfSetWmLevels = 91,
    kMdpVideoUnderrunDone = 92,
    kMdpCmdWaitPingpong = 93,
    kMdpPerfPrefillCalc = 94,
    kMdpPerfUpdateBus = 95,
    kRotatorBwAoAsContext = 96,
    kMmFilemapAddToPageCache = 97,
    kMmFilemapDeleteFromPageCache = 98,
    kMmCompactionBegin = 99,
    kMmCompactionDeferCompaction = 100,
    kMmCompactionDeferred = 101,
    kMmCompactionDeferReset = 102,
    kMmCompactionEnd = 103,
    kMmCompactionFinished = 104,
    kMmCompactionIsolateFreepages = 105,
    kMmCompactionIsolateMigratepages = 106,
    kMmCompactionKcompactdSleep = 107,
    kMmCompactionKcompactdWake = 108,
    kMmCompactionMigratepages = 109,
    kMmCompactionSuitable = 110,
    kMmCompactionTryToCompactPages = 111,
    kMmCompactionWakeupKcompactd = 112,
    kSuspendResume = 113,
    kSchedWakeupNew = 114,
    kBlockBioBackmerge = 115,
    kBlockBioBounce = 116,
    kBlockBioComplete = 117,
    kBlockBioFrontmerge = 118,
    kBlockBioQueue = 119,
    kBlockBioRemap = 120,
    kBlockDirtyBuffer = 121,
    kBlockGetrq = 122,
    kBlockPlug = 123,
    kBlockRqAbort = 124,
    kBlockRqComplete = 125,
    kBlockRqInsert = 126,
    kBlockRqRemap = 128,
    kBlockRqRequeue = 129,
    kBlockSleeprq = 130,
    kBlockSplit = 131,
    kBlockTouchBuffer = 132,
    kBlockUnplug = 133,
    kExt4AllocDaBlocks = 134,
    kExt4AllocateBlocks = 135,
    kExt4AllocateInode = 136,
    kExt4BeginOrderedTruncate = 137,
    kExt4CollapseRange = 138,
    kExt4DaReleaseSpace = 139,
    kExt4DaReserveSpace = 140,
    kExt4DaUpdateReserveSpace = 141,
    kExt4DaWritePages = 142,
    kExt4DaWritePagesExtent = 143,
    kExt4DirectIOEnter = 144,
    kExt4DirectIOExit = 145,
    kExt4DiscardBlocks = 146,
    kExt4DiscardPreallocations = 147,
    kExt4DropInode = 148,
    kExt4EsCacheExtent = 149,
    kExt4EsFindDelayedExtentRangeEnter = 150,
    kExt4EsFindDelayedExtentRangeExit = 151,
    kExt4EsInsertExtent = 152,
    kExt4EsLookupExtentEnter = 153,
    kExt4EsLookupExtentExit = 154,
    kExt4EsRemoveExtent = 155,
    kExt4EsShrink = 156,
    kExt4EsShrinkCount = 157,
    kExt4EsShrinkScanEnter = 158,
    kExt4EsShrinkScanExit = 159,
    kExt4EvictInode = 160,
    kExt4ExtConvertToInitializedEnter = 161,
    kExt4ExtConvertToInitializedFastpath = 162,
    kExt4ExtHandleUnwrittenExtents = 163,
    kExt4ExtInCache = 164,
    kExt4ExtLoadExtent = 165,
    kExt4ExtMapBlocksEnter = 166,
    kExt4ExtMapBlocksExit = 167,
    kExt4ExtPutInCache = 168,
    kExt4ExtRemoveSpace = 169,
    kExt4ExtRemoveSpaceDone = 170,
    kExt4ExtRmIdx = 171,
    kExt4ExtRmLeaf = 172,
    kExt4ExtShowExtent = 173,
    kExt4FallocateEnter = 174,
    kExt4FallocateExit = 175,
    kExt4FindDelallocRange = 176,
    kExt4Forget = 177,
    kExt4FreeBlocks = 178,
    kExt4FreeInode = 179,
    kExt4GetImpliedClusterAllocExit = 180,
    kExt4GetReservedClusterAlloc = 181,
    kExt4IndMapBlocksEnter = 182,
    kExt4IndMapBlocksExit = 183,
    kExt4InsertRange = 184,
    kExt4Invalidatepage = 185,
    kExt4JournalStart = 186,
    kExt4JournalStartReserved = 187,
    kExt4JournalledInvalidatepage = 188,
    kExt4JournalledWriteEnd = 189,
    kExt4LoadInode = 190,
    kExt4LoadInodeBitmap = 191,
    kExt4MarkInodeDirty = 192,
    kExt4MbBitmapLoad = 193,
    kExt4MbBuddyBitmapLoad = 194,
    kExt4MbDiscardPreallocations = 195,
    kExt4MbNewGroupPa = 196,
    kExt4MbNewInodePa = 197,
    kExt4MbReleaseGroupPa = 198,
    kExt4MbReleaseInodePa = 199,
    kExt4MballocAlloc = 200,
    kExt4MballocDiscard = 201,
    kExt4MballocFree = 202,
    kExt4MballocPrealloc = 203,
    kExt4OtherInodeUpdateTime = 204,
    kExt4PunchHole = 205,
    kExt4ReadBlockBitmapLoad = 206,
    kExt4Readpage = 207,
    kExt4Releasepage = 208,
    kExt4RemoveBlocks = 209,
    kExt4RequestBlocks = 210,
    kExt4RequestInode = 211,
    kExt4SyncFs = 212,
    kExt4TrimAllFree = 213,
    kExt4TrimExtent = 214,
    kExt4TruncateEnter = 215,
    kExt4TruncateExit = 216,
    kExt4UnlinkEnter = 217,
    kExt4UnlinkExit = 218,
    kExt4WriteBegin = 219,
    kExt4WriteEnd = 230,
    kExt4Writepage = 231,
    kExt4Writepages = 232,
    kExt4WritepagesResult = 233,
    kExt4ZeroRange = 234,
    kTaskNewtask = 235,
    kTaskRename = 236,
    kSchedProcessExec = 237,
    kSchedProcessExit = 238,
    kSchedProcessFork = 239,
    kSchedProcessFree = 240,
    kSchedProcessHang = 241,
    kSchedProcessWait = 242,
    kF2FsDoSubmitBio = 243,
    kF2FsEvictInode = 244,
    kF2FsFallocate = 245,
    kF2FsGetDataBlock = 246,
    kF2FsGetVictim = 247,
    kF2FsIget = 248,
    kF2FsIgetExit = 249,
    kF2FsNewInode = 250,
    kF2FsReadpage = 251,
    kF2FsReserveNewBlock = 252,
    kF2FsSetPageDirty = 253,
    kF2FsSubmitWritePage = 254,
    kF2FsSyncFileEnter = 255,
    kF2FsSyncFileExit = 256,
    kF2FsSyncFs = 257,
    kF2FsTruncate = 258,
    kF2FsTruncateBlocksEnter = 259,
    kF2FsTruncateBlocksExit = 260,
    kF2FsTruncateDataBlocksRange = 261,
    kF2FsTruncateInodeBlocksEnter = 262,
    kF2FsTruncateInodeBlocksExit = 263,
    kF2FsTruncateNode = 264,
    kF2FsTruncateNodesEnter = 265,
    kF2FsTruncateNodesExit = 266,
    kF2FsTruncatePartialNodes = 267,
    kF2FsUnlinkEnter = 268,
    kF2FsUnlinkExit = 269,
    kF2FsVmPageMkwrite = 270,
    kF2FsWriteBegin = 271,
    kF2FsWriteCheckpoint = 272,
    kF2FsWriteEnd = 273,
    kAllocPagesIommuEnd = 274,
    kAllocPagesIommuFail = 275,
    kAllocPagesIommuStart = 276,
    kAllocPagesSysEnd = 277,
    kAllocPagesSysFail = 278,
    kAllocPagesSysStart = 279,
    kDmaAllocContiguousRetry = 280,
    kIommuMapRange = 281,
    kIommuSecPtblMapRangeEnd = 282,
    kIommuSecPtblMapRangeStart = 283,
    kIonAllocBufferEnd = 284,
    kIonAllocBufferFail = 285,
    kIonAllocBufferFallback = 286,
    kIonAllocBufferStart = 287,
    kIonCpAllocRetry = 288,
    kIonCpSecureBufferEnd = 289,
    kIonCpSecureBufferStart = 290,
    kIonPrefetching = 291,
    kIonSecureCmaAddToPoolEnd = 292,
    kIonSecureCmaAddToPoolStart = 293,
    kIonSecureCmaAllocateEnd = 294,
    kIonSecureCmaAllocateStart = 295,
    kIonSecureCmaShrinkPoolEnd = 296,
    kIonSecureCmaShrinkPoolStart = 297,
    kKfree = 298,
    kKmalloc = 299,
    kKmallocNode = 300,
    kKmemCacheAlloc = 301,
    kKmemCacheAllocNode = 302,
    kKmemCacheFree = 303,
    kMigratePagesEnd = 304,
    kMigratePagesStart = 305,
    kMigrateRetry = 306,
    kMmPageAlloc = 307,
    kMmPageAllocExtfrag = 308,
    kMmPageAllocZoneLocked = 309,
    kMmPageFree = 310,
    kMmPageFreeBatched = 311,
    kMmPagePcpuDrain = 312,
    kRssStat = 313,
    kIonHeapShrink = 314,
    kIonHeapGrow = 315,
    kFenceInit = 316,
    kFenceDestroy = 317,
    kFenceEnableSignal = 318,
    kFenceSignaled = 319,
    kClkEnable = 320,
    kClkDisable = 321,
    kClkSetRate = 322,
    kBinderTransactionAllocBuf = 323,
    kSignalDeliver = 324,
    kSignalGenerate = 325,
    kOomScoreAdjUpdate = 326,
    kGeneric = 327,
    kMmEventRecord = 328,
    kSysEnter = 329,
    kSysExit = 330,
    kZero = 331,
    kGpuFrequency = 332,
    kSdeTracingMarkWrite = 333,
    kMarkVictim = 334,
    kIonStat = 335,
    kIonBufferCreate = 336,
    kIonBufferDestroy = 337,
    kScmCallStart = 338,
    kScmCallEnd = 339,
    kGpuMemTotal = 340,
    kThermalTemperature = 341,
    kCdevUpdate = 342,
    kCpuhpExit = 343,
    kCpuhpMultiEnter = 344,
    kCpuhpEnter = 345,
    kCpuhpLatency = 346,
    kFastrpcDmaStat = 347,
    kDpuTracingMarkWrite = 348,
    kG2DTracingMarkWrite = 349,
    kMaliTracingMarkWrite = 350,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FtraceEvent*>(
               &_FtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceEvent& a, FtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtraceEvent* New() const final {
    return CreateMaybeMessage<FtraceEvent>(nullptr);
  }

  FtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FtraceEvent& from);
  void MergeFrom(const FtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kPidFieldNumber = 2,
    kPrintFieldNumber = 3,
    kSchedSwitchFieldNumber = 4,
    kCpuFrequencyFieldNumber = 11,
    kCpuFrequencyLimitsFieldNumber = 12,
    kCpuIdleFieldNumber = 13,
    kClockEnableFieldNumber = 14,
    kClockDisableFieldNumber = 15,
    kClockSetRateFieldNumber = 16,
    kSchedWakeupFieldNumber = 17,
    kSchedBlockedReasonFieldNumber = 18,
    kSchedCpuHotplugFieldNumber = 19,
    kSchedWakingFieldNumber = 20,
    kIpiEntryFieldNumber = 21,
    kIpiExitFieldNumber = 22,
    kIpiRaiseFieldNumber = 23,
    kSoftirqEntryFieldNumber = 24,
    kSoftirqExitFieldNumber = 25,
    kSoftirqRaiseFieldNumber = 26,
    kI2CReadFieldNumber = 27,
    kI2CWriteFieldNumber = 28,
    kI2CResultFieldNumber = 29,
    kI2CReplyFieldNumber = 30,
    kSmbusReadFieldNumber = 31,
    kSmbusWriteFieldNumber = 32,
    kSmbusResultFieldNumber = 33,
    kSmbusReplyFieldNumber = 34,
    kLowmemoryKillFieldNumber = 35,
    kIrqHandlerEntryFieldNumber = 36,
    kIrqHandlerExitFieldNumber = 37,
    kSyncPtFieldNumber = 38,
    kSyncTimelineFieldNumber = 39,
    kSyncWaitFieldNumber = 40,
    kExt4DaWriteBeginFieldNumber = 41,
    kExt4DaWriteEndFieldNumber = 42,
    kExt4SyncFileEnterFieldNumber = 43,
    kExt4SyncFileExitFieldNumber = 44,
    kBlockRqIssueFieldNumber = 45,
    kMmVmscanDirectReclaimBeginFieldNumber = 46,
    kMmVmscanDirectReclaimEndFieldNumber = 47,
    kMmVmscanKswapdWakeFieldNumber = 48,
    kMmVmscanKswapdSleepFieldNumber = 49,
    kBinderTransactionFieldNumber = 50,
    kBinderTransactionReceivedFieldNumber = 51,
    kBinderSetPriorityFieldNumber = 52,
    kBinderLockFieldNumber = 53,
    kBinderLockedFieldNumber = 54,
    kBinderUnlockFieldNumber = 55,
    kWorkqueueActivateWorkFieldNumber = 56,
    kWorkqueueExecuteEndFieldNumber = 57,
    kWorkqueueExecuteStartFieldNumber = 58,
    kWorkqueueQueueWorkFieldNumber = 59,
    kRegulatorDisableFieldNumber = 60,
    kRegulatorDisableCompleteFieldNumber = 61,
    kRegulatorEnableFieldNumber = 62,
    kRegulatorEnableCompleteFieldNumber = 63,
    kRegulatorEnableDelayFieldNumber = 64,
    kRegulatorSetVoltageFieldNumber = 65,
    kRegulatorSetVoltageCompleteFieldNumber = 66,
    kCgroupAttachTaskFieldNumber = 67,
    kCgroupMkdirFieldNumber = 68,
    kCgroupRemountFieldNumber = 69,
    kCgroupRmdirFieldNumber = 70,
    kCgroupTransferTasksFieldNumber = 71,
    kCgroupDestroyRootFieldNumber = 72,
    kCgroupReleaseFieldNumber = 73,
    kCgroupRenameFieldNumber = 74,
    kCgroupSetupRootFieldNumber = 75,
    kMdpCmdKickoffFieldNumber = 76,
    kMdpCommitFieldNumber = 77,
    kMdpPerfSetOtFieldNumber = 78,
    kMdpSsppChangeFieldNumber = 79,
    kTracingMarkWriteFieldNumber = 80,
    kMdpCmdPingpongDoneFieldNumber = 81,
    kMdpCompareBwFieldNumber = 82,
    kMdpPerfSetPanicLutsFieldNumber = 83,
    kMdpSsppSetFieldNumber = 84,
    kMdpCmdReadptrDoneFieldNumber = 85,
    kMdpMisrCrcFieldNumber = 86,
    kMdpPerfSetQosLutsFieldNumber = 87,
    kMdpTraceCounterFieldNumber = 88,
    kMdpCmdReleaseBwFieldNumber = 89,
    kMdpMixerUpdateFieldNumber = 90,
    kMdpPerfSetWmLevelsFieldNumber = 91,
    kMdpVideoUnderrunDoneFieldNumber = 92,
    kMdpCmdWaitPingpongFieldNumber = 93,
    kMdpPerfPrefillCalcFieldNumber = 94,
    kMdpPerfUpdateBusFieldNumber = 95,
    kRotatorBwAoAsContextFieldNumber = 96,
    kMmFilemapAddToPageCacheFieldNumber = 97,
    kMmFilemapDeleteFromPageCacheFieldNumber = 98,
    kMmCompactionBeginFieldNumber = 99,
    kMmCompactionDeferCompactionFieldNumber = 100,
    kMmCompactionDeferredFieldNumber = 101,
    kMmCompactionDeferResetFieldNumber = 102,
    kMmCompactionEndFieldNumber = 103,
    kMmCompactionFinishedFieldNumber = 104,
    kMmCompactionIsolateFreepagesFieldNumber = 105,
    kMmCompactionIsolateMigratepagesFieldNumber = 106,
    kMmCompactionKcompactdSleepFieldNumber = 107,
    kMmCompactionKcompactdWakeFieldNumber = 108,
    kMmCompactionMigratepagesFieldNumber = 109,
    kMmCompactionSuitableFieldNumber = 110,
    kMmCompactionTryToCompactPagesFieldNumber = 111,
    kMmCompactionWakeupKcompactdFieldNumber = 112,
    kSuspendResumeFieldNumber = 113,
    kSchedWakeupNewFieldNumber = 114,
    kBlockBioBackmergeFieldNumber = 115,
    kBlockBioBounceFieldNumber = 116,
    kBlockBioCompleteFieldNumber = 117,
    kBlockBioFrontmergeFieldNumber = 118,
    kBlockBioQueueFieldNumber = 119,
    kBlockBioRemapFieldNumber = 120,
    kBlockDirtyBufferFieldNumber = 121,
    kBlockGetrqFieldNumber = 122,
    kBlockPlugFieldNumber = 123,
    kBlockRqAbortFieldNumber = 124,
    kBlockRqCompleteFieldNumber = 125,
    kBlockRqInsertFieldNumber = 126,
    kBlockRqRemapFieldNumber = 128,
    kBlockRqRequeueFieldNumber = 129,
    kBlockSleeprqFieldNumber = 130,
    kBlockSplitFieldNumber = 131,
    kBlockTouchBufferFieldNumber = 132,
    kBlockUnplugFieldNumber = 133,
    kExt4AllocDaBlocksFieldNumber = 134,
    kExt4AllocateBlocksFieldNumber = 135,
    kExt4AllocateInodeFieldNumber = 136,
    kExt4BeginOrderedTruncateFieldNumber = 137,
    kExt4CollapseRangeFieldNumber = 138,
    kExt4DaReleaseSpaceFieldNumber = 139,
    kExt4DaReserveSpaceFieldNumber = 140,
    kExt4DaUpdateReserveSpaceFieldNumber = 141,
    kExt4DaWritePagesFieldNumber = 142,
    kExt4DaWritePagesExtentFieldNumber = 143,
    kExt4DirectIOEnterFieldNumber = 144,
    kExt4DirectIOExitFieldNumber = 145,
    kExt4DiscardBlocksFieldNumber = 146,
    kExt4DiscardPreallocationsFieldNumber = 147,
    kExt4DropInodeFieldNumber = 148,
    kExt4EsCacheExtentFieldNumber = 149,
    kExt4EsFindDelayedExtentRangeEnterFieldNumber = 150,
    kExt4EsFindDelayedExtentRangeExitFieldNumber = 151,
    kExt4EsInsertExtentFieldNumber = 152,
    kExt4EsLookupExtentEnterFieldNumber = 153,
    kExt4EsLookupExtentExitFieldNumber = 154,
    kExt4EsRemoveExtentFieldNumber = 155,
    kExt4EsShrinkFieldNumber = 156,
    kExt4EsShrinkCountFieldNumber = 157,
    kExt4EsShrinkScanEnterFieldNumber = 158,
    kExt4EsShrinkScanExitFieldNumber = 159,
    kExt4EvictInodeFieldNumber = 160,
    kExt4ExtConvertToInitializedEnterFieldNumber = 161,
    kExt4ExtConvertToInitializedFastpathFieldNumber = 162,
    kExt4ExtHandleUnwrittenExtentsFieldNumber = 163,
    kExt4ExtInCacheFieldNumber = 164,
    kExt4ExtLoadExtentFieldNumber = 165,
    kExt4ExtMapBlocksEnterFieldNumber = 166,
    kExt4ExtMapBlocksExitFieldNumber = 167,
    kExt4ExtPutInCacheFieldNumber = 168,
    kExt4ExtRemoveSpaceFieldNumber = 169,
    kExt4ExtRemoveSpaceDoneFieldNumber = 170,
    kExt4ExtRmIdxFieldNumber = 171,
    kExt4ExtRmLeafFieldNumber = 172,
    kExt4ExtShowExtentFieldNumber = 173,
    kExt4FallocateEnterFieldNumber = 174,
    kExt4FallocateExitFieldNumber = 175,
    kExt4FindDelallocRangeFieldNumber = 176,
    kExt4ForgetFieldNumber = 177,
    kExt4FreeBlocksFieldNumber = 178,
    kExt4FreeInodeFieldNumber = 179,
    kExt4GetImpliedClusterAllocExitFieldNumber = 180,
    kExt4GetReservedClusterAllocFieldNumber = 181,
    kExt4IndMapBlocksEnterFieldNumber = 182,
    kExt4IndMapBlocksExitFieldNumber = 183,
    kExt4InsertRangeFieldNumber = 184,
    kExt4InvalidatepageFieldNumber = 185,
    kExt4JournalStartFieldNumber = 186,
    kExt4JournalStartReservedFieldNumber = 187,
    kExt4JournalledInvalidatepageFieldNumber = 188,
    kExt4JournalledWriteEndFieldNumber = 189,
    kExt4LoadInodeFieldNumber = 190,
    kExt4LoadInodeBitmapFieldNumber = 191,
    kExt4MarkInodeDirtyFieldNumber = 192,
    kExt4MbBitmapLoadFieldNumber = 193,
    kExt4MbBuddyBitmapLoadFieldNumber = 194,
    kExt4MbDiscardPreallocationsFieldNumber = 195,
    kExt4MbNewGroupPaFieldNumber = 196,
    kExt4MbNewInodePaFieldNumber = 197,
    kExt4MbReleaseGroupPaFieldNumber = 198,
    kExt4MbReleaseInodePaFieldNumber = 199,
    kExt4MballocAllocFieldNumber = 200,
    kExt4MballocDiscardFieldNumber = 201,
    kExt4MballocFreeFieldNumber = 202,
    kExt4MballocPreallocFieldNumber = 203,
    kExt4OtherInodeUpdateTimeFieldNumber = 204,
    kExt4PunchHoleFieldNumber = 205,
    kExt4ReadBlockBitmapLoadFieldNumber = 206,
    kExt4ReadpageFieldNumber = 207,
    kExt4ReleasepageFieldNumber = 208,
    kExt4RemoveBlocksFieldNumber = 209,
    kExt4RequestBlocksFieldNumber = 210,
    kExt4RequestInodeFieldNumber = 211,
    kExt4SyncFsFieldNumber = 212,
    kExt4TrimAllFreeFieldNumber = 213,
    kExt4TrimExtentFieldNumber = 214,
    kExt4TruncateEnterFieldNumber = 215,
    kExt4TruncateExitFieldNumber = 216,
    kExt4UnlinkEnterFieldNumber = 217,
    kExt4UnlinkExitFieldNumber = 218,
    kExt4WriteBeginFieldNumber = 219,
    kExt4WriteEndFieldNumber = 230,
    kExt4WritepageFieldNumber = 231,
    kExt4WritepagesFieldNumber = 232,
    kExt4WritepagesResultFieldNumber = 233,
    kExt4ZeroRangeFieldNumber = 234,
    kTaskNewtaskFieldNumber = 235,
    kTaskRenameFieldNumber = 236,
    kSchedProcessExecFieldNumber = 237,
    kSchedProcessExitFieldNumber = 238,
    kSchedProcessForkFieldNumber = 239,
    kSchedProcessFreeFieldNumber = 240,
    kSchedProcessHangFieldNumber = 241,
    kSchedProcessWaitFieldNumber = 242,
    kF2FsDoSubmitBioFieldNumber = 243,
    kF2FsEvictInodeFieldNumber = 244,
    kF2FsFallocateFieldNumber = 245,
    kF2FsGetDataBlockFieldNumber = 246,
    kF2FsGetVictimFieldNumber = 247,
    kF2FsIgetFieldNumber = 248,
    kF2FsIgetExitFieldNumber = 249,
    kF2FsNewInodeFieldNumber = 250,
    kF2FsReadpageFieldNumber = 251,
    kF2FsReserveNewBlockFieldNumber = 252,
    kF2FsSetPageDirtyFieldNumber = 253,
    kF2FsSubmitWritePageFieldNumber = 254,
    kF2FsSyncFileEnterFieldNumber = 255,
    kF2FsSyncFileExitFieldNumber = 256,
    kF2FsSyncFsFieldNumber = 257,
    kF2FsTruncateFieldNumber = 258,
    kF2FsTruncateBlocksEnterFieldNumber = 259,
    kF2FsTruncateBlocksExitFieldNumber = 260,
    kF2FsTruncateDataBlocksRangeFieldNumber = 261,
    kF2FsTruncateInodeBlocksEnterFieldNumber = 262,
    kF2FsTruncateInodeBlocksExitFieldNumber = 263,
    kF2FsTruncateNodeFieldNumber = 264,
    kF2FsTruncateNodesEnterFieldNumber = 265,
    kF2FsTruncateNodesExitFieldNumber = 266,
    kF2FsTruncatePartialNodesFieldNumber = 267,
    kF2FsUnlinkEnterFieldNumber = 268,
    kF2FsUnlinkExitFieldNumber = 269,
    kF2FsVmPageMkwriteFieldNumber = 270,
    kF2FsWriteBeginFieldNumber = 271,
    kF2FsWriteCheckpointFieldNumber = 272,
    kF2FsWriteEndFieldNumber = 273,
    kAllocPagesIommuEndFieldNumber = 274,
    kAllocPagesIommuFailFieldNumber = 275,
    kAllocPagesIommuStartFieldNumber = 276,
    kAllocPagesSysEndFieldNumber = 277,
    kAllocPagesSysFailFieldNumber = 278,
    kAllocPagesSysStartFieldNumber = 279,
    kDmaAllocContiguousRetryFieldNumber = 280,
    kIommuMapRangeFieldNumber = 281,
    kIommuSecPtblMapRangeEndFieldNumber = 282,
    kIommuSecPtblMapRangeStartFieldNumber = 283,
    kIonAllocBufferEndFieldNumber = 284,
    kIonAllocBufferFailFieldNumber = 285,
    kIonAllocBufferFallbackFieldNumber = 286,
    kIonAllocBufferStartFieldNumber = 287,
    kIonCpAllocRetryFieldNumber = 288,
    kIonCpSecureBufferEndFieldNumber = 289,
    kIonCpSecureBufferStartFieldNumber = 290,
    kIonPrefetchingFieldNumber = 291,
    kIonSecureCmaAddToPoolEndFieldNumber = 292,
    kIonSecureCmaAddToPoolStartFieldNumber = 293,
    kIonSecureCmaAllocateEndFieldNumber = 294,
    kIonSecureCmaAllocateStartFieldNumber = 295,
    kIonSecureCmaShrinkPoolEndFieldNumber = 296,
    kIonSecureCmaShrinkPoolStartFieldNumber = 297,
    kKfreeFieldNumber = 298,
    kKmallocFieldNumber = 299,
    kKmallocNodeFieldNumber = 300,
    kKmemCacheAllocFieldNumber = 301,
    kKmemCacheAllocNodeFieldNumber = 302,
    kKmemCacheFreeFieldNumber = 303,
    kMigratePagesEndFieldNumber = 304,
    kMigratePagesStartFieldNumber = 305,
    kMigrateRetryFieldNumber = 306,
    kMmPageAllocFieldNumber = 307,
    kMmPageAllocExtfragFieldNumber = 308,
    kMmPageAllocZoneLockedFieldNumber = 309,
    kMmPageFreeFieldNumber = 310,
    kMmPageFreeBatchedFieldNumber = 311,
    kMmPagePcpuDrainFieldNumber = 312,
    kRssStatFieldNumber = 313,
    kIonHeapShrinkFieldNumber = 314,
    kIonHeapGrowFieldNumber = 315,
    kFenceInitFieldNumber = 316,
    kFenceDestroyFieldNumber = 317,
    kFenceEnableSignalFieldNumber = 318,
    kFenceSignaledFieldNumber = 319,
    kClkEnableFieldNumber = 320,
    kClkDisableFieldNumber = 321,
    kClkSetRateFieldNumber = 322,
    kBinderTransactionAllocBufFieldNumber = 323,
    kSignalDeliverFieldNumber = 324,
    kSignalGenerateFieldNumber = 325,
    kOomScoreAdjUpdateFieldNumber = 326,
    kGenericFieldNumber = 327,
    kMmEventRecordFieldNumber = 328,
    kSysEnterFieldNumber = 329,
    kSysExitFieldNumber = 330,
    kZeroFieldNumber = 331,
    kGpuFrequencyFieldNumber = 332,
    kSdeTracingMarkWriteFieldNumber = 333,
    kMarkVictimFieldNumber = 334,
    kIonStatFieldNumber = 335,
    kIonBufferCreateFieldNumber = 336,
    kIonBufferDestroyFieldNumber = 337,
    kScmCallStartFieldNumber = 338,
    kScmCallEndFieldNumber = 339,
    kGpuMemTotalFieldNumber = 340,
    kThermalTemperatureFieldNumber = 341,
    kCdevUpdateFieldNumber = 342,
    kCpuhpExitFieldNumber = 343,
    kCpuhpMultiEnterFieldNumber = 344,
    kCpuhpEnterFieldNumber = 345,
    kCpuhpLatencyFieldNumber = 346,
    kFastrpcDmaStatFieldNumber = 347,
    kDpuTracingMarkWriteFieldNumber = 348,
    kG2DTracingMarkWriteFieldNumber = 349,
    kMaliTracingMarkWriteFieldNumber = 350,
  };
  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .perfetto.protos.PrintFtraceEvent print = 3;
  bool has_print() const;
  void clear_print();
  const ::perfetto::protos::PrintFtraceEvent& print() const;
  ::perfetto::protos::PrintFtraceEvent* release_print();
  ::perfetto::protos::PrintFtraceEvent* mutable_print();
  void set_allocated_print(::perfetto::protos::PrintFtraceEvent* print);

  // optional .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
  bool has_sched_switch() const;
  void clear_sched_switch();
  const ::perfetto::protos::SchedSwitchFtraceEvent& sched_switch() const;
  ::perfetto::protos::SchedSwitchFtraceEvent* release_sched_switch();
  ::perfetto::protos::SchedSwitchFtraceEvent* mutable_sched_switch();
  void set_allocated_sched_switch(::perfetto::protos::SchedSwitchFtraceEvent* sched_switch);

  // optional .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
  bool has_cpu_frequency() const;
  void clear_cpu_frequency();
  const ::perfetto::protos::CpuFrequencyFtraceEvent& cpu_frequency() const;
  ::perfetto::protos::CpuFrequencyFtraceEvent* release_cpu_frequency();
  ::perfetto::protos::CpuFrequencyFtraceEvent* mutable_cpu_frequency();
  void set_allocated_cpu_frequency(::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency);

  // optional .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
  bool has_cpu_frequency_limits() const;
  void clear_cpu_frequency_limits();
  const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& cpu_frequency_limits() const;
  ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* release_cpu_frequency_limits();
  ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* mutable_cpu_frequency_limits();
  void set_allocated_cpu_frequency_limits(::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits);

  // optional .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
  bool has_cpu_idle() const;
  void clear_cpu_idle();
  const ::perfetto::protos::CpuIdleFtraceEvent& cpu_idle() const;
  ::perfetto::protos::CpuIdleFtraceEvent* release_cpu_idle();
  ::perfetto::protos::CpuIdleFtraceEvent* mutable_cpu_idle();
  void set_allocated_cpu_idle(::perfetto::protos::CpuIdleFtraceEvent* cpu_idle);

  // optional .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
  bool has_clock_enable() const;
  void clear_clock_enable();
  const ::perfetto::protos::ClockEnableFtraceEvent& clock_enable() const;
  ::perfetto::protos::ClockEnableFtraceEvent* release_clock_enable();
  ::perfetto::protos::ClockEnableFtraceEvent* mutable_clock_enable();
  void set_allocated_clock_enable(::perfetto::protos::ClockEnableFtraceEvent* clock_enable);

  // optional .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
  bool has_clock_disable() const;
  void clear_clock_disable();
  const ::perfetto::protos::ClockDisableFtraceEvent& clock_disable() const;
  ::perfetto::protos::ClockDisableFtraceEvent* release_clock_disable();
  ::perfetto::protos::ClockDisableFtraceEvent* mutable_clock_disable();
  void set_allocated_clock_disable(::perfetto::protos::ClockDisableFtraceEvent* clock_disable);

  // optional .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
  bool has_clock_set_rate() const;
  void clear_clock_set_rate();
  const ::perfetto::protos::ClockSetRateFtraceEvent& clock_set_rate() const;
  ::perfetto::protos::ClockSetRateFtraceEvent* release_clock_set_rate();
  ::perfetto::protos::ClockSetRateFtraceEvent* mutable_clock_set_rate();
  void set_allocated_clock_set_rate(::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate);

  // optional .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
  bool has_sched_wakeup() const;
  void clear_sched_wakeup();
  const ::perfetto::protos::SchedWakeupFtraceEvent& sched_wakeup() const;
  ::perfetto::protos::SchedWakeupFtraceEvent* release_sched_wakeup();
  ::perfetto::protos::SchedWakeupFtraceEvent* mutable_sched_wakeup();
  void set_allocated_sched_wakeup(::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup);

  // optional .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
  bool has_sched_blocked_reason() const;
  void clear_sched_blocked_reason();
  const ::perfetto::protos::SchedBlockedReasonFtraceEvent& sched_blocked_reason() const;
  ::perfetto::protos::SchedBlockedReasonFtraceEvent* release_sched_blocked_reason();
  ::perfetto::protos::SchedBlockedReasonFtraceEvent* mutable_sched_blocked_reason();
  void set_allocated_sched_blocked_reason(::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason);

  // optional .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
  bool has_sched_cpu_hotplug() const;
  void clear_sched_cpu_hotplug();
  const ::perfetto::protos::SchedCpuHotplugFtraceEvent& sched_cpu_hotplug() const;
  ::perfetto::protos::SchedCpuHotplugFtraceEvent* release_sched_cpu_hotplug();
  ::perfetto::protos::SchedCpuHotplugFtraceEvent* mutable_sched_cpu_hotplug();
  void set_allocated_sched_cpu_hotplug(::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug);

  // optional .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
  bool has_sched_waking() const;
  void clear_sched_waking();
  const ::perfetto::protos::SchedWakingFtraceEvent& sched_waking() const;
  ::perfetto::protos::SchedWakingFtraceEvent* release_sched_waking();
  ::perfetto::protos::SchedWakingFtraceEvent* mutable_sched_waking();
  void set_allocated_sched_waking(::perfetto::protos::SchedWakingFtraceEvent* sched_waking);

  // optional .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
  bool has_ipi_entry() const;
  void clear_ipi_entry();
  const ::perfetto::protos::IpiEntryFtraceEvent& ipi_entry() const;
  ::perfetto::protos::IpiEntryFtraceEvent* release_ipi_entry();
  ::perfetto::protos::IpiEntryFtraceEvent* mutable_ipi_entry();
  void set_allocated_ipi_entry(::perfetto::protos::IpiEntryFtraceEvent* ipi_entry);

  // optional .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
  bool has_ipi_exit() const;
  void clear_ipi_exit();
  const ::perfetto::protos::IpiExitFtraceEvent& ipi_exit() const;
  ::perfetto::protos::IpiExitFtraceEvent* release_ipi_exit();
  ::perfetto::protos::IpiExitFtraceEvent* mutable_ipi_exit();
  void set_allocated_ipi_exit(::perfetto::protos::IpiExitFtraceEvent* ipi_exit);

  // optional .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
  bool has_ipi_raise() const;
  void clear_ipi_raise();
  const ::perfetto::protos::IpiRaiseFtraceEvent& ipi_raise() const;
  ::perfetto::protos::IpiRaiseFtraceEvent* release_ipi_raise();
  ::perfetto::protos::IpiRaiseFtraceEvent* mutable_ipi_raise();
  void set_allocated_ipi_raise(::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise);

  // optional .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
  bool has_softirq_entry() const;
  void clear_softirq_entry();
  const ::perfetto::protos::SoftirqEntryFtraceEvent& softirq_entry() const;
  ::perfetto::protos::SoftirqEntryFtraceEvent* release_softirq_entry();
  ::perfetto::protos::SoftirqEntryFtraceEvent* mutable_softirq_entry();
  void set_allocated_softirq_entry(::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry);

  // optional .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
  bool has_softirq_exit() const;
  void clear_softirq_exit();
  const ::perfetto::protos::SoftirqExitFtraceEvent& softirq_exit() const;
  ::perfetto::protos::SoftirqExitFtraceEvent* release_softirq_exit();
  ::perfetto::protos::SoftirqExitFtraceEvent* mutable_softirq_exit();
  void set_allocated_softirq_exit(::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit);

  // optional .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
  bool has_softirq_raise() const;
  void clear_softirq_raise();
  const ::perfetto::protos::SoftirqRaiseFtraceEvent& softirq_raise() const;
  ::perfetto::protos::SoftirqRaiseFtraceEvent* release_softirq_raise();
  ::perfetto::protos::SoftirqRaiseFtraceEvent* mutable_softirq_raise();
  void set_allocated_softirq_raise(::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise);

  // optional .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
  bool has_i2c_read() const;
  void clear_i2c_read();
  const ::perfetto::protos::I2cReadFtraceEvent& i2c_read() const;
  ::perfetto::protos::I2cReadFtraceEvent* release_i2c_read();
  ::perfetto::protos::I2cReadFtraceEvent* mutable_i2c_read();
  void set_allocated_i2c_read(::perfetto::protos::I2cReadFtraceEvent* i2c_read);

  // optional .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
  bool has_i2c_write() const;
  void clear_i2c_write();
  const ::perfetto::protos::I2cWriteFtraceEvent& i2c_write() const;
  ::perfetto::protos::I2cWriteFtraceEvent* release_i2c_write();
  ::perfetto::protos::I2cWriteFtraceEvent* mutable_i2c_write();
  void set_allocated_i2c_write(::perfetto::protos::I2cWriteFtraceEvent* i2c_write);

  // optional .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
  bool has_i2c_result() const;
  void clear_i2c_result();
  const ::perfetto::protos::I2cResultFtraceEvent& i2c_result() const;
  ::perfetto::protos::I2cResultFtraceEvent* release_i2c_result();
  ::perfetto::protos::I2cResultFtraceEvent* mutable_i2c_result();
  void set_allocated_i2c_result(::perfetto::protos::I2cResultFtraceEvent* i2c_result);

  // optional .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
  bool has_i2c_reply() const;
  void clear_i2c_reply();
  const ::perfetto::protos::I2cReplyFtraceEvent& i2c_reply() const;
  ::perfetto::protos::I2cReplyFtraceEvent* release_i2c_reply();
  ::perfetto::protos::I2cReplyFtraceEvent* mutable_i2c_reply();
  void set_allocated_i2c_reply(::perfetto::protos::I2cReplyFtraceEvent* i2c_reply);

  // optional .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
  bool has_smbus_read() const;
  void clear_smbus_read();
  const ::perfetto::protos::SmbusReadFtraceEvent& smbus_read() const;
  ::perfetto::protos::SmbusReadFtraceEvent* release_smbus_read();
  ::perfetto::protos::SmbusReadFtraceEvent* mutable_smbus_read();
  void set_allocated_smbus_read(::perfetto::protos::SmbusReadFtraceEvent* smbus_read);

  // optional .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
  bool has_smbus_write() const;
  void clear_smbus_write();
  const ::perfetto::protos::SmbusWriteFtraceEvent& smbus_write() const;
  ::perfetto::protos::SmbusWriteFtraceEvent* release_smbus_write();
  ::perfetto::protos::SmbusWriteFtraceEvent* mutable_smbus_write();
  void set_allocated_smbus_write(::perfetto::protos::SmbusWriteFtraceEvent* smbus_write);

  // optional .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
  bool has_smbus_result() const;
  void clear_smbus_result();
  const ::perfetto::protos::SmbusResultFtraceEvent& smbus_result() const;
  ::perfetto::protos::SmbusResultFtraceEvent* release_smbus_result();
  ::perfetto::protos::SmbusResultFtraceEvent* mutable_smbus_result();
  void set_allocated_smbus_result(::perfetto::protos::SmbusResultFtraceEvent* smbus_result);

  // optional .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
  bool has_smbus_reply() const;
  void clear_smbus_reply();
  const ::perfetto::protos::SmbusReplyFtraceEvent& smbus_reply() const;
  ::perfetto::protos::SmbusReplyFtraceEvent* release_smbus_reply();
  ::perfetto::protos::SmbusReplyFtraceEvent* mutable_smbus_reply();
  void set_allocated_smbus_reply(::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply);

  // optional .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
  bool has_lowmemory_kill() const;
  void clear_lowmemory_kill();
  const ::perfetto::protos::LowmemoryKillFtraceEvent& lowmemory_kill() const;
  ::perfetto::protos::LowmemoryKillFtraceEvent* release_lowmemory_kill();
  ::perfetto::protos::LowmemoryKillFtraceEvent* mutable_lowmemory_kill();
  void set_allocated_lowmemory_kill(::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill);

  // optional .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
  bool has_irq_handler_entry() const;
  void clear_irq_handler_entry();
  const ::perfetto::protos::IrqHandlerEntryFtraceEvent& irq_handler_entry() const;
  ::perfetto::protos::IrqHandlerEntryFtraceEvent* release_irq_handler_entry();
  ::perfetto::protos::IrqHandlerEntryFtraceEvent* mutable_irq_handler_entry();
  void set_allocated_irq_handler_entry(::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry);

  // optional .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
  bool has_irq_handler_exit() const;
  void clear_irq_handler_exit();
  const ::perfetto::protos::IrqHandlerExitFtraceEvent& irq_handler_exit() const;
  ::perfetto::protos::IrqHandlerExitFtraceEvent* release_irq_handler_exit();
  ::perfetto::protos::IrqHandlerExitFtraceEvent* mutable_irq_handler_exit();
  void set_allocated_irq_handler_exit(::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit);

  // optional .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
  bool has_sync_pt() const;
  void clear_sync_pt();
  const ::perfetto::protos::SyncPtFtraceEvent& sync_pt() const;
  ::perfetto::protos::SyncPtFtraceEvent* release_sync_pt();
  ::perfetto::protos::SyncPtFtraceEvent* mutable_sync_pt();
  void set_allocated_sync_pt(::perfetto::protos::SyncPtFtraceEvent* sync_pt);

  // optional .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
  bool has_sync_timeline() const;
  void clear_sync_timeline();
  const ::perfetto::protos::SyncTimelineFtraceEvent& sync_timeline() const;
  ::perfetto::protos::SyncTimelineFtraceEvent* release_sync_timeline();
  ::perfetto::protos::SyncTimelineFtraceEvent* mutable_sync_timeline();
  void set_allocated_sync_timeline(::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline);

  // optional .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
  bool has_sync_wait() const;
  void clear_sync_wait();
  const ::perfetto::protos::SyncWaitFtraceEvent& sync_wait() const;
  ::perfetto::protos::SyncWaitFtraceEvent* release_sync_wait();
  ::perfetto::protos::SyncWaitFtraceEvent* mutable_sync_wait();
  void set_allocated_sync_wait(::perfetto::protos::SyncWaitFtraceEvent* sync_wait);

  // optional .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
  bool has_ext4_da_write_begin() const;
  void clear_ext4_da_write_begin();
  const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& ext4_da_write_begin() const;
  ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* release_ext4_da_write_begin();
  ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* mutable_ext4_da_write_begin();
  void set_allocated_ext4_da_write_begin(::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin);

  // optional .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
  bool has_ext4_da_write_end() const;
  void clear_ext4_da_write_end();
  const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& ext4_da_write_end() const;
  ::perfetto::protos::Ext4DaWriteEndFtraceEvent* release_ext4_da_write_end();
  ::perfetto::protos::Ext4DaWriteEndFtraceEvent* mutable_ext4_da_write_end();
  void set_allocated_ext4_da_write_end(::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end);

  // optional .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
  bool has_ext4_sync_file_enter() const;
  void clear_ext4_sync_file_enter();
  const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& ext4_sync_file_enter() const;
  ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* release_ext4_sync_file_enter();
  ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* mutable_ext4_sync_file_enter();
  void set_allocated_ext4_sync_file_enter(::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter);

  // optional .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
  bool has_ext4_sync_file_exit() const;
  void clear_ext4_sync_file_exit();
  const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& ext4_sync_file_exit() const;
  ::perfetto::protos::Ext4SyncFileExitFtraceEvent* release_ext4_sync_file_exit();
  ::perfetto::protos::Ext4SyncFileExitFtraceEvent* mutable_ext4_sync_file_exit();
  void set_allocated_ext4_sync_file_exit(::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit);

  // optional .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
  bool has_block_rq_issue() const;
  void clear_block_rq_issue();
  const ::perfetto::protos::BlockRqIssueFtraceEvent& block_rq_issue() const;
  ::perfetto::protos::BlockRqIssueFtraceEvent* release_block_rq_issue();
  ::perfetto::protos::BlockRqIssueFtraceEvent* mutable_block_rq_issue();
  void set_allocated_block_rq_issue(::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue);

  // optional .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
  bool has_mm_vmscan_direct_reclaim_begin() const;
  void clear_mm_vmscan_direct_reclaim_begin();
  const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& mm_vmscan_direct_reclaim_begin() const;
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* release_mm_vmscan_direct_reclaim_begin();
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mutable_mm_vmscan_direct_reclaim_begin();
  void set_allocated_mm_vmscan_direct_reclaim_begin(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin);

  // optional .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
  bool has_mm_vmscan_direct_reclaim_end() const;
  void clear_mm_vmscan_direct_reclaim_end();
  const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& mm_vmscan_direct_reclaim_end() const;
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* release_mm_vmscan_direct_reclaim_end();
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mutable_mm_vmscan_direct_reclaim_end();
  void set_allocated_mm_vmscan_direct_reclaim_end(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end);

  // optional .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
  bool has_mm_vmscan_kswapd_wake() const;
  void clear_mm_vmscan_kswapd_wake();
  const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& mm_vmscan_kswapd_wake() const;
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* release_mm_vmscan_kswapd_wake();
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mutable_mm_vmscan_kswapd_wake();
  void set_allocated_mm_vmscan_kswapd_wake(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake);

  // optional .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
  bool has_mm_vmscan_kswapd_sleep() const;
  void clear_mm_vmscan_kswapd_sleep();
  const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& mm_vmscan_kswapd_sleep() const;
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* release_mm_vmscan_kswapd_sleep();
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mutable_mm_vmscan_kswapd_sleep();
  void set_allocated_mm_vmscan_kswapd_sleep(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep);

  // optional .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
  bool has_binder_transaction() const;
  void clear_binder_transaction();
  const ::perfetto::protos::BinderTransactionFtraceEvent& binder_transaction() const;
  ::perfetto::protos::BinderTransactionFtraceEvent* release_binder_transaction();
  ::perfetto::protos::BinderTransactionFtraceEvent* mutable_binder_transaction();
  void set_allocated_binder_transaction(::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction);

  // optional .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
  bool has_binder_transaction_received() const;
  void clear_binder_transaction_received();
  const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& binder_transaction_received() const;
  ::perfetto::protos::BinderTransactionReceivedFtraceEvent* release_binder_transaction_received();
  ::perfetto::protos::BinderTransactionReceivedFtraceEvent* mutable_binder_transaction_received();
  void set_allocated_binder_transaction_received(::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received);

  // optional .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
  bool has_binder_set_priority() const;
  void clear_binder_set_priority();
  const ::perfetto::protos::BinderSetPriorityFtraceEvent& binder_set_priority() const;
  ::perfetto::protos::BinderSetPriorityFtraceEvent* release_binder_set_priority();
  ::perfetto::protos::BinderSetPriorityFtraceEvent* mutable_binder_set_priority();
  void set_allocated_binder_set_priority(::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority);

  // optional .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
  bool has_binder_lock() const;
  void clear_binder_lock();
  const ::perfetto::protos::BinderLockFtraceEvent& binder_lock() const;
  ::perfetto::protos::BinderLockFtraceEvent* release_binder_lock();
  ::perfetto::protos::BinderLockFtraceEvent* mutable_binder_lock();
  void set_allocated_binder_lock(::perfetto::protos::BinderLockFtraceEvent* binder_lock);

  // optional .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
  bool has_binder_locked() const;
  void clear_binder_locked();
  const ::perfetto::protos::BinderLockedFtraceEvent& binder_locked() const;
  ::perfetto::protos::BinderLockedFtraceEvent* release_binder_locked();
  ::perfetto::protos::BinderLockedFtraceEvent* mutable_binder_locked();
  void set_allocated_binder_locked(::perfetto::protos::BinderLockedFtraceEvent* binder_locked);

  // optional .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
  bool has_binder_unlock() const;
  void clear_binder_unlock();
  const ::perfetto::protos::BinderUnlockFtraceEvent& binder_unlock() const;
  ::perfetto::protos::BinderUnlockFtraceEvent* release_binder_unlock();
  ::perfetto::protos::BinderUnlockFtraceEvent* mutable_binder_unlock();
  void set_allocated_binder_unlock(::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock);

  // optional .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
  bool has_workqueue_activate_work() const;
  void clear_workqueue_activate_work();
  const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& workqueue_activate_work() const;
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* release_workqueue_activate_work();
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* mutable_workqueue_activate_work();
  void set_allocated_workqueue_activate_work(::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work);

  // optional .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
  bool has_workqueue_execute_end() const;
  void clear_workqueue_execute_end();
  const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& workqueue_execute_end() const;
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* release_workqueue_execute_end();
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* mutable_workqueue_execute_end();
  void set_allocated_workqueue_execute_end(::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end);

  // optional .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
  bool has_workqueue_execute_start() const;
  void clear_workqueue_execute_start();
  const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& workqueue_execute_start() const;
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* release_workqueue_execute_start();
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* mutable_workqueue_execute_start();
  void set_allocated_workqueue_execute_start(::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start);

  // optional .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
  bool has_workqueue_queue_work() const;
  void clear_workqueue_queue_work();
  const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& workqueue_queue_work() const;
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* release_workqueue_queue_work();
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* mutable_workqueue_queue_work();
  void set_allocated_workqueue_queue_work(::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work);

  // optional .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
  bool has_regulator_disable() const;
  void clear_regulator_disable();
  const ::perfetto::protos::RegulatorDisableFtraceEvent& regulator_disable() const;
  ::perfetto::protos::RegulatorDisableFtraceEvent* release_regulator_disable();
  ::perfetto::protos::RegulatorDisableFtraceEvent* mutable_regulator_disable();
  void set_allocated_regulator_disable(::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable);

  // optional .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
  bool has_regulator_disable_complete() const;
  void clear_regulator_disable_complete();
  const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& regulator_disable_complete() const;
  ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* release_regulator_disable_complete();
  ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* mutable_regulator_disable_complete();
  void set_allocated_regulator_disable_complete(::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete);

  // optional .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
  bool has_regulator_enable() const;
  void clear_regulator_enable();
  const ::perfetto::protos::RegulatorEnableFtraceEvent& regulator_enable() const;
  ::perfetto::protos::RegulatorEnableFtraceEvent* release_regulator_enable();
  ::perfetto::protos::RegulatorEnableFtraceEvent* mutable_regulator_enable();
  void set_allocated_regulator_enable(::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable);

  // optional .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
  bool has_regulator_enable_complete() const;
  void clear_regulator_enable_complete();
  const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& regulator_enable_complete() const;
  ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* release_regulator_enable_complete();
  ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* mutable_regulator_enable_complete();
  void set_allocated_regulator_enable_complete(::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete);

  // optional .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
  bool has_regulator_enable_delay() const;
  void clear_regulator_enable_delay();
  const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& regulator_enable_delay() const;
  ::perfetto::protos::RegulatorEnableDelayFtraceEvent* release_regulator_enable_delay();
  ::perfetto::protos::RegulatorEnableDelayFtraceEvent* mutable_regulator_enable_delay();
  void set_allocated_regulator_enable_delay(::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay);

  // optional .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
  bool has_regulator_set_voltage() const;
  void clear_regulator_set_voltage();
  const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& regulator_set_voltage() const;
  ::perfetto::protos::RegulatorSetVoltageFtraceEvent* release_regulator_set_voltage();
  ::perfetto::protos::RegulatorSetVoltageFtraceEvent* mutable_regulator_set_voltage();
  void set_allocated_regulator_set_voltage(::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage);

  // optional .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
  bool has_regulator_set_voltage_complete() const;
  void clear_regulator_set_voltage_complete();
  const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& regulator_set_voltage_complete() const;
  ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* release_regulator_set_voltage_complete();
  ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* mutable_regulator_set_voltage_complete();
  void set_allocated_regulator_set_voltage_complete(::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete);

  // optional .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
  bool has_cgroup_attach_task() const;
  void clear_cgroup_attach_task();
  const ::perfetto::protos::CgroupAttachTaskFtraceEvent& cgroup_attach_task() const;
  ::perfetto::protos::CgroupAttachTaskFtraceEvent* release_cgroup_attach_task();
  ::perfetto::protos::CgroupAttachTaskFtraceEvent* mutable_cgroup_attach_task();
  void set_allocated_cgroup_attach_task(::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task);

  // optional .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
  bool has_cgroup_mkdir() const;
  void clear_cgroup_mkdir();
  const ::perfetto::protos::CgroupMkdirFtraceEvent& cgroup_mkdir() const;
  ::perfetto::protos::CgroupMkdirFtraceEvent* release_cgroup_mkdir();
  ::perfetto::protos::CgroupMkdirFtraceEvent* mutable_cgroup_mkdir();
  void set_allocated_cgroup_mkdir(::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir);

  // optional .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
  bool has_cgroup_remount() const;
  void clear_cgroup_remount();
  const ::perfetto::protos::CgroupRemountFtraceEvent& cgroup_remount() const;
  ::perfetto::protos::CgroupRemountFtraceEvent* release_cgroup_remount();
  ::perfetto::protos::CgroupRemountFtraceEvent* mutable_cgroup_remount();
  void set_allocated_cgroup_remount(::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount);

  // optional .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
  bool has_cgroup_rmdir() const;
  void clear_cgroup_rmdir();
  const ::perfetto::protos::CgroupRmdirFtraceEvent& cgroup_rmdir() const;
  ::perfetto::protos::CgroupRmdirFtraceEvent* release_cgroup_rmdir();
  ::perfetto::protos::CgroupRmdirFtraceEvent* mutable_cgroup_rmdir();
  void set_allocated_cgroup_rmdir(::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir);

  // optional .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
  bool has_cgroup_transfer_tasks() const;
  void clear_cgroup_transfer_tasks();
  const ::perfetto::protos::CgroupTransferTasksFtraceEvent& cgroup_transfer_tasks() const;
  ::perfetto::protos::CgroupTransferTasksFtraceEvent* release_cgroup_transfer_tasks();
  ::perfetto::protos::CgroupTransferTasksFtraceEvent* mutable_cgroup_transfer_tasks();
  void set_allocated_cgroup_transfer_tasks(::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks);

  // optional .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
  bool has_cgroup_destroy_root() const;
  void clear_cgroup_destroy_root();
  const ::perfetto::protos::CgroupDestroyRootFtraceEvent& cgroup_destroy_root() const;
  ::perfetto::protos::CgroupDestroyRootFtraceEvent* release_cgroup_destroy_root();
  ::perfetto::protos::CgroupDestroyRootFtraceEvent* mutable_cgroup_destroy_root();
  void set_allocated_cgroup_destroy_root(::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root);

  // optional .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
  bool has_cgroup_release() const;
  void clear_cgroup_release();
  const ::perfetto::protos::CgroupReleaseFtraceEvent& cgroup_release() const;
  ::perfetto::protos::CgroupReleaseFtraceEvent* release_cgroup_release();
  ::perfetto::protos::CgroupReleaseFtraceEvent* mutable_cgroup_release();
  void set_allocated_cgroup_release(::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release);

  // optional .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
  bool has_cgroup_rename() const;
  void clear_cgroup_rename();
  const ::perfetto::protos::CgroupRenameFtraceEvent& cgroup_rename() const;
  ::perfetto::protos::CgroupRenameFtraceEvent* release_cgroup_rename();
  ::perfetto::protos::CgroupRenameFtraceEvent* mutable_cgroup_rename();
  void set_allocated_cgroup_rename(::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename);

  // optional .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
  bool has_cgroup_setup_root() const;
  void clear_cgroup_setup_root();
  const ::perfetto::protos::CgroupSetupRootFtraceEvent& cgroup_setup_root() const;
  ::perfetto::protos::CgroupSetupRootFtraceEvent* release_cgroup_setup_root();
  ::perfetto::protos::CgroupSetupRootFtraceEvent* mutable_cgroup_setup_root();
  void set_allocated_cgroup_setup_root(::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root);

  // optional .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
  bool has_mdp_cmd_kickoff() const;
  void clear_mdp_cmd_kickoff();
  const ::perfetto::protos::MdpCmdKickoffFtraceEvent& mdp_cmd_kickoff() const;
  ::perfetto::protos::MdpCmdKickoffFtraceEvent* release_mdp_cmd_kickoff();
  ::perfetto::protos::MdpCmdKickoffFtraceEvent* mutable_mdp_cmd_kickoff();
  void set_allocated_mdp_cmd_kickoff(::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff);

  // optional .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
  bool has_mdp_commit() const;
  void clear_mdp_commit();
  const ::perfetto::protos::MdpCommitFtraceEvent& mdp_commit() const;
  ::perfetto::protos::MdpCommitFtraceEvent* release_mdp_commit();
  ::perfetto::protos::MdpCommitFtraceEvent* mutable_mdp_commit();
  void set_allocated_mdp_commit(::perfetto::protos::MdpCommitFtraceEvent* mdp_commit);

  // optional .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
  bool has_mdp_perf_set_ot() const;
  void clear_mdp_perf_set_ot();
  const ::perfetto::protos::MdpPerfSetOtFtraceEvent& mdp_perf_set_ot() const;
  ::perfetto::protos::MdpPerfSetOtFtraceEvent* release_mdp_perf_set_ot();
  ::perfetto::protos::MdpPerfSetOtFtraceEvent* mutable_mdp_perf_set_ot();
  void set_allocated_mdp_perf_set_ot(::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot);

  // optional .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
  bool has_mdp_sspp_change() const;
  void clear_mdp_sspp_change();
  const ::perfetto::protos::MdpSsppChangeFtraceEvent& mdp_sspp_change() const;
  ::perfetto::protos::MdpSsppChangeFtraceEvent* release_mdp_sspp_change();
  ::perfetto::protos::MdpSsppChangeFtraceEvent* mutable_mdp_sspp_change();
  void set_allocated_mdp_sspp_change(::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change);

  // optional .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
  bool has_tracing_mark_write() const;
  void clear_tracing_mark_write();
  const ::perfetto::protos::TracingMarkWriteFtraceEvent& tracing_mark_write() const;
  ::perfetto::protos::TracingMarkWriteFtraceEvent* release_tracing_mark_write();
  ::perfetto::protos::TracingMarkWriteFtraceEvent* mutable_tracing_mark_write();
  void set_allocated_tracing_mark_write(::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write);

  // optional .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
  bool has_mdp_cmd_pingpong_done() const;
  void clear_mdp_cmd_pingpong_done();
  const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& mdp_cmd_pingpong_done() const;
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* release_mdp_cmd_pingpong_done();
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mutable_mdp_cmd_pingpong_done();
  void set_allocated_mdp_cmd_pingpong_done(::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done);

  // optional .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
  bool has_mdp_compare_bw() const;
  void clear_mdp_compare_bw();
  const ::perfetto::protos::MdpCompareBwFtraceEvent& mdp_compare_bw() const;
  ::perfetto::protos::MdpCompareBwFtraceEvent* release_mdp_compare_bw();
  ::perfetto::protos::MdpCompareBwFtraceEvent* mutable_mdp_compare_bw();
  void set_allocated_mdp_compare_bw(::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw);

  // optional .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
  bool has_mdp_perf_set_panic_luts() const;
  void clear_mdp_perf_set_panic_luts();
  const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& mdp_perf_set_panic_luts() const;
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* release_mdp_perf_set_panic_luts();
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mutable_mdp_perf_set_panic_luts();
  void set_allocated_mdp_perf_set_panic_luts(::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts);

  // optional .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
  bool has_mdp_sspp_set() const;
  void clear_mdp_sspp_set();
  const ::perfetto::protos::MdpSsppSetFtraceEvent& mdp_sspp_set() const;
  ::perfetto::protos::MdpSsppSetFtraceEvent* release_mdp_sspp_set();
  ::perfetto::protos::MdpSsppSetFtraceEvent* mutable_mdp_sspp_set();
  void set_allocated_mdp_sspp_set(::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set);

  // optional .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
  bool has_mdp_cmd_readptr_done() const;
  void clear_mdp_cmd_readptr_done();
  const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& mdp_cmd_readptr_done() const;
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* release_mdp_cmd_readptr_done();
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mutable_mdp_cmd_readptr_done();
  void set_allocated_mdp_cmd_readptr_done(::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done);

  // optional .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
  bool has_mdp_misr_crc() const;
  void clear_mdp_misr_crc();
  const ::perfetto::protos::MdpMisrCrcFtraceEvent& mdp_misr_crc() const;
  ::perfetto::protos::MdpMisrCrcFtraceEvent* release_mdp_misr_crc();
  ::perfetto::protos::MdpMisrCrcFtraceEvent* mutable_mdp_misr_crc();
  void set_allocated_mdp_misr_crc(::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc);

  // optional .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
  bool has_mdp_perf_set_qos_luts() const;
  void clear_mdp_perf_set_qos_luts();
  const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& mdp_perf_set_qos_luts() const;
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* release_mdp_perf_set_qos_luts();
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mutable_mdp_perf_set_qos_luts();
  void set_allocated_mdp_perf_set_qos_luts(::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts);

  // optional .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
  bool has_mdp_trace_counter() const;
  void clear_mdp_trace_counter();
  const ::perfetto::protos::MdpTraceCounterFtraceEvent& mdp_trace_counter() const;
  ::perfetto::protos::MdpTraceCounterFtraceEvent* release_mdp_trace_counter();
  ::perfetto::protos::MdpTraceCounterFtraceEvent* mutable_mdp_trace_counter();
  void set_allocated_mdp_trace_counter(::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter);

  // optional .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
  bool has_mdp_cmd_release_bw() const;
  void clear_mdp_cmd_release_bw();
  const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& mdp_cmd_release_bw() const;
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* release_mdp_cmd_release_bw();
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mutable_mdp_cmd_release_bw();
  void set_allocated_mdp_cmd_release_bw(::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw);

  // optional .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
  bool has_mdp_mixer_update() const;
  void clear_mdp_mixer_update();
  const ::perfetto::protos::MdpMixerUpdateFtraceEvent& mdp_mixer_update() const;
  ::perfetto::protos::MdpMixerUpdateFtraceEvent* release_mdp_mixer_update();
  ::perfetto::protos::MdpMixerUpdateFtraceEvent* mutable_mdp_mixer_update();
  void set_allocated_mdp_mixer_update(::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update);

  // optional .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
  bool has_mdp_perf_set_wm_levels() const;
  void clear_mdp_perf_set_wm_levels();
  const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& mdp_perf_set_wm_levels() const;
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* release_mdp_perf_set_wm_levels();
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mutable_mdp_perf_set_wm_levels();
  void set_allocated_mdp_perf_set_wm_levels(::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels);

  // optional .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
  bool has_mdp_video_underrun_done() const;
  void clear_mdp_video_underrun_done();
  const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& mdp_video_underrun_done() const;
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* release_mdp_video_underrun_done();
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mutable_mdp_video_underrun_done();
  void set_allocated_mdp_video_underrun_done(::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done);

  // optional .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
  bool has_mdp_cmd_wait_pingpong() const;
  void clear_mdp_cmd_wait_pingpong();
  const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& mdp_cmd_wait_pingpong() const;
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* release_mdp_cmd_wait_pingpong();
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mutable_mdp_cmd_wait_pingpong();
  void set_allocated_mdp_cmd_wait_pingpong(::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong);

  // optional .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
  bool has_mdp_perf_prefill_calc() const;
  void clear_mdp_perf_prefill_calc();
  const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& mdp_perf_prefill_calc() const;
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* release_mdp_perf_prefill_calc();
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mutable_mdp_perf_prefill_calc();
  void set_allocated_mdp_perf_prefill_calc(::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc);

  // optional .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
  bool has_mdp_perf_update_bus() const;
  void clear_mdp_perf_update_bus();
  const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& mdp_perf_update_bus() const;
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* release_mdp_perf_update_bus();
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mutable_mdp_perf_update_bus();
  void set_allocated_mdp_perf_update_bus(::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus);

  // optional .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
  bool has_rotator_bw_ao_as_context() const;
  void clear_rotator_bw_ao_as_context();
  const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& rotator_bw_ao_as_context() const;
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* release_rotator_bw_ao_as_context();
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* mutable_rotator_bw_ao_as_context();
  void set_allocated_rotator_bw_ao_as_context(::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context);

  // optional .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
  bool has_mm_filemap_add_to_page_cache() const;
  void clear_mm_filemap_add_to_page_cache();
  const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& mm_filemap_add_to_page_cache() const;
  ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* release_mm_filemap_add_to_page_cache();
  ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mutable_mm_filemap_add_to_page_cache();
  void set_allocated_mm_filemap_add_to_page_cache(::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache);

  // optional .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
  bool has_mm_filemap_delete_from_page_cache() const;
  void clear_mm_filemap_delete_from_page_cache();
  const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& mm_filemap_delete_from_page_cache() const;
  ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* release_mm_filemap_delete_from_page_cache();
  ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mutable_mm_filemap_delete_from_page_cache();
  void set_allocated_mm_filemap_delete_from_page_cache(::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache);

  // optional .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
  bool has_mm_compaction_begin() const;
  void clear_mm_compaction_begin();
  const ::perfetto::protos::MmCompactionBeginFtraceEvent& mm_compaction_begin() const;
  ::perfetto::protos::MmCompactionBeginFtraceEvent* release_mm_compaction_begin();
  ::perfetto::protos::MmCompactionBeginFtraceEvent* mutable_mm_compaction_begin();
  void set_allocated_mm_compaction_begin(::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin);

  // optional .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
  bool has_mm_compaction_defer_compaction() const;
  void clear_mm_compaction_defer_compaction();
  const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& mm_compaction_defer_compaction() const;
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* release_mm_compaction_defer_compaction();
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mutable_mm_compaction_defer_compaction();
  void set_allocated_mm_compaction_defer_compaction(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction);

  // optional .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
  bool has_mm_compaction_deferred() const;
  void clear_mm_compaction_deferred();
  const ::perfetto::protos::MmCompactionDeferredFtraceEvent& mm_compaction_deferred() const;
  ::perfetto::protos::MmCompactionDeferredFtraceEvent* release_mm_compaction_deferred();
  ::perfetto::protos::MmCompactionDeferredFtraceEvent* mutable_mm_compaction_deferred();
  void set_allocated_mm_compaction_deferred(::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred);

  // optional .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
  bool has_mm_compaction_defer_reset() const;
  void clear_mm_compaction_defer_reset();
  const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& mm_compaction_defer_reset() const;
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent* release_mm_compaction_defer_reset();
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent* mutable_mm_compaction_defer_reset();
  void set_allocated_mm_compaction_defer_reset(::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset);

  // optional .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
  bool has_mm_compaction_end() const;
  void clear_mm_compaction_end();
  const ::perfetto::protos::MmCompactionEndFtraceEvent& mm_compaction_end() const;
  ::perfetto::protos::MmCompactionEndFtraceEvent* release_mm_compaction_end();
  ::perfetto::protos::MmCompactionEndFtraceEvent* mutable_mm_compaction_end();
  void set_allocated_mm_compaction_end(::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end);

  // optional .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
  bool has_mm_compaction_finished() const;
  void clear_mm_compaction_finished();
  const ::perfetto::protos::MmCompactionFinishedFtraceEvent& mm_compaction_finished() const;
  ::perfetto::protos::MmCompactionFinishedFtraceEvent* release_mm_compaction_finished();
  ::perfetto::protos::MmCompactionFinishedFtraceEvent* mutable_mm_compaction_finished();
  void set_allocated_mm_compaction_finished(::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished);

  // optional .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
  bool has_mm_compaction_isolate_freepages() const;
  void clear_mm_compaction_isolate_freepages();
  const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& mm_compaction_isolate_freepages() const;
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* release_mm_compaction_isolate_freepages();
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mutable_mm_compaction_isolate_freepages();
  void set_allocated_mm_compaction_isolate_freepages(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages);

  // optional .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
  bool has_mm_compaction_isolate_migratepages() const;
  void clear_mm_compaction_isolate_migratepages();
  const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& mm_compaction_isolate_migratepages() const;
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* release_mm_compaction_isolate_migratepages();
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mutable_mm_compaction_isolate_migratepages();
  void set_allocated_mm_compaction_isolate_migratepages(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages);

  // optional .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
  bool has_mm_compaction_kcompactd_sleep() const;
  void clear_mm_compaction_kcompactd_sleep();
  const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& mm_compaction_kcompactd_sleep() const;
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* release_mm_compaction_kcompactd_sleep();
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mutable_mm_compaction_kcompactd_sleep();
  void set_allocated_mm_compaction_kcompactd_sleep(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep);

  // optional .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
  bool has_mm_compaction_kcompactd_wake() const;
  void clear_mm_compaction_kcompactd_wake();
  const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& mm_compaction_kcompactd_wake() const;
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* release_mm_compaction_kcompactd_wake();
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mutable_mm_compaction_kcompactd_wake();
  void set_allocated_mm_compaction_kcompactd_wake(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake);

  // optional .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
  bool has_mm_compaction_migratepages() const;
  void clear_mm_compaction_migratepages();
  const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& mm_compaction_migratepages() const;
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* release_mm_compaction_migratepages();
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mutable_mm_compaction_migratepages();
  void set_allocated_mm_compaction_migratepages(::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages);

  // optional .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
  bool has_mm_compaction_suitable() const;
  void clear_mm_compaction_suitable();
  const ::perfetto::protos::MmCompactionSuitableFtraceEvent& mm_compaction_suitable() const;
  ::perfetto::protos::MmCompactionSuitableFtraceEvent* release_mm_compaction_suitable();
  ::perfetto::protos::MmCompactionSuitableFtraceEvent* mutable_mm_compaction_suitable();
  void set_allocated_mm_compaction_suitable(::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable);

  // optional .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
  bool has_mm_compaction_try_to_compact_pages() const;
  void clear_mm_compaction_try_to_compact_pages();
  const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& mm_compaction_try_to_compact_pages() const;
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* release_mm_compaction_try_to_compact_pages();
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mutable_mm_compaction_try_to_compact_pages();
  void set_allocated_mm_compaction_try_to_compact_pages(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages);

  // optional .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
  bool has_mm_compaction_wakeup_kcompactd() const;
  void clear_mm_compaction_wakeup_kcompactd();
  const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& mm_compaction_wakeup_kcompactd() const;
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* release_mm_compaction_wakeup_kcompactd();
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mutable_mm_compaction_wakeup_kcompactd();
  void set_allocated_mm_compaction_wakeup_kcompactd(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd);

  // optional .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
  bool has_suspend_resume() const;
  void clear_suspend_resume();
  const ::perfetto::protos::SuspendResumeFtraceEvent& suspend_resume() const;
  ::perfetto::protos::SuspendResumeFtraceEvent* release_suspend_resume();
  ::perfetto::protos::SuspendResumeFtraceEvent* mutable_suspend_resume();
  void set_allocated_suspend_resume(::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume);

  // optional .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
  bool has_sched_wakeup_new() const;
  void clear_sched_wakeup_new();
  const ::perfetto::protos::SchedWakeupNewFtraceEvent& sched_wakeup_new() const;
  ::perfetto::protos::SchedWakeupNewFtraceEvent* release_sched_wakeup_new();
  ::perfetto::protos::SchedWakeupNewFtraceEvent* mutable_sched_wakeup_new();
  void set_allocated_sched_wakeup_new(::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new);

  // optional .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
  bool has_block_bio_backmerge() const;
  void clear_block_bio_backmerge();
  const ::perfetto::protos::BlockBioBackmergeFtraceEvent& block_bio_backmerge() const;
  ::perfetto::protos::BlockBioBackmergeFtraceEvent* release_block_bio_backmerge();
  ::perfetto::protos::BlockBioBackmergeFtraceEvent* mutable_block_bio_backmerge();
  void set_allocated_block_bio_backmerge(::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge);

  // optional .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
  bool has_block_bio_bounce() const;
  void clear_block_bio_bounce();
  const ::perfetto::protos::BlockBioBounceFtraceEvent& block_bio_bounce() const;
  ::perfetto::protos::BlockBioBounceFtraceEvent* release_block_bio_bounce();
  ::perfetto::protos::BlockBioBounceFtraceEvent* mutable_block_bio_bounce();
  void set_allocated_block_bio_bounce(::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce);

  // optional .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
  bool has_block_bio_complete() const;
  void clear_block_bio_complete();
  const ::perfetto::protos::BlockBioCompleteFtraceEvent& block_bio_complete() const;
  ::perfetto::protos::BlockBioCompleteFtraceEvent* release_block_bio_complete();
  ::perfetto::protos::BlockBioCompleteFtraceEvent* mutable_block_bio_complete();
  void set_allocated_block_bio_complete(::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete);

  // optional .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
  bool has_block_bio_frontmerge() const;
  void clear_block_bio_frontmerge();
  const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& block_bio_frontmerge() const;
  ::perfetto::protos::BlockBioFrontmergeFtraceEvent* release_block_bio_frontmerge();
  ::perfetto::protos::BlockBioFrontmergeFtraceEvent* mutable_block_bio_frontmerge();
  void set_allocated_block_bio_frontmerge(::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge);

  // optional .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
  bool has_block_bio_queue() const;
  void clear_block_bio_queue();
  const ::perfetto::protos::BlockBioQueueFtraceEvent& block_bio_queue() const;
  ::perfetto::protos::BlockBioQueueFtraceEvent* release_block_bio_queue();
  ::perfetto::protos::BlockBioQueueFtraceEvent* mutable_block_bio_queue();
  void set_allocated_block_bio_queue(::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue);

  // optional .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
  bool has_block_bio_remap() const;
  void clear_block_bio_remap();
  const ::perfetto::protos::BlockBioRemapFtraceEvent& block_bio_remap() const;
  ::perfetto::protos::BlockBioRemapFtraceEvent* release_block_bio_remap();
  ::perfetto::protos::BlockBioRemapFtraceEvent* mutable_block_bio_remap();
  void set_allocated_block_bio_remap(::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap);

  // optional .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
  bool has_block_dirty_buffer() const;
  void clear_block_dirty_buffer();
  const ::perfetto::protos::BlockDirtyBufferFtraceEvent& block_dirty_buffer() const;
  ::perfetto::protos::BlockDirtyBufferFtraceEvent* release_block_dirty_buffer();
  ::perfetto::protos::BlockDirtyBufferFtraceEvent* mutable_block_dirty_buffer();
  void set_allocated_block_dirty_buffer(::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer);

  // optional .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
  bool has_block_getrq() const;
  void clear_block_getrq();
  const ::perfetto::protos::BlockGetrqFtraceEvent& block_getrq() const;
  ::perfetto::protos::BlockGetrqFtraceEvent* release_block_getrq();
  ::perfetto::protos::BlockGetrqFtraceEvent* mutable_block_getrq();
  void set_allocated_block_getrq(::perfetto::protos::BlockGetrqFtraceEvent* block_getrq);

  // optional .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
  bool has_block_plug() const;
  void clear_block_plug();
  const ::perfetto::protos::BlockPlugFtraceEvent& block_plug() const;
  ::perfetto::protos::BlockPlugFtraceEvent* release_block_plug();
  ::perfetto::protos::BlockPlugFtraceEvent* mutable_block_plug();
  void set_allocated_block_plug(::perfetto::protos::BlockPlugFtraceEvent* block_plug);

  // optional .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
  bool has_block_rq_abort() const;
  void clear_block_rq_abort();
  const ::perfetto::protos::BlockRqAbortFtraceEvent& block_rq_abort() const;
  ::perfetto::protos::BlockRqAbortFtraceEvent* release_block_rq_abort();
  ::perfetto::protos::BlockRqAbortFtraceEvent* mutable_block_rq_abort();
  void set_allocated_block_rq_abort(::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort);

  // optional .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
  bool has_block_rq_complete() const;
  void clear_block_rq_complete();
  const ::perfetto::protos::BlockRqCompleteFtraceEvent& block_rq_complete() const;
  ::perfetto::protos::BlockRqCompleteFtraceEvent* release_block_rq_complete();
  ::perfetto::protos::BlockRqCompleteFtraceEvent* mutable_block_rq_complete();
  void set_allocated_block_rq_complete(::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete);

  // optional .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
  bool has_block_rq_insert() const;
  void clear_block_rq_insert();
  const ::perfetto::protos::BlockRqInsertFtraceEvent& block_rq_insert() const;
  ::perfetto::protos::BlockRqInsertFtraceEvent* release_block_rq_insert();
  ::perfetto::protos::BlockRqInsertFtraceEvent* mutable_block_rq_insert();
  void set_allocated_block_rq_insert(::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert);

  // optional .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
  bool has_block_rq_remap() const;
  void clear_block_rq_remap();
  const ::perfetto::protos::BlockRqRemapFtraceEvent& block_rq_remap() const;
  ::perfetto::protos::BlockRqRemapFtraceEvent* release_block_rq_remap();
  ::perfetto::protos::BlockRqRemapFtraceEvent* mutable_block_rq_remap();
  void set_allocated_block_rq_remap(::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap);

  // optional .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
  bool has_block_rq_requeue() const;
  void clear_block_rq_requeue();
  const ::perfetto::protos::BlockRqRequeueFtraceEvent& block_rq_requeue() const;
  ::perfetto::protos::BlockRqRequeueFtraceEvent* release_block_rq_requeue();
  ::perfetto::protos::BlockRqRequeueFtraceEvent* mutable_block_rq_requeue();
  void set_allocated_block_rq_requeue(::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue);

  // optional .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
  bool has_block_sleeprq() const;
  void clear_block_sleeprq();
  const ::perfetto::protos::BlockSleeprqFtraceEvent& block_sleeprq() const;
  ::perfetto::protos::BlockSleeprqFtraceEvent* release_block_sleeprq();
  ::perfetto::protos::BlockSleeprqFtraceEvent* mutable_block_sleeprq();
  void set_allocated_block_sleeprq(::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq);

  // optional .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
  bool has_block_split() const;
  void clear_block_split();
  const ::perfetto::protos::BlockSplitFtraceEvent& block_split() const;
  ::perfetto::protos::BlockSplitFtraceEvent* release_block_split();
  ::perfetto::protos::BlockSplitFtraceEvent* mutable_block_split();
  void set_allocated_block_split(::perfetto::protos::BlockSplitFtraceEvent* block_split);

  // optional .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
  bool has_block_touch_buffer() const;
  void clear_block_touch_buffer();
  const ::perfetto::protos::BlockTouchBufferFtraceEvent& block_touch_buffer() const;
  ::perfetto::protos::BlockTouchBufferFtraceEvent* release_block_touch_buffer();
  ::perfetto::protos::BlockTouchBufferFtraceEvent* mutable_block_touch_buffer();
  void set_allocated_block_touch_buffer(::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer);

  // optional .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
  bool has_block_unplug() const;
  void clear_block_unplug();
  const ::perfetto::protos::BlockUnplugFtraceEvent& block_unplug() const;
  ::perfetto::protos::BlockUnplugFtraceEvent* release_block_unplug();
  ::perfetto::protos::BlockUnplugFtraceEvent* mutable_block_unplug();
  void set_allocated_block_unplug(::perfetto::protos::BlockUnplugFtraceEvent* block_unplug);

  // optional .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
  bool has_ext4_alloc_da_blocks() const;
  void clear_ext4_alloc_da_blocks();
  const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& ext4_alloc_da_blocks() const;
  ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* release_ext4_alloc_da_blocks();
  ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* mutable_ext4_alloc_da_blocks();
  void set_allocated_ext4_alloc_da_blocks(::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks);

  // optional .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
  bool has_ext4_allocate_blocks() const;
  void clear_ext4_allocate_blocks();
  const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& ext4_allocate_blocks() const;
  ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* release_ext4_allocate_blocks();
  ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* mutable_ext4_allocate_blocks();
  void set_allocated_ext4_allocate_blocks(::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks);

  // optional .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
  bool has_ext4_allocate_inode() const;
  void clear_ext4_allocate_inode();
  const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& ext4_allocate_inode() const;
  ::perfetto::protos::Ext4AllocateInodeFtraceEvent* release_ext4_allocate_inode();
  ::perfetto::protos::Ext4AllocateInodeFtraceEvent* mutable_ext4_allocate_inode();
  void set_allocated_ext4_allocate_inode(::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode);

  // optional .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
  bool has_ext4_begin_ordered_truncate() const;
  void clear_ext4_begin_ordered_truncate();
  const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& ext4_begin_ordered_truncate() const;
  ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* release_ext4_begin_ordered_truncate();
  ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* mutable_ext4_begin_ordered_truncate();
  void set_allocated_ext4_begin_ordered_truncate(::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate);

  // optional .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
  bool has_ext4_collapse_range() const;
  void clear_ext4_collapse_range();
  const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& ext4_collapse_range() const;
  ::perfetto::protos::Ext4CollapseRangeFtraceEvent* release_ext4_collapse_range();
  ::perfetto::protos::Ext4CollapseRangeFtraceEvent* mutable_ext4_collapse_range();
  void set_allocated_ext4_collapse_range(::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range);

  // optional .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
  bool has_ext4_da_release_space() const;
  void clear_ext4_da_release_space();
  const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& ext4_da_release_space() const;
  ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* release_ext4_da_release_space();
  ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* mutable_ext4_da_release_space();
  void set_allocated_ext4_da_release_space(::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space);

  // optional .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
  bool has_ext4_da_reserve_space() const;
  void clear_ext4_da_reserve_space();
  const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& ext4_da_reserve_space() const;
  ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* release_ext4_da_reserve_space();
  ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* mutable_ext4_da_reserve_space();
  void set_allocated_ext4_da_reserve_space(::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space);

  // optional .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
  bool has_ext4_da_update_reserve_space() const;
  void clear_ext4_da_update_reserve_space();
  const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& ext4_da_update_reserve_space() const;
  ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* release_ext4_da_update_reserve_space();
  ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* mutable_ext4_da_update_reserve_space();
  void set_allocated_ext4_da_update_reserve_space(::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space);

  // optional .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
  bool has_ext4_da_write_pages() const;
  void clear_ext4_da_write_pages();
  const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& ext4_da_write_pages() const;
  ::perfetto::protos::Ext4DaWritePagesFtraceEvent* release_ext4_da_write_pages();
  ::perfetto::protos::Ext4DaWritePagesFtraceEvent* mutable_ext4_da_write_pages();
  void set_allocated_ext4_da_write_pages(::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages);

  // optional .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
  bool has_ext4_da_write_pages_extent() const;
  void clear_ext4_da_write_pages_extent();
  const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& ext4_da_write_pages_extent() const;
  ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* release_ext4_da_write_pages_extent();
  ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* mutable_ext4_da_write_pages_extent();
  void set_allocated_ext4_da_write_pages_extent(::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent);

  // optional .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
  bool has_ext4_direct_io_enter() const;
  void clear_ext4_direct_io_enter();
  const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& ext4_direct_io_enter() const;
  ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* release_ext4_direct_io_enter();
  ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* mutable_ext4_direct_io_enter();
  void set_allocated_ext4_direct_io_enter(::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter);

  // optional .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
  bool has_ext4_direct_io_exit() const;
  void clear_ext4_direct_io_exit();
  const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& ext4_direct_io_exit() const;
  ::perfetto::protos::Ext4DirectIOExitFtraceEvent* release_ext4_direct_io_exit();
  ::perfetto::protos::Ext4DirectIOExitFtraceEvent* mutable_ext4_direct_io_exit();
  void set_allocated_ext4_direct_io_exit(::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit);

  // optional .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
  bool has_ext4_discard_blocks() const;
  void clear_ext4_discard_blocks();
  const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& ext4_discard_blocks() const;
  ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* release_ext4_discard_blocks();
  ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* mutable_ext4_discard_blocks();
  void set_allocated_ext4_discard_blocks(::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks);

  // optional .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
  bool has_ext4_discard_preallocations() const;
  void clear_ext4_discard_preallocations();
  const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& ext4_discard_preallocations() const;
  ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* release_ext4_discard_preallocations();
  ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* mutable_ext4_discard_preallocations();
  void set_allocated_ext4_discard_preallocations(::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations);

  // optional .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
  bool has_ext4_drop_inode() const;
  void clear_ext4_drop_inode();
  const ::perfetto::protos::Ext4DropInodeFtraceEvent& ext4_drop_inode() const;
  ::perfetto::protos::Ext4DropInodeFtraceEvent* release_ext4_drop_inode();
  ::perfetto::protos::Ext4DropInodeFtraceEvent* mutable_ext4_drop_inode();
  void set_allocated_ext4_drop_inode(::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode);

  // optional .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
  bool has_ext4_es_cache_extent() const;
  void clear_ext4_es_cache_extent();
  const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& ext4_es_cache_extent() const;
  ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* release_ext4_es_cache_extent();
  ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* mutable_ext4_es_cache_extent();
  void set_allocated_ext4_es_cache_extent(::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent);

  // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
  bool has_ext4_es_find_delayed_extent_range_enter() const;
  void clear_ext4_es_find_delayed_extent_range_enter();
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& ext4_es_find_delayed_extent_range_enter() const;
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* release_ext4_es_find_delayed_extent_range_enter();
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* mutable_ext4_es_find_delayed_extent_range_enter();
  void set_allocated_ext4_es_find_delayed_extent_range_enter(::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter);

  // optional .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
  bool has_ext4_es_find_delayed_extent_range_exit() const;
  void clear_ext4_es_find_delayed_extent_range_exit();
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& ext4_es_find_delayed_extent_range_exit() const;
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* release_ext4_es_find_delayed_extent_range_exit();
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* mutable_ext4_es_find_delayed_extent_range_exit();
  void set_allocated_ext4_es_find_delayed_extent_range_exit(::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit);

  // optional .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
  bool has_ext4_es_insert_extent() const;
  void clear_ext4_es_insert_extent();
  const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& ext4_es_insert_extent() const;
  ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* release_ext4_es_insert_extent();
  ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* mutable_ext4_es_insert_extent();
  void set_allocated_ext4_es_insert_extent(::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent);

  // optional .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
  bool has_ext4_es_lookup_extent_enter() const;
  void clear_ext4_es_lookup_extent_enter();
  const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& ext4_es_lookup_extent_enter() const;
  ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* release_ext4_es_lookup_extent_enter();
  ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* mutable_ext4_es_lookup_extent_enter();
  void set_allocated_ext4_es_lookup_extent_enter(::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter);

  // optional .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
  bool has_ext4_es_lookup_extent_exit() const;
  void clear_ext4_es_lookup_extent_exit();
  const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& ext4_es_lookup_extent_exit() const;
  ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* release_ext4_es_lookup_extent_exit();
  ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* mutable_ext4_es_lookup_extent_exit();
  void set_allocated_ext4_es_lookup_extent_exit(::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit);

  // optional .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
  bool has_ext4_es_remove_extent() const;
  void clear_ext4_es_remove_extent();
  const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& ext4_es_remove_extent() const;
  ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* release_ext4_es_remove_extent();
  ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* mutable_ext4_es_remove_extent();
  void set_allocated_ext4_es_remove_extent(::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent);

  // optional .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
  bool has_ext4_es_shrink() const;
  void clear_ext4_es_shrink();
  const ::perfetto::protos::Ext4EsShrinkFtraceEvent& ext4_es_shrink() const;
  ::perfetto::protos::Ext4EsShrinkFtraceEvent* release_ext4_es_shrink();
  ::perfetto::protos::Ext4EsShrinkFtraceEvent* mutable_ext4_es_shrink();
  void set_allocated_ext4_es_shrink(::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink);

  // optional .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
  bool has_ext4_es_shrink_count() const;
  void clear_ext4_es_shrink_count();
  const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& ext4_es_shrink_count() const;
  ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* release_ext4_es_shrink_count();
  ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* mutable_ext4_es_shrink_count();
  void set_allocated_ext4_es_shrink_count(::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count);

  // optional .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
  bool has_ext4_es_shrink_scan_enter() const;
  void clear_ext4_es_shrink_scan_enter();
  const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& ext4_es_shrink_scan_enter() const;
  ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* release_ext4_es_shrink_scan_enter();
  ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* mutable_ext4_es_shrink_scan_enter();
  void set_allocated_ext4_es_shrink_scan_enter(::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter);

  // optional .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
  bool has_ext4_es_shrink_scan_exit() const;
  void clear_ext4_es_shrink_scan_exit();
  const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& ext4_es_shrink_scan_exit() const;
  ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* release_ext4_es_shrink_scan_exit();
  ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* mutable_ext4_es_shrink_scan_exit();
  void set_allocated_ext4_es_shrink_scan_exit(::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit);

  // optional .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
  bool has_ext4_evict_inode() const;
  void clear_ext4_evict_inode();
  const ::perfetto::protos::Ext4EvictInodeFtraceEvent& ext4_evict_inode() const;
  ::perfetto::protos::Ext4EvictInodeFtraceEvent* release_ext4_evict_inode();
  ::perfetto::protos::Ext4EvictInodeFtraceEvent* mutable_ext4_evict_inode();
  void set_allocated_ext4_evict_inode(::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode);

  // optional .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
  bool has_ext4_ext_convert_to_initialized_enter() const;
  void clear_ext4_ext_convert_to_initialized_enter();
  const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& ext4_ext_convert_to_initialized_enter() const;
  ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* release_ext4_ext_convert_to_initialized_enter();
  ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* mutable_ext4_ext_convert_to_initialized_enter();
  void set_allocated_ext4_ext_convert_to_initialized_enter(::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter);

  // optional .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
  bool has_ext4_ext_convert_to_initialized_fastpath() const;
  void clear_ext4_ext_convert_to_initialized_fastpath();
  const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& ext4_ext_convert_to_initialized_fastpath() const;
  ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* release_ext4_ext_convert_to_initialized_fastpath();
  ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* mutable_ext4_ext_convert_to_initialized_fastpath();
  void set_allocated_ext4_ext_convert_to_initialized_fastpath(::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath);

  // optional .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
  bool has_ext4_ext_handle_unwritten_extents() const;
  void clear_ext4_ext_handle_unwritten_extents();
  const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& ext4_ext_handle_unwritten_extents() const;
  ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* release_ext4_ext_handle_unwritten_extents();
  ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* mutable_ext4_ext_handle_unwritten_extents();
  void set_allocated_ext4_ext_handle_unwritten_extents(::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents);

  // optional .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
  bool has_ext4_ext_in_cache() const;
  void clear_ext4_ext_in_cache();
  const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& ext4_ext_in_cache() const;
  ::perfetto::protos::Ext4ExtInCacheFtraceEvent* release_ext4_ext_in_cache();
  ::perfetto::protos::Ext4ExtInCacheFtraceEvent* mutable_ext4_ext_in_cache();
  void set_allocated_ext4_ext_in_cache(::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache);

  // optional .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
  bool has_ext4_ext_load_extent() const;
  void clear_ext4_ext_load_extent();
  const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& ext4_ext_load_extent() const;
  ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* release_ext4_ext_load_extent();
  ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* mutable_ext4_ext_load_extent();
  void set_allocated_ext4_ext_load_extent(::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent);

  // optional .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
  bool has_ext4_ext_map_blocks_enter() const;
  void clear_ext4_ext_map_blocks_enter();
  const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& ext4_ext_map_blocks_enter() const;
  ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* release_ext4_ext_map_blocks_enter();
  ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* mutable_ext4_ext_map_blocks_enter();
  void set_allocated_ext4_ext_map_blocks_enter(::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter);

  // optional .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
  bool has_ext4_ext_map_blocks_exit() const;
  void clear_ext4_ext_map_blocks_exit();
  const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& ext4_ext_map_blocks_exit() const;
  ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* release_ext4_ext_map_blocks_exit();
  ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* mutable_ext4_ext_map_blocks_exit();
  void set_allocated_ext4_ext_map_blocks_exit(::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit);

  // optional .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
  bool has_ext4_ext_put_in_cache() const;
  void clear_ext4_ext_put_in_cache();
  const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& ext4_ext_put_in_cache() const;
  ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* release_ext4_ext_put_in_cache();
  ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* mutable_ext4_ext_put_in_cache();
  void set_allocated_ext4_ext_put_in_cache(::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache);

  // optional .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
  bool has_ext4_ext_remove_space() const;
  void clear_ext4_ext_remove_space();
  const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& ext4_ext_remove_space() const;
  ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* release_ext4_ext_remove_space();
  ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* mutable_ext4_ext_remove_space();
  void set_allocated_ext4_ext_remove_space(::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space);

  // optional .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
  bool has_ext4_ext_remove_space_done() const;
  void clear_ext4_ext_remove_space_done();
  const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& ext4_ext_remove_space_done() const;
  ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* release_ext4_ext_remove_space_done();
  ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* mutable_ext4_ext_remove_space_done();
  void set_allocated_ext4_ext_remove_space_done(::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done);

  // optional .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
  bool has_ext4_ext_rm_idx() const;
  void clear_ext4_ext_rm_idx();
  const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& ext4_ext_rm_idx() const;
  ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* release_ext4_ext_rm_idx();
  ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* mutable_ext4_ext_rm_idx();
  void set_allocated_ext4_ext_rm_idx(::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx);

  // optional .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
  bool has_ext4_ext_rm_leaf() const;
  void clear_ext4_ext_rm_leaf();
  const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& ext4_ext_rm_leaf() const;
  ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* release_ext4_ext_rm_leaf();
  ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* mutable_ext4_ext_rm_leaf();
  void set_allocated_ext4_ext_rm_leaf(::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf);

  // optional .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
  bool has_ext4_ext_show_extent() const;
  void clear_ext4_ext_show_extent();
  const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& ext4_ext_show_extent() const;
  ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* release_ext4_ext_show_extent();
  ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* mutable_ext4_ext_show_extent();
  void set_allocated_ext4_ext_show_extent(::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent);

  // optional .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
  bool has_ext4_fallocate_enter() const;
  void clear_ext4_fallocate_enter();
  const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& ext4_fallocate_enter() const;
  ::perfetto::protos::Ext4FallocateEnterFtraceEvent* release_ext4_fallocate_enter();
  ::perfetto::protos::Ext4FallocateEnterFtraceEvent* mutable_ext4_fallocate_enter();
  void set_allocated_ext4_fallocate_enter(::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter);

  // optional .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
  bool has_ext4_fallocate_exit() const;
  void clear_ext4_fallocate_exit();
  const ::perfetto::protos::Ext4FallocateExitFtraceEvent& ext4_fallocate_exit() const;
  ::perfetto::protos::Ext4FallocateExitFtraceEvent* release_ext4_fallocate_exit();
  ::perfetto::protos::Ext4FallocateExitFtraceEvent* mutable_ext4_fallocate_exit();
  void set_allocated_ext4_fallocate_exit(::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit);

  // optional .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
  bool has_ext4_find_delalloc_range() const;
  void clear_ext4_find_delalloc_range();
  const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& ext4_find_delalloc_range() const;
  ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* release_ext4_find_delalloc_range();
  ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* mutable_ext4_find_delalloc_range();
  void set_allocated_ext4_find_delalloc_range(::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range);

  // optional .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
  bool has_ext4_forget() const;
  void clear_ext4_forget();
  const ::perfetto::protos::Ext4ForgetFtraceEvent& ext4_forget() const;
  ::perfetto::protos::Ext4ForgetFtraceEvent* release_ext4_forget();
  ::perfetto::protos::Ext4ForgetFtraceEvent* mutable_ext4_forget();
  void set_allocated_ext4_forget(::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget);

  // optional .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
  bool has_ext4_free_blocks() const;
  void clear_ext4_free_blocks();
  const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& ext4_free_blocks() const;
  ::perfetto::protos::Ext4FreeBlocksFtraceEvent* release_ext4_free_blocks();
  ::perfetto::protos::Ext4FreeBlocksFtraceEvent* mutable_ext4_free_blocks();
  void set_allocated_ext4_free_blocks(::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks);

  // optional .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
  bool has_ext4_free_inode() const;
  void clear_ext4_free_inode();
  const ::perfetto::protos::Ext4FreeInodeFtraceEvent& ext4_free_inode() const;
  ::perfetto::protos::Ext4FreeInodeFtraceEvent* release_ext4_free_inode();
  ::perfetto::protos::Ext4FreeInodeFtraceEvent* mutable_ext4_free_inode();
  void set_allocated_ext4_free_inode(::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode);

  // optional .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
  bool has_ext4_get_implied_cluster_alloc_exit() const;
  void clear_ext4_get_implied_cluster_alloc_exit();
  const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& ext4_get_implied_cluster_alloc_exit() const;
  ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* release_ext4_get_implied_cluster_alloc_exit();
  ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* mutable_ext4_get_implied_cluster_alloc_exit();
  void set_allocated_ext4_get_implied_cluster_alloc_exit(::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit);

  // optional .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
  bool has_ext4_get_reserved_cluster_alloc() const;
  void clear_ext4_get_reserved_cluster_alloc();
  const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& ext4_get_reserved_cluster_alloc() const;
  ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* release_ext4_get_reserved_cluster_alloc();
  ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* mutable_ext4_get_reserved_cluster_alloc();
  void set_allocated_ext4_get_reserved_cluster_alloc(::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc);

  // optional .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
  bool has_ext4_ind_map_blocks_enter() const;
  void clear_ext4_ind_map_blocks_enter();
  const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& ext4_ind_map_blocks_enter() const;
  ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* release_ext4_ind_map_blocks_enter();
  ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* mutable_ext4_ind_map_blocks_enter();
  void set_allocated_ext4_ind_map_blocks_enter(::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter);

  // optional .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
  bool has_ext4_ind_map_blocks_exit() const;
  void clear_ext4_ind_map_blocks_exit();
  const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& ext4_ind_map_blocks_exit() const;
  ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* release_ext4_ind_map_blocks_exit();
  ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* mutable_ext4_ind_map_blocks_exit();
  void set_allocated_ext4_ind_map_blocks_exit(::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit);

  // optional .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
  bool has_ext4_insert_range() const;
  void clear_ext4_insert_range();
  const ::perfetto::protos::Ext4InsertRangeFtraceEvent& ext4_insert_range() const;
  ::perfetto::protos::Ext4InsertRangeFtraceEvent* release_ext4_insert_range();
  ::perfetto::protos::Ext4InsertRangeFtraceEvent* mutable_ext4_insert_range();
  void set_allocated_ext4_insert_range(::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range);

  // optional .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
  bool has_ext4_invalidatepage() const;
  void clear_ext4_invalidatepage();
  const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& ext4_invalidatepage() const;
  ::perfetto::protos::Ext4InvalidatepageFtraceEvent* release_ext4_invalidatepage();
  ::perfetto::protos::Ext4InvalidatepageFtraceEvent* mutable_ext4_invalidatepage();
  void set_allocated_ext4_invalidatepage(::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage);

  // optional .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
  bool has_ext4_journal_start() const;
  void clear_ext4_journal_start();
  const ::perfetto::protos::Ext4JournalStartFtraceEvent& ext4_journal_start() const;
  ::perfetto::protos::Ext4JournalStartFtraceEvent* release_ext4_journal_start();
  ::perfetto::protos::Ext4JournalStartFtraceEvent* mutable_ext4_journal_start();
  void set_allocated_ext4_journal_start(::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start);

  // optional .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
  bool has_ext4_journal_start_reserved() const;
  void clear_ext4_journal_start_reserved();
  const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& ext4_journal_start_reserved() const;
  ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* release_ext4_journal_start_reserved();
  ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* mutable_ext4_journal_start_reserved();
  void set_allocated_ext4_journal_start_reserved(::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved);

  // optional .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
  bool has_ext4_journalled_invalidatepage() const;
  void clear_ext4_journalled_invalidatepage();
  const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& ext4_journalled_invalidatepage() const;
  ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* release_ext4_journalled_invalidatepage();
  ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* mutable_ext4_journalled_invalidatepage();
  void set_allocated_ext4_journalled_invalidatepage(::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage);

  // optional .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
  bool has_ext4_journalled_write_end() const;
  void clear_ext4_journalled_write_end();
  const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& ext4_journalled_write_end() const;
  ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* release_ext4_journalled_write_end();
  ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* mutable_ext4_journalled_write_end();
  void set_allocated_ext4_journalled_write_end(::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end);

  // optional .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
  bool has_ext4_load_inode() const;
  void clear_ext4_load_inode();
  const ::perfetto::protos::Ext4LoadInodeFtraceEvent& ext4_load_inode() const;
  ::perfetto::protos::Ext4LoadInodeFtraceEvent* release_ext4_load_inode();
  ::perfetto::protos::Ext4LoadInodeFtraceEvent* mutable_ext4_load_inode();
  void set_allocated_ext4_load_inode(::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode);

  // optional .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
  bool has_ext4_load_inode_bitmap() const;
  void clear_ext4_load_inode_bitmap();
  const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& ext4_load_inode_bitmap() const;
  ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* release_ext4_load_inode_bitmap();
  ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* mutable_ext4_load_inode_bitmap();
  void set_allocated_ext4_load_inode_bitmap(::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap);

  // optional .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
  bool has_ext4_mark_inode_dirty() const;
  void clear_ext4_mark_inode_dirty();
  const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& ext4_mark_inode_dirty() const;
  ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* release_ext4_mark_inode_dirty();
  ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* mutable_ext4_mark_inode_dirty();
  void set_allocated_ext4_mark_inode_dirty(::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty);

  // optional .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
  bool has_ext4_mb_bitmap_load() const;
  void clear_ext4_mb_bitmap_load();
  const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& ext4_mb_bitmap_load() const;
  ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* release_ext4_mb_bitmap_load();
  ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* mutable_ext4_mb_bitmap_load();
  void set_allocated_ext4_mb_bitmap_load(::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load);

  // optional .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
  bool has_ext4_mb_buddy_bitmap_load() const;
  void clear_ext4_mb_buddy_bitmap_load();
  const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& ext4_mb_buddy_bitmap_load() const;
  ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* release_ext4_mb_buddy_bitmap_load();
  ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* mutable_ext4_mb_buddy_bitmap_load();
  void set_allocated_ext4_mb_buddy_bitmap_load(::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load);

  // optional .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
  bool has_ext4_mb_discard_preallocations() const;
  void clear_ext4_mb_discard_preallocations();
  const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& ext4_mb_discard_preallocations() const;
  ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* release_ext4_mb_discard_preallocations();
  ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* mutable_ext4_mb_discard_preallocations();
  void set_allocated_ext4_mb_discard_preallocations(::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations);

  // optional .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
  bool has_ext4_mb_new_group_pa() const;
  void clear_ext4_mb_new_group_pa();
  const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& ext4_mb_new_group_pa() const;
  ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* release_ext4_mb_new_group_pa();
  ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* mutable_ext4_mb_new_group_pa();
  void set_allocated_ext4_mb_new_group_pa(::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa);

  // optional .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
  bool has_ext4_mb_new_inode_pa() const;
  void clear_ext4_mb_new_inode_pa();
  const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& ext4_mb_new_inode_pa() const;
  ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* release_ext4_mb_new_inode_pa();
  ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* mutable_ext4_mb_new_inode_pa();
  void set_allocated_ext4_mb_new_inode_pa(::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa);

  // optional .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
  bool has_ext4_mb_release_group_pa() const;
  void clear_ext4_mb_release_group_pa();
  const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& ext4_mb_release_group_pa() const;
  ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* release_ext4_mb_release_group_pa();
  ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* mutable_ext4_mb_release_group_pa();
  void set_allocated_ext4_mb_release_group_pa(::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa);

  // optional .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
  bool has_ext4_mb_release_inode_pa() const;
  void clear_ext4_mb_release_inode_pa();
  const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& ext4_mb_release_inode_pa() const;
  ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* release_ext4_mb_release_inode_pa();
  ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* mutable_ext4_mb_release_inode_pa();
  void set_allocated_ext4_mb_release_inode_pa(::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa);

  // optional .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
  bool has_ext4_mballoc_alloc() const;
  void clear_ext4_mballoc_alloc();
  const ::perfetto::protos::Ext4MballocAllocFtraceEvent& ext4_mballoc_alloc() const;
  ::perfetto::protos::Ext4MballocAllocFtraceEvent* release_ext4_mballoc_alloc();
  ::perfetto::protos::Ext4MballocAllocFtraceEvent* mutable_ext4_mballoc_alloc();
  void set_allocated_ext4_mballoc_alloc(::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc);

  // optional .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
  bool has_ext4_mballoc_discard() const;
  void clear_ext4_mballoc_discard();
  const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& ext4_mballoc_discard() const;
  ::perfetto::protos::Ext4MballocDiscardFtraceEvent* release_ext4_mballoc_discard();
  ::perfetto::protos::Ext4MballocDiscardFtraceEvent* mutable_ext4_mballoc_discard();
  void set_allocated_ext4_mballoc_discard(::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard);

  // optional .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
  bool has_ext4_mballoc_free() const;
  void clear_ext4_mballoc_free();
  const ::perfetto::protos::Ext4MballocFreeFtraceEvent& ext4_mballoc_free() const;
  ::perfetto::protos::Ext4MballocFreeFtraceEvent* release_ext4_mballoc_free();
  ::perfetto::protos::Ext4MballocFreeFtraceEvent* mutable_ext4_mballoc_free();
  void set_allocated_ext4_mballoc_free(::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free);

  // optional .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
  bool has_ext4_mballoc_prealloc() const;
  void clear_ext4_mballoc_prealloc();
  const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& ext4_mballoc_prealloc() const;
  ::perfetto::protos::Ext4MballocPreallocFtraceEvent* release_ext4_mballoc_prealloc();
  ::perfetto::protos::Ext4MballocPreallocFtraceEvent* mutable_ext4_mballoc_prealloc();
  void set_allocated_ext4_mballoc_prealloc(::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc);

  // optional .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
  bool has_ext4_other_inode_update_time() const;
  void clear_ext4_other_inode_update_time();
  const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& ext4_other_inode_update_time() const;
  ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* release_ext4_other_inode_update_time();
  ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* mutable_ext4_other_inode_update_time();
  void set_allocated_ext4_other_inode_update_time(::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time);

  // optional .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
  bool has_ext4_punch_hole() const;
  void clear_ext4_punch_hole();
  const ::perfetto::protos::Ext4PunchHoleFtraceEvent& ext4_punch_hole() const;
  ::perfetto::protos::Ext4PunchHoleFtraceEvent* release_ext4_punch_hole();
  ::perfetto::protos::Ext4PunchHoleFtraceEvent* mutable_ext4_punch_hole();
  void set_allocated_ext4_punch_hole(::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole);

  // optional .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
  bool has_ext4_read_block_bitmap_load() const;
  void clear_ext4_read_block_bitmap_load();
  const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& ext4_read_block_bitmap_load() const;
  ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* release_ext4_read_block_bitmap_load();
  ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* mutable_ext4_read_block_bitmap_load();
  void set_allocated_ext4_read_block_bitmap_load(::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load);

  // optional .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
  bool has_ext4_readpage() const;
  void clear_ext4_readpage();
  const ::perfetto::protos::Ext4ReadpageFtraceEvent& ext4_readpage() const;
  ::perfetto::protos::Ext4ReadpageFtraceEvent* release_ext4_readpage();
  ::perfetto::protos::Ext4ReadpageFtraceEvent* mutable_ext4_readpage();
  void set_allocated_ext4_readpage(::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage);

  // optional .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
  bool has_ext4_releasepage() const;
  void clear_ext4_releasepage();
  const ::perfetto::protos::Ext4ReleasepageFtraceEvent& ext4_releasepage() const;
  ::perfetto::protos::Ext4ReleasepageFtraceEvent* release_ext4_releasepage();
  ::perfetto::protos::Ext4ReleasepageFtraceEvent* mutable_ext4_releasepage();
  void set_allocated_ext4_releasepage(::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage);

  // optional .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
  bool has_ext4_remove_blocks() const;
  void clear_ext4_remove_blocks();
  const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& ext4_remove_blocks() const;
  ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* release_ext4_remove_blocks();
  ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* mutable_ext4_remove_blocks();
  void set_allocated_ext4_remove_blocks(::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks);

  // optional .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
  bool has_ext4_request_blocks() const;
  void clear_ext4_request_blocks();
  const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& ext4_request_blocks() const;
  ::perfetto::protos::Ext4RequestBlocksFtraceEvent* release_ext4_request_blocks();
  ::perfetto::protos::Ext4RequestBlocksFtraceEvent* mutable_ext4_request_blocks();
  void set_allocated_ext4_request_blocks(::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks);

  // optional .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
  bool has_ext4_request_inode() const;
  void clear_ext4_request_inode();
  const ::perfetto::protos::Ext4RequestInodeFtraceEvent& ext4_request_inode() const;
  ::perfetto::protos::Ext4RequestInodeFtraceEvent* release_ext4_request_inode();
  ::perfetto::protos::Ext4RequestInodeFtraceEvent* mutable_ext4_request_inode();
  void set_allocated_ext4_request_inode(::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode);

  // optional .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
  bool has_ext4_sync_fs() const;
  void clear_ext4_sync_fs();
  const ::perfetto::protos::Ext4SyncFsFtraceEvent& ext4_sync_fs() const;
  ::perfetto::protos::Ext4SyncFsFtraceEvent* release_ext4_sync_fs();
  ::perfetto::protos::Ext4SyncFsFtraceEvent* mutable_ext4_sync_fs();
  void set_allocated_ext4_sync_fs(::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs);

  // optional .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
  bool has_ext4_trim_all_free() const;
  void clear_ext4_trim_all_free();
  const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& ext4_trim_all_free() const;
  ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* release_ext4_trim_all_free();
  ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* mutable_ext4_trim_all_free();
  void set_allocated_ext4_trim_all_free(::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free);

  // optional .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
  bool has_ext4_trim_extent() const;
  void clear_ext4_trim_extent();
  const ::perfetto::protos::Ext4TrimExtentFtraceEvent& ext4_trim_extent() const;
  ::perfetto::protos::Ext4TrimExtentFtraceEvent* release_ext4_trim_extent();
  ::perfetto::protos::Ext4TrimExtentFtraceEvent* mutable_ext4_trim_extent();
  void set_allocated_ext4_trim_extent(::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent);

  // optional .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
  bool has_ext4_truncate_enter() const;
  void clear_ext4_truncate_enter();
  const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& ext4_truncate_enter() const;
  ::perfetto::protos::Ext4TruncateEnterFtraceEvent* release_ext4_truncate_enter();
  ::perfetto::protos::Ext4TruncateEnterFtraceEvent* mutable_ext4_truncate_enter();
  void set_allocated_ext4_truncate_enter(::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter);

  // optional .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
  bool has_ext4_truncate_exit() const;
  void clear_ext4_truncate_exit();
  const ::perfetto::protos::Ext4TruncateExitFtraceEvent& ext4_truncate_exit() const;
  ::perfetto::protos::Ext4TruncateExitFtraceEvent* release_ext4_truncate_exit();
  ::perfetto::protos::Ext4TruncateExitFtraceEvent* mutable_ext4_truncate_exit();
  void set_allocated_ext4_truncate_exit(::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit);

  // optional .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
  bool has_ext4_unlink_enter() const;
  void clear_ext4_unlink_enter();
  const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& ext4_unlink_enter() const;
  ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* release_ext4_unlink_enter();
  ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* mutable_ext4_unlink_enter();
  void set_allocated_ext4_unlink_enter(::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter);

  // optional .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
  bool has_ext4_unlink_exit() const;
  void clear_ext4_unlink_exit();
  const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& ext4_unlink_exit() const;
  ::perfetto::protos::Ext4UnlinkExitFtraceEvent* release_ext4_unlink_exit();
  ::perfetto::protos::Ext4UnlinkExitFtraceEvent* mutable_ext4_unlink_exit();
  void set_allocated_ext4_unlink_exit(::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit);

  // optional .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
  bool has_ext4_write_begin() const;
  void clear_ext4_write_begin();
  const ::perfetto::protos::Ext4WriteBeginFtraceEvent& ext4_write_begin() const;
  ::perfetto::protos::Ext4WriteBeginFtraceEvent* release_ext4_write_begin();
  ::perfetto::protos::Ext4WriteBeginFtraceEvent* mutable_ext4_write_begin();
  void set_allocated_ext4_write_begin(::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin);

  // optional .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
  bool has_ext4_write_end() const;
  void clear_ext4_write_end();
  const ::perfetto::protos::Ext4WriteEndFtraceEvent& ext4_write_end() const;
  ::perfetto::protos::Ext4WriteEndFtraceEvent* release_ext4_write_end();
  ::perfetto::protos::Ext4WriteEndFtraceEvent* mutable_ext4_write_end();
  void set_allocated_ext4_write_end(::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end);

  // optional .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
  bool has_ext4_writepage() const;
  void clear_ext4_writepage();
  const ::perfetto::protos::Ext4WritepageFtraceEvent& ext4_writepage() const;
  ::perfetto::protos::Ext4WritepageFtraceEvent* release_ext4_writepage();
  ::perfetto::protos::Ext4WritepageFtraceEvent* mutable_ext4_writepage();
  void set_allocated_ext4_writepage(::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage);

  // optional .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
  bool has_ext4_writepages() const;
  void clear_ext4_writepages();
  const ::perfetto::protos::Ext4WritepagesFtraceEvent& ext4_writepages() const;
  ::perfetto::protos::Ext4WritepagesFtraceEvent* release_ext4_writepages();
  ::perfetto::protos::Ext4WritepagesFtraceEvent* mutable_ext4_writepages();
  void set_allocated_ext4_writepages(::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages);

  // optional .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
  bool has_ext4_writepages_result() const;
  void clear_ext4_writepages_result();
  const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& ext4_writepages_result() const;
  ::perfetto::protos::Ext4WritepagesResultFtraceEvent* release_ext4_writepages_result();
  ::perfetto::protos::Ext4WritepagesResultFtraceEvent* mutable_ext4_writepages_result();
  void set_allocated_ext4_writepages_result(::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result);

  // optional .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
  bool has_ext4_zero_range() const;
  void clear_ext4_zero_range();
  const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& ext4_zero_range() const;
  ::perfetto::protos::Ext4ZeroRangeFtraceEvent* release_ext4_zero_range();
  ::perfetto::protos::Ext4ZeroRangeFtraceEvent* mutable_ext4_zero_range();
  void set_allocated_ext4_zero_range(::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range);

  // optional .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
  bool has_task_newtask() const;
  void clear_task_newtask();
  const ::perfetto::protos::TaskNewtaskFtraceEvent& task_newtask() const;
  ::perfetto::protos::TaskNewtaskFtraceEvent* release_task_newtask();
  ::perfetto::protos::TaskNewtaskFtraceEvent* mutable_task_newtask();
  void set_allocated_task_newtask(::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask);

  // optional .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
  bool has_task_rename() const;
  void clear_task_rename();
  const ::perfetto::protos::TaskRenameFtraceEvent& task_rename() const;
  ::perfetto::protos::TaskRenameFtraceEvent* release_task_rename();
  ::perfetto::protos::TaskRenameFtraceEvent* mutable_task_rename();
  void set_allocated_task_rename(::perfetto::protos::TaskRenameFtraceEvent* task_rename);

  // optional .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
  bool has_sched_process_exec() const;
  void clear_sched_process_exec();
  const ::perfetto::protos::SchedProcessExecFtraceEvent& sched_process_exec() const;
  ::perfetto::protos::SchedProcessExecFtraceEvent* release_sched_process_exec();
  ::perfetto::protos::SchedProcessExecFtraceEvent* mutable_sched_process_exec();
  void set_allocated_sched_process_exec(::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec);

  // optional .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
  bool has_sched_process_exit() const;
  void clear_sched_process_exit();
  const ::perfetto::protos::SchedProcessExitFtraceEvent& sched_process_exit() const;
  ::perfetto::protos::SchedProcessExitFtraceEvent* release_sched_process_exit();
  ::perfetto::protos::SchedProcessExitFtraceEvent* mutable_sched_process_exit();
  void set_allocated_sched_process_exit(::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit);

  // optional .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
  bool has_sched_process_fork() const;
  void clear_sched_process_fork();
  const ::perfetto::protos::SchedProcessForkFtraceEvent& sched_process_fork() const;
  ::perfetto::protos::SchedProcessForkFtraceEvent* release_sched_process_fork();
  ::perfetto::protos::SchedProcessForkFtraceEvent* mutable_sched_process_fork();
  void set_allocated_sched_process_fork(::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork);

  // optional .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
  bool has_sched_process_free() const;
  void clear_sched_process_free();
  const ::perfetto::protos::SchedProcessFreeFtraceEvent& sched_process_free() const;
  ::perfetto::protos::SchedProcessFreeFtraceEvent* release_sched_process_free();
  ::perfetto::protos::SchedProcessFreeFtraceEvent* mutable_sched_process_free();
  void set_allocated_sched_process_free(::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free);

  // optional .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
  bool has_sched_process_hang() const;
  void clear_sched_process_hang();
  const ::perfetto::protos::SchedProcessHangFtraceEvent& sched_process_hang() const;
  ::perfetto::protos::SchedProcessHangFtraceEvent* release_sched_process_hang();
  ::perfetto::protos::SchedProcessHangFtraceEvent* mutable_sched_process_hang();
  void set_allocated_sched_process_hang(::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang);

  // optional .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
  bool has_sched_process_wait() const;
  void clear_sched_process_wait();
  const ::perfetto::protos::SchedProcessWaitFtraceEvent& sched_process_wait() const;
  ::perfetto::protos::SchedProcessWaitFtraceEvent* release_sched_process_wait();
  ::perfetto::protos::SchedProcessWaitFtraceEvent* mutable_sched_process_wait();
  void set_allocated_sched_process_wait(::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait);

  // optional .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
  bool has_f2fs_do_submit_bio() const;
  void clear_f2fs_do_submit_bio();
  const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& f2fs_do_submit_bio() const;
  ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* release_f2fs_do_submit_bio();
  ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* mutable_f2fs_do_submit_bio();
  void set_allocated_f2fs_do_submit_bio(::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio);

  // optional .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
  bool has_f2fs_evict_inode() const;
  void clear_f2fs_evict_inode();
  const ::perfetto::protos::F2fsEvictInodeFtraceEvent& f2fs_evict_inode() const;
  ::perfetto::protos::F2fsEvictInodeFtraceEvent* release_f2fs_evict_inode();
  ::perfetto::protos::F2fsEvictInodeFtraceEvent* mutable_f2fs_evict_inode();
  void set_allocated_f2fs_evict_inode(::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode);

  // optional .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
  bool has_f2fs_fallocate() const;
  void clear_f2fs_fallocate();
  const ::perfetto::protos::F2fsFallocateFtraceEvent& f2fs_fallocate() const;
  ::perfetto::protos::F2fsFallocateFtraceEvent* release_f2fs_fallocate();
  ::perfetto::protos::F2fsFallocateFtraceEvent* mutable_f2fs_fallocate();
  void set_allocated_f2fs_fallocate(::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate);

  // optional .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
  bool has_f2fs_get_data_block() const;
  void clear_f2fs_get_data_block();
  const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& f2fs_get_data_block() const;
  ::perfetto::protos::F2fsGetDataBlockFtraceEvent* release_f2fs_get_data_block();
  ::perfetto::protos::F2fsGetDataBlockFtraceEvent* mutable_f2fs_get_data_block();
  void set_allocated_f2fs_get_data_block(::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block);

  // optional .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
  bool has_f2fs_get_victim() const;
  void clear_f2fs_get_victim();
  const ::perfetto::protos::F2fsGetVictimFtraceEvent& f2fs_get_victim() const;
  ::perfetto::protos::F2fsGetVictimFtraceEvent* release_f2fs_get_victim();
  ::perfetto::protos::F2fsGetVictimFtraceEvent* mutable_f2fs_get_victim();
  void set_allocated_f2fs_get_victim(::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim);

  // optional .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
  bool has_f2fs_iget() const;
  void clear_f2fs_iget();
  const ::perfetto::protos::F2fsIgetFtraceEvent& f2fs_iget() const;
  ::perfetto::protos::F2fsIgetFtraceEvent* release_f2fs_iget();
  ::perfetto::protos::F2fsIgetFtraceEvent* mutable_f2fs_iget();
  void set_allocated_f2fs_iget(::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget);

  // optional .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
  bool has_f2fs_iget_exit() const;
  void clear_f2fs_iget_exit();
  const ::perfetto::protos::F2fsIgetExitFtraceEvent& f2fs_iget_exit() const;
  ::perfetto::protos::F2fsIgetExitFtraceEvent* release_f2fs_iget_exit();
  ::perfetto::protos::F2fsIgetExitFtraceEvent* mutable_f2fs_iget_exit();
  void set_allocated_f2fs_iget_exit(::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit);

  // optional .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
  bool has_f2fs_new_inode() const;
  void clear_f2fs_new_inode();
  const ::perfetto::protos::F2fsNewInodeFtraceEvent& f2fs_new_inode() const;
  ::perfetto::protos::F2fsNewInodeFtraceEvent* release_f2fs_new_inode();
  ::perfetto::protos::F2fsNewInodeFtraceEvent* mutable_f2fs_new_inode();
  void set_allocated_f2fs_new_inode(::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode);

  // optional .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
  bool has_f2fs_readpage() const;
  void clear_f2fs_readpage();
  const ::perfetto::protos::F2fsReadpageFtraceEvent& f2fs_readpage() const;
  ::perfetto::protos::F2fsReadpageFtraceEvent* release_f2fs_readpage();
  ::perfetto::protos::F2fsReadpageFtraceEvent* mutable_f2fs_readpage();
  void set_allocated_f2fs_readpage(::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage);

  // optional .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
  bool has_f2fs_reserve_new_block() const;
  void clear_f2fs_reserve_new_block();
  const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& f2fs_reserve_new_block() const;
  ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* release_f2fs_reserve_new_block();
  ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* mutable_f2fs_reserve_new_block();
  void set_allocated_f2fs_reserve_new_block(::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block);

  // optional .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
  bool has_f2fs_set_page_dirty() const;
  void clear_f2fs_set_page_dirty();
  const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& f2fs_set_page_dirty() const;
  ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* release_f2fs_set_page_dirty();
  ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* mutable_f2fs_set_page_dirty();
  void set_allocated_f2fs_set_page_dirty(::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty);

  // optional .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
  bool has_f2fs_submit_write_page() const;
  void clear_f2fs_submit_write_page();
  const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& f2fs_submit_write_page() const;
  ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* release_f2fs_submit_write_page();
  ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* mutable_f2fs_submit_write_page();
  void set_allocated_f2fs_submit_write_page(::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page);

  // optional .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
  bool has_f2fs_sync_file_enter() const;
  void clear_f2fs_sync_file_enter();
  const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& f2fs_sync_file_enter() const;
  ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* release_f2fs_sync_file_enter();
  ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* mutable_f2fs_sync_file_enter();
  void set_allocated_f2fs_sync_file_enter(::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter);

  // optional .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
  bool has_f2fs_sync_file_exit() const;
  void clear_f2fs_sync_file_exit();
  const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& f2fs_sync_file_exit() const;
  ::perfetto::protos::F2fsSyncFileExitFtraceEvent* release_f2fs_sync_file_exit();
  ::perfetto::protos::F2fsSyncFileExitFtraceEvent* mutable_f2fs_sync_file_exit();
  void set_allocated_f2fs_sync_file_exit(::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit);

  // optional .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
  bool has_f2fs_sync_fs() const;
  void clear_f2fs_sync_fs();
  const ::perfetto::protos::F2fsSyncFsFtraceEvent& f2fs_sync_fs() const;
  ::perfetto::protos::F2fsSyncFsFtraceEvent* release_f2fs_sync_fs();
  ::perfetto::protos::F2fsSyncFsFtraceEvent* mutable_f2fs_sync_fs();
  void set_allocated_f2fs_sync_fs(::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs);

  // optional .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
  bool has_f2fs_truncate() const;
  void clear_f2fs_truncate();
  const ::perfetto::protos::F2fsTruncateFtraceEvent& f2fs_truncate() const;
  ::perfetto::protos::F2fsTruncateFtraceEvent* release_f2fs_truncate();
  ::perfetto::protos::F2fsTruncateFtraceEvent* mutable_f2fs_truncate();
  void set_allocated_f2fs_truncate(::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate);

  // optional .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
  bool has_f2fs_truncate_blocks_enter() const;
  void clear_f2fs_truncate_blocks_enter();
  const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& f2fs_truncate_blocks_enter() const;
  ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* release_f2fs_truncate_blocks_enter();
  ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* mutable_f2fs_truncate_blocks_enter();
  void set_allocated_f2fs_truncate_blocks_enter(::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter);

  // optional .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
  bool has_f2fs_truncate_blocks_exit() const;
  void clear_f2fs_truncate_blocks_exit();
  const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& f2fs_truncate_blocks_exit() const;
  ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* release_f2fs_truncate_blocks_exit();
  ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* mutable_f2fs_truncate_blocks_exit();
  void set_allocated_f2fs_truncate_blocks_exit(::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit);

  // optional .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
  bool has_f2fs_truncate_data_blocks_range() const;
  void clear_f2fs_truncate_data_blocks_range();
  const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& f2fs_truncate_data_blocks_range() const;
  ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* release_f2fs_truncate_data_blocks_range();
  ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* mutable_f2fs_truncate_data_blocks_range();
  void set_allocated_f2fs_truncate_data_blocks_range(::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range);

  // optional .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
  bool has_f2fs_truncate_inode_blocks_enter() const;
  void clear_f2fs_truncate_inode_blocks_enter();
  const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& f2fs_truncate_inode_blocks_enter() const;
  ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* release_f2fs_truncate_inode_blocks_enter();
  ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* mutable_f2fs_truncate_inode_blocks_enter();
  void set_allocated_f2fs_truncate_inode_blocks_enter(::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter);

  // optional .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
  bool has_f2fs_truncate_inode_blocks_exit() const;
  void clear_f2fs_truncate_inode_blocks_exit();
  const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& f2fs_truncate_inode_blocks_exit() const;
  ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* release_f2fs_truncate_inode_blocks_exit();
  ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* mutable_f2fs_truncate_inode_blocks_exit();
  void set_allocated_f2fs_truncate_inode_blocks_exit(::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit);

  // optional .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
  bool has_f2fs_truncate_node() const;
  void clear_f2fs_truncate_node();
  const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& f2fs_truncate_node() const;
  ::perfetto::protos::F2fsTruncateNodeFtraceEvent* release_f2fs_truncate_node();
  ::perfetto::protos::F2fsTruncateNodeFtraceEvent* mutable_f2fs_truncate_node();
  void set_allocated_f2fs_truncate_node(::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node);

  // optional .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
  bool has_f2fs_truncate_nodes_enter() const;
  void clear_f2fs_truncate_nodes_enter();
  const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& f2fs_truncate_nodes_enter() const;
  ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* release_f2fs_truncate_nodes_enter();
  ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* mutable_f2fs_truncate_nodes_enter();
  void set_allocated_f2fs_truncate_nodes_enter(::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter);

  // optional .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
  bool has_f2fs_truncate_nodes_exit() const;
  void clear_f2fs_truncate_nodes_exit();
  const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& f2fs_truncate_nodes_exit() const;
  ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* release_f2fs_truncate_nodes_exit();
  ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* mutable_f2fs_truncate_nodes_exit();
  void set_allocated_f2fs_truncate_nodes_exit(::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit);

  // optional .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
  bool has_f2fs_truncate_partial_nodes() const;
  void clear_f2fs_truncate_partial_nodes();
  const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& f2fs_truncate_partial_nodes() const;
  ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* release_f2fs_truncate_partial_nodes();
  ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* mutable_f2fs_truncate_partial_nodes();
  void set_allocated_f2fs_truncate_partial_nodes(::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes);

  // optional .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
  bool has_f2fs_unlink_enter() const;
  void clear_f2fs_unlink_enter();
  const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& f2fs_unlink_enter() const;
  ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* release_f2fs_unlink_enter();
  ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* mutable_f2fs_unlink_enter();
  void set_allocated_f2fs_unlink_enter(::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter);

  // optional .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
  bool has_f2fs_unlink_exit() const;
  void clear_f2fs_unlink_exit();
  const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& f2fs_unlink_exit() const;
  ::perfetto::protos::F2fsUnlinkExitFtraceEvent* release_f2fs_unlink_exit();
  ::perfetto::protos::F2fsUnlinkExitFtraceEvent* mutable_f2fs_unlink_exit();
  void set_allocated_f2fs_unlink_exit(::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit);

  // optional .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
  bool has_f2fs_vm_page_mkwrite() const;
  void clear_f2fs_vm_page_mkwrite();
  const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& f2fs_vm_page_mkwrite() const;
  ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* release_f2fs_vm_page_mkwrite();
  ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* mutable_f2fs_vm_page_mkwrite();
  void set_allocated_f2fs_vm_page_mkwrite(::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite);

  // optional .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
  bool has_f2fs_write_begin() const;
  void clear_f2fs_write_begin();
  const ::perfetto::protos::F2fsWriteBeginFtraceEvent& f2fs_write_begin() const;
  ::perfetto::protos::F2fsWriteBeginFtraceEvent* release_f2fs_write_begin();
  ::perfetto::protos::F2fsWriteBeginFtraceEvent* mutable_f2fs_write_begin();
  void set_allocated_f2fs_write_begin(::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin);

  // optional .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
  bool has_f2fs_write_checkpoint() const;
  void clear_f2fs_write_checkpoint();
  const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& f2fs_write_checkpoint() const;
  ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* release_f2fs_write_checkpoint();
  ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* mutable_f2fs_write_checkpoint();
  void set_allocated_f2fs_write_checkpoint(::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint);

  // optional .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
  bool has_f2fs_write_end() const;
  void clear_f2fs_write_end();
  const ::perfetto::protos::F2fsWriteEndFtraceEvent& f2fs_write_end() const;
  ::perfetto::protos::F2fsWriteEndFtraceEvent* release_f2fs_write_end();
  ::perfetto::protos::F2fsWriteEndFtraceEvent* mutable_f2fs_write_end();
  void set_allocated_f2fs_write_end(::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end);

  // optional .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
  bool has_alloc_pages_iommu_end() const;
  void clear_alloc_pages_iommu_end();
  const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& alloc_pages_iommu_end() const;
  ::perfetto::protos::AllocPagesIommuEndFtraceEvent* release_alloc_pages_iommu_end();
  ::perfetto::protos::AllocPagesIommuEndFtraceEvent* mutable_alloc_pages_iommu_end();
  void set_allocated_alloc_pages_iommu_end(::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end);

  // optional .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
  bool has_alloc_pages_iommu_fail() const;
  void clear_alloc_pages_iommu_fail();
  const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& alloc_pages_iommu_fail() const;
  ::perfetto::protos::AllocPagesIommuFailFtraceEvent* release_alloc_pages_iommu_fail();
  ::perfetto::protos::AllocPagesIommuFailFtraceEvent* mutable_alloc_pages_iommu_fail();
  void set_allocated_alloc_pages_iommu_fail(::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail);

  // optional .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
  bool has_alloc_pages_iommu_start() const;
  void clear_alloc_pages_iommu_start();
  const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& alloc_pages_iommu_start() const;
  ::perfetto::protos::AllocPagesIommuStartFtraceEvent* release_alloc_pages_iommu_start();
  ::perfetto::protos::AllocPagesIommuStartFtraceEvent* mutable_alloc_pages_iommu_start();
  void set_allocated_alloc_pages_iommu_start(::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start);

  // optional .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
  bool has_alloc_pages_sys_end() const;
  void clear_alloc_pages_sys_end();
  const ::perfetto::protos::AllocPagesSysEndFtraceEvent& alloc_pages_sys_end() const;
  ::perfetto::protos::AllocPagesSysEndFtraceEvent* release_alloc_pages_sys_end();
  ::perfetto::protos::AllocPagesSysEndFtraceEvent* mutable_alloc_pages_sys_end();
  void set_allocated_alloc_pages_sys_end(::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end);

  // optional .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
  bool has_alloc_pages_sys_fail() const;
  void clear_alloc_pages_sys_fail();
  const ::perfetto::protos::AllocPagesSysFailFtraceEvent& alloc_pages_sys_fail() const;
  ::perfetto::protos::AllocPagesSysFailFtraceEvent* release_alloc_pages_sys_fail();
  ::perfetto::protos::AllocPagesSysFailFtraceEvent* mutable_alloc_pages_sys_fail();
  void set_allocated_alloc_pages_sys_fail(::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail);

  // optional .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
  bool has_alloc_pages_sys_start() const;
  void clear_alloc_pages_sys_start();
  const ::perfetto::protos::AllocPagesSysStartFtraceEvent& alloc_pages_sys_start() const;
  ::perfetto::protos::AllocPagesSysStartFtraceEvent* release_alloc_pages_sys_start();
  ::perfetto::protos::AllocPagesSysStartFtraceEvent* mutable_alloc_pages_sys_start();
  void set_allocated_alloc_pages_sys_start(::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start);

  // optional .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
  bool has_dma_alloc_contiguous_retry() const;
  void clear_dma_alloc_contiguous_retry();
  const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& dma_alloc_contiguous_retry() const;
  ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* release_dma_alloc_contiguous_retry();
  ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* mutable_dma_alloc_contiguous_retry();
  void set_allocated_dma_alloc_contiguous_retry(::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry);

  // optional .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
  bool has_iommu_map_range() const;
  void clear_iommu_map_range();
  const ::perfetto::protos::IommuMapRangeFtraceEvent& iommu_map_range() const;
  ::perfetto::protos::IommuMapRangeFtraceEvent* release_iommu_map_range();
  ::perfetto::protos::IommuMapRangeFtraceEvent* mutable_iommu_map_range();
  void set_allocated_iommu_map_range(::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range);

  // optional .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
  bool has_iommu_sec_ptbl_map_range_end() const;
  void clear_iommu_sec_ptbl_map_range_end();
  const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& iommu_sec_ptbl_map_range_end() const;
  ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* release_iommu_sec_ptbl_map_range_end();
  ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* mutable_iommu_sec_ptbl_map_range_end();
  void set_allocated_iommu_sec_ptbl_map_range_end(::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end);

  // optional .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
  bool has_iommu_sec_ptbl_map_range_start() const;
  void clear_iommu_sec_ptbl_map_range_start();
  const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& iommu_sec_ptbl_map_range_start() const;
  ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* release_iommu_sec_ptbl_map_range_start();
  ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* mutable_iommu_sec_ptbl_map_range_start();
  void set_allocated_iommu_sec_ptbl_map_range_start(::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start);

  // optional .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
  bool has_ion_alloc_buffer_end() const;
  void clear_ion_alloc_buffer_end();
  const ::perfetto::protos::IonAllocBufferEndFtraceEvent& ion_alloc_buffer_end() const;
  ::perfetto::protos::IonAllocBufferEndFtraceEvent* release_ion_alloc_buffer_end();
  ::perfetto::protos::IonAllocBufferEndFtraceEvent* mutable_ion_alloc_buffer_end();
  void set_allocated_ion_alloc_buffer_end(::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end);

  // optional .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
  bool has_ion_alloc_buffer_fail() const;
  void clear_ion_alloc_buffer_fail();
  const ::perfetto::protos::IonAllocBufferFailFtraceEvent& ion_alloc_buffer_fail() const;
  ::perfetto::protos::IonAllocBufferFailFtraceEvent* release_ion_alloc_buffer_fail();
  ::perfetto::protos::IonAllocBufferFailFtraceEvent* mutable_ion_alloc_buffer_fail();
  void set_allocated_ion_alloc_buffer_fail(::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail);

  // optional .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
  bool has_ion_alloc_buffer_fallback() const;
  void clear_ion_alloc_buffer_fallback();
  const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& ion_alloc_buffer_fallback() const;
  ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* release_ion_alloc_buffer_fallback();
  ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* mutable_ion_alloc_buffer_fallback();
  void set_allocated_ion_alloc_buffer_fallback(::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback);

  // optional .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
  bool has_ion_alloc_buffer_start() const;
  void clear_ion_alloc_buffer_start();
  const ::perfetto::protos::IonAllocBufferStartFtraceEvent& ion_alloc_buffer_start() const;
  ::perfetto::protos::IonAllocBufferStartFtraceEvent* release_ion_alloc_buffer_start();
  ::perfetto::protos::IonAllocBufferStartFtraceEvent* mutable_ion_alloc_buffer_start();
  void set_allocated_ion_alloc_buffer_start(::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start);

  // optional .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
  bool has_ion_cp_alloc_retry() const;
  void clear_ion_cp_alloc_retry();
  const ::perfetto::protos::IonCpAllocRetryFtraceEvent& ion_cp_alloc_retry() const;
  ::perfetto::protos::IonCpAllocRetryFtraceEvent* release_ion_cp_alloc_retry();
  ::perfetto::protos::IonCpAllocRetryFtraceEvent* mutable_ion_cp_alloc_retry();
  void set_allocated_ion_cp_alloc_retry(::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry);

  // optional .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
  bool has_ion_cp_secure_buffer_end() const;
  void clear_ion_cp_secure_buffer_end();
  const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& ion_cp_secure_buffer_end() const;
  ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* release_ion_cp_secure_buffer_end();
  ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* mutable_ion_cp_secure_buffer_end();
  void set_allocated_ion_cp_secure_buffer_end(::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end);

  // optional .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
  bool has_ion_cp_secure_buffer_start() const;
  void clear_ion_cp_secure_buffer_start();
  const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& ion_cp_secure_buffer_start() const;
  ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* release_ion_cp_secure_buffer_start();
  ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* mutable_ion_cp_secure_buffer_start();
  void set_allocated_ion_cp_secure_buffer_start(::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start);

  // optional .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
  bool has_ion_prefetching() const;
  void clear_ion_prefetching();
  const ::perfetto::protos::IonPrefetchingFtraceEvent& ion_prefetching() const;
  ::perfetto::protos::IonPrefetchingFtraceEvent* release_ion_prefetching();
  ::perfetto::protos::IonPrefetchingFtraceEvent* mutable_ion_prefetching();
  void set_allocated_ion_prefetching(::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching);

  // optional .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
  bool has_ion_secure_cma_add_to_pool_end() const;
  void clear_ion_secure_cma_add_to_pool_end();
  const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& ion_secure_cma_add_to_pool_end() const;
  ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* release_ion_secure_cma_add_to_pool_end();
  ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* mutable_ion_secure_cma_add_to_pool_end();
  void set_allocated_ion_secure_cma_add_to_pool_end(::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end);

  // optional .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
  bool has_ion_secure_cma_add_to_pool_start() const;
  void clear_ion_secure_cma_add_to_pool_start();
  const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& ion_secure_cma_add_to_pool_start() const;
  ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* release_ion_secure_cma_add_to_pool_start();
  ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* mutable_ion_secure_cma_add_to_pool_start();
  void set_allocated_ion_secure_cma_add_to_pool_start(::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start);

  // optional .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
  bool has_ion_secure_cma_allocate_end() const;
  void clear_ion_secure_cma_allocate_end();
  const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& ion_secure_cma_allocate_end() const;
  ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* release_ion_secure_cma_allocate_end();
  ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* mutable_ion_secure_cma_allocate_end();
  void set_allocated_ion_secure_cma_allocate_end(::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end);

  // optional .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
  bool has_ion_secure_cma_allocate_start() const;
  void clear_ion_secure_cma_allocate_start();
  const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& ion_secure_cma_allocate_start() const;
  ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* release_ion_secure_cma_allocate_start();
  ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* mutable_ion_secure_cma_allocate_start();
  void set_allocated_ion_secure_cma_allocate_start(::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start);

  // optional .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
  bool has_ion_secure_cma_shrink_pool_end() const;
  void clear_ion_secure_cma_shrink_pool_end();
  const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& ion_secure_cma_shrink_pool_end() const;
  ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* release_ion_secure_cma_shrink_pool_end();
  ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* mutable_ion_secure_cma_shrink_pool_end();
  void set_allocated_ion_secure_cma_shrink_pool_end(::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end);

  // optional .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
  bool has_ion_secure_cma_shrink_pool_start() const;
  void clear_ion_secure_cma_shrink_pool_start();
  const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& ion_secure_cma_shrink_pool_start() const;
  ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* release_ion_secure_cma_shrink_pool_start();
  ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* mutable_ion_secure_cma_shrink_pool_start();
  void set_allocated_ion_secure_cma_shrink_pool_start(::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start);

  // optional .perfetto.protos.KfreeFtraceEvent kfree = 298;
  bool has_kfree() const;
  void clear_kfree();
  const ::perfetto::protos::KfreeFtraceEvent& kfree() const;
  ::perfetto::protos::KfreeFtraceEvent* release_kfree();
  ::perfetto::protos::KfreeFtraceEvent* mutable_kfree();
  void set_allocated_kfree(::perfetto::protos::KfreeFtraceEvent* kfree);

  // optional .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
  bool has_kmalloc() const;
  void clear_kmalloc();
  const ::perfetto::protos::KmallocFtraceEvent& kmalloc() const;
  ::perfetto::protos::KmallocFtraceEvent* release_kmalloc();
  ::perfetto::protos::KmallocFtraceEvent* mutable_kmalloc();
  void set_allocated_kmalloc(::perfetto::protos::KmallocFtraceEvent* kmalloc);

  // optional .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
  bool has_kmalloc_node() const;
  void clear_kmalloc_node();
  const ::perfetto::protos::KmallocNodeFtraceEvent& kmalloc_node() const;
  ::perfetto::protos::KmallocNodeFtraceEvent* release_kmalloc_node();
  ::perfetto::protos::KmallocNodeFtraceEvent* mutable_kmalloc_node();
  void set_allocated_kmalloc_node(::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node);

  // optional .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
  bool has_kmem_cache_alloc() const;
  void clear_kmem_cache_alloc();
  const ::perfetto::protos::KmemCacheAllocFtraceEvent& kmem_cache_alloc() const;
  ::perfetto::protos::KmemCacheAllocFtraceEvent* release_kmem_cache_alloc();
  ::perfetto::protos::KmemCacheAllocFtraceEvent* mutable_kmem_cache_alloc();
  void set_allocated_kmem_cache_alloc(::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc);

  // optional .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
  bool has_kmem_cache_alloc_node() const;
  void clear_kmem_cache_alloc_node();
  const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& kmem_cache_alloc_node() const;
  ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* release_kmem_cache_alloc_node();
  ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* mutable_kmem_cache_alloc_node();
  void set_allocated_kmem_cache_alloc_node(::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node);

  // optional .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
  bool has_kmem_cache_free() const;
  void clear_kmem_cache_free();
  const ::perfetto::protos::KmemCacheFreeFtraceEvent& kmem_cache_free() const;
  ::perfetto::protos::KmemCacheFreeFtraceEvent* release_kmem_cache_free();
  ::perfetto::protos::KmemCacheFreeFtraceEvent* mutable_kmem_cache_free();
  void set_allocated_kmem_cache_free(::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free);

  // optional .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
  bool has_migrate_pages_end() const;
  void clear_migrate_pages_end();
  const ::perfetto::protos::MigratePagesEndFtraceEvent& migrate_pages_end() const;
  ::perfetto::protos::MigratePagesEndFtraceEvent* release_migrate_pages_end();
  ::perfetto::protos::MigratePagesEndFtraceEvent* mutable_migrate_pages_end();
  void set_allocated_migrate_pages_end(::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end);

  // optional .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
  bool has_migrate_pages_start() const;
  void clear_migrate_pages_start();
  const ::perfetto::protos::MigratePagesStartFtraceEvent& migrate_pages_start() const;
  ::perfetto::protos::MigratePagesStartFtraceEvent* release_migrate_pages_start();
  ::perfetto::protos::MigratePagesStartFtraceEvent* mutable_migrate_pages_start();
  void set_allocated_migrate_pages_start(::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start);

  // optional .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
  bool has_migrate_retry() const;
  void clear_migrate_retry();
  const ::perfetto::protos::MigrateRetryFtraceEvent& migrate_retry() const;
  ::perfetto::protos::MigrateRetryFtraceEvent* release_migrate_retry();
  ::perfetto::protos::MigrateRetryFtraceEvent* mutable_migrate_retry();
  void set_allocated_migrate_retry(::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry);

  // optional .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
  bool has_mm_page_alloc() const;
  void clear_mm_page_alloc();
  const ::perfetto::protos::MmPageAllocFtraceEvent& mm_page_alloc() const;
  ::perfetto::protos::MmPageAllocFtraceEvent* release_mm_page_alloc();
  ::perfetto::protos::MmPageAllocFtraceEvent* mutable_mm_page_alloc();
  void set_allocated_mm_page_alloc(::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc);

  // optional .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
  bool has_mm_page_alloc_extfrag() const;
  void clear_mm_page_alloc_extfrag();
  const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& mm_page_alloc_extfrag() const;
  ::perfetto::protos::MmPageAllocExtfragFtraceEvent* release_mm_page_alloc_extfrag();
  ::perfetto::protos::MmPageAllocExtfragFtraceEvent* mutable_mm_page_alloc_extfrag();
  void set_allocated_mm_page_alloc_extfrag(::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag);

  // optional .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
  bool has_mm_page_alloc_zone_locked() const;
  void clear_mm_page_alloc_zone_locked();
  const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& mm_page_alloc_zone_locked() const;
  ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* release_mm_page_alloc_zone_locked();
  ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mutable_mm_page_alloc_zone_locked();
  void set_allocated_mm_page_alloc_zone_locked(::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked);

  // optional .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
  bool has_mm_page_free() const;
  void clear_mm_page_free();
  const ::perfetto::protos::MmPageFreeFtraceEvent& mm_page_free() const;
  ::perfetto::protos::MmPageFreeFtraceEvent* release_mm_page_free();
  ::perfetto::protos::MmPageFreeFtraceEvent* mutable_mm_page_free();
  void set_allocated_mm_page_free(::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free);

  // optional .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
  bool has_mm_page_free_batched() const;
  void clear_mm_page_free_batched();
  const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& mm_page_free_batched() const;
  ::perfetto::protos::MmPageFreeBatchedFtraceEvent* release_mm_page_free_batched();
  ::perfetto::protos::MmPageFreeBatchedFtraceEvent* mutable_mm_page_free_batched();
  void set_allocated_mm_page_free_batched(::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched);

  // optional .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
  bool has_mm_page_pcpu_drain() const;
  void clear_mm_page_pcpu_drain();
  const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& mm_page_pcpu_drain() const;
  ::perfetto::protos::MmPagePcpuDrainFtraceEvent* release_mm_page_pcpu_drain();
  ::perfetto::protos::MmPagePcpuDrainFtraceEvent* mutable_mm_page_pcpu_drain();
  void set_allocated_mm_page_pcpu_drain(::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain);

  // optional .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
  bool has_rss_stat() const;
  void clear_rss_stat();
  const ::perfetto::protos::RssStatFtraceEvent& rss_stat() const;
  ::perfetto::protos::RssStatFtraceEvent* release_rss_stat();
  ::perfetto::protos::RssStatFtraceEvent* mutable_rss_stat();
  void set_allocated_rss_stat(::perfetto::protos::RssStatFtraceEvent* rss_stat);

  // optional .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
  bool has_ion_heap_shrink() const;
  void clear_ion_heap_shrink();
  const ::perfetto::protos::IonHeapShrinkFtraceEvent& ion_heap_shrink() const;
  ::perfetto::protos::IonHeapShrinkFtraceEvent* release_ion_heap_shrink();
  ::perfetto::protos::IonHeapShrinkFtraceEvent* mutable_ion_heap_shrink();
  void set_allocated_ion_heap_shrink(::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink);

  // optional .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
  bool has_ion_heap_grow() const;
  void clear_ion_heap_grow();
  const ::perfetto::protos::IonHeapGrowFtraceEvent& ion_heap_grow() const;
  ::perfetto::protos::IonHeapGrowFtraceEvent* release_ion_heap_grow();
  ::perfetto::protos::IonHeapGrowFtraceEvent* mutable_ion_heap_grow();
  void set_allocated_ion_heap_grow(::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow);

  // optional .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
  bool has_fence_init() const;
  void clear_fence_init();
  const ::perfetto::protos::FenceInitFtraceEvent& fence_init() const;
  ::perfetto::protos::FenceInitFtraceEvent* release_fence_init();
  ::perfetto::protos::FenceInitFtraceEvent* mutable_fence_init();
  void set_allocated_fence_init(::perfetto::protos::FenceInitFtraceEvent* fence_init);

  // optional .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
  bool has_fence_destroy() const;
  void clear_fence_destroy();
  const ::perfetto::protos::FenceDestroyFtraceEvent& fence_destroy() const;
  ::perfetto::protos::FenceDestroyFtraceEvent* release_fence_destroy();
  ::perfetto::protos::FenceDestroyFtraceEvent* mutable_fence_destroy();
  void set_allocated_fence_destroy(::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy);

  // optional .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
  bool has_fence_enable_signal() const;
  void clear_fence_enable_signal();
  const ::perfetto::protos::FenceEnableSignalFtraceEvent& fence_enable_signal() const;
  ::perfetto::protos::FenceEnableSignalFtraceEvent* release_fence_enable_signal();
  ::perfetto::protos::FenceEnableSignalFtraceEvent* mutable_fence_enable_signal();
  void set_allocated_fence_enable_signal(::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal);

  // optional .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
  bool has_fence_signaled() const;
  void clear_fence_signaled();
  const ::perfetto::protos::FenceSignaledFtraceEvent& fence_signaled() const;
  ::perfetto::protos::FenceSignaledFtraceEvent* release_fence_signaled();
  ::perfetto::protos::FenceSignaledFtraceEvent* mutable_fence_signaled();
  void set_allocated_fence_signaled(::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled);

  // optional .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
  bool has_clk_enable() const;
  void clear_clk_enable();
  const ::perfetto::protos::ClkEnableFtraceEvent& clk_enable() const;
  ::perfetto::protos::ClkEnableFtraceEvent* release_clk_enable();
  ::perfetto::protos::ClkEnableFtraceEvent* mutable_clk_enable();
  void set_allocated_clk_enable(::perfetto::protos::ClkEnableFtraceEvent* clk_enable);

  // optional .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
  bool has_clk_disable() const;
  void clear_clk_disable();
  const ::perfetto::protos::ClkDisableFtraceEvent& clk_disable() const;
  ::perfetto::protos::ClkDisableFtraceEvent* release_clk_disable();
  ::perfetto::protos::ClkDisableFtraceEvent* mutable_clk_disable();
  void set_allocated_clk_disable(::perfetto::protos::ClkDisableFtraceEvent* clk_disable);

  // optional .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
  bool has_clk_set_rate() const;
  void clear_clk_set_rate();
  const ::perfetto::protos::ClkSetRateFtraceEvent& clk_set_rate() const;
  ::perfetto::protos::ClkSetRateFtraceEvent* release_clk_set_rate();
  ::perfetto::protos::ClkSetRateFtraceEvent* mutable_clk_set_rate();
  void set_allocated_clk_set_rate(::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate);

  // optional .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
  bool has_binder_transaction_alloc_buf() const;
  void clear_binder_transaction_alloc_buf();
  const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& binder_transaction_alloc_buf() const;
  ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* release_binder_transaction_alloc_buf();
  ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* mutable_binder_transaction_alloc_buf();
  void set_allocated_binder_transaction_alloc_buf(::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf);

  // optional .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
  bool has_signal_deliver() const;
  void clear_signal_deliver();
  const ::perfetto::protos::SignalDeliverFtraceEvent& signal_deliver() const;
  ::perfetto::protos::SignalDeliverFtraceEvent* release_signal_deliver();
  ::perfetto::protos::SignalDeliverFtraceEvent* mutable_signal_deliver();
  void set_allocated_signal_deliver(::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver);

  // optional .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
  bool has_signal_generate() const;
  void clear_signal_generate();
  const ::perfetto::protos::SignalGenerateFtraceEvent& signal_generate() const;
  ::perfetto::protos::SignalGenerateFtraceEvent* release_signal_generate();
  ::perfetto::protos::SignalGenerateFtraceEvent* mutable_signal_generate();
  void set_allocated_signal_generate(::perfetto::protos::SignalGenerateFtraceEvent* signal_generate);

  // optional .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
  bool has_oom_score_adj_update() const;
  void clear_oom_score_adj_update();
  const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& oom_score_adj_update() const;
  ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* release_oom_score_adj_update();
  ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* mutable_oom_score_adj_update();
  void set_allocated_oom_score_adj_update(::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update);

  // optional .perfetto.protos.GenericFtraceEvent generic = 327;
  bool has_generic() const;
  void clear_generic();
  const ::perfetto::protos::GenericFtraceEvent& generic() const;
  ::perfetto::protos::GenericFtraceEvent* release_generic();
  ::perfetto::protos::GenericFtraceEvent* mutable_generic();
  void set_allocated_generic(::perfetto::protos::GenericFtraceEvent* generic);

  // optional .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
  bool has_mm_event_record() const;
  void clear_mm_event_record();
  const ::perfetto::protos::MmEventRecordFtraceEvent& mm_event_record() const;
  ::perfetto::protos::MmEventRecordFtraceEvent* release_mm_event_record();
  ::perfetto::protos::MmEventRecordFtraceEvent* mutable_mm_event_record();
  void set_allocated_mm_event_record(::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record);

  // optional .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
  bool has_sys_enter() const;
  void clear_sys_enter();
  const ::perfetto::protos::SysEnterFtraceEvent& sys_enter() const;
  ::perfetto::protos::SysEnterFtraceEvent* release_sys_enter();
  ::perfetto::protos::SysEnterFtraceEvent* mutable_sys_enter();
  void set_allocated_sys_enter(::perfetto::protos::SysEnterFtraceEvent* sys_enter);

  // optional .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
  bool has_sys_exit() const;
  void clear_sys_exit();
  const ::perfetto::protos::SysExitFtraceEvent& sys_exit() const;
  ::perfetto::protos::SysExitFtraceEvent* release_sys_exit();
  ::perfetto::protos::SysExitFtraceEvent* mutable_sys_exit();
  void set_allocated_sys_exit(::perfetto::protos::SysExitFtraceEvent* sys_exit);

  // optional .perfetto.protos.ZeroFtraceEvent zero = 331;
  bool has_zero() const;
  void clear_zero();
  const ::perfetto::protos::ZeroFtraceEvent& zero() const;
  ::perfetto::protos::ZeroFtraceEvent* release_zero();
  ::perfetto::protos::ZeroFtraceEvent* mutable_zero();
  void set_allocated_zero(::perfetto::protos::ZeroFtraceEvent* zero);

  // optional .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
  bool has_gpu_frequency() const;
  void clear_gpu_frequency();
  const ::perfetto::protos::GpuFrequencyFtraceEvent& gpu_frequency() const;
  ::perfetto::protos::GpuFrequencyFtraceEvent* release_gpu_frequency();
  ::perfetto::protos::GpuFrequencyFtraceEvent* mutable_gpu_frequency();
  void set_allocated_gpu_frequency(::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency);

  // optional .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
  bool has_sde_tracing_mark_write() const;
  void clear_sde_tracing_mark_write();
  const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& sde_tracing_mark_write() const;
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* release_sde_tracing_mark_write();
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* mutable_sde_tracing_mark_write();
  void set_allocated_sde_tracing_mark_write(::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write);

  // optional .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
  bool has_mark_victim() const;
  void clear_mark_victim();
  const ::perfetto::protos::MarkVictimFtraceEvent& mark_victim() const;
  ::perfetto::protos::MarkVictimFtraceEvent* release_mark_victim();
  ::perfetto::protos::MarkVictimFtraceEvent* mutable_mark_victim();
  void set_allocated_mark_victim(::perfetto::protos::MarkVictimFtraceEvent* mark_victim);

  // optional .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
  bool has_ion_stat() const;
  void clear_ion_stat();
  const ::perfetto::protos::IonStatFtraceEvent& ion_stat() const;
  ::perfetto::protos::IonStatFtraceEvent* release_ion_stat();
  ::perfetto::protos::IonStatFtraceEvent* mutable_ion_stat();
  void set_allocated_ion_stat(::perfetto::protos::IonStatFtraceEvent* ion_stat);

  // optional .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
  bool has_ion_buffer_create() const;
  void clear_ion_buffer_create();
  const ::perfetto::protos::IonBufferCreateFtraceEvent& ion_buffer_create() const;
  ::perfetto::protos::IonBufferCreateFtraceEvent* release_ion_buffer_create();
  ::perfetto::protos::IonBufferCreateFtraceEvent* mutable_ion_buffer_create();
  void set_allocated_ion_buffer_create(::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create);

  // optional .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
  bool has_ion_buffer_destroy() const;
  void clear_ion_buffer_destroy();
  const ::perfetto::protos::IonBufferDestroyFtraceEvent& ion_buffer_destroy() const;
  ::perfetto::protos::IonBufferDestroyFtraceEvent* release_ion_buffer_destroy();
  ::perfetto::protos::IonBufferDestroyFtraceEvent* mutable_ion_buffer_destroy();
  void set_allocated_ion_buffer_destroy(::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy);

  // optional .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
  bool has_scm_call_start() const;
  void clear_scm_call_start();
  const ::perfetto::protos::ScmCallStartFtraceEvent& scm_call_start() const;
  ::perfetto::protos::ScmCallStartFtraceEvent* release_scm_call_start();
  ::perfetto::protos::ScmCallStartFtraceEvent* mutable_scm_call_start();
  void set_allocated_scm_call_start(::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start);

  // optional .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
  bool has_scm_call_end() const;
  void clear_scm_call_end();
  const ::perfetto::protos::ScmCallEndFtraceEvent& scm_call_end() const;
  ::perfetto::protos::ScmCallEndFtraceEvent* release_scm_call_end();
  ::perfetto::protos::ScmCallEndFtraceEvent* mutable_scm_call_end();
  void set_allocated_scm_call_end(::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end);

  // optional .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
  bool has_gpu_mem_total() const;
  void clear_gpu_mem_total();
  const ::perfetto::protos::GpuMemTotalFtraceEvent& gpu_mem_total() const;
  ::perfetto::protos::GpuMemTotalFtraceEvent* release_gpu_mem_total();
  ::perfetto::protos::GpuMemTotalFtraceEvent* mutable_gpu_mem_total();
  void set_allocated_gpu_mem_total(::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total);

  // optional .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
  bool has_thermal_temperature() const;
  void clear_thermal_temperature();
  const ::perfetto::protos::ThermalTemperatureFtraceEvent& thermal_temperature() const;
  ::perfetto::protos::ThermalTemperatureFtraceEvent* release_thermal_temperature();
  ::perfetto::protos::ThermalTemperatureFtraceEvent* mutable_thermal_temperature();
  void set_allocated_thermal_temperature(::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature);

  // optional .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
  bool has_cdev_update() const;
  void clear_cdev_update();
  const ::perfetto::protos::CdevUpdateFtraceEvent& cdev_update() const;
  ::perfetto::protos::CdevUpdateFtraceEvent* release_cdev_update();
  ::perfetto::protos::CdevUpdateFtraceEvent* mutable_cdev_update();
  void set_allocated_cdev_update(::perfetto::protos::CdevUpdateFtraceEvent* cdev_update);

  // optional .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
  bool has_cpuhp_exit() const;
  void clear_cpuhp_exit();
  const ::perfetto::protos::CpuhpExitFtraceEvent& cpuhp_exit() const;
  ::perfetto::protos::CpuhpExitFtraceEvent* release_cpuhp_exit();
  ::perfetto::protos::CpuhpExitFtraceEvent* mutable_cpuhp_exit();
  void set_allocated_cpuhp_exit(::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit);

  // optional .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
  bool has_cpuhp_multi_enter() const;
  void clear_cpuhp_multi_enter();
  const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& cpuhp_multi_enter() const;
  ::perfetto::protos::CpuhpMultiEnterFtraceEvent* release_cpuhp_multi_enter();
  ::perfetto::protos::CpuhpMultiEnterFtraceEvent* mutable_cpuhp_multi_enter();
  void set_allocated_cpuhp_multi_enter(::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter);

  // optional .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
  bool has_cpuhp_enter() const;
  void clear_cpuhp_enter();
  const ::perfetto::protos::CpuhpEnterFtraceEvent& cpuhp_enter() const;
  ::perfetto::protos::CpuhpEnterFtraceEvent* release_cpuhp_enter();
  ::perfetto::protos::CpuhpEnterFtraceEvent* mutable_cpuhp_enter();
  void set_allocated_cpuhp_enter(::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter);

  // optional .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
  bool has_cpuhp_latency() const;
  void clear_cpuhp_latency();
  const ::perfetto::protos::CpuhpLatencyFtraceEvent& cpuhp_latency() const;
  ::perfetto::protos::CpuhpLatencyFtraceEvent* release_cpuhp_latency();
  ::perfetto::protos::CpuhpLatencyFtraceEvent* mutable_cpuhp_latency();
  void set_allocated_cpuhp_latency(::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency);

  // optional .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
  bool has_fastrpc_dma_stat() const;
  void clear_fastrpc_dma_stat();
  const ::perfetto::protos::FastrpcDmaStatFtraceEvent& fastrpc_dma_stat() const;
  ::perfetto::protos::FastrpcDmaStatFtraceEvent* release_fastrpc_dma_stat();
  ::perfetto::protos::FastrpcDmaStatFtraceEvent* mutable_fastrpc_dma_stat();
  void set_allocated_fastrpc_dma_stat(::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat);

  // optional .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
  bool has_dpu_tracing_mark_write() const;
  void clear_dpu_tracing_mark_write();
  const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& dpu_tracing_mark_write() const;
  ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* release_dpu_tracing_mark_write();
  ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* mutable_dpu_tracing_mark_write();
  void set_allocated_dpu_tracing_mark_write(::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write);

  // optional .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
  bool has_g2d_tracing_mark_write() const;
  void clear_g2d_tracing_mark_write();
  const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& g2d_tracing_mark_write() const;
  ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* release_g2d_tracing_mark_write();
  ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* mutable_g2d_tracing_mark_write();
  void set_allocated_g2d_tracing_mark_write(::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write);

  // optional .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
  bool has_mali_tracing_mark_write() const;
  void clear_mali_tracing_mark_write();
  const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& mali_tracing_mark_write() const;
  ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* release_mali_tracing_mark_write();
  ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mutable_mali_tracing_mark_write();
  void set_allocated_mali_tracing_mark_write(::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEvent)
 private:
  class _Internal;
  void set_has_print();
  void set_has_sched_switch();
  void set_has_cpu_frequency();
  void set_has_cpu_frequency_limits();
  void set_has_cpu_idle();
  void set_has_clock_enable();
  void set_has_clock_disable();
  void set_has_clock_set_rate();
  void set_has_sched_wakeup();
  void set_has_sched_blocked_reason();
  void set_has_sched_cpu_hotplug();
  void set_has_sched_waking();
  void set_has_ipi_entry();
  void set_has_ipi_exit();
  void set_has_ipi_raise();
  void set_has_softirq_entry();
  void set_has_softirq_exit();
  void set_has_softirq_raise();
  void set_has_i2c_read();
  void set_has_i2c_write();
  void set_has_i2c_result();
  void set_has_i2c_reply();
  void set_has_smbus_read();
  void set_has_smbus_write();
  void set_has_smbus_result();
  void set_has_smbus_reply();
  void set_has_lowmemory_kill();
  void set_has_irq_handler_entry();
  void set_has_irq_handler_exit();
  void set_has_sync_pt();
  void set_has_sync_timeline();
  void set_has_sync_wait();
  void set_has_ext4_da_write_begin();
  void set_has_ext4_da_write_end();
  void set_has_ext4_sync_file_enter();
  void set_has_ext4_sync_file_exit();
  void set_has_block_rq_issue();
  void set_has_mm_vmscan_direct_reclaim_begin();
  void set_has_mm_vmscan_direct_reclaim_end();
  void set_has_mm_vmscan_kswapd_wake();
  void set_has_mm_vmscan_kswapd_sleep();
  void set_has_binder_transaction();
  void set_has_binder_transaction_received();
  void set_has_binder_set_priority();
  void set_has_binder_lock();
  void set_has_binder_locked();
  void set_has_binder_unlock();
  void set_has_workqueue_activate_work();
  void set_has_workqueue_execute_end();
  void set_has_workqueue_execute_start();
  void set_has_workqueue_queue_work();
  void set_has_regulator_disable();
  void set_has_regulator_disable_complete();
  void set_has_regulator_enable();
  void set_has_regulator_enable_complete();
  void set_has_regulator_enable_delay();
  void set_has_regulator_set_voltage();
  void set_has_regulator_set_voltage_complete();
  void set_has_cgroup_attach_task();
  void set_has_cgroup_mkdir();
  void set_has_cgroup_remount();
  void set_has_cgroup_rmdir();
  void set_has_cgroup_transfer_tasks();
  void set_has_cgroup_destroy_root();
  void set_has_cgroup_release();
  void set_has_cgroup_rename();
  void set_has_cgroup_setup_root();
  void set_has_mdp_cmd_kickoff();
  void set_has_mdp_commit();
  void set_has_mdp_perf_set_ot();
  void set_has_mdp_sspp_change();
  void set_has_tracing_mark_write();
  void set_has_mdp_cmd_pingpong_done();
  void set_has_mdp_compare_bw();
  void set_has_mdp_perf_set_panic_luts();
  void set_has_mdp_sspp_set();
  void set_has_mdp_cmd_readptr_done();
  void set_has_mdp_misr_crc();
  void set_has_mdp_perf_set_qos_luts();
  void set_has_mdp_trace_counter();
  void set_has_mdp_cmd_release_bw();
  void set_has_mdp_mixer_update();
  void set_has_mdp_perf_set_wm_levels();
  void set_has_mdp_video_underrun_done();
  void set_has_mdp_cmd_wait_pingpong();
  void set_has_mdp_perf_prefill_calc();
  void set_has_mdp_perf_update_bus();
  void set_has_rotator_bw_ao_as_context();
  void set_has_mm_filemap_add_to_page_cache();
  void set_has_mm_filemap_delete_from_page_cache();
  void set_has_mm_compaction_begin();
  void set_has_mm_compaction_defer_compaction();
  void set_has_mm_compaction_deferred();
  void set_has_mm_compaction_defer_reset();
  void set_has_mm_compaction_end();
  void set_has_mm_compaction_finished();
  void set_has_mm_compaction_isolate_freepages();
  void set_has_mm_compaction_isolate_migratepages();
  void set_has_mm_compaction_kcompactd_sleep();
  void set_has_mm_compaction_kcompactd_wake();
  void set_has_mm_compaction_migratepages();
  void set_has_mm_compaction_suitable();
  void set_has_mm_compaction_try_to_compact_pages();
  void set_has_mm_compaction_wakeup_kcompactd();
  void set_has_suspend_resume();
  void set_has_sched_wakeup_new();
  void set_has_block_bio_backmerge();
  void set_has_block_bio_bounce();
  void set_has_block_bio_complete();
  void set_has_block_bio_frontmerge();
  void set_has_block_bio_queue();
  void set_has_block_bio_remap();
  void set_has_block_dirty_buffer();
  void set_has_block_getrq();
  void set_has_block_plug();
  void set_has_block_rq_abort();
  void set_has_block_rq_complete();
  void set_has_block_rq_insert();
  void set_has_block_rq_remap();
  void set_has_block_rq_requeue();
  void set_has_block_sleeprq();
  void set_has_block_split();
  void set_has_block_touch_buffer();
  void set_has_block_unplug();
  void set_has_ext4_alloc_da_blocks();
  void set_has_ext4_allocate_blocks();
  void set_has_ext4_allocate_inode();
  void set_has_ext4_begin_ordered_truncate();
  void set_has_ext4_collapse_range();
  void set_has_ext4_da_release_space();
  void set_has_ext4_da_reserve_space();
  void set_has_ext4_da_update_reserve_space();
  void set_has_ext4_da_write_pages();
  void set_has_ext4_da_write_pages_extent();
  void set_has_ext4_direct_io_enter();
  void set_has_ext4_direct_io_exit();
  void set_has_ext4_discard_blocks();
  void set_has_ext4_discard_preallocations();
  void set_has_ext4_drop_inode();
  void set_has_ext4_es_cache_extent();
  void set_has_ext4_es_find_delayed_extent_range_enter();
  void set_has_ext4_es_find_delayed_extent_range_exit();
  void set_has_ext4_es_insert_extent();
  void set_has_ext4_es_lookup_extent_enter();
  void set_has_ext4_es_lookup_extent_exit();
  void set_has_ext4_es_remove_extent();
  void set_has_ext4_es_shrink();
  void set_has_ext4_es_shrink_count();
  void set_has_ext4_es_shrink_scan_enter();
  void set_has_ext4_es_shrink_scan_exit();
  void set_has_ext4_evict_inode();
  void set_has_ext4_ext_convert_to_initialized_enter();
  void set_has_ext4_ext_convert_to_initialized_fastpath();
  void set_has_ext4_ext_handle_unwritten_extents();
  void set_has_ext4_ext_in_cache();
  void set_has_ext4_ext_load_extent();
  void set_has_ext4_ext_map_blocks_enter();
  void set_has_ext4_ext_map_blocks_exit();
  void set_has_ext4_ext_put_in_cache();
  void set_has_ext4_ext_remove_space();
  void set_has_ext4_ext_remove_space_done();
  void set_has_ext4_ext_rm_idx();
  void set_has_ext4_ext_rm_leaf();
  void set_has_ext4_ext_show_extent();
  void set_has_ext4_fallocate_enter();
  void set_has_ext4_fallocate_exit();
  void set_has_ext4_find_delalloc_range();
  void set_has_ext4_forget();
  void set_has_ext4_free_blocks();
  void set_has_ext4_free_inode();
  void set_has_ext4_get_implied_cluster_alloc_exit();
  void set_has_ext4_get_reserved_cluster_alloc();
  void set_has_ext4_ind_map_blocks_enter();
  void set_has_ext4_ind_map_blocks_exit();
  void set_has_ext4_insert_range();
  void set_has_ext4_invalidatepage();
  void set_has_ext4_journal_start();
  void set_has_ext4_journal_start_reserved();
  void set_has_ext4_journalled_invalidatepage();
  void set_has_ext4_journalled_write_end();
  void set_has_ext4_load_inode();
  void set_has_ext4_load_inode_bitmap();
  void set_has_ext4_mark_inode_dirty();
  void set_has_ext4_mb_bitmap_load();
  void set_has_ext4_mb_buddy_bitmap_load();
  void set_has_ext4_mb_discard_preallocations();
  void set_has_ext4_mb_new_group_pa();
  void set_has_ext4_mb_new_inode_pa();
  void set_has_ext4_mb_release_group_pa();
  void set_has_ext4_mb_release_inode_pa();
  void set_has_ext4_mballoc_alloc();
  void set_has_ext4_mballoc_discard();
  void set_has_ext4_mballoc_free();
  void set_has_ext4_mballoc_prealloc();
  void set_has_ext4_other_inode_update_time();
  void set_has_ext4_punch_hole();
  void set_has_ext4_read_block_bitmap_load();
  void set_has_ext4_readpage();
  void set_has_ext4_releasepage();
  void set_has_ext4_remove_blocks();
  void set_has_ext4_request_blocks();
  void set_has_ext4_request_inode();
  void set_has_ext4_sync_fs();
  void set_has_ext4_trim_all_free();
  void set_has_ext4_trim_extent();
  void set_has_ext4_truncate_enter();
  void set_has_ext4_truncate_exit();
  void set_has_ext4_unlink_enter();
  void set_has_ext4_unlink_exit();
  void set_has_ext4_write_begin();
  void set_has_ext4_write_end();
  void set_has_ext4_writepage();
  void set_has_ext4_writepages();
  void set_has_ext4_writepages_result();
  void set_has_ext4_zero_range();
  void set_has_task_newtask();
  void set_has_task_rename();
  void set_has_sched_process_exec();
  void set_has_sched_process_exit();
  void set_has_sched_process_fork();
  void set_has_sched_process_free();
  void set_has_sched_process_hang();
  void set_has_sched_process_wait();
  void set_has_f2fs_do_submit_bio();
  void set_has_f2fs_evict_inode();
  void set_has_f2fs_fallocate();
  void set_has_f2fs_get_data_block();
  void set_has_f2fs_get_victim();
  void set_has_f2fs_iget();
  void set_has_f2fs_iget_exit();
  void set_has_f2fs_new_inode();
  void set_has_f2fs_readpage();
  void set_has_f2fs_reserve_new_block();
  void set_has_f2fs_set_page_dirty();
  void set_has_f2fs_submit_write_page();
  void set_has_f2fs_sync_file_enter();
  void set_has_f2fs_sync_file_exit();
  void set_has_f2fs_sync_fs();
  void set_has_f2fs_truncate();
  void set_has_f2fs_truncate_blocks_enter();
  void set_has_f2fs_truncate_blocks_exit();
  void set_has_f2fs_truncate_data_blocks_range();
  void set_has_f2fs_truncate_inode_blocks_enter();
  void set_has_f2fs_truncate_inode_blocks_exit();
  void set_has_f2fs_truncate_node();
  void set_has_f2fs_truncate_nodes_enter();
  void set_has_f2fs_truncate_nodes_exit();
  void set_has_f2fs_truncate_partial_nodes();
  void set_has_f2fs_unlink_enter();
  void set_has_f2fs_unlink_exit();
  void set_has_f2fs_vm_page_mkwrite();
  void set_has_f2fs_write_begin();
  void set_has_f2fs_write_checkpoint();
  void set_has_f2fs_write_end();
  void set_has_alloc_pages_iommu_end();
  void set_has_alloc_pages_iommu_fail();
  void set_has_alloc_pages_iommu_start();
  void set_has_alloc_pages_sys_end();
  void set_has_alloc_pages_sys_fail();
  void set_has_alloc_pages_sys_start();
  void set_has_dma_alloc_contiguous_retry();
  void set_has_iommu_map_range();
  void set_has_iommu_sec_ptbl_map_range_end();
  void set_has_iommu_sec_ptbl_map_range_start();
  void set_has_ion_alloc_buffer_end();
  void set_has_ion_alloc_buffer_fail();
  void set_has_ion_alloc_buffer_fallback();
  void set_has_ion_alloc_buffer_start();
  void set_has_ion_cp_alloc_retry();
  void set_has_ion_cp_secure_buffer_end();
  void set_has_ion_cp_secure_buffer_start();
  void set_has_ion_prefetching();
  void set_has_ion_secure_cma_add_to_pool_end();
  void set_has_ion_secure_cma_add_to_pool_start();
  void set_has_ion_secure_cma_allocate_end();
  void set_has_ion_secure_cma_allocate_start();
  void set_has_ion_secure_cma_shrink_pool_end();
  void set_has_ion_secure_cma_shrink_pool_start();
  void set_has_kfree();
  void set_has_kmalloc();
  void set_has_kmalloc_node();
  void set_has_kmem_cache_alloc();
  void set_has_kmem_cache_alloc_node();
  void set_has_kmem_cache_free();
  void set_has_migrate_pages_end();
  void set_has_migrate_pages_start();
  void set_has_migrate_retry();
  void set_has_mm_page_alloc();
  void set_has_mm_page_alloc_extfrag();
  void set_has_mm_page_alloc_zone_locked();
  void set_has_mm_page_free();
  void set_has_mm_page_free_batched();
  void set_has_mm_page_pcpu_drain();
  void set_has_rss_stat();
  void set_has_ion_heap_shrink();
  void set_has_ion_heap_grow();
  void set_has_fence_init();
  void set_has_fence_destroy();
  void set_has_fence_enable_signal();
  void set_has_fence_signaled();
  void set_has_clk_enable();
  void set_has_clk_disable();
  void set_has_clk_set_rate();
  void set_has_binder_transaction_alloc_buf();
  void set_has_signal_deliver();
  void set_has_signal_generate();
  void set_has_oom_score_adj_update();
  void set_has_generic();
  void set_has_mm_event_record();
  void set_has_sys_enter();
  void set_has_sys_exit();
  void set_has_zero();
  void set_has_gpu_frequency();
  void set_has_sde_tracing_mark_write();
  void set_has_mark_victim();
  void set_has_ion_stat();
  void set_has_ion_buffer_create();
  void set_has_ion_buffer_destroy();
  void set_has_scm_call_start();
  void set_has_scm_call_end();
  void set_has_gpu_mem_total();
  void set_has_thermal_temperature();
  void set_has_cdev_update();
  void set_has_cpuhp_exit();
  void set_has_cpuhp_multi_enter();
  void set_has_cpuhp_enter();
  void set_has_cpuhp_latency();
  void set_has_fastrpc_dma_stat();
  void set_has_dpu_tracing_mark_write();
  void set_has_g2d_tracing_mark_write();
  void set_has_mali_tracing_mark_write();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  union EventUnion {
    EventUnion() {}
    ::perfetto::protos::PrintFtraceEvent* print_;
    ::perfetto::protos::SchedSwitchFtraceEvent* sched_switch_;
    ::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency_;
    ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits_;
    ::perfetto::protos::CpuIdleFtraceEvent* cpu_idle_;
    ::perfetto::protos::ClockEnableFtraceEvent* clock_enable_;
    ::perfetto::protos::ClockDisableFtraceEvent* clock_disable_;
    ::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate_;
    ::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup_;
    ::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason_;
    ::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug_;
    ::perfetto::protos::SchedWakingFtraceEvent* sched_waking_;
    ::perfetto::protos::IpiEntryFtraceEvent* ipi_entry_;
    ::perfetto::protos::IpiExitFtraceEvent* ipi_exit_;
    ::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise_;
    ::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry_;
    ::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit_;
    ::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise_;
    ::perfetto::protos::I2cReadFtraceEvent* i2c_read_;
    ::perfetto::protos::I2cWriteFtraceEvent* i2c_write_;
    ::perfetto::protos::I2cResultFtraceEvent* i2c_result_;
    ::perfetto::protos::I2cReplyFtraceEvent* i2c_reply_;
    ::perfetto::protos::SmbusReadFtraceEvent* smbus_read_;
    ::perfetto::protos::SmbusWriteFtraceEvent* smbus_write_;
    ::perfetto::protos::SmbusResultFtraceEvent* smbus_result_;
    ::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply_;
    ::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill_;
    ::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry_;
    ::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit_;
    ::perfetto::protos::SyncPtFtraceEvent* sync_pt_;
    ::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline_;
    ::perfetto::protos::SyncWaitFtraceEvent* sync_wait_;
    ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin_;
    ::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end_;
    ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter_;
    ::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit_;
    ::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue_;
    ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin_;
    ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end_;
    ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake_;
    ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep_;
    ::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction_;
    ::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received_;
    ::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority_;
    ::perfetto::protos::BinderLockFtraceEvent* binder_lock_;
    ::perfetto::protos::BinderLockedFtraceEvent* binder_locked_;
    ::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock_;
    ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work_;
    ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end_;
    ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start_;
    ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work_;
    ::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable_;
    ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete_;
    ::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable_;
    ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete_;
    ::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay_;
    ::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage_;
    ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete_;
    ::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task_;
    ::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir_;
    ::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount_;
    ::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir_;
    ::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks_;
    ::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root_;
    ::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release_;
    ::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename_;
    ::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root_;
    ::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff_;
    ::perfetto::protos::MdpCommitFtraceEvent* mdp_commit_;
    ::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot_;
    ::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change_;
    ::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write_;
    ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done_;
    ::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw_;
    ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts_;
    ::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set_;
    ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done_;
    ::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc_;
    ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts_;
    ::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter_;
    ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw_;
    ::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update_;
    ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels_;
    ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done_;
    ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong_;
    ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc_;
    ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus_;
    ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context_;
    ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache_;
    ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache_;
    ::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin_;
    ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction_;
    ::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred_;
    ::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset_;
    ::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end_;
    ::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished_;
    ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages_;
    ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages_;
    ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep_;
    ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake_;
    ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages_;
    ::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable_;
    ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages_;
    ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd_;
    ::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume_;
    ::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new_;
    ::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge_;
    ::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce_;
    ::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete_;
    ::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge_;
    ::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue_;
    ::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap_;
    ::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer_;
    ::perfetto::protos::BlockGetrqFtraceEvent* block_getrq_;
    ::perfetto::protos::BlockPlugFtraceEvent* block_plug_;
    ::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort_;
    ::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete_;
    ::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert_;
    ::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap_;
    ::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue_;
    ::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq_;
    ::perfetto::protos::BlockSplitFtraceEvent* block_split_;
    ::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer_;
    ::perfetto::protos::BlockUnplugFtraceEvent* block_unplug_;
    ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks_;
    ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks_;
    ::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode_;
    ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate_;
    ::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range_;
    ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space_;
    ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space_;
    ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space_;
    ::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages_;
    ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent_;
    ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter_;
    ::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit_;
    ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks_;
    ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations_;
    ::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode_;
    ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent_;
    ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter_;
    ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit_;
    ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent_;
    ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter_;
    ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit_;
    ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent_;
    ::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink_;
    ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count_;
    ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter_;
    ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit_;
    ::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode_;
    ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter_;
    ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath_;
    ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents_;
    ::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache_;
    ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent_;
    ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter_;
    ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit_;
    ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache_;
    ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space_;
    ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done_;
    ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx_;
    ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf_;
    ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent_;
    ::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter_;
    ::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit_;
    ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range_;
    ::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget_;
    ::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks_;
    ::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode_;
    ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit_;
    ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc_;
    ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter_;
    ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit_;
    ::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range_;
    ::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage_;
    ::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start_;
    ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved_;
    ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage_;
    ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end_;
    ::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode_;
    ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap_;
    ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty_;
    ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load_;
    ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load_;
    ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations_;
    ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa_;
    ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa_;
    ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa_;
    ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa_;
    ::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc_;
    ::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard_;
    ::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free_;
    ::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc_;
    ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time_;
    ::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole_;
    ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load_;
    ::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage_;
    ::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage_;
    ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks_;
    ::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks_;
    ::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode_;
    ::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs_;
    ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free_;
    ::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent_;
    ::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter_;
    ::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit_;
    ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter_;
    ::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit_;
    ::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin_;
    ::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end_;
    ::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage_;
    ::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages_;
    ::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result_;
    ::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range_;
    ::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask_;
    ::perfetto::protos::TaskRenameFtraceEvent* task_rename_;
    ::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec_;
    ::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit_;
    ::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork_;
    ::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free_;
    ::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang_;
    ::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait_;
    ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio_;
    ::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode_;
    ::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate_;
    ::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block_;
    ::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim_;
    ::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget_;
    ::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit_;
    ::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode_;
    ::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage_;
    ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block_;
    ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty_;
    ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page_;
    ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter_;
    ::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit_;
    ::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs_;
    ::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate_;
    ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter_;
    ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit_;
    ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range_;
    ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter_;
    ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit_;
    ::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node_;
    ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter_;
    ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit_;
    ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes_;
    ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter_;
    ::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit_;
    ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite_;
    ::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin_;
    ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint_;
    ::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end_;
    ::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end_;
    ::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail_;
    ::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start_;
    ::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end_;
    ::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail_;
    ::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start_;
    ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry_;
    ::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range_;
    ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end_;
    ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start_;
    ::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end_;
    ::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail_;
    ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback_;
    ::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start_;
    ::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry_;
    ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end_;
    ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start_;
    ::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching_;
    ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end_;
    ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start_;
    ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end_;
    ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start_;
    ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end_;
    ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start_;
    ::perfetto::protos::KfreeFtraceEvent* kfree_;
    ::perfetto::protos::KmallocFtraceEvent* kmalloc_;
    ::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node_;
    ::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc_;
    ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node_;
    ::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free_;
    ::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end_;
    ::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start_;
    ::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry_;
    ::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc_;
    ::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag_;
    ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked_;
    ::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free_;
    ::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched_;
    ::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain_;
    ::perfetto::protos::RssStatFtraceEvent* rss_stat_;
    ::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink_;
    ::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow_;
    ::perfetto::protos::FenceInitFtraceEvent* fence_init_;
    ::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy_;
    ::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal_;
    ::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled_;
    ::perfetto::protos::ClkEnableFtraceEvent* clk_enable_;
    ::perfetto::protos::ClkDisableFtraceEvent* clk_disable_;
    ::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate_;
    ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf_;
    ::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver_;
    ::perfetto::protos::SignalGenerateFtraceEvent* signal_generate_;
    ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update_;
    ::perfetto::protos::GenericFtraceEvent* generic_;
    ::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record_;
    ::perfetto::protos::SysEnterFtraceEvent* sys_enter_;
    ::perfetto::protos::SysExitFtraceEvent* sys_exit_;
    ::perfetto::protos::ZeroFtraceEvent* zero_;
    ::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency_;
    ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write_;
    ::perfetto::protos::MarkVictimFtraceEvent* mark_victim_;
    ::perfetto::protos::IonStatFtraceEvent* ion_stat_;
    ::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create_;
    ::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy_;
    ::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start_;
    ::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end_;
    ::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total_;
    ::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature_;
    ::perfetto::protos::CdevUpdateFtraceEvent* cdev_update_;
    ::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit_;
    ::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter_;
    ::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter_;
    ::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency_;
    ::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat_;
    ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write_;
    ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write_;
    ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtraceEvent

// optional uint64 timestamp = 1;
inline bool FtraceEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceEvent::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.timestamp)
  return timestamp_;
}
inline void FtraceEvent::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEvent.timestamp)
}

// optional uint32 pid = 2;
inline bool FtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FtraceEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.pid)
  return pid_;
}
inline void FtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEvent.pid)
}

// optional .perfetto.protos.PrintFtraceEvent print = 3;
inline bool FtraceEvent::has_print() const {
  return event_case() == kPrint;
}
inline void FtraceEvent::set_has_print() {
  _oneof_case_[0] = kPrint;
}
inline ::perfetto::protos::PrintFtraceEvent* FtraceEvent::release_print() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.print)
  if (has_print()) {
    clear_has_event();
      ::perfetto::protos::PrintFtraceEvent* temp = event_.print_;
    event_.print_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PrintFtraceEvent& FtraceEvent::print() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.print)
  return has_print()
      ? *event_.print_
      : *reinterpret_cast< ::perfetto::protos::PrintFtraceEvent*>(&::perfetto::protos::_PrintFtraceEvent_default_instance_);
}
inline ::perfetto::protos::PrintFtraceEvent* FtraceEvent::mutable_print() {
  if (!has_print()) {
    clear_event();
    set_has_print();
    event_.print_ = CreateMaybeMessage< ::perfetto::protos::PrintFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.print)
  return event_.print_;
}

// optional .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
inline bool FtraceEvent::has_sched_switch() const {
  return event_case() == kSchedSwitch;
}
inline void FtraceEvent::set_has_sched_switch() {
  _oneof_case_[0] = kSchedSwitch;
}
inline ::perfetto::protos::SchedSwitchFtraceEvent* FtraceEvent::release_sched_switch() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_switch)
  if (has_sched_switch()) {
    clear_has_event();
      ::perfetto::protos::SchedSwitchFtraceEvent* temp = event_.sched_switch_;
    event_.sched_switch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedSwitchFtraceEvent& FtraceEvent::sched_switch() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_switch)
  return has_sched_switch()
      ? *event_.sched_switch_
      : *reinterpret_cast< ::perfetto::protos::SchedSwitchFtraceEvent*>(&::perfetto::protos::_SchedSwitchFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedSwitchFtraceEvent* FtraceEvent::mutable_sched_switch() {
  if (!has_sched_switch()) {
    clear_event();
    set_has_sched_switch();
    event_.sched_switch_ = CreateMaybeMessage< ::perfetto::protos::SchedSwitchFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_switch)
  return event_.sched_switch_;
}

// optional .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
inline bool FtraceEvent::has_cpu_frequency() const {
  return event_case() == kCpuFrequency;
}
inline void FtraceEvent::set_has_cpu_frequency() {
  _oneof_case_[0] = kCpuFrequency;
}
inline ::perfetto::protos::CpuFrequencyFtraceEvent* FtraceEvent::release_cpu_frequency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpu_frequency)
  if (has_cpu_frequency()) {
    clear_has_event();
      ::perfetto::protos::CpuFrequencyFtraceEvent* temp = event_.cpu_frequency_;
    event_.cpu_frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuFrequencyFtraceEvent& FtraceEvent::cpu_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpu_frequency)
  return has_cpu_frequency()
      ? *event_.cpu_frequency_
      : *reinterpret_cast< ::perfetto::protos::CpuFrequencyFtraceEvent*>(&::perfetto::protos::_CpuFrequencyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuFrequencyFtraceEvent* FtraceEvent::mutable_cpu_frequency() {
  if (!has_cpu_frequency()) {
    clear_event();
    set_has_cpu_frequency();
    event_.cpu_frequency_ = CreateMaybeMessage< ::perfetto::protos::CpuFrequencyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpu_frequency)
  return event_.cpu_frequency_;
}

// optional .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
inline bool FtraceEvent::has_cpu_frequency_limits() const {
  return event_case() == kCpuFrequencyLimits;
}
inline void FtraceEvent::set_has_cpu_frequency_limits() {
  _oneof_case_[0] = kCpuFrequencyLimits;
}
inline ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* FtraceEvent::release_cpu_frequency_limits() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  if (has_cpu_frequency_limits()) {
    clear_has_event();
      ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* temp = event_.cpu_frequency_limits_;
    event_.cpu_frequency_limits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& FtraceEvent::cpu_frequency_limits() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  return has_cpu_frequency_limits()
      ? *event_.cpu_frequency_limits_
      : *reinterpret_cast< ::perfetto::protos::CpuFrequencyLimitsFtraceEvent*>(&::perfetto::protos::_CpuFrequencyLimitsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* FtraceEvent::mutable_cpu_frequency_limits() {
  if (!has_cpu_frequency_limits()) {
    clear_event();
    set_has_cpu_frequency_limits();
    event_.cpu_frequency_limits_ = CreateMaybeMessage< ::perfetto::protos::CpuFrequencyLimitsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  return event_.cpu_frequency_limits_;
}

// optional .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
inline bool FtraceEvent::has_cpu_idle() const {
  return event_case() == kCpuIdle;
}
inline void FtraceEvent::set_has_cpu_idle() {
  _oneof_case_[0] = kCpuIdle;
}
inline ::perfetto::protos::CpuIdleFtraceEvent* FtraceEvent::release_cpu_idle() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpu_idle)
  if (has_cpu_idle()) {
    clear_has_event();
      ::perfetto::protos::CpuIdleFtraceEvent* temp = event_.cpu_idle_;
    event_.cpu_idle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuIdleFtraceEvent& FtraceEvent::cpu_idle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpu_idle)
  return has_cpu_idle()
      ? *event_.cpu_idle_
      : *reinterpret_cast< ::perfetto::protos::CpuIdleFtraceEvent*>(&::perfetto::protos::_CpuIdleFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuIdleFtraceEvent* FtraceEvent::mutable_cpu_idle() {
  if (!has_cpu_idle()) {
    clear_event();
    set_has_cpu_idle();
    event_.cpu_idle_ = CreateMaybeMessage< ::perfetto::protos::CpuIdleFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpu_idle)
  return event_.cpu_idle_;
}

// optional .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
inline bool FtraceEvent::has_clock_enable() const {
  return event_case() == kClockEnable;
}
inline void FtraceEvent::set_has_clock_enable() {
  _oneof_case_[0] = kClockEnable;
}
inline ::perfetto::protos::ClockEnableFtraceEvent* FtraceEvent::release_clock_enable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clock_enable)
  if (has_clock_enable()) {
    clear_has_event();
      ::perfetto::protos::ClockEnableFtraceEvent* temp = event_.clock_enable_;
    event_.clock_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockEnableFtraceEvent& FtraceEvent::clock_enable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clock_enable)
  return has_clock_enable()
      ? *event_.clock_enable_
      : *reinterpret_cast< ::perfetto::protos::ClockEnableFtraceEvent*>(&::perfetto::protos::_ClockEnableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ClockEnableFtraceEvent* FtraceEvent::mutable_clock_enable() {
  if (!has_clock_enable()) {
    clear_event();
    set_has_clock_enable();
    event_.clock_enable_ = CreateMaybeMessage< ::perfetto::protos::ClockEnableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clock_enable)
  return event_.clock_enable_;
}

// optional .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
inline bool FtraceEvent::has_clock_disable() const {
  return event_case() == kClockDisable;
}
inline void FtraceEvent::set_has_clock_disable() {
  _oneof_case_[0] = kClockDisable;
}
inline ::perfetto::protos::ClockDisableFtraceEvent* FtraceEvent::release_clock_disable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clock_disable)
  if (has_clock_disable()) {
    clear_has_event();
      ::perfetto::protos::ClockDisableFtraceEvent* temp = event_.clock_disable_;
    event_.clock_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockDisableFtraceEvent& FtraceEvent::clock_disable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clock_disable)
  return has_clock_disable()
      ? *event_.clock_disable_
      : *reinterpret_cast< ::perfetto::protos::ClockDisableFtraceEvent*>(&::perfetto::protos::_ClockDisableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ClockDisableFtraceEvent* FtraceEvent::mutable_clock_disable() {
  if (!has_clock_disable()) {
    clear_event();
    set_has_clock_disable();
    event_.clock_disable_ = CreateMaybeMessage< ::perfetto::protos::ClockDisableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clock_disable)
  return event_.clock_disable_;
}

// optional .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
inline bool FtraceEvent::has_clock_set_rate() const {
  return event_case() == kClockSetRate;
}
inline void FtraceEvent::set_has_clock_set_rate() {
  _oneof_case_[0] = kClockSetRate;
}
inline ::perfetto::protos::ClockSetRateFtraceEvent* FtraceEvent::release_clock_set_rate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clock_set_rate)
  if (has_clock_set_rate()) {
    clear_has_event();
      ::perfetto::protos::ClockSetRateFtraceEvent* temp = event_.clock_set_rate_;
    event_.clock_set_rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockSetRateFtraceEvent& FtraceEvent::clock_set_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clock_set_rate)
  return has_clock_set_rate()
      ? *event_.clock_set_rate_
      : *reinterpret_cast< ::perfetto::protos::ClockSetRateFtraceEvent*>(&::perfetto::protos::_ClockSetRateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ClockSetRateFtraceEvent* FtraceEvent::mutable_clock_set_rate() {
  if (!has_clock_set_rate()) {
    clear_event();
    set_has_clock_set_rate();
    event_.clock_set_rate_ = CreateMaybeMessage< ::perfetto::protos::ClockSetRateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clock_set_rate)
  return event_.clock_set_rate_;
}

// optional .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
inline bool FtraceEvent::has_sched_wakeup() const {
  return event_case() == kSchedWakeup;
}
inline void FtraceEvent::set_has_sched_wakeup() {
  _oneof_case_[0] = kSchedWakeup;
}
inline ::perfetto::protos::SchedWakeupFtraceEvent* FtraceEvent::release_sched_wakeup() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_wakeup)
  if (has_sched_wakeup()) {
    clear_has_event();
      ::perfetto::protos::SchedWakeupFtraceEvent* temp = event_.sched_wakeup_;
    event_.sched_wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedWakeupFtraceEvent& FtraceEvent::sched_wakeup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_wakeup)
  return has_sched_wakeup()
      ? *event_.sched_wakeup_
      : *reinterpret_cast< ::perfetto::protos::SchedWakeupFtraceEvent*>(&::perfetto::protos::_SchedWakeupFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedWakeupFtraceEvent* FtraceEvent::mutable_sched_wakeup() {
  if (!has_sched_wakeup()) {
    clear_event();
    set_has_sched_wakeup();
    event_.sched_wakeup_ = CreateMaybeMessage< ::perfetto::protos::SchedWakeupFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_wakeup)
  return event_.sched_wakeup_;
}

// optional .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
inline bool FtraceEvent::has_sched_blocked_reason() const {
  return event_case() == kSchedBlockedReason;
}
inline void FtraceEvent::set_has_sched_blocked_reason() {
  _oneof_case_[0] = kSchedBlockedReason;
}
inline ::perfetto::protos::SchedBlockedReasonFtraceEvent* FtraceEvent::release_sched_blocked_reason() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_blocked_reason)
  if (has_sched_blocked_reason()) {
    clear_has_event();
      ::perfetto::protos::SchedBlockedReasonFtraceEvent* temp = event_.sched_blocked_reason_;
    event_.sched_blocked_reason_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedBlockedReasonFtraceEvent& FtraceEvent::sched_blocked_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_blocked_reason)
  return has_sched_blocked_reason()
      ? *event_.sched_blocked_reason_
      : *reinterpret_cast< ::perfetto::protos::SchedBlockedReasonFtraceEvent*>(&::perfetto::protos::_SchedBlockedReasonFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedBlockedReasonFtraceEvent* FtraceEvent::mutable_sched_blocked_reason() {
  if (!has_sched_blocked_reason()) {
    clear_event();
    set_has_sched_blocked_reason();
    event_.sched_blocked_reason_ = CreateMaybeMessage< ::perfetto::protos::SchedBlockedReasonFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_blocked_reason)
  return event_.sched_blocked_reason_;
}

// optional .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
inline bool FtraceEvent::has_sched_cpu_hotplug() const {
  return event_case() == kSchedCpuHotplug;
}
inline void FtraceEvent::set_has_sched_cpu_hotplug() {
  _oneof_case_[0] = kSchedCpuHotplug;
}
inline ::perfetto::protos::SchedCpuHotplugFtraceEvent* FtraceEvent::release_sched_cpu_hotplug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  if (has_sched_cpu_hotplug()) {
    clear_has_event();
      ::perfetto::protos::SchedCpuHotplugFtraceEvent* temp = event_.sched_cpu_hotplug_;
    event_.sched_cpu_hotplug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedCpuHotplugFtraceEvent& FtraceEvent::sched_cpu_hotplug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  return has_sched_cpu_hotplug()
      ? *event_.sched_cpu_hotplug_
      : *reinterpret_cast< ::perfetto::protos::SchedCpuHotplugFtraceEvent*>(&::perfetto::protos::_SchedCpuHotplugFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedCpuHotplugFtraceEvent* FtraceEvent::mutable_sched_cpu_hotplug() {
  if (!has_sched_cpu_hotplug()) {
    clear_event();
    set_has_sched_cpu_hotplug();
    event_.sched_cpu_hotplug_ = CreateMaybeMessage< ::perfetto::protos::SchedCpuHotplugFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  return event_.sched_cpu_hotplug_;
}

// optional .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
inline bool FtraceEvent::has_sched_waking() const {
  return event_case() == kSchedWaking;
}
inline void FtraceEvent::set_has_sched_waking() {
  _oneof_case_[0] = kSchedWaking;
}
inline ::perfetto::protos::SchedWakingFtraceEvent* FtraceEvent::release_sched_waking() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_waking)
  if (has_sched_waking()) {
    clear_has_event();
      ::perfetto::protos::SchedWakingFtraceEvent* temp = event_.sched_waking_;
    event_.sched_waking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedWakingFtraceEvent& FtraceEvent::sched_waking() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_waking)
  return has_sched_waking()
      ? *event_.sched_waking_
      : *reinterpret_cast< ::perfetto::protos::SchedWakingFtraceEvent*>(&::perfetto::protos::_SchedWakingFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedWakingFtraceEvent* FtraceEvent::mutable_sched_waking() {
  if (!has_sched_waking()) {
    clear_event();
    set_has_sched_waking();
    event_.sched_waking_ = CreateMaybeMessage< ::perfetto::protos::SchedWakingFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_waking)
  return event_.sched_waking_;
}

// optional .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
inline bool FtraceEvent::has_ipi_entry() const {
  return event_case() == kIpiEntry;
}
inline void FtraceEvent::set_has_ipi_entry() {
  _oneof_case_[0] = kIpiEntry;
}
inline ::perfetto::protos::IpiEntryFtraceEvent* FtraceEvent::release_ipi_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ipi_entry)
  if (has_ipi_entry()) {
    clear_has_event();
      ::perfetto::protos::IpiEntryFtraceEvent* temp = event_.ipi_entry_;
    event_.ipi_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IpiEntryFtraceEvent& FtraceEvent::ipi_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ipi_entry)
  return has_ipi_entry()
      ? *event_.ipi_entry_
      : *reinterpret_cast< ::perfetto::protos::IpiEntryFtraceEvent*>(&::perfetto::protos::_IpiEntryFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IpiEntryFtraceEvent* FtraceEvent::mutable_ipi_entry() {
  if (!has_ipi_entry()) {
    clear_event();
    set_has_ipi_entry();
    event_.ipi_entry_ = CreateMaybeMessage< ::perfetto::protos::IpiEntryFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ipi_entry)
  return event_.ipi_entry_;
}

// optional .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
inline bool FtraceEvent::has_ipi_exit() const {
  return event_case() == kIpiExit;
}
inline void FtraceEvent::set_has_ipi_exit() {
  _oneof_case_[0] = kIpiExit;
}
inline ::perfetto::protos::IpiExitFtraceEvent* FtraceEvent::release_ipi_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ipi_exit)
  if (has_ipi_exit()) {
    clear_has_event();
      ::perfetto::protos::IpiExitFtraceEvent* temp = event_.ipi_exit_;
    event_.ipi_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IpiExitFtraceEvent& FtraceEvent::ipi_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ipi_exit)
  return has_ipi_exit()
      ? *event_.ipi_exit_
      : *reinterpret_cast< ::perfetto::protos::IpiExitFtraceEvent*>(&::perfetto::protos::_IpiExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IpiExitFtraceEvent* FtraceEvent::mutable_ipi_exit() {
  if (!has_ipi_exit()) {
    clear_event();
    set_has_ipi_exit();
    event_.ipi_exit_ = CreateMaybeMessage< ::perfetto::protos::IpiExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ipi_exit)
  return event_.ipi_exit_;
}

// optional .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
inline bool FtraceEvent::has_ipi_raise() const {
  return event_case() == kIpiRaise;
}
inline void FtraceEvent::set_has_ipi_raise() {
  _oneof_case_[0] = kIpiRaise;
}
inline ::perfetto::protos::IpiRaiseFtraceEvent* FtraceEvent::release_ipi_raise() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ipi_raise)
  if (has_ipi_raise()) {
    clear_has_event();
      ::perfetto::protos::IpiRaiseFtraceEvent* temp = event_.ipi_raise_;
    event_.ipi_raise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IpiRaiseFtraceEvent& FtraceEvent::ipi_raise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ipi_raise)
  return has_ipi_raise()
      ? *event_.ipi_raise_
      : *reinterpret_cast< ::perfetto::protos::IpiRaiseFtraceEvent*>(&::perfetto::protos::_IpiRaiseFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IpiRaiseFtraceEvent* FtraceEvent::mutable_ipi_raise() {
  if (!has_ipi_raise()) {
    clear_event();
    set_has_ipi_raise();
    event_.ipi_raise_ = CreateMaybeMessage< ::perfetto::protos::IpiRaiseFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ipi_raise)
  return event_.ipi_raise_;
}

// optional .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
inline bool FtraceEvent::has_softirq_entry() const {
  return event_case() == kSoftirqEntry;
}
inline void FtraceEvent::set_has_softirq_entry() {
  _oneof_case_[0] = kSoftirqEntry;
}
inline ::perfetto::protos::SoftirqEntryFtraceEvent* FtraceEvent::release_softirq_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.softirq_entry)
  if (has_softirq_entry()) {
    clear_has_event();
      ::perfetto::protos::SoftirqEntryFtraceEvent* temp = event_.softirq_entry_;
    event_.softirq_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SoftirqEntryFtraceEvent& FtraceEvent::softirq_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.softirq_entry)
  return has_softirq_entry()
      ? *event_.softirq_entry_
      : *reinterpret_cast< ::perfetto::protos::SoftirqEntryFtraceEvent*>(&::perfetto::protos::_SoftirqEntryFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SoftirqEntryFtraceEvent* FtraceEvent::mutable_softirq_entry() {
  if (!has_softirq_entry()) {
    clear_event();
    set_has_softirq_entry();
    event_.softirq_entry_ = CreateMaybeMessage< ::perfetto::protos::SoftirqEntryFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.softirq_entry)
  return event_.softirq_entry_;
}

// optional .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
inline bool FtraceEvent::has_softirq_exit() const {
  return event_case() == kSoftirqExit;
}
inline void FtraceEvent::set_has_softirq_exit() {
  _oneof_case_[0] = kSoftirqExit;
}
inline ::perfetto::protos::SoftirqExitFtraceEvent* FtraceEvent::release_softirq_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.softirq_exit)
  if (has_softirq_exit()) {
    clear_has_event();
      ::perfetto::protos::SoftirqExitFtraceEvent* temp = event_.softirq_exit_;
    event_.softirq_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SoftirqExitFtraceEvent& FtraceEvent::softirq_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.softirq_exit)
  return has_softirq_exit()
      ? *event_.softirq_exit_
      : *reinterpret_cast< ::perfetto::protos::SoftirqExitFtraceEvent*>(&::perfetto::protos::_SoftirqExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SoftirqExitFtraceEvent* FtraceEvent::mutable_softirq_exit() {
  if (!has_softirq_exit()) {
    clear_event();
    set_has_softirq_exit();
    event_.softirq_exit_ = CreateMaybeMessage< ::perfetto::protos::SoftirqExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.softirq_exit)
  return event_.softirq_exit_;
}

// optional .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
inline bool FtraceEvent::has_softirq_raise() const {
  return event_case() == kSoftirqRaise;
}
inline void FtraceEvent::set_has_softirq_raise() {
  _oneof_case_[0] = kSoftirqRaise;
}
inline ::perfetto::protos::SoftirqRaiseFtraceEvent* FtraceEvent::release_softirq_raise() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.softirq_raise)
  if (has_softirq_raise()) {
    clear_has_event();
      ::perfetto::protos::SoftirqRaiseFtraceEvent* temp = event_.softirq_raise_;
    event_.softirq_raise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SoftirqRaiseFtraceEvent& FtraceEvent::softirq_raise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.softirq_raise)
  return has_softirq_raise()
      ? *event_.softirq_raise_
      : *reinterpret_cast< ::perfetto::protos::SoftirqRaiseFtraceEvent*>(&::perfetto::protos::_SoftirqRaiseFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SoftirqRaiseFtraceEvent* FtraceEvent::mutable_softirq_raise() {
  if (!has_softirq_raise()) {
    clear_event();
    set_has_softirq_raise();
    event_.softirq_raise_ = CreateMaybeMessage< ::perfetto::protos::SoftirqRaiseFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.softirq_raise)
  return event_.softirq_raise_;
}

// optional .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
inline bool FtraceEvent::has_i2c_read() const {
  return event_case() == kI2CRead;
}
inline void FtraceEvent::set_has_i2c_read() {
  _oneof_case_[0] = kI2CRead;
}
inline ::perfetto::protos::I2cReadFtraceEvent* FtraceEvent::release_i2c_read() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_read)
  if (has_i2c_read()) {
    clear_has_event();
      ::perfetto::protos::I2cReadFtraceEvent* temp = event_.i2c_read_;
    event_.i2c_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cReadFtraceEvent& FtraceEvent::i2c_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_read)
  return has_i2c_read()
      ? *event_.i2c_read_
      : *reinterpret_cast< ::perfetto::protos::I2cReadFtraceEvent*>(&::perfetto::protos::_I2cReadFtraceEvent_default_instance_);
}
inline ::perfetto::protos::I2cReadFtraceEvent* FtraceEvent::mutable_i2c_read() {
  if (!has_i2c_read()) {
    clear_event();
    set_has_i2c_read();
    event_.i2c_read_ = CreateMaybeMessage< ::perfetto::protos::I2cReadFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_read)
  return event_.i2c_read_;
}

// optional .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
inline bool FtraceEvent::has_i2c_write() const {
  return event_case() == kI2CWrite;
}
inline void FtraceEvent::set_has_i2c_write() {
  _oneof_case_[0] = kI2CWrite;
}
inline ::perfetto::protos::I2cWriteFtraceEvent* FtraceEvent::release_i2c_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_write)
  if (has_i2c_write()) {
    clear_has_event();
      ::perfetto::protos::I2cWriteFtraceEvent* temp = event_.i2c_write_;
    event_.i2c_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cWriteFtraceEvent& FtraceEvent::i2c_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_write)
  return has_i2c_write()
      ? *event_.i2c_write_
      : *reinterpret_cast< ::perfetto::protos::I2cWriteFtraceEvent*>(&::perfetto::protos::_I2cWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::I2cWriteFtraceEvent* FtraceEvent::mutable_i2c_write() {
  if (!has_i2c_write()) {
    clear_event();
    set_has_i2c_write();
    event_.i2c_write_ = CreateMaybeMessage< ::perfetto::protos::I2cWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_write)
  return event_.i2c_write_;
}

// optional .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
inline bool FtraceEvent::has_i2c_result() const {
  return event_case() == kI2CResult;
}
inline void FtraceEvent::set_has_i2c_result() {
  _oneof_case_[0] = kI2CResult;
}
inline ::perfetto::protos::I2cResultFtraceEvent* FtraceEvent::release_i2c_result() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_result)
  if (has_i2c_result()) {
    clear_has_event();
      ::perfetto::protos::I2cResultFtraceEvent* temp = event_.i2c_result_;
    event_.i2c_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cResultFtraceEvent& FtraceEvent::i2c_result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_result)
  return has_i2c_result()
      ? *event_.i2c_result_
      : *reinterpret_cast< ::perfetto::protos::I2cResultFtraceEvent*>(&::perfetto::protos::_I2cResultFtraceEvent_default_instance_);
}
inline ::perfetto::protos::I2cResultFtraceEvent* FtraceEvent::mutable_i2c_result() {
  if (!has_i2c_result()) {
    clear_event();
    set_has_i2c_result();
    event_.i2c_result_ = CreateMaybeMessage< ::perfetto::protos::I2cResultFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_result)
  return event_.i2c_result_;
}

// optional .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
inline bool FtraceEvent::has_i2c_reply() const {
  return event_case() == kI2CReply;
}
inline void FtraceEvent::set_has_i2c_reply() {
  _oneof_case_[0] = kI2CReply;
}
inline ::perfetto::protos::I2cReplyFtraceEvent* FtraceEvent::release_i2c_reply() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_reply)
  if (has_i2c_reply()) {
    clear_has_event();
      ::perfetto::protos::I2cReplyFtraceEvent* temp = event_.i2c_reply_;
    event_.i2c_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cReplyFtraceEvent& FtraceEvent::i2c_reply() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_reply)
  return has_i2c_reply()
      ? *event_.i2c_reply_
      : *reinterpret_cast< ::perfetto::protos::I2cReplyFtraceEvent*>(&::perfetto::protos::_I2cReplyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::I2cReplyFtraceEvent* FtraceEvent::mutable_i2c_reply() {
  if (!has_i2c_reply()) {
    clear_event();
    set_has_i2c_reply();
    event_.i2c_reply_ = CreateMaybeMessage< ::perfetto::protos::I2cReplyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_reply)
  return event_.i2c_reply_;
}

// optional .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
inline bool FtraceEvent::has_smbus_read() const {
  return event_case() == kSmbusRead;
}
inline void FtraceEvent::set_has_smbus_read() {
  _oneof_case_[0] = kSmbusRead;
}
inline ::perfetto::protos::SmbusReadFtraceEvent* FtraceEvent::release_smbus_read() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_read)
  if (has_smbus_read()) {
    clear_has_event();
      ::perfetto::protos::SmbusReadFtraceEvent* temp = event_.smbus_read_;
    event_.smbus_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusReadFtraceEvent& FtraceEvent::smbus_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_read)
  return has_smbus_read()
      ? *event_.smbus_read_
      : *reinterpret_cast< ::perfetto::protos::SmbusReadFtraceEvent*>(&::perfetto::protos::_SmbusReadFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SmbusReadFtraceEvent* FtraceEvent::mutable_smbus_read() {
  if (!has_smbus_read()) {
    clear_event();
    set_has_smbus_read();
    event_.smbus_read_ = CreateMaybeMessage< ::perfetto::protos::SmbusReadFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_read)
  return event_.smbus_read_;
}

// optional .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
inline bool FtraceEvent::has_smbus_write() const {
  return event_case() == kSmbusWrite;
}
inline void FtraceEvent::set_has_smbus_write() {
  _oneof_case_[0] = kSmbusWrite;
}
inline ::perfetto::protos::SmbusWriteFtraceEvent* FtraceEvent::release_smbus_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_write)
  if (has_smbus_write()) {
    clear_has_event();
      ::perfetto::protos::SmbusWriteFtraceEvent* temp = event_.smbus_write_;
    event_.smbus_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusWriteFtraceEvent& FtraceEvent::smbus_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_write)
  return has_smbus_write()
      ? *event_.smbus_write_
      : *reinterpret_cast< ::perfetto::protos::SmbusWriteFtraceEvent*>(&::perfetto::protos::_SmbusWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SmbusWriteFtraceEvent* FtraceEvent::mutable_smbus_write() {
  if (!has_smbus_write()) {
    clear_event();
    set_has_smbus_write();
    event_.smbus_write_ = CreateMaybeMessage< ::perfetto::protos::SmbusWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_write)
  return event_.smbus_write_;
}

// optional .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
inline bool FtraceEvent::has_smbus_result() const {
  return event_case() == kSmbusResult;
}
inline void FtraceEvent::set_has_smbus_result() {
  _oneof_case_[0] = kSmbusResult;
}
inline ::perfetto::protos::SmbusResultFtraceEvent* FtraceEvent::release_smbus_result() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_result)
  if (has_smbus_result()) {
    clear_has_event();
      ::perfetto::protos::SmbusResultFtraceEvent* temp = event_.smbus_result_;
    event_.smbus_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusResultFtraceEvent& FtraceEvent::smbus_result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_result)
  return has_smbus_result()
      ? *event_.smbus_result_
      : *reinterpret_cast< ::perfetto::protos::SmbusResultFtraceEvent*>(&::perfetto::protos::_SmbusResultFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SmbusResultFtraceEvent* FtraceEvent::mutable_smbus_result() {
  if (!has_smbus_result()) {
    clear_event();
    set_has_smbus_result();
    event_.smbus_result_ = CreateMaybeMessage< ::perfetto::protos::SmbusResultFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_result)
  return event_.smbus_result_;
}

// optional .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
inline bool FtraceEvent::has_smbus_reply() const {
  return event_case() == kSmbusReply;
}
inline void FtraceEvent::set_has_smbus_reply() {
  _oneof_case_[0] = kSmbusReply;
}
inline ::perfetto::protos::SmbusReplyFtraceEvent* FtraceEvent::release_smbus_reply() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_reply)
  if (has_smbus_reply()) {
    clear_has_event();
      ::perfetto::protos::SmbusReplyFtraceEvent* temp = event_.smbus_reply_;
    event_.smbus_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusReplyFtraceEvent& FtraceEvent::smbus_reply() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_reply)
  return has_smbus_reply()
      ? *event_.smbus_reply_
      : *reinterpret_cast< ::perfetto::protos::SmbusReplyFtraceEvent*>(&::perfetto::protos::_SmbusReplyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SmbusReplyFtraceEvent* FtraceEvent::mutable_smbus_reply() {
  if (!has_smbus_reply()) {
    clear_event();
    set_has_smbus_reply();
    event_.smbus_reply_ = CreateMaybeMessage< ::perfetto::protos::SmbusReplyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_reply)
  return event_.smbus_reply_;
}

// optional .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
inline bool FtraceEvent::has_lowmemory_kill() const {
  return event_case() == kLowmemoryKill;
}
inline void FtraceEvent::set_has_lowmemory_kill() {
  _oneof_case_[0] = kLowmemoryKill;
}
inline ::perfetto::protos::LowmemoryKillFtraceEvent* FtraceEvent::release_lowmemory_kill() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.lowmemory_kill)
  if (has_lowmemory_kill()) {
    clear_has_event();
      ::perfetto::protos::LowmemoryKillFtraceEvent* temp = event_.lowmemory_kill_;
    event_.lowmemory_kill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::LowmemoryKillFtraceEvent& FtraceEvent::lowmemory_kill() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.lowmemory_kill)
  return has_lowmemory_kill()
      ? *event_.lowmemory_kill_
      : *reinterpret_cast< ::perfetto::protos::LowmemoryKillFtraceEvent*>(&::perfetto::protos::_LowmemoryKillFtraceEvent_default_instance_);
}
inline ::perfetto::protos::LowmemoryKillFtraceEvent* FtraceEvent::mutable_lowmemory_kill() {
  if (!has_lowmemory_kill()) {
    clear_event();
    set_has_lowmemory_kill();
    event_.lowmemory_kill_ = CreateMaybeMessage< ::perfetto::protos::LowmemoryKillFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.lowmemory_kill)
  return event_.lowmemory_kill_;
}

// optional .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
inline bool FtraceEvent::has_irq_handler_entry() const {
  return event_case() == kIrqHandlerEntry;
}
inline void FtraceEvent::set_has_irq_handler_entry() {
  _oneof_case_[0] = kIrqHandlerEntry;
}
inline ::perfetto::protos::IrqHandlerEntryFtraceEvent* FtraceEvent::release_irq_handler_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.irq_handler_entry)
  if (has_irq_handler_entry()) {
    clear_has_event();
      ::perfetto::protos::IrqHandlerEntryFtraceEvent* temp = event_.irq_handler_entry_;
    event_.irq_handler_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IrqHandlerEntryFtraceEvent& FtraceEvent::irq_handler_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.irq_handler_entry)
  return has_irq_handler_entry()
      ? *event_.irq_handler_entry_
      : *reinterpret_cast< ::perfetto::protos::IrqHandlerEntryFtraceEvent*>(&::perfetto::protos::_IrqHandlerEntryFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IrqHandlerEntryFtraceEvent* FtraceEvent::mutable_irq_handler_entry() {
  if (!has_irq_handler_entry()) {
    clear_event();
    set_has_irq_handler_entry();
    event_.irq_handler_entry_ = CreateMaybeMessage< ::perfetto::protos::IrqHandlerEntryFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.irq_handler_entry)
  return event_.irq_handler_entry_;
}

// optional .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
inline bool FtraceEvent::has_irq_handler_exit() const {
  return event_case() == kIrqHandlerExit;
}
inline void FtraceEvent::set_has_irq_handler_exit() {
  _oneof_case_[0] = kIrqHandlerExit;
}
inline ::perfetto::protos::IrqHandlerExitFtraceEvent* FtraceEvent::release_irq_handler_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.irq_handler_exit)
  if (has_irq_handler_exit()) {
    clear_has_event();
      ::perfetto::protos::IrqHandlerExitFtraceEvent* temp = event_.irq_handler_exit_;
    event_.irq_handler_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IrqHandlerExitFtraceEvent& FtraceEvent::irq_handler_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.irq_handler_exit)
  return has_irq_handler_exit()
      ? *event_.irq_handler_exit_
      : *reinterpret_cast< ::perfetto::protos::IrqHandlerExitFtraceEvent*>(&::perfetto::protos::_IrqHandlerExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IrqHandlerExitFtraceEvent* FtraceEvent::mutable_irq_handler_exit() {
  if (!has_irq_handler_exit()) {
    clear_event();
    set_has_irq_handler_exit();
    event_.irq_handler_exit_ = CreateMaybeMessage< ::perfetto::protos::IrqHandlerExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.irq_handler_exit)
  return event_.irq_handler_exit_;
}

// optional .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
inline bool FtraceEvent::has_sync_pt() const {
  return event_case() == kSyncPt;
}
inline void FtraceEvent::set_has_sync_pt() {
  _oneof_case_[0] = kSyncPt;
}
inline ::perfetto::protos::SyncPtFtraceEvent* FtraceEvent::release_sync_pt() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sync_pt)
  if (has_sync_pt()) {
    clear_has_event();
      ::perfetto::protos::SyncPtFtraceEvent* temp = event_.sync_pt_;
    event_.sync_pt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SyncPtFtraceEvent& FtraceEvent::sync_pt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sync_pt)
  return has_sync_pt()
      ? *event_.sync_pt_
      : *reinterpret_cast< ::perfetto::protos::SyncPtFtraceEvent*>(&::perfetto::protos::_SyncPtFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SyncPtFtraceEvent* FtraceEvent::mutable_sync_pt() {
  if (!has_sync_pt()) {
    clear_event();
    set_has_sync_pt();
    event_.sync_pt_ = CreateMaybeMessage< ::perfetto::protos::SyncPtFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sync_pt)
  return event_.sync_pt_;
}

// optional .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
inline bool FtraceEvent::has_sync_timeline() const {
  return event_case() == kSyncTimeline;
}
inline void FtraceEvent::set_has_sync_timeline() {
  _oneof_case_[0] = kSyncTimeline;
}
inline ::perfetto::protos::SyncTimelineFtraceEvent* FtraceEvent::release_sync_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sync_timeline)
  if (has_sync_timeline()) {
    clear_has_event();
      ::perfetto::protos::SyncTimelineFtraceEvent* temp = event_.sync_timeline_;
    event_.sync_timeline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SyncTimelineFtraceEvent& FtraceEvent::sync_timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sync_timeline)
  return has_sync_timeline()
      ? *event_.sync_timeline_
      : *reinterpret_cast< ::perfetto::protos::SyncTimelineFtraceEvent*>(&::perfetto::protos::_SyncTimelineFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SyncTimelineFtraceEvent* FtraceEvent::mutable_sync_timeline() {
  if (!has_sync_timeline()) {
    clear_event();
    set_has_sync_timeline();
    event_.sync_timeline_ = CreateMaybeMessage< ::perfetto::protos::SyncTimelineFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sync_timeline)
  return event_.sync_timeline_;
}

// optional .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
inline bool FtraceEvent::has_sync_wait() const {
  return event_case() == kSyncWait;
}
inline void FtraceEvent::set_has_sync_wait() {
  _oneof_case_[0] = kSyncWait;
}
inline ::perfetto::protos::SyncWaitFtraceEvent* FtraceEvent::release_sync_wait() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sync_wait)
  if (has_sync_wait()) {
    clear_has_event();
      ::perfetto::protos::SyncWaitFtraceEvent* temp = event_.sync_wait_;
    event_.sync_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SyncWaitFtraceEvent& FtraceEvent::sync_wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sync_wait)
  return has_sync_wait()
      ? *event_.sync_wait_
      : *reinterpret_cast< ::perfetto::protos::SyncWaitFtraceEvent*>(&::perfetto::protos::_SyncWaitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SyncWaitFtraceEvent* FtraceEvent::mutable_sync_wait() {
  if (!has_sync_wait()) {
    clear_event();
    set_has_sync_wait();
    event_.sync_wait_ = CreateMaybeMessage< ::perfetto::protos::SyncWaitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sync_wait)
  return event_.sync_wait_;
}

// optional .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
inline bool FtraceEvent::has_ext4_da_write_begin() const {
  return event_case() == kExt4DaWriteBegin;
}
inline void FtraceEvent::set_has_ext4_da_write_begin() {
  _oneof_case_[0] = kExt4DaWriteBegin;
}
inline ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* FtraceEvent::release_ext4_da_write_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  if (has_ext4_da_write_begin()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* temp = event_.ext4_da_write_begin_;
    event_.ext4_da_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& FtraceEvent::ext4_da_write_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  return has_ext4_da_write_begin()
      ? *event_.ext4_da_write_begin_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaWriteBeginFtraceEvent*>(&::perfetto::protos::_Ext4DaWriteBeginFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* FtraceEvent::mutable_ext4_da_write_begin() {
  if (!has_ext4_da_write_begin()) {
    clear_event();
    set_has_ext4_da_write_begin();
    event_.ext4_da_write_begin_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWriteBeginFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  return event_.ext4_da_write_begin_;
}

// optional .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
inline bool FtraceEvent::has_ext4_da_write_end() const {
  return event_case() == kExt4DaWriteEnd;
}
inline void FtraceEvent::set_has_ext4_da_write_end() {
  _oneof_case_[0] = kExt4DaWriteEnd;
}
inline ::perfetto::protos::Ext4DaWriteEndFtraceEvent* FtraceEvent::release_ext4_da_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_end)
  if (has_ext4_da_write_end()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaWriteEndFtraceEvent* temp = event_.ext4_da_write_end_;
    event_.ext4_da_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& FtraceEvent::ext4_da_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_end)
  return has_ext4_da_write_end()
      ? *event_.ext4_da_write_end_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaWriteEndFtraceEvent*>(&::perfetto::protos::_Ext4DaWriteEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaWriteEndFtraceEvent* FtraceEvent::mutable_ext4_da_write_end() {
  if (!has_ext4_da_write_end()) {
    clear_event();
    set_has_ext4_da_write_end();
    event_.ext4_da_write_end_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWriteEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_end)
  return event_.ext4_da_write_end_;
}

// optional .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
inline bool FtraceEvent::has_ext4_sync_file_enter() const {
  return event_case() == kExt4SyncFileEnter;
}
inline void FtraceEvent::set_has_ext4_sync_file_enter() {
  _oneof_case_[0] = kExt4SyncFileEnter;
}
inline ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* FtraceEvent::release_ext4_sync_file_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  if (has_ext4_sync_file_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* temp = event_.ext4_sync_file_enter_;
    event_.ext4_sync_file_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& FtraceEvent::ext4_sync_file_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  return has_ext4_sync_file_enter()
      ? *event_.ext4_sync_file_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4SyncFileEnterFtraceEvent*>(&::perfetto::protos::_Ext4SyncFileEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* FtraceEvent::mutable_ext4_sync_file_enter() {
  if (!has_ext4_sync_file_enter()) {
    clear_event();
    set_has_ext4_sync_file_enter();
    event_.ext4_sync_file_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4SyncFileEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  return event_.ext4_sync_file_enter_;
}

// optional .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
inline bool FtraceEvent::has_ext4_sync_file_exit() const {
  return event_case() == kExt4SyncFileExit;
}
inline void FtraceEvent::set_has_ext4_sync_file_exit() {
  _oneof_case_[0] = kExt4SyncFileExit;
}
inline ::perfetto::protos::Ext4SyncFileExitFtraceEvent* FtraceEvent::release_ext4_sync_file_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  if (has_ext4_sync_file_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4SyncFileExitFtraceEvent* temp = event_.ext4_sync_file_exit_;
    event_.ext4_sync_file_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& FtraceEvent::ext4_sync_file_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  return has_ext4_sync_file_exit()
      ? *event_.ext4_sync_file_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4SyncFileExitFtraceEvent*>(&::perfetto::protos::_Ext4SyncFileExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4SyncFileExitFtraceEvent* FtraceEvent::mutable_ext4_sync_file_exit() {
  if (!has_ext4_sync_file_exit()) {
    clear_event();
    set_has_ext4_sync_file_exit();
    event_.ext4_sync_file_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4SyncFileExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  return event_.ext4_sync_file_exit_;
}

// optional .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
inline bool FtraceEvent::has_block_rq_issue() const {
  return event_case() == kBlockRqIssue;
}
inline void FtraceEvent::set_has_block_rq_issue() {
  _oneof_case_[0] = kBlockRqIssue;
}
inline ::perfetto::protos::BlockRqIssueFtraceEvent* FtraceEvent::release_block_rq_issue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_issue)
  if (has_block_rq_issue()) {
    clear_has_event();
      ::perfetto::protos::BlockRqIssueFtraceEvent* temp = event_.block_rq_issue_;
    event_.block_rq_issue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqIssueFtraceEvent& FtraceEvent::block_rq_issue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_issue)
  return has_block_rq_issue()
      ? *event_.block_rq_issue_
      : *reinterpret_cast< ::perfetto::protos::BlockRqIssueFtraceEvent*>(&::perfetto::protos::_BlockRqIssueFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockRqIssueFtraceEvent* FtraceEvent::mutable_block_rq_issue() {
  if (!has_block_rq_issue()) {
    clear_event();
    set_has_block_rq_issue();
    event_.block_rq_issue_ = CreateMaybeMessage< ::perfetto::protos::BlockRqIssueFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_issue)
  return event_.block_rq_issue_;
}

// optional .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
inline bool FtraceEvent::has_mm_vmscan_direct_reclaim_begin() const {
  return event_case() == kMmVmscanDirectReclaimBegin;
}
inline void FtraceEvent::set_has_mm_vmscan_direct_reclaim_begin() {
  _oneof_case_[0] = kMmVmscanDirectReclaimBegin;
}
inline ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::release_mm_vmscan_direct_reclaim_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  if (has_mm_vmscan_direct_reclaim_begin()) {
    clear_has_event();
      ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* temp = event_.mm_vmscan_direct_reclaim_begin_;
    event_.mm_vmscan_direct_reclaim_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& FtraceEvent::mm_vmscan_direct_reclaim_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  return has_mm_vmscan_direct_reclaim_begin()
      ? *event_.mm_vmscan_direct_reclaim_begin_
      : *reinterpret_cast< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent*>(&::perfetto::protos::_MmVmscanDirectReclaimBeginFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::mutable_mm_vmscan_direct_reclaim_begin() {
  if (!has_mm_vmscan_direct_reclaim_begin()) {
    clear_event();
    set_has_mm_vmscan_direct_reclaim_begin();
    event_.mm_vmscan_direct_reclaim_begin_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  return event_.mm_vmscan_direct_reclaim_begin_;
}

// optional .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
inline bool FtraceEvent::has_mm_vmscan_direct_reclaim_end() const {
  return event_case() == kMmVmscanDirectReclaimEnd;
}
inline void FtraceEvent::set_has_mm_vmscan_direct_reclaim_end() {
  _oneof_case_[0] = kMmVmscanDirectReclaimEnd;
}
inline ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::release_mm_vmscan_direct_reclaim_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  if (has_mm_vmscan_direct_reclaim_end()) {
    clear_has_event();
      ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* temp = event_.mm_vmscan_direct_reclaim_end_;
    event_.mm_vmscan_direct_reclaim_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& FtraceEvent::mm_vmscan_direct_reclaim_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  return has_mm_vmscan_direct_reclaim_end()
      ? *event_.mm_vmscan_direct_reclaim_end_
      : *reinterpret_cast< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent*>(&::perfetto::protos::_MmVmscanDirectReclaimEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::mutable_mm_vmscan_direct_reclaim_end() {
  if (!has_mm_vmscan_direct_reclaim_end()) {
    clear_event();
    set_has_mm_vmscan_direct_reclaim_end();
    event_.mm_vmscan_direct_reclaim_end_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  return event_.mm_vmscan_direct_reclaim_end_;
}

// optional .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
inline bool FtraceEvent::has_mm_vmscan_kswapd_wake() const {
  return event_case() == kMmVmscanKswapdWake;
}
inline void FtraceEvent::set_has_mm_vmscan_kswapd_wake() {
  _oneof_case_[0] = kMmVmscanKswapdWake;
}
inline ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* FtraceEvent::release_mm_vmscan_kswapd_wake() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  if (has_mm_vmscan_kswapd_wake()) {
    clear_has_event();
      ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* temp = event_.mm_vmscan_kswapd_wake_;
    event_.mm_vmscan_kswapd_wake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& FtraceEvent::mm_vmscan_kswapd_wake() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  return has_mm_vmscan_kswapd_wake()
      ? *event_.mm_vmscan_kswapd_wake_
      : *reinterpret_cast< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent*>(&::perfetto::protos::_MmVmscanKswapdWakeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* FtraceEvent::mutable_mm_vmscan_kswapd_wake() {
  if (!has_mm_vmscan_kswapd_wake()) {
    clear_event();
    set_has_mm_vmscan_kswapd_wake();
    event_.mm_vmscan_kswapd_wake_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  return event_.mm_vmscan_kswapd_wake_;
}

// optional .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
inline bool FtraceEvent::has_mm_vmscan_kswapd_sleep() const {
  return event_case() == kMmVmscanKswapdSleep;
}
inline void FtraceEvent::set_has_mm_vmscan_kswapd_sleep() {
  _oneof_case_[0] = kMmVmscanKswapdSleep;
}
inline ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* FtraceEvent::release_mm_vmscan_kswapd_sleep() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  if (has_mm_vmscan_kswapd_sleep()) {
    clear_has_event();
      ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* temp = event_.mm_vmscan_kswapd_sleep_;
    event_.mm_vmscan_kswapd_sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& FtraceEvent::mm_vmscan_kswapd_sleep() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  return has_mm_vmscan_kswapd_sleep()
      ? *event_.mm_vmscan_kswapd_sleep_
      : *reinterpret_cast< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent*>(&::perfetto::protos::_MmVmscanKswapdSleepFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* FtraceEvent::mutable_mm_vmscan_kswapd_sleep() {
  if (!has_mm_vmscan_kswapd_sleep()) {
    clear_event();
    set_has_mm_vmscan_kswapd_sleep();
    event_.mm_vmscan_kswapd_sleep_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  return event_.mm_vmscan_kswapd_sleep_;
}

// optional .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
inline bool FtraceEvent::has_binder_transaction() const {
  return event_case() == kBinderTransaction;
}
inline void FtraceEvent::set_has_binder_transaction() {
  _oneof_case_[0] = kBinderTransaction;
}
inline ::perfetto::protos::BinderTransactionFtraceEvent* FtraceEvent::release_binder_transaction() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_transaction)
  if (has_binder_transaction()) {
    clear_has_event();
      ::perfetto::protos::BinderTransactionFtraceEvent* temp = event_.binder_transaction_;
    event_.binder_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderTransactionFtraceEvent& FtraceEvent::binder_transaction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_transaction)
  return has_binder_transaction()
      ? *event_.binder_transaction_
      : *reinterpret_cast< ::perfetto::protos::BinderTransactionFtraceEvent*>(&::perfetto::protos::_BinderTransactionFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderTransactionFtraceEvent* FtraceEvent::mutable_binder_transaction() {
  if (!has_binder_transaction()) {
    clear_event();
    set_has_binder_transaction();
    event_.binder_transaction_ = CreateMaybeMessage< ::perfetto::protos::BinderTransactionFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_transaction)
  return event_.binder_transaction_;
}

// optional .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
inline bool FtraceEvent::has_binder_transaction_received() const {
  return event_case() == kBinderTransactionReceived;
}
inline void FtraceEvent::set_has_binder_transaction_received() {
  _oneof_case_[0] = kBinderTransactionReceived;
}
inline ::perfetto::protos::BinderTransactionReceivedFtraceEvent* FtraceEvent::release_binder_transaction_received() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_transaction_received)
  if (has_binder_transaction_received()) {
    clear_has_event();
      ::perfetto::protos::BinderTransactionReceivedFtraceEvent* temp = event_.binder_transaction_received_;
    event_.binder_transaction_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& FtraceEvent::binder_transaction_received() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_transaction_received)
  return has_binder_transaction_received()
      ? *event_.binder_transaction_received_
      : *reinterpret_cast< ::perfetto::protos::BinderTransactionReceivedFtraceEvent*>(&::perfetto::protos::_BinderTransactionReceivedFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderTransactionReceivedFtraceEvent* FtraceEvent::mutable_binder_transaction_received() {
  if (!has_binder_transaction_received()) {
    clear_event();
    set_has_binder_transaction_received();
    event_.binder_transaction_received_ = CreateMaybeMessage< ::perfetto::protos::BinderTransactionReceivedFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_transaction_received)
  return event_.binder_transaction_received_;
}

// optional .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
inline bool FtraceEvent::has_binder_set_priority() const {
  return event_case() == kBinderSetPriority;
}
inline void FtraceEvent::set_has_binder_set_priority() {
  _oneof_case_[0] = kBinderSetPriority;
}
inline ::perfetto::protos::BinderSetPriorityFtraceEvent* FtraceEvent::release_binder_set_priority() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_set_priority)
  if (has_binder_set_priority()) {
    clear_has_event();
      ::perfetto::protos::BinderSetPriorityFtraceEvent* temp = event_.binder_set_priority_;
    event_.binder_set_priority_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderSetPriorityFtraceEvent& FtraceEvent::binder_set_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_set_priority)
  return has_binder_set_priority()
      ? *event_.binder_set_priority_
      : *reinterpret_cast< ::perfetto::protos::BinderSetPriorityFtraceEvent*>(&::perfetto::protos::_BinderSetPriorityFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderSetPriorityFtraceEvent* FtraceEvent::mutable_binder_set_priority() {
  if (!has_binder_set_priority()) {
    clear_event();
    set_has_binder_set_priority();
    event_.binder_set_priority_ = CreateMaybeMessage< ::perfetto::protos::BinderSetPriorityFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_set_priority)
  return event_.binder_set_priority_;
}

// optional .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
inline bool FtraceEvent::has_binder_lock() const {
  return event_case() == kBinderLock;
}
inline void FtraceEvent::set_has_binder_lock() {
  _oneof_case_[0] = kBinderLock;
}
inline ::perfetto::protos::BinderLockFtraceEvent* FtraceEvent::release_binder_lock() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_lock)
  if (has_binder_lock()) {
    clear_has_event();
      ::perfetto::protos::BinderLockFtraceEvent* temp = event_.binder_lock_;
    event_.binder_lock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderLockFtraceEvent& FtraceEvent::binder_lock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_lock)
  return has_binder_lock()
      ? *event_.binder_lock_
      : *reinterpret_cast< ::perfetto::protos::BinderLockFtraceEvent*>(&::perfetto::protos::_BinderLockFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderLockFtraceEvent* FtraceEvent::mutable_binder_lock() {
  if (!has_binder_lock()) {
    clear_event();
    set_has_binder_lock();
    event_.binder_lock_ = CreateMaybeMessage< ::perfetto::protos::BinderLockFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_lock)
  return event_.binder_lock_;
}

// optional .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
inline bool FtraceEvent::has_binder_locked() const {
  return event_case() == kBinderLocked;
}
inline void FtraceEvent::set_has_binder_locked() {
  _oneof_case_[0] = kBinderLocked;
}
inline ::perfetto::protos::BinderLockedFtraceEvent* FtraceEvent::release_binder_locked() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_locked)
  if (has_binder_locked()) {
    clear_has_event();
      ::perfetto::protos::BinderLockedFtraceEvent* temp = event_.binder_locked_;
    event_.binder_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderLockedFtraceEvent& FtraceEvent::binder_locked() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_locked)
  return has_binder_locked()
      ? *event_.binder_locked_
      : *reinterpret_cast< ::perfetto::protos::BinderLockedFtraceEvent*>(&::perfetto::protos::_BinderLockedFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderLockedFtraceEvent* FtraceEvent::mutable_binder_locked() {
  if (!has_binder_locked()) {
    clear_event();
    set_has_binder_locked();
    event_.binder_locked_ = CreateMaybeMessage< ::perfetto::protos::BinderLockedFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_locked)
  return event_.binder_locked_;
}

// optional .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
inline bool FtraceEvent::has_binder_unlock() const {
  return event_case() == kBinderUnlock;
}
inline void FtraceEvent::set_has_binder_unlock() {
  _oneof_case_[0] = kBinderUnlock;
}
inline ::perfetto::protos::BinderUnlockFtraceEvent* FtraceEvent::release_binder_unlock() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_unlock)
  if (has_binder_unlock()) {
    clear_has_event();
      ::perfetto::protos::BinderUnlockFtraceEvent* temp = event_.binder_unlock_;
    event_.binder_unlock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderUnlockFtraceEvent& FtraceEvent::binder_unlock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_unlock)
  return has_binder_unlock()
      ? *event_.binder_unlock_
      : *reinterpret_cast< ::perfetto::protos::BinderUnlockFtraceEvent*>(&::perfetto::protos::_BinderUnlockFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderUnlockFtraceEvent* FtraceEvent::mutable_binder_unlock() {
  if (!has_binder_unlock()) {
    clear_event();
    set_has_binder_unlock();
    event_.binder_unlock_ = CreateMaybeMessage< ::perfetto::protos::BinderUnlockFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_unlock)
  return event_.binder_unlock_;
}

// optional .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
inline bool FtraceEvent::has_workqueue_activate_work() const {
  return event_case() == kWorkqueueActivateWork;
}
inline void FtraceEvent::set_has_workqueue_activate_work() {
  _oneof_case_[0] = kWorkqueueActivateWork;
}
inline ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* FtraceEvent::release_workqueue_activate_work() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_activate_work)
  if (has_workqueue_activate_work()) {
    clear_has_event();
      ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* temp = event_.workqueue_activate_work_;
    event_.workqueue_activate_work_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& FtraceEvent::workqueue_activate_work() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_activate_work)
  return has_workqueue_activate_work()
      ? *event_.workqueue_activate_work_
      : *reinterpret_cast< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent*>(&::perfetto::protos::_WorkqueueActivateWorkFtraceEvent_default_instance_);
}
inline ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* FtraceEvent::mutable_workqueue_activate_work() {
  if (!has_workqueue_activate_work()) {
    clear_event();
    set_has_workqueue_activate_work();
    event_.workqueue_activate_work_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_activate_work)
  return event_.workqueue_activate_work_;
}

// optional .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
inline bool FtraceEvent::has_workqueue_execute_end() const {
  return event_case() == kWorkqueueExecuteEnd;
}
inline void FtraceEvent::set_has_workqueue_execute_end() {
  _oneof_case_[0] = kWorkqueueExecuteEnd;
}
inline ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* FtraceEvent::release_workqueue_execute_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_execute_end)
  if (has_workqueue_execute_end()) {
    clear_has_event();
      ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* temp = event_.workqueue_execute_end_;
    event_.workqueue_execute_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& FtraceEvent::workqueue_execute_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_execute_end)
  return has_workqueue_execute_end()
      ? *event_.workqueue_execute_end_
      : *reinterpret_cast< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent*>(&::perfetto::protos::_WorkqueueExecuteEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* FtraceEvent::mutable_workqueue_execute_end() {
  if (!has_workqueue_execute_end()) {
    clear_event();
    set_has_workqueue_execute_end();
    event_.workqueue_execute_end_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_execute_end)
  return event_.workqueue_execute_end_;
}

// optional .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
inline bool FtraceEvent::has_workqueue_execute_start() const {
  return event_case() == kWorkqueueExecuteStart;
}
inline void FtraceEvent::set_has_workqueue_execute_start() {
  _oneof_case_[0] = kWorkqueueExecuteStart;
}
inline ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* FtraceEvent::release_workqueue_execute_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_execute_start)
  if (has_workqueue_execute_start()) {
    clear_has_event();
      ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* temp = event_.workqueue_execute_start_;
    event_.workqueue_execute_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& FtraceEvent::workqueue_execute_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_execute_start)
  return has_workqueue_execute_start()
      ? *event_.workqueue_execute_start_
      : *reinterpret_cast< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent*>(&::perfetto::protos::_WorkqueueExecuteStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* FtraceEvent::mutable_workqueue_execute_start() {
  if (!has_workqueue_execute_start()) {
    clear_event();
    set_has_workqueue_execute_start();
    event_.workqueue_execute_start_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_execute_start)
  return event_.workqueue_execute_start_;
}

// optional .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
inline bool FtraceEvent::has_workqueue_queue_work() const {
  return event_case() == kWorkqueueQueueWork;
}
inline void FtraceEvent::set_has_workqueue_queue_work() {
  _oneof_case_[0] = kWorkqueueQueueWork;
}
inline ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* FtraceEvent::release_workqueue_queue_work() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_queue_work)
  if (has_workqueue_queue_work()) {
    clear_has_event();
      ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* temp = event_.workqueue_queue_work_;
    event_.workqueue_queue_work_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& FtraceEvent::workqueue_queue_work() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_queue_work)
  return has_workqueue_queue_work()
      ? *event_.workqueue_queue_work_
      : *reinterpret_cast< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent*>(&::perfetto::protos::_WorkqueueQueueWorkFtraceEvent_default_instance_);
}
inline ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* FtraceEvent::mutable_workqueue_queue_work() {
  if (!has_workqueue_queue_work()) {
    clear_event();
    set_has_workqueue_queue_work();
    event_.workqueue_queue_work_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_queue_work)
  return event_.workqueue_queue_work_;
}

// optional .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
inline bool FtraceEvent::has_regulator_disable() const {
  return event_case() == kRegulatorDisable;
}
inline void FtraceEvent::set_has_regulator_disable() {
  _oneof_case_[0] = kRegulatorDisable;
}
inline ::perfetto::protos::RegulatorDisableFtraceEvent* FtraceEvent::release_regulator_disable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_disable)
  if (has_regulator_disable()) {
    clear_has_event();
      ::perfetto::protos::RegulatorDisableFtraceEvent* temp = event_.regulator_disable_;
    event_.regulator_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorDisableFtraceEvent& FtraceEvent::regulator_disable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_disable)
  return has_regulator_disable()
      ? *event_.regulator_disable_
      : *reinterpret_cast< ::perfetto::protos::RegulatorDisableFtraceEvent*>(&::perfetto::protos::_RegulatorDisableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorDisableFtraceEvent* FtraceEvent::mutable_regulator_disable() {
  if (!has_regulator_disable()) {
    clear_event();
    set_has_regulator_disable();
    event_.regulator_disable_ = CreateMaybeMessage< ::perfetto::protos::RegulatorDisableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_disable)
  return event_.regulator_disable_;
}

// optional .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
inline bool FtraceEvent::has_regulator_disable_complete() const {
  return event_case() == kRegulatorDisableComplete;
}
inline void FtraceEvent::set_has_regulator_disable_complete() {
  _oneof_case_[0] = kRegulatorDisableComplete;
}
inline ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* FtraceEvent::release_regulator_disable_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_disable_complete)
  if (has_regulator_disable_complete()) {
    clear_has_event();
      ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* temp = event_.regulator_disable_complete_;
    event_.regulator_disable_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& FtraceEvent::regulator_disable_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_disable_complete)
  return has_regulator_disable_complete()
      ? *event_.regulator_disable_complete_
      : *reinterpret_cast< ::perfetto::protos::RegulatorDisableCompleteFtraceEvent*>(&::perfetto::protos::_RegulatorDisableCompleteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* FtraceEvent::mutable_regulator_disable_complete() {
  if (!has_regulator_disable_complete()) {
    clear_event();
    set_has_regulator_disable_complete();
    event_.regulator_disable_complete_ = CreateMaybeMessage< ::perfetto::protos::RegulatorDisableCompleteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_disable_complete)
  return event_.regulator_disable_complete_;
}

// optional .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
inline bool FtraceEvent::has_regulator_enable() const {
  return event_case() == kRegulatorEnable;
}
inline void FtraceEvent::set_has_regulator_enable() {
  _oneof_case_[0] = kRegulatorEnable;
}
inline ::perfetto::protos::RegulatorEnableFtraceEvent* FtraceEvent::release_regulator_enable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_enable)
  if (has_regulator_enable()) {
    clear_has_event();
      ::perfetto::protos::RegulatorEnableFtraceEvent* temp = event_.regulator_enable_;
    event_.regulator_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorEnableFtraceEvent& FtraceEvent::regulator_enable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_enable)
  return has_regulator_enable()
      ? *event_.regulator_enable_
      : *reinterpret_cast< ::perfetto::protos::RegulatorEnableFtraceEvent*>(&::perfetto::protos::_RegulatorEnableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorEnableFtraceEvent* FtraceEvent::mutable_regulator_enable() {
  if (!has_regulator_enable()) {
    clear_event();
    set_has_regulator_enable();
    event_.regulator_enable_ = CreateMaybeMessage< ::perfetto::protos::RegulatorEnableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_enable)
  return event_.regulator_enable_;
}

// optional .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
inline bool FtraceEvent::has_regulator_enable_complete() const {
  return event_case() == kRegulatorEnableComplete;
}
inline void FtraceEvent::set_has_regulator_enable_complete() {
  _oneof_case_[0] = kRegulatorEnableComplete;
}
inline ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* FtraceEvent::release_regulator_enable_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_enable_complete)
  if (has_regulator_enable_complete()) {
    clear_has_event();
      ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* temp = event_.regulator_enable_complete_;
    event_.regulator_enable_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& FtraceEvent::regulator_enable_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_enable_complete)
  return has_regulator_enable_complete()
      ? *event_.regulator_enable_complete_
      : *reinterpret_cast< ::perfetto::protos::RegulatorEnableCompleteFtraceEvent*>(&::perfetto::protos::_RegulatorEnableCompleteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* FtraceEvent::mutable_regulator_enable_complete() {
  if (!has_regulator_enable_complete()) {
    clear_event();
    set_has_regulator_enable_complete();
    event_.regulator_enable_complete_ = CreateMaybeMessage< ::perfetto::protos::RegulatorEnableCompleteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_enable_complete)
  return event_.regulator_enable_complete_;
}

// optional .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
inline bool FtraceEvent::has_regulator_enable_delay() const {
  return event_case() == kRegulatorEnableDelay;
}
inline void FtraceEvent::set_has_regulator_enable_delay() {
  _oneof_case_[0] = kRegulatorEnableDelay;
}
inline ::perfetto::protos::RegulatorEnableDelayFtraceEvent* FtraceEvent::release_regulator_enable_delay() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_enable_delay)
  if (has_regulator_enable_delay()) {
    clear_has_event();
      ::perfetto::protos::RegulatorEnableDelayFtraceEvent* temp = event_.regulator_enable_delay_;
    event_.regulator_enable_delay_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& FtraceEvent::regulator_enable_delay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_enable_delay)
  return has_regulator_enable_delay()
      ? *event_.regulator_enable_delay_
      : *reinterpret_cast< ::perfetto::protos::RegulatorEnableDelayFtraceEvent*>(&::perfetto::protos::_RegulatorEnableDelayFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorEnableDelayFtraceEvent* FtraceEvent::mutable_regulator_enable_delay() {
  if (!has_regulator_enable_delay()) {
    clear_event();
    set_has_regulator_enable_delay();
    event_.regulator_enable_delay_ = CreateMaybeMessage< ::perfetto::protos::RegulatorEnableDelayFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_enable_delay)
  return event_.regulator_enable_delay_;
}

// optional .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
inline bool FtraceEvent::has_regulator_set_voltage() const {
  return event_case() == kRegulatorSetVoltage;
}
inline void FtraceEvent::set_has_regulator_set_voltage() {
  _oneof_case_[0] = kRegulatorSetVoltage;
}
inline ::perfetto::protos::RegulatorSetVoltageFtraceEvent* FtraceEvent::release_regulator_set_voltage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_set_voltage)
  if (has_regulator_set_voltage()) {
    clear_has_event();
      ::perfetto::protos::RegulatorSetVoltageFtraceEvent* temp = event_.regulator_set_voltage_;
    event_.regulator_set_voltage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& FtraceEvent::regulator_set_voltage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_set_voltage)
  return has_regulator_set_voltage()
      ? *event_.regulator_set_voltage_
      : *reinterpret_cast< ::perfetto::protos::RegulatorSetVoltageFtraceEvent*>(&::perfetto::protos::_RegulatorSetVoltageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorSetVoltageFtraceEvent* FtraceEvent::mutable_regulator_set_voltage() {
  if (!has_regulator_set_voltage()) {
    clear_event();
    set_has_regulator_set_voltage();
    event_.regulator_set_voltage_ = CreateMaybeMessage< ::perfetto::protos::RegulatorSetVoltageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_set_voltage)
  return event_.regulator_set_voltage_;
}

// optional .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
inline bool FtraceEvent::has_regulator_set_voltage_complete() const {
  return event_case() == kRegulatorSetVoltageComplete;
}
inline void FtraceEvent::set_has_regulator_set_voltage_complete() {
  _oneof_case_[0] = kRegulatorSetVoltageComplete;
}
inline ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::release_regulator_set_voltage_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  if (has_regulator_set_voltage_complete()) {
    clear_has_event();
      ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* temp = event_.regulator_set_voltage_complete_;
    event_.regulator_set_voltage_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& FtraceEvent::regulator_set_voltage_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  return has_regulator_set_voltage_complete()
      ? *event_.regulator_set_voltage_complete_
      : *reinterpret_cast< ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent*>(&::perfetto::protos::_RegulatorSetVoltageCompleteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::mutable_regulator_set_voltage_complete() {
  if (!has_regulator_set_voltage_complete()) {
    clear_event();
    set_has_regulator_set_voltage_complete();
    event_.regulator_set_voltage_complete_ = CreateMaybeMessage< ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  return event_.regulator_set_voltage_complete_;
}

// optional .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
inline bool FtraceEvent::has_cgroup_attach_task() const {
  return event_case() == kCgroupAttachTask;
}
inline void FtraceEvent::set_has_cgroup_attach_task() {
  _oneof_case_[0] = kCgroupAttachTask;
}
inline ::perfetto::protos::CgroupAttachTaskFtraceEvent* FtraceEvent::release_cgroup_attach_task() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_attach_task)
  if (has_cgroup_attach_task()) {
    clear_has_event();
      ::perfetto::protos::CgroupAttachTaskFtraceEvent* temp = event_.cgroup_attach_task_;
    event_.cgroup_attach_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupAttachTaskFtraceEvent& FtraceEvent::cgroup_attach_task() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_attach_task)
  return has_cgroup_attach_task()
      ? *event_.cgroup_attach_task_
      : *reinterpret_cast< ::perfetto::protos::CgroupAttachTaskFtraceEvent*>(&::perfetto::protos::_CgroupAttachTaskFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupAttachTaskFtraceEvent* FtraceEvent::mutable_cgroup_attach_task() {
  if (!has_cgroup_attach_task()) {
    clear_event();
    set_has_cgroup_attach_task();
    event_.cgroup_attach_task_ = CreateMaybeMessage< ::perfetto::protos::CgroupAttachTaskFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_attach_task)
  return event_.cgroup_attach_task_;
}

// optional .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
inline bool FtraceEvent::has_cgroup_mkdir() const {
  return event_case() == kCgroupMkdir;
}
inline void FtraceEvent::set_has_cgroup_mkdir() {
  _oneof_case_[0] = kCgroupMkdir;
}
inline ::perfetto::protos::CgroupMkdirFtraceEvent* FtraceEvent::release_cgroup_mkdir() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_mkdir)
  if (has_cgroup_mkdir()) {
    clear_has_event();
      ::perfetto::protos::CgroupMkdirFtraceEvent* temp = event_.cgroup_mkdir_;
    event_.cgroup_mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupMkdirFtraceEvent& FtraceEvent::cgroup_mkdir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_mkdir)
  return has_cgroup_mkdir()
      ? *event_.cgroup_mkdir_
      : *reinterpret_cast< ::perfetto::protos::CgroupMkdirFtraceEvent*>(&::perfetto::protos::_CgroupMkdirFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupMkdirFtraceEvent* FtraceEvent::mutable_cgroup_mkdir() {
  if (!has_cgroup_mkdir()) {
    clear_event();
    set_has_cgroup_mkdir();
    event_.cgroup_mkdir_ = CreateMaybeMessage< ::perfetto::protos::CgroupMkdirFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_mkdir)
  return event_.cgroup_mkdir_;
}

// optional .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
inline bool FtraceEvent::has_cgroup_remount() const {
  return event_case() == kCgroupRemount;
}
inline void FtraceEvent::set_has_cgroup_remount() {
  _oneof_case_[0] = kCgroupRemount;
}
inline ::perfetto::protos::CgroupRemountFtraceEvent* FtraceEvent::release_cgroup_remount() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_remount)
  if (has_cgroup_remount()) {
    clear_has_event();
      ::perfetto::protos::CgroupRemountFtraceEvent* temp = event_.cgroup_remount_;
    event_.cgroup_remount_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupRemountFtraceEvent& FtraceEvent::cgroup_remount() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_remount)
  return has_cgroup_remount()
      ? *event_.cgroup_remount_
      : *reinterpret_cast< ::perfetto::protos::CgroupRemountFtraceEvent*>(&::perfetto::protos::_CgroupRemountFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupRemountFtraceEvent* FtraceEvent::mutable_cgroup_remount() {
  if (!has_cgroup_remount()) {
    clear_event();
    set_has_cgroup_remount();
    event_.cgroup_remount_ = CreateMaybeMessage< ::perfetto::protos::CgroupRemountFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_remount)
  return event_.cgroup_remount_;
}

// optional .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
inline bool FtraceEvent::has_cgroup_rmdir() const {
  return event_case() == kCgroupRmdir;
}
inline void FtraceEvent::set_has_cgroup_rmdir() {
  _oneof_case_[0] = kCgroupRmdir;
}
inline ::perfetto::protos::CgroupRmdirFtraceEvent* FtraceEvent::release_cgroup_rmdir() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_rmdir)
  if (has_cgroup_rmdir()) {
    clear_has_event();
      ::perfetto::protos::CgroupRmdirFtraceEvent* temp = event_.cgroup_rmdir_;
    event_.cgroup_rmdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupRmdirFtraceEvent& FtraceEvent::cgroup_rmdir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_rmdir)
  return has_cgroup_rmdir()
      ? *event_.cgroup_rmdir_
      : *reinterpret_cast< ::perfetto::protos::CgroupRmdirFtraceEvent*>(&::perfetto::protos::_CgroupRmdirFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupRmdirFtraceEvent* FtraceEvent::mutable_cgroup_rmdir() {
  if (!has_cgroup_rmdir()) {
    clear_event();
    set_has_cgroup_rmdir();
    event_.cgroup_rmdir_ = CreateMaybeMessage< ::perfetto::protos::CgroupRmdirFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_rmdir)
  return event_.cgroup_rmdir_;
}

// optional .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
inline bool FtraceEvent::has_cgroup_transfer_tasks() const {
  return event_case() == kCgroupTransferTasks;
}
inline void FtraceEvent::set_has_cgroup_transfer_tasks() {
  _oneof_case_[0] = kCgroupTransferTasks;
}
inline ::perfetto::protos::CgroupTransferTasksFtraceEvent* FtraceEvent::release_cgroup_transfer_tasks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  if (has_cgroup_transfer_tasks()) {
    clear_has_event();
      ::perfetto::protos::CgroupTransferTasksFtraceEvent* temp = event_.cgroup_transfer_tasks_;
    event_.cgroup_transfer_tasks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupTransferTasksFtraceEvent& FtraceEvent::cgroup_transfer_tasks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  return has_cgroup_transfer_tasks()
      ? *event_.cgroup_transfer_tasks_
      : *reinterpret_cast< ::perfetto::protos::CgroupTransferTasksFtraceEvent*>(&::perfetto::protos::_CgroupTransferTasksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupTransferTasksFtraceEvent* FtraceEvent::mutable_cgroup_transfer_tasks() {
  if (!has_cgroup_transfer_tasks()) {
    clear_event();
    set_has_cgroup_transfer_tasks();
    event_.cgroup_transfer_tasks_ = CreateMaybeMessage< ::perfetto::protos::CgroupTransferTasksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  return event_.cgroup_transfer_tasks_;
}

// optional .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
inline bool FtraceEvent::has_cgroup_destroy_root() const {
  return event_case() == kCgroupDestroyRoot;
}
inline void FtraceEvent::set_has_cgroup_destroy_root() {
  _oneof_case_[0] = kCgroupDestroyRoot;
}
inline ::perfetto::protos::CgroupDestroyRootFtraceEvent* FtraceEvent::release_cgroup_destroy_root() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  if (has_cgroup_destroy_root()) {
    clear_has_event();
      ::perfetto::protos::CgroupDestroyRootFtraceEvent* temp = event_.cgroup_destroy_root_;
    event_.cgroup_destroy_root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupDestroyRootFtraceEvent& FtraceEvent::cgroup_destroy_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  return has_cgroup_destroy_root()
      ? *event_.cgroup_destroy_root_
      : *reinterpret_cast< ::perfetto::protos::CgroupDestroyRootFtraceEvent*>(&::perfetto::protos::_CgroupDestroyRootFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupDestroyRootFtraceEvent* FtraceEvent::mutable_cgroup_destroy_root() {
  if (!has_cgroup_destroy_root()) {
    clear_event();
    set_has_cgroup_destroy_root();
    event_.cgroup_destroy_root_ = CreateMaybeMessage< ::perfetto::protos::CgroupDestroyRootFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  return event_.cgroup_destroy_root_;
}

// optional .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
inline bool FtraceEvent::has_cgroup_release() const {
  return event_case() == kCgroupRelease;
}
inline void FtraceEvent::set_has_cgroup_release() {
  _oneof_case_[0] = kCgroupRelease;
}
inline ::perfetto::protos::CgroupReleaseFtraceEvent* FtraceEvent::release_cgroup_release() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_release)
  if (has_cgroup_release()) {
    clear_has_event();
      ::perfetto::protos::CgroupReleaseFtraceEvent* temp = event_.cgroup_release_;
    event_.cgroup_release_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupReleaseFtraceEvent& FtraceEvent::cgroup_release() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_release)
  return has_cgroup_release()
      ? *event_.cgroup_release_
      : *reinterpret_cast< ::perfetto::protos::CgroupReleaseFtraceEvent*>(&::perfetto::protos::_CgroupReleaseFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupReleaseFtraceEvent* FtraceEvent::mutable_cgroup_release() {
  if (!has_cgroup_release()) {
    clear_event();
    set_has_cgroup_release();
    event_.cgroup_release_ = CreateMaybeMessage< ::perfetto::protos::CgroupReleaseFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_release)
  return event_.cgroup_release_;
}

// optional .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
inline bool FtraceEvent::has_cgroup_rename() const {
  return event_case() == kCgroupRename;
}
inline void FtraceEvent::set_has_cgroup_rename() {
  _oneof_case_[0] = kCgroupRename;
}
inline ::perfetto::protos::CgroupRenameFtraceEvent* FtraceEvent::release_cgroup_rename() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_rename)
  if (has_cgroup_rename()) {
    clear_has_event();
      ::perfetto::protos::CgroupRenameFtraceEvent* temp = event_.cgroup_rename_;
    event_.cgroup_rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupRenameFtraceEvent& FtraceEvent::cgroup_rename() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_rename)
  return has_cgroup_rename()
      ? *event_.cgroup_rename_
      : *reinterpret_cast< ::perfetto::protos::CgroupRenameFtraceEvent*>(&::perfetto::protos::_CgroupRenameFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupRenameFtraceEvent* FtraceEvent::mutable_cgroup_rename() {
  if (!has_cgroup_rename()) {
    clear_event();
    set_has_cgroup_rename();
    event_.cgroup_rename_ = CreateMaybeMessage< ::perfetto::protos::CgroupRenameFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_rename)
  return event_.cgroup_rename_;
}

// optional .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
inline bool FtraceEvent::has_cgroup_setup_root() const {
  return event_case() == kCgroupSetupRoot;
}
inline void FtraceEvent::set_has_cgroup_setup_root() {
  _oneof_case_[0] = kCgroupSetupRoot;
}
inline ::perfetto::protos::CgroupSetupRootFtraceEvent* FtraceEvent::release_cgroup_setup_root() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_setup_root)
  if (has_cgroup_setup_root()) {
    clear_has_event();
      ::perfetto::protos::CgroupSetupRootFtraceEvent* temp = event_.cgroup_setup_root_;
    event_.cgroup_setup_root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupSetupRootFtraceEvent& FtraceEvent::cgroup_setup_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_setup_root)
  return has_cgroup_setup_root()
      ? *event_.cgroup_setup_root_
      : *reinterpret_cast< ::perfetto::protos::CgroupSetupRootFtraceEvent*>(&::perfetto::protos::_CgroupSetupRootFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CgroupSetupRootFtraceEvent* FtraceEvent::mutable_cgroup_setup_root() {
  if (!has_cgroup_setup_root()) {
    clear_event();
    set_has_cgroup_setup_root();
    event_.cgroup_setup_root_ = CreateMaybeMessage< ::perfetto::protos::CgroupSetupRootFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_setup_root)
  return event_.cgroup_setup_root_;
}

// optional .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
inline bool FtraceEvent::has_mdp_cmd_kickoff() const {
  return event_case() == kMdpCmdKickoff;
}
inline void FtraceEvent::set_has_mdp_cmd_kickoff() {
  _oneof_case_[0] = kMdpCmdKickoff;
}
inline ::perfetto::protos::MdpCmdKickoffFtraceEvent* FtraceEvent::release_mdp_cmd_kickoff() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  if (has_mdp_cmd_kickoff()) {
    clear_has_event();
      ::perfetto::protos::MdpCmdKickoffFtraceEvent* temp = event_.mdp_cmd_kickoff_;
    event_.mdp_cmd_kickoff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdKickoffFtraceEvent& FtraceEvent::mdp_cmd_kickoff() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  return has_mdp_cmd_kickoff()
      ? *event_.mdp_cmd_kickoff_
      : *reinterpret_cast< ::perfetto::protos::MdpCmdKickoffFtraceEvent*>(&::perfetto::protos::_MdpCmdKickoffFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCmdKickoffFtraceEvent* FtraceEvent::mutable_mdp_cmd_kickoff() {
  if (!has_mdp_cmd_kickoff()) {
    clear_event();
    set_has_mdp_cmd_kickoff();
    event_.mdp_cmd_kickoff_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdKickoffFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  return event_.mdp_cmd_kickoff_;
}

// optional .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
inline bool FtraceEvent::has_mdp_commit() const {
  return event_case() == kMdpCommit;
}
inline void FtraceEvent::set_has_mdp_commit() {
  _oneof_case_[0] = kMdpCommit;
}
inline ::perfetto::protos::MdpCommitFtraceEvent* FtraceEvent::release_mdp_commit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_commit)
  if (has_mdp_commit()) {
    clear_has_event();
      ::perfetto::protos::MdpCommitFtraceEvent* temp = event_.mdp_commit_;
    event_.mdp_commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCommitFtraceEvent& FtraceEvent::mdp_commit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_commit)
  return has_mdp_commit()
      ? *event_.mdp_commit_
      : *reinterpret_cast< ::perfetto::protos::MdpCommitFtraceEvent*>(&::perfetto::protos::_MdpCommitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCommitFtraceEvent* FtraceEvent::mutable_mdp_commit() {
  if (!has_mdp_commit()) {
    clear_event();
    set_has_mdp_commit();
    event_.mdp_commit_ = CreateMaybeMessage< ::perfetto::protos::MdpCommitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_commit)
  return event_.mdp_commit_;
}

// optional .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
inline bool FtraceEvent::has_mdp_perf_set_ot() const {
  return event_case() == kMdpPerfSetOt;
}
inline void FtraceEvent::set_has_mdp_perf_set_ot() {
  _oneof_case_[0] = kMdpPerfSetOt;
}
inline ::perfetto::protos::MdpPerfSetOtFtraceEvent* FtraceEvent::release_mdp_perf_set_ot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  if (has_mdp_perf_set_ot()) {
    clear_has_event();
      ::perfetto::protos::MdpPerfSetOtFtraceEvent* temp = event_.mdp_perf_set_ot_;
    event_.mdp_perf_set_ot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetOtFtraceEvent& FtraceEvent::mdp_perf_set_ot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  return has_mdp_perf_set_ot()
      ? *event_.mdp_perf_set_ot_
      : *reinterpret_cast< ::perfetto::protos::MdpPerfSetOtFtraceEvent*>(&::perfetto::protos::_MdpPerfSetOtFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpPerfSetOtFtraceEvent* FtraceEvent::mutable_mdp_perf_set_ot() {
  if (!has_mdp_perf_set_ot()) {
    clear_event();
    set_has_mdp_perf_set_ot();
    event_.mdp_perf_set_ot_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetOtFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  return event_.mdp_perf_set_ot_;
}

// optional .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
inline bool FtraceEvent::has_mdp_sspp_change() const {
  return event_case() == kMdpSsppChange;
}
inline void FtraceEvent::set_has_mdp_sspp_change() {
  _oneof_case_[0] = kMdpSsppChange;
}
inline ::perfetto::protos::MdpSsppChangeFtraceEvent* FtraceEvent::release_mdp_sspp_change() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_sspp_change)
  if (has_mdp_sspp_change()) {
    clear_has_event();
      ::perfetto::protos::MdpSsppChangeFtraceEvent* temp = event_.mdp_sspp_change_;
    event_.mdp_sspp_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpSsppChangeFtraceEvent& FtraceEvent::mdp_sspp_change() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_sspp_change)
  return has_mdp_sspp_change()
      ? *event_.mdp_sspp_change_
      : *reinterpret_cast< ::perfetto::protos::MdpSsppChangeFtraceEvent*>(&::perfetto::protos::_MdpSsppChangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpSsppChangeFtraceEvent* FtraceEvent::mutable_mdp_sspp_change() {
  if (!has_mdp_sspp_change()) {
    clear_event();
    set_has_mdp_sspp_change();
    event_.mdp_sspp_change_ = CreateMaybeMessage< ::perfetto::protos::MdpSsppChangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_sspp_change)
  return event_.mdp_sspp_change_;
}

// optional .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
inline bool FtraceEvent::has_tracing_mark_write() const {
  return event_case() == kTracingMarkWrite;
}
inline void FtraceEvent::set_has_tracing_mark_write() {
  _oneof_case_[0] = kTracingMarkWrite;
}
inline ::perfetto::protos::TracingMarkWriteFtraceEvent* FtraceEvent::release_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.tracing_mark_write)
  if (has_tracing_mark_write()) {
    clear_has_event();
      ::perfetto::protos::TracingMarkWriteFtraceEvent* temp = event_.tracing_mark_write_;
    event_.tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TracingMarkWriteFtraceEvent& FtraceEvent::tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.tracing_mark_write)
  return has_tracing_mark_write()
      ? *event_.tracing_mark_write_
      : *reinterpret_cast< ::perfetto::protos::TracingMarkWriteFtraceEvent*>(&::perfetto::protos::_TracingMarkWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::TracingMarkWriteFtraceEvent* FtraceEvent::mutable_tracing_mark_write() {
  if (!has_tracing_mark_write()) {
    clear_event();
    set_has_tracing_mark_write();
    event_.tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::TracingMarkWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.tracing_mark_write)
  return event_.tracing_mark_write_;
}

// optional .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
inline bool FtraceEvent::has_mdp_cmd_pingpong_done() const {
  return event_case() == kMdpCmdPingpongDone;
}
inline void FtraceEvent::set_has_mdp_cmd_pingpong_done() {
  _oneof_case_[0] = kMdpCmdPingpongDone;
}
inline ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* FtraceEvent::release_mdp_cmd_pingpong_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  if (has_mdp_cmd_pingpong_done()) {
    clear_has_event();
      ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* temp = event_.mdp_cmd_pingpong_done_;
    event_.mdp_cmd_pingpong_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& FtraceEvent::mdp_cmd_pingpong_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  return has_mdp_cmd_pingpong_done()
      ? *event_.mdp_cmd_pingpong_done_
      : *reinterpret_cast< ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent*>(&::perfetto::protos::_MdpCmdPingpongDoneFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* FtraceEvent::mutable_mdp_cmd_pingpong_done() {
  if (!has_mdp_cmd_pingpong_done()) {
    clear_event();
    set_has_mdp_cmd_pingpong_done();
    event_.mdp_cmd_pingpong_done_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  return event_.mdp_cmd_pingpong_done_;
}

// optional .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
inline bool FtraceEvent::has_mdp_compare_bw() const {
  return event_case() == kMdpCompareBw;
}
inline void FtraceEvent::set_has_mdp_compare_bw() {
  _oneof_case_[0] = kMdpCompareBw;
}
inline ::perfetto::protos::MdpCompareBwFtraceEvent* FtraceEvent::release_mdp_compare_bw() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_compare_bw)
  if (has_mdp_compare_bw()) {
    clear_has_event();
      ::perfetto::protos::MdpCompareBwFtraceEvent* temp = event_.mdp_compare_bw_;
    event_.mdp_compare_bw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCompareBwFtraceEvent& FtraceEvent::mdp_compare_bw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_compare_bw)
  return has_mdp_compare_bw()
      ? *event_.mdp_compare_bw_
      : *reinterpret_cast< ::perfetto::protos::MdpCompareBwFtraceEvent*>(&::perfetto::protos::_MdpCompareBwFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCompareBwFtraceEvent* FtraceEvent::mutable_mdp_compare_bw() {
  if (!has_mdp_compare_bw()) {
    clear_event();
    set_has_mdp_compare_bw();
    event_.mdp_compare_bw_ = CreateMaybeMessage< ::perfetto::protos::MdpCompareBwFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_compare_bw)
  return event_.mdp_compare_bw_;
}

// optional .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
inline bool FtraceEvent::has_mdp_perf_set_panic_luts() const {
  return event_case() == kMdpPerfSetPanicLuts;
}
inline void FtraceEvent::set_has_mdp_perf_set_panic_luts() {
  _oneof_case_[0] = kMdpPerfSetPanicLuts;
}
inline ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::release_mdp_perf_set_panic_luts() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  if (has_mdp_perf_set_panic_luts()) {
    clear_has_event();
      ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* temp = event_.mdp_perf_set_panic_luts_;
    event_.mdp_perf_set_panic_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& FtraceEvent::mdp_perf_set_panic_luts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  return has_mdp_perf_set_panic_luts()
      ? *event_.mdp_perf_set_panic_luts_
      : *reinterpret_cast< ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent*>(&::perfetto::protos::_MdpPerfSetPanicLutsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::mutable_mdp_perf_set_panic_luts() {
  if (!has_mdp_perf_set_panic_luts()) {
    clear_event();
    set_has_mdp_perf_set_panic_luts();
    event_.mdp_perf_set_panic_luts_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  return event_.mdp_perf_set_panic_luts_;
}

// optional .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
inline bool FtraceEvent::has_mdp_sspp_set() const {
  return event_case() == kMdpSsppSet;
}
inline void FtraceEvent::set_has_mdp_sspp_set() {
  _oneof_case_[0] = kMdpSsppSet;
}
inline ::perfetto::protos::MdpSsppSetFtraceEvent* FtraceEvent::release_mdp_sspp_set() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_sspp_set)
  if (has_mdp_sspp_set()) {
    clear_has_event();
      ::perfetto::protos::MdpSsppSetFtraceEvent* temp = event_.mdp_sspp_set_;
    event_.mdp_sspp_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpSsppSetFtraceEvent& FtraceEvent::mdp_sspp_set() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_sspp_set)
  return has_mdp_sspp_set()
      ? *event_.mdp_sspp_set_
      : *reinterpret_cast< ::perfetto::protos::MdpSsppSetFtraceEvent*>(&::perfetto::protos::_MdpSsppSetFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpSsppSetFtraceEvent* FtraceEvent::mutable_mdp_sspp_set() {
  if (!has_mdp_sspp_set()) {
    clear_event();
    set_has_mdp_sspp_set();
    event_.mdp_sspp_set_ = CreateMaybeMessage< ::perfetto::protos::MdpSsppSetFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_sspp_set)
  return event_.mdp_sspp_set_;
}

// optional .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
inline bool FtraceEvent::has_mdp_cmd_readptr_done() const {
  return event_case() == kMdpCmdReadptrDone;
}
inline void FtraceEvent::set_has_mdp_cmd_readptr_done() {
  _oneof_case_[0] = kMdpCmdReadptrDone;
}
inline ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* FtraceEvent::release_mdp_cmd_readptr_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  if (has_mdp_cmd_readptr_done()) {
    clear_has_event();
      ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* temp = event_.mdp_cmd_readptr_done_;
    event_.mdp_cmd_readptr_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& FtraceEvent::mdp_cmd_readptr_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  return has_mdp_cmd_readptr_done()
      ? *event_.mdp_cmd_readptr_done_
      : *reinterpret_cast< ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent*>(&::perfetto::protos::_MdpCmdReadptrDoneFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* FtraceEvent::mutable_mdp_cmd_readptr_done() {
  if (!has_mdp_cmd_readptr_done()) {
    clear_event();
    set_has_mdp_cmd_readptr_done();
    event_.mdp_cmd_readptr_done_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  return event_.mdp_cmd_readptr_done_;
}

// optional .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
inline bool FtraceEvent::has_mdp_misr_crc() const {
  return event_case() == kMdpMisrCrc;
}
inline void FtraceEvent::set_has_mdp_misr_crc() {
  _oneof_case_[0] = kMdpMisrCrc;
}
inline ::perfetto::protos::MdpMisrCrcFtraceEvent* FtraceEvent::release_mdp_misr_crc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_misr_crc)
  if (has_mdp_misr_crc()) {
    clear_has_event();
      ::perfetto::protos::MdpMisrCrcFtraceEvent* temp = event_.mdp_misr_crc_;
    event_.mdp_misr_crc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpMisrCrcFtraceEvent& FtraceEvent::mdp_misr_crc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_misr_crc)
  return has_mdp_misr_crc()
      ? *event_.mdp_misr_crc_
      : *reinterpret_cast< ::perfetto::protos::MdpMisrCrcFtraceEvent*>(&::perfetto::protos::_MdpMisrCrcFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpMisrCrcFtraceEvent* FtraceEvent::mutable_mdp_misr_crc() {
  if (!has_mdp_misr_crc()) {
    clear_event();
    set_has_mdp_misr_crc();
    event_.mdp_misr_crc_ = CreateMaybeMessage< ::perfetto::protos::MdpMisrCrcFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_misr_crc)
  return event_.mdp_misr_crc_;
}

// optional .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
inline bool FtraceEvent::has_mdp_perf_set_qos_luts() const {
  return event_case() == kMdpPerfSetQosLuts;
}
inline void FtraceEvent::set_has_mdp_perf_set_qos_luts() {
  _oneof_case_[0] = kMdpPerfSetQosLuts;
}
inline ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* FtraceEvent::release_mdp_perf_set_qos_luts() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  if (has_mdp_perf_set_qos_luts()) {
    clear_has_event();
      ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* temp = event_.mdp_perf_set_qos_luts_;
    event_.mdp_perf_set_qos_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& FtraceEvent::mdp_perf_set_qos_luts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  return has_mdp_perf_set_qos_luts()
      ? *event_.mdp_perf_set_qos_luts_
      : *reinterpret_cast< ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent*>(&::perfetto::protos::_MdpPerfSetQosLutsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* FtraceEvent::mutable_mdp_perf_set_qos_luts() {
  if (!has_mdp_perf_set_qos_luts()) {
    clear_event();
    set_has_mdp_perf_set_qos_luts();
    event_.mdp_perf_set_qos_luts_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  return event_.mdp_perf_set_qos_luts_;
}

// optional .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
inline bool FtraceEvent::has_mdp_trace_counter() const {
  return event_case() == kMdpTraceCounter;
}
inline void FtraceEvent::set_has_mdp_trace_counter() {
  _oneof_case_[0] = kMdpTraceCounter;
}
inline ::perfetto::protos::MdpTraceCounterFtraceEvent* FtraceEvent::release_mdp_trace_counter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_trace_counter)
  if (has_mdp_trace_counter()) {
    clear_has_event();
      ::perfetto::protos::MdpTraceCounterFtraceEvent* temp = event_.mdp_trace_counter_;
    event_.mdp_trace_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpTraceCounterFtraceEvent& FtraceEvent::mdp_trace_counter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_trace_counter)
  return has_mdp_trace_counter()
      ? *event_.mdp_trace_counter_
      : *reinterpret_cast< ::perfetto::protos::MdpTraceCounterFtraceEvent*>(&::perfetto::protos::_MdpTraceCounterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpTraceCounterFtraceEvent* FtraceEvent::mutable_mdp_trace_counter() {
  if (!has_mdp_trace_counter()) {
    clear_event();
    set_has_mdp_trace_counter();
    event_.mdp_trace_counter_ = CreateMaybeMessage< ::perfetto::protos::MdpTraceCounterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_trace_counter)
  return event_.mdp_trace_counter_;
}

// optional .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
inline bool FtraceEvent::has_mdp_cmd_release_bw() const {
  return event_case() == kMdpCmdReleaseBw;
}
inline void FtraceEvent::set_has_mdp_cmd_release_bw() {
  _oneof_case_[0] = kMdpCmdReleaseBw;
}
inline ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* FtraceEvent::release_mdp_cmd_release_bw() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  if (has_mdp_cmd_release_bw()) {
    clear_has_event();
      ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* temp = event_.mdp_cmd_release_bw_;
    event_.mdp_cmd_release_bw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& FtraceEvent::mdp_cmd_release_bw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  return has_mdp_cmd_release_bw()
      ? *event_.mdp_cmd_release_bw_
      : *reinterpret_cast< ::perfetto::protos::MdpCmdReleaseBwFtraceEvent*>(&::perfetto::protos::_MdpCmdReleaseBwFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* FtraceEvent::mutable_mdp_cmd_release_bw() {
  if (!has_mdp_cmd_release_bw()) {
    clear_event();
    set_has_mdp_cmd_release_bw();
    event_.mdp_cmd_release_bw_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdReleaseBwFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  return event_.mdp_cmd_release_bw_;
}

// optional .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
inline bool FtraceEvent::has_mdp_mixer_update() const {
  return event_case() == kMdpMixerUpdate;
}
inline void FtraceEvent::set_has_mdp_mixer_update() {
  _oneof_case_[0] = kMdpMixerUpdate;
}
inline ::perfetto::protos::MdpMixerUpdateFtraceEvent* FtraceEvent::release_mdp_mixer_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_mixer_update)
  if (has_mdp_mixer_update()) {
    clear_has_event();
      ::perfetto::protos::MdpMixerUpdateFtraceEvent* temp = event_.mdp_mixer_update_;
    event_.mdp_mixer_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpMixerUpdateFtraceEvent& FtraceEvent::mdp_mixer_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_mixer_update)
  return has_mdp_mixer_update()
      ? *event_.mdp_mixer_update_
      : *reinterpret_cast< ::perfetto::protos::MdpMixerUpdateFtraceEvent*>(&::perfetto::protos::_MdpMixerUpdateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpMixerUpdateFtraceEvent* FtraceEvent::mutable_mdp_mixer_update() {
  if (!has_mdp_mixer_update()) {
    clear_event();
    set_has_mdp_mixer_update();
    event_.mdp_mixer_update_ = CreateMaybeMessage< ::perfetto::protos::MdpMixerUpdateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_mixer_update)
  return event_.mdp_mixer_update_;
}

// optional .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
inline bool FtraceEvent::has_mdp_perf_set_wm_levels() const {
  return event_case() == kMdpPerfSetWmLevels;
}
inline void FtraceEvent::set_has_mdp_perf_set_wm_levels() {
  _oneof_case_[0] = kMdpPerfSetWmLevels;
}
inline ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::release_mdp_perf_set_wm_levels() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  if (has_mdp_perf_set_wm_levels()) {
    clear_has_event();
      ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* temp = event_.mdp_perf_set_wm_levels_;
    event_.mdp_perf_set_wm_levels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& FtraceEvent::mdp_perf_set_wm_levels() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  return has_mdp_perf_set_wm_levels()
      ? *event_.mdp_perf_set_wm_levels_
      : *reinterpret_cast< ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent*>(&::perfetto::protos::_MdpPerfSetWmLevelsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::mutable_mdp_perf_set_wm_levels() {
  if (!has_mdp_perf_set_wm_levels()) {
    clear_event();
    set_has_mdp_perf_set_wm_levels();
    event_.mdp_perf_set_wm_levels_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  return event_.mdp_perf_set_wm_levels_;
}

// optional .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
inline bool FtraceEvent::has_mdp_video_underrun_done() const {
  return event_case() == kMdpVideoUnderrunDone;
}
inline void FtraceEvent::set_has_mdp_video_underrun_done() {
  _oneof_case_[0] = kMdpVideoUnderrunDone;
}
inline ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::release_mdp_video_underrun_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  if (has_mdp_video_underrun_done()) {
    clear_has_event();
      ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* temp = event_.mdp_video_underrun_done_;
    event_.mdp_video_underrun_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& FtraceEvent::mdp_video_underrun_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  return has_mdp_video_underrun_done()
      ? *event_.mdp_video_underrun_done_
      : *reinterpret_cast< ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent*>(&::perfetto::protos::_MdpVideoUnderrunDoneFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::mutable_mdp_video_underrun_done() {
  if (!has_mdp_video_underrun_done()) {
    clear_event();
    set_has_mdp_video_underrun_done();
    event_.mdp_video_underrun_done_ = CreateMaybeMessage< ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  return event_.mdp_video_underrun_done_;
}

// optional .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
inline bool FtraceEvent::has_mdp_cmd_wait_pingpong() const {
  return event_case() == kMdpCmdWaitPingpong;
}
inline void FtraceEvent::set_has_mdp_cmd_wait_pingpong() {
  _oneof_case_[0] = kMdpCmdWaitPingpong;
}
inline ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* FtraceEvent::release_mdp_cmd_wait_pingpong() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  if (has_mdp_cmd_wait_pingpong()) {
    clear_has_event();
      ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* temp = event_.mdp_cmd_wait_pingpong_;
    event_.mdp_cmd_wait_pingpong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& FtraceEvent::mdp_cmd_wait_pingpong() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  return has_mdp_cmd_wait_pingpong()
      ? *event_.mdp_cmd_wait_pingpong_
      : *reinterpret_cast< ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent*>(&::perfetto::protos::_MdpCmdWaitPingpongFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* FtraceEvent::mutable_mdp_cmd_wait_pingpong() {
  if (!has_mdp_cmd_wait_pingpong()) {
    clear_event();
    set_has_mdp_cmd_wait_pingpong();
    event_.mdp_cmd_wait_pingpong_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  return event_.mdp_cmd_wait_pingpong_;
}

// optional .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
inline bool FtraceEvent::has_mdp_perf_prefill_calc() const {
  return event_case() == kMdpPerfPrefillCalc;
}
inline void FtraceEvent::set_has_mdp_perf_prefill_calc() {
  _oneof_case_[0] = kMdpPerfPrefillCalc;
}
inline ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* FtraceEvent::release_mdp_perf_prefill_calc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  if (has_mdp_perf_prefill_calc()) {
    clear_has_event();
      ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* temp = event_.mdp_perf_prefill_calc_;
    event_.mdp_perf_prefill_calc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& FtraceEvent::mdp_perf_prefill_calc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  return has_mdp_perf_prefill_calc()
      ? *event_.mdp_perf_prefill_calc_
      : *reinterpret_cast< ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent*>(&::perfetto::protos::_MdpPerfPrefillCalcFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* FtraceEvent::mutable_mdp_perf_prefill_calc() {
  if (!has_mdp_perf_prefill_calc()) {
    clear_event();
    set_has_mdp_perf_prefill_calc();
    event_.mdp_perf_prefill_calc_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  return event_.mdp_perf_prefill_calc_;
}

// optional .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
inline bool FtraceEvent::has_mdp_perf_update_bus() const {
  return event_case() == kMdpPerfUpdateBus;
}
inline void FtraceEvent::set_has_mdp_perf_update_bus() {
  _oneof_case_[0] = kMdpPerfUpdateBus;
}
inline ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* FtraceEvent::release_mdp_perf_update_bus() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  if (has_mdp_perf_update_bus()) {
    clear_has_event();
      ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* temp = event_.mdp_perf_update_bus_;
    event_.mdp_perf_update_bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& FtraceEvent::mdp_perf_update_bus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  return has_mdp_perf_update_bus()
      ? *event_.mdp_perf_update_bus_
      : *reinterpret_cast< ::perfetto::protos::MdpPerfUpdateBusFtraceEvent*>(&::perfetto::protos::_MdpPerfUpdateBusFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* FtraceEvent::mutable_mdp_perf_update_bus() {
  if (!has_mdp_perf_update_bus()) {
    clear_event();
    set_has_mdp_perf_update_bus();
    event_.mdp_perf_update_bus_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfUpdateBusFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  return event_.mdp_perf_update_bus_;
}

// optional .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
inline bool FtraceEvent::has_rotator_bw_ao_as_context() const {
  return event_case() == kRotatorBwAoAsContext;
}
inline void FtraceEvent::set_has_rotator_bw_ao_as_context() {
  _oneof_case_[0] = kRotatorBwAoAsContext;
}
inline ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* FtraceEvent::release_rotator_bw_ao_as_context() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  if (has_rotator_bw_ao_as_context()) {
    clear_has_event();
      ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* temp = event_.rotator_bw_ao_as_context_;
    event_.rotator_bw_ao_as_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& FtraceEvent::rotator_bw_ao_as_context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  return has_rotator_bw_ao_as_context()
      ? *event_.rotator_bw_ao_as_context_
      : *reinterpret_cast< ::perfetto::protos::RotatorBwAoAsContextFtraceEvent*>(&::perfetto::protos::_RotatorBwAoAsContextFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* FtraceEvent::mutable_rotator_bw_ao_as_context() {
  if (!has_rotator_bw_ao_as_context()) {
    clear_event();
    set_has_rotator_bw_ao_as_context();
    event_.rotator_bw_ao_as_context_ = CreateMaybeMessage< ::perfetto::protos::RotatorBwAoAsContextFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  return event_.rotator_bw_ao_as_context_;
}

// optional .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
inline bool FtraceEvent::has_mm_filemap_add_to_page_cache() const {
  return event_case() == kMmFilemapAddToPageCache;
}
inline void FtraceEvent::set_has_mm_filemap_add_to_page_cache() {
  _oneof_case_[0] = kMmFilemapAddToPageCache;
}
inline ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::release_mm_filemap_add_to_page_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  if (has_mm_filemap_add_to_page_cache()) {
    clear_has_event();
      ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* temp = event_.mm_filemap_add_to_page_cache_;
    event_.mm_filemap_add_to_page_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& FtraceEvent::mm_filemap_add_to_page_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  return has_mm_filemap_add_to_page_cache()
      ? *event_.mm_filemap_add_to_page_cache_
      : *reinterpret_cast< ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent*>(&::perfetto::protos::_MmFilemapAddToPageCacheFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::mutable_mm_filemap_add_to_page_cache() {
  if (!has_mm_filemap_add_to_page_cache()) {
    clear_event();
    set_has_mm_filemap_add_to_page_cache();
    event_.mm_filemap_add_to_page_cache_ = CreateMaybeMessage< ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  return event_.mm_filemap_add_to_page_cache_;
}

// optional .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
inline bool FtraceEvent::has_mm_filemap_delete_from_page_cache() const {
  return event_case() == kMmFilemapDeleteFromPageCache;
}
inline void FtraceEvent::set_has_mm_filemap_delete_from_page_cache() {
  _oneof_case_[0] = kMmFilemapDeleteFromPageCache;
}
inline ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::release_mm_filemap_delete_from_page_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  if (has_mm_filemap_delete_from_page_cache()) {
    clear_has_event();
      ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* temp = event_.mm_filemap_delete_from_page_cache_;
    event_.mm_filemap_delete_from_page_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& FtraceEvent::mm_filemap_delete_from_page_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  return has_mm_filemap_delete_from_page_cache()
      ? *event_.mm_filemap_delete_from_page_cache_
      : *reinterpret_cast< ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent*>(&::perfetto::protos::_MmFilemapDeleteFromPageCacheFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::mutable_mm_filemap_delete_from_page_cache() {
  if (!has_mm_filemap_delete_from_page_cache()) {
    clear_event();
    set_has_mm_filemap_delete_from_page_cache();
    event_.mm_filemap_delete_from_page_cache_ = CreateMaybeMessage< ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  return event_.mm_filemap_delete_from_page_cache_;
}

// optional .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
inline bool FtraceEvent::has_mm_compaction_begin() const {
  return event_case() == kMmCompactionBegin;
}
inline void FtraceEvent::set_has_mm_compaction_begin() {
  _oneof_case_[0] = kMmCompactionBegin;
}
inline ::perfetto::protos::MmCompactionBeginFtraceEvent* FtraceEvent::release_mm_compaction_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_begin)
  if (has_mm_compaction_begin()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionBeginFtraceEvent* temp = event_.mm_compaction_begin_;
    event_.mm_compaction_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionBeginFtraceEvent& FtraceEvent::mm_compaction_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_begin)
  return has_mm_compaction_begin()
      ? *event_.mm_compaction_begin_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionBeginFtraceEvent*>(&::perfetto::protos::_MmCompactionBeginFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionBeginFtraceEvent* FtraceEvent::mutable_mm_compaction_begin() {
  if (!has_mm_compaction_begin()) {
    clear_event();
    set_has_mm_compaction_begin();
    event_.mm_compaction_begin_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionBeginFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_begin)
  return event_.mm_compaction_begin_;
}

// optional .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
inline bool FtraceEvent::has_mm_compaction_defer_compaction() const {
  return event_case() == kMmCompactionDeferCompaction;
}
inline void FtraceEvent::set_has_mm_compaction_defer_compaction() {
  _oneof_case_[0] = kMmCompactionDeferCompaction;
}
inline ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* FtraceEvent::release_mm_compaction_defer_compaction() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  if (has_mm_compaction_defer_compaction()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* temp = event_.mm_compaction_defer_compaction_;
    event_.mm_compaction_defer_compaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& FtraceEvent::mm_compaction_defer_compaction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  return has_mm_compaction_defer_compaction()
      ? *event_.mm_compaction_defer_compaction_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent*>(&::perfetto::protos::_MmCompactionDeferCompactionFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* FtraceEvent::mutable_mm_compaction_defer_compaction() {
  if (!has_mm_compaction_defer_compaction()) {
    clear_event();
    set_has_mm_compaction_defer_compaction();
    event_.mm_compaction_defer_compaction_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  return event_.mm_compaction_defer_compaction_;
}

// optional .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
inline bool FtraceEvent::has_mm_compaction_deferred() const {
  return event_case() == kMmCompactionDeferred;
}
inline void FtraceEvent::set_has_mm_compaction_deferred() {
  _oneof_case_[0] = kMmCompactionDeferred;
}
inline ::perfetto::protos::MmCompactionDeferredFtraceEvent* FtraceEvent::release_mm_compaction_deferred() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  if (has_mm_compaction_deferred()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionDeferredFtraceEvent* temp = event_.mm_compaction_deferred_;
    event_.mm_compaction_deferred_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionDeferredFtraceEvent& FtraceEvent::mm_compaction_deferred() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  return has_mm_compaction_deferred()
      ? *event_.mm_compaction_deferred_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionDeferredFtraceEvent*>(&::perfetto::protos::_MmCompactionDeferredFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionDeferredFtraceEvent* FtraceEvent::mutable_mm_compaction_deferred() {
  if (!has_mm_compaction_deferred()) {
    clear_event();
    set_has_mm_compaction_deferred();
    event_.mm_compaction_deferred_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferredFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  return event_.mm_compaction_deferred_;
}

// optional .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
inline bool FtraceEvent::has_mm_compaction_defer_reset() const {
  return event_case() == kMmCompactionDeferReset;
}
inline void FtraceEvent::set_has_mm_compaction_defer_reset() {
  _oneof_case_[0] = kMmCompactionDeferReset;
}
inline ::perfetto::protos::MmCompactionDeferResetFtraceEvent* FtraceEvent::release_mm_compaction_defer_reset() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  if (has_mm_compaction_defer_reset()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionDeferResetFtraceEvent* temp = event_.mm_compaction_defer_reset_;
    event_.mm_compaction_defer_reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& FtraceEvent::mm_compaction_defer_reset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  return has_mm_compaction_defer_reset()
      ? *event_.mm_compaction_defer_reset_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionDeferResetFtraceEvent*>(&::perfetto::protos::_MmCompactionDeferResetFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionDeferResetFtraceEvent* FtraceEvent::mutable_mm_compaction_defer_reset() {
  if (!has_mm_compaction_defer_reset()) {
    clear_event();
    set_has_mm_compaction_defer_reset();
    event_.mm_compaction_defer_reset_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferResetFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  return event_.mm_compaction_defer_reset_;
}

// optional .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
inline bool FtraceEvent::has_mm_compaction_end() const {
  return event_case() == kMmCompactionEnd;
}
inline void FtraceEvent::set_has_mm_compaction_end() {
  _oneof_case_[0] = kMmCompactionEnd;
}
inline ::perfetto::protos::MmCompactionEndFtraceEvent* FtraceEvent::release_mm_compaction_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_end)
  if (has_mm_compaction_end()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionEndFtraceEvent* temp = event_.mm_compaction_end_;
    event_.mm_compaction_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionEndFtraceEvent& FtraceEvent::mm_compaction_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_end)
  return has_mm_compaction_end()
      ? *event_.mm_compaction_end_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionEndFtraceEvent*>(&::perfetto::protos::_MmCompactionEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionEndFtraceEvent* FtraceEvent::mutable_mm_compaction_end() {
  if (!has_mm_compaction_end()) {
    clear_event();
    set_has_mm_compaction_end();
    event_.mm_compaction_end_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_end)
  return event_.mm_compaction_end_;
}

// optional .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
inline bool FtraceEvent::has_mm_compaction_finished() const {
  return event_case() == kMmCompactionFinished;
}
inline void FtraceEvent::set_has_mm_compaction_finished() {
  _oneof_case_[0] = kMmCompactionFinished;
}
inline ::perfetto::protos::MmCompactionFinishedFtraceEvent* FtraceEvent::release_mm_compaction_finished() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_finished)
  if (has_mm_compaction_finished()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionFinishedFtraceEvent* temp = event_.mm_compaction_finished_;
    event_.mm_compaction_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionFinishedFtraceEvent& FtraceEvent::mm_compaction_finished() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_finished)
  return has_mm_compaction_finished()
      ? *event_.mm_compaction_finished_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionFinishedFtraceEvent*>(&::perfetto::protos::_MmCompactionFinishedFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionFinishedFtraceEvent* FtraceEvent::mutable_mm_compaction_finished() {
  if (!has_mm_compaction_finished()) {
    clear_event();
    set_has_mm_compaction_finished();
    event_.mm_compaction_finished_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionFinishedFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_finished)
  return event_.mm_compaction_finished_;
}

// optional .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
inline bool FtraceEvent::has_mm_compaction_isolate_freepages() const {
  return event_case() == kMmCompactionIsolateFreepages;
}
inline void FtraceEvent::set_has_mm_compaction_isolate_freepages() {
  _oneof_case_[0] = kMmCompactionIsolateFreepages;
}
inline ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::release_mm_compaction_isolate_freepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  if (has_mm_compaction_isolate_freepages()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* temp = event_.mm_compaction_isolate_freepages_;
    event_.mm_compaction_isolate_freepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& FtraceEvent::mm_compaction_isolate_freepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  return has_mm_compaction_isolate_freepages()
      ? *event_.mm_compaction_isolate_freepages_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent*>(&::perfetto::protos::_MmCompactionIsolateFreepagesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::mutable_mm_compaction_isolate_freepages() {
  if (!has_mm_compaction_isolate_freepages()) {
    clear_event();
    set_has_mm_compaction_isolate_freepages();
    event_.mm_compaction_isolate_freepages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  return event_.mm_compaction_isolate_freepages_;
}

// optional .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
inline bool FtraceEvent::has_mm_compaction_isolate_migratepages() const {
  return event_case() == kMmCompactionIsolateMigratepages;
}
inline void FtraceEvent::set_has_mm_compaction_isolate_migratepages() {
  _oneof_case_[0] = kMmCompactionIsolateMigratepages;
}
inline ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::release_mm_compaction_isolate_migratepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  if (has_mm_compaction_isolate_migratepages()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* temp = event_.mm_compaction_isolate_migratepages_;
    event_.mm_compaction_isolate_migratepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& FtraceEvent::mm_compaction_isolate_migratepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  return has_mm_compaction_isolate_migratepages()
      ? *event_.mm_compaction_isolate_migratepages_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent*>(&::perfetto::protos::_MmCompactionIsolateMigratepagesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::mutable_mm_compaction_isolate_migratepages() {
  if (!has_mm_compaction_isolate_migratepages()) {
    clear_event();
    set_has_mm_compaction_isolate_migratepages();
    event_.mm_compaction_isolate_migratepages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  return event_.mm_compaction_isolate_migratepages_;
}

// optional .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
inline bool FtraceEvent::has_mm_compaction_kcompactd_sleep() const {
  return event_case() == kMmCompactionKcompactdSleep;
}
inline void FtraceEvent::set_has_mm_compaction_kcompactd_sleep() {
  _oneof_case_[0] = kMmCompactionKcompactdSleep;
}
inline ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::release_mm_compaction_kcompactd_sleep() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  if (has_mm_compaction_kcompactd_sleep()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* temp = event_.mm_compaction_kcompactd_sleep_;
    event_.mm_compaction_kcompactd_sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& FtraceEvent::mm_compaction_kcompactd_sleep() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  return has_mm_compaction_kcompactd_sleep()
      ? *event_.mm_compaction_kcompactd_sleep_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent*>(&::perfetto::protos::_MmCompactionKcompactdSleepFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::mutable_mm_compaction_kcompactd_sleep() {
  if (!has_mm_compaction_kcompactd_sleep()) {
    clear_event();
    set_has_mm_compaction_kcompactd_sleep();
    event_.mm_compaction_kcompactd_sleep_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  return event_.mm_compaction_kcompactd_sleep_;
}

// optional .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
inline bool FtraceEvent::has_mm_compaction_kcompactd_wake() const {
  return event_case() == kMmCompactionKcompactdWake;
}
inline void FtraceEvent::set_has_mm_compaction_kcompactd_wake() {
  _oneof_case_[0] = kMmCompactionKcompactdWake;
}
inline ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::release_mm_compaction_kcompactd_wake() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  if (has_mm_compaction_kcompactd_wake()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* temp = event_.mm_compaction_kcompactd_wake_;
    event_.mm_compaction_kcompactd_wake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& FtraceEvent::mm_compaction_kcompactd_wake() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  return has_mm_compaction_kcompactd_wake()
      ? *event_.mm_compaction_kcompactd_wake_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent*>(&::perfetto::protos::_MmCompactionKcompactdWakeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::mutable_mm_compaction_kcompactd_wake() {
  if (!has_mm_compaction_kcompactd_wake()) {
    clear_event();
    set_has_mm_compaction_kcompactd_wake();
    event_.mm_compaction_kcompactd_wake_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  return event_.mm_compaction_kcompactd_wake_;
}

// optional .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
inline bool FtraceEvent::has_mm_compaction_migratepages() const {
  return event_case() == kMmCompactionMigratepages;
}
inline void FtraceEvent::set_has_mm_compaction_migratepages() {
  _oneof_case_[0] = kMmCompactionMigratepages;
}
inline ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* FtraceEvent::release_mm_compaction_migratepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  if (has_mm_compaction_migratepages()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* temp = event_.mm_compaction_migratepages_;
    event_.mm_compaction_migratepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& FtraceEvent::mm_compaction_migratepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  return has_mm_compaction_migratepages()
      ? *event_.mm_compaction_migratepages_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent*>(&::perfetto::protos::_MmCompactionMigratepagesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* FtraceEvent::mutable_mm_compaction_migratepages() {
  if (!has_mm_compaction_migratepages()) {
    clear_event();
    set_has_mm_compaction_migratepages();
    event_.mm_compaction_migratepages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  return event_.mm_compaction_migratepages_;
}

// optional .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
inline bool FtraceEvent::has_mm_compaction_suitable() const {
  return event_case() == kMmCompactionSuitable;
}
inline void FtraceEvent::set_has_mm_compaction_suitable() {
  _oneof_case_[0] = kMmCompactionSuitable;
}
inline ::perfetto::protos::MmCompactionSuitableFtraceEvent* FtraceEvent::release_mm_compaction_suitable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  if (has_mm_compaction_suitable()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionSuitableFtraceEvent* temp = event_.mm_compaction_suitable_;
    event_.mm_compaction_suitable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionSuitableFtraceEvent& FtraceEvent::mm_compaction_suitable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  return has_mm_compaction_suitable()
      ? *event_.mm_compaction_suitable_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionSuitableFtraceEvent*>(&::perfetto::protos::_MmCompactionSuitableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionSuitableFtraceEvent* FtraceEvent::mutable_mm_compaction_suitable() {
  if (!has_mm_compaction_suitable()) {
    clear_event();
    set_has_mm_compaction_suitable();
    event_.mm_compaction_suitable_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionSuitableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  return event_.mm_compaction_suitable_;
}

// optional .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
inline bool FtraceEvent::has_mm_compaction_try_to_compact_pages() const {
  return event_case() == kMmCompactionTryToCompactPages;
}
inline void FtraceEvent::set_has_mm_compaction_try_to_compact_pages() {
  _oneof_case_[0] = kMmCompactionTryToCompactPages;
}
inline ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::release_mm_compaction_try_to_compact_pages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  if (has_mm_compaction_try_to_compact_pages()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* temp = event_.mm_compaction_try_to_compact_pages_;
    event_.mm_compaction_try_to_compact_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& FtraceEvent::mm_compaction_try_to_compact_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  return has_mm_compaction_try_to_compact_pages()
      ? *event_.mm_compaction_try_to_compact_pages_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent*>(&::perfetto::protos::_MmCompactionTryToCompactPagesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::mutable_mm_compaction_try_to_compact_pages() {
  if (!has_mm_compaction_try_to_compact_pages()) {
    clear_event();
    set_has_mm_compaction_try_to_compact_pages();
    event_.mm_compaction_try_to_compact_pages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  return event_.mm_compaction_try_to_compact_pages_;
}

// optional .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
inline bool FtraceEvent::has_mm_compaction_wakeup_kcompactd() const {
  return event_case() == kMmCompactionWakeupKcompactd;
}
inline void FtraceEvent::set_has_mm_compaction_wakeup_kcompactd() {
  _oneof_case_[0] = kMmCompactionWakeupKcompactd;
}
inline ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::release_mm_compaction_wakeup_kcompactd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  if (has_mm_compaction_wakeup_kcompactd()) {
    clear_has_event();
      ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* temp = event_.mm_compaction_wakeup_kcompactd_;
    event_.mm_compaction_wakeup_kcompactd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& FtraceEvent::mm_compaction_wakeup_kcompactd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  return has_mm_compaction_wakeup_kcompactd()
      ? *event_.mm_compaction_wakeup_kcompactd_
      : *reinterpret_cast< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent*>(&::perfetto::protos::_MmCompactionWakeupKcompactdFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::mutable_mm_compaction_wakeup_kcompactd() {
  if (!has_mm_compaction_wakeup_kcompactd()) {
    clear_event();
    set_has_mm_compaction_wakeup_kcompactd();
    event_.mm_compaction_wakeup_kcompactd_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  return event_.mm_compaction_wakeup_kcompactd_;
}

// optional .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
inline bool FtraceEvent::has_suspend_resume() const {
  return event_case() == kSuspendResume;
}
inline void FtraceEvent::set_has_suspend_resume() {
  _oneof_case_[0] = kSuspendResume;
}
inline ::perfetto::protos::SuspendResumeFtraceEvent* FtraceEvent::release_suspend_resume() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.suspend_resume)
  if (has_suspend_resume()) {
    clear_has_event();
      ::perfetto::protos::SuspendResumeFtraceEvent* temp = event_.suspend_resume_;
    event_.suspend_resume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SuspendResumeFtraceEvent& FtraceEvent::suspend_resume() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.suspend_resume)
  return has_suspend_resume()
      ? *event_.suspend_resume_
      : *reinterpret_cast< ::perfetto::protos::SuspendResumeFtraceEvent*>(&::perfetto::protos::_SuspendResumeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SuspendResumeFtraceEvent* FtraceEvent::mutable_suspend_resume() {
  if (!has_suspend_resume()) {
    clear_event();
    set_has_suspend_resume();
    event_.suspend_resume_ = CreateMaybeMessage< ::perfetto::protos::SuspendResumeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.suspend_resume)
  return event_.suspend_resume_;
}

// optional .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
inline bool FtraceEvent::has_sched_wakeup_new() const {
  return event_case() == kSchedWakeupNew;
}
inline void FtraceEvent::set_has_sched_wakeup_new() {
  _oneof_case_[0] = kSchedWakeupNew;
}
inline ::perfetto::protos::SchedWakeupNewFtraceEvent* FtraceEvent::release_sched_wakeup_new() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_wakeup_new)
  if (has_sched_wakeup_new()) {
    clear_has_event();
      ::perfetto::protos::SchedWakeupNewFtraceEvent* temp = event_.sched_wakeup_new_;
    event_.sched_wakeup_new_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedWakeupNewFtraceEvent& FtraceEvent::sched_wakeup_new() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_wakeup_new)
  return has_sched_wakeup_new()
      ? *event_.sched_wakeup_new_
      : *reinterpret_cast< ::perfetto::protos::SchedWakeupNewFtraceEvent*>(&::perfetto::protos::_SchedWakeupNewFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedWakeupNewFtraceEvent* FtraceEvent::mutable_sched_wakeup_new() {
  if (!has_sched_wakeup_new()) {
    clear_event();
    set_has_sched_wakeup_new();
    event_.sched_wakeup_new_ = CreateMaybeMessage< ::perfetto::protos::SchedWakeupNewFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_wakeup_new)
  return event_.sched_wakeup_new_;
}

// optional .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
inline bool FtraceEvent::has_block_bio_backmerge() const {
  return event_case() == kBlockBioBackmerge;
}
inline void FtraceEvent::set_has_block_bio_backmerge() {
  _oneof_case_[0] = kBlockBioBackmerge;
}
inline ::perfetto::protos::BlockBioBackmergeFtraceEvent* FtraceEvent::release_block_bio_backmerge() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_backmerge)
  if (has_block_bio_backmerge()) {
    clear_has_event();
      ::perfetto::protos::BlockBioBackmergeFtraceEvent* temp = event_.block_bio_backmerge_;
    event_.block_bio_backmerge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioBackmergeFtraceEvent& FtraceEvent::block_bio_backmerge() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_backmerge)
  return has_block_bio_backmerge()
      ? *event_.block_bio_backmerge_
      : *reinterpret_cast< ::perfetto::protos::BlockBioBackmergeFtraceEvent*>(&::perfetto::protos::_BlockBioBackmergeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockBioBackmergeFtraceEvent* FtraceEvent::mutable_block_bio_backmerge() {
  if (!has_block_bio_backmerge()) {
    clear_event();
    set_has_block_bio_backmerge();
    event_.block_bio_backmerge_ = CreateMaybeMessage< ::perfetto::protos::BlockBioBackmergeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_backmerge)
  return event_.block_bio_backmerge_;
}

// optional .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
inline bool FtraceEvent::has_block_bio_bounce() const {
  return event_case() == kBlockBioBounce;
}
inline void FtraceEvent::set_has_block_bio_bounce() {
  _oneof_case_[0] = kBlockBioBounce;
}
inline ::perfetto::protos::BlockBioBounceFtraceEvent* FtraceEvent::release_block_bio_bounce() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_bounce)
  if (has_block_bio_bounce()) {
    clear_has_event();
      ::perfetto::protos::BlockBioBounceFtraceEvent* temp = event_.block_bio_bounce_;
    event_.block_bio_bounce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioBounceFtraceEvent& FtraceEvent::block_bio_bounce() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_bounce)
  return has_block_bio_bounce()
      ? *event_.block_bio_bounce_
      : *reinterpret_cast< ::perfetto::protos::BlockBioBounceFtraceEvent*>(&::perfetto::protos::_BlockBioBounceFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockBioBounceFtraceEvent* FtraceEvent::mutable_block_bio_bounce() {
  if (!has_block_bio_bounce()) {
    clear_event();
    set_has_block_bio_bounce();
    event_.block_bio_bounce_ = CreateMaybeMessage< ::perfetto::protos::BlockBioBounceFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_bounce)
  return event_.block_bio_bounce_;
}

// optional .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
inline bool FtraceEvent::has_block_bio_complete() const {
  return event_case() == kBlockBioComplete;
}
inline void FtraceEvent::set_has_block_bio_complete() {
  _oneof_case_[0] = kBlockBioComplete;
}
inline ::perfetto::protos::BlockBioCompleteFtraceEvent* FtraceEvent::release_block_bio_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_complete)
  if (has_block_bio_complete()) {
    clear_has_event();
      ::perfetto::protos::BlockBioCompleteFtraceEvent* temp = event_.block_bio_complete_;
    event_.block_bio_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioCompleteFtraceEvent& FtraceEvent::block_bio_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_complete)
  return has_block_bio_complete()
      ? *event_.block_bio_complete_
      : *reinterpret_cast< ::perfetto::protos::BlockBioCompleteFtraceEvent*>(&::perfetto::protos::_BlockBioCompleteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockBioCompleteFtraceEvent* FtraceEvent::mutable_block_bio_complete() {
  if (!has_block_bio_complete()) {
    clear_event();
    set_has_block_bio_complete();
    event_.block_bio_complete_ = CreateMaybeMessage< ::perfetto::protos::BlockBioCompleteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_complete)
  return event_.block_bio_complete_;
}

// optional .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
inline bool FtraceEvent::has_block_bio_frontmerge() const {
  return event_case() == kBlockBioFrontmerge;
}
inline void FtraceEvent::set_has_block_bio_frontmerge() {
  _oneof_case_[0] = kBlockBioFrontmerge;
}
inline ::perfetto::protos::BlockBioFrontmergeFtraceEvent* FtraceEvent::release_block_bio_frontmerge() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  if (has_block_bio_frontmerge()) {
    clear_has_event();
      ::perfetto::protos::BlockBioFrontmergeFtraceEvent* temp = event_.block_bio_frontmerge_;
    event_.block_bio_frontmerge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& FtraceEvent::block_bio_frontmerge() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  return has_block_bio_frontmerge()
      ? *event_.block_bio_frontmerge_
      : *reinterpret_cast< ::perfetto::protos::BlockBioFrontmergeFtraceEvent*>(&::perfetto::protos::_BlockBioFrontmergeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockBioFrontmergeFtraceEvent* FtraceEvent::mutable_block_bio_frontmerge() {
  if (!has_block_bio_frontmerge()) {
    clear_event();
    set_has_block_bio_frontmerge();
    event_.block_bio_frontmerge_ = CreateMaybeMessage< ::perfetto::protos::BlockBioFrontmergeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  return event_.block_bio_frontmerge_;
}

// optional .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
inline bool FtraceEvent::has_block_bio_queue() const {
  return event_case() == kBlockBioQueue;
}
inline void FtraceEvent::set_has_block_bio_queue() {
  _oneof_case_[0] = kBlockBioQueue;
}
inline ::perfetto::protos::BlockBioQueueFtraceEvent* FtraceEvent::release_block_bio_queue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_queue)
  if (has_block_bio_queue()) {
    clear_has_event();
      ::perfetto::protos::BlockBioQueueFtraceEvent* temp = event_.block_bio_queue_;
    event_.block_bio_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioQueueFtraceEvent& FtraceEvent::block_bio_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_queue)
  return has_block_bio_queue()
      ? *event_.block_bio_queue_
      : *reinterpret_cast< ::perfetto::protos::BlockBioQueueFtraceEvent*>(&::perfetto::protos::_BlockBioQueueFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockBioQueueFtraceEvent* FtraceEvent::mutable_block_bio_queue() {
  if (!has_block_bio_queue()) {
    clear_event();
    set_has_block_bio_queue();
    event_.block_bio_queue_ = CreateMaybeMessage< ::perfetto::protos::BlockBioQueueFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_queue)
  return event_.block_bio_queue_;
}

// optional .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
inline bool FtraceEvent::has_block_bio_remap() const {
  return event_case() == kBlockBioRemap;
}
inline void FtraceEvent::set_has_block_bio_remap() {
  _oneof_case_[0] = kBlockBioRemap;
}
inline ::perfetto::protos::BlockBioRemapFtraceEvent* FtraceEvent::release_block_bio_remap() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_remap)
  if (has_block_bio_remap()) {
    clear_has_event();
      ::perfetto::protos::BlockBioRemapFtraceEvent* temp = event_.block_bio_remap_;
    event_.block_bio_remap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioRemapFtraceEvent& FtraceEvent::block_bio_remap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_remap)
  return has_block_bio_remap()
      ? *event_.block_bio_remap_
      : *reinterpret_cast< ::perfetto::protos::BlockBioRemapFtraceEvent*>(&::perfetto::protos::_BlockBioRemapFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockBioRemapFtraceEvent* FtraceEvent::mutable_block_bio_remap() {
  if (!has_block_bio_remap()) {
    clear_event();
    set_has_block_bio_remap();
    event_.block_bio_remap_ = CreateMaybeMessage< ::perfetto::protos::BlockBioRemapFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_remap)
  return event_.block_bio_remap_;
}

// optional .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
inline bool FtraceEvent::has_block_dirty_buffer() const {
  return event_case() == kBlockDirtyBuffer;
}
inline void FtraceEvent::set_has_block_dirty_buffer() {
  _oneof_case_[0] = kBlockDirtyBuffer;
}
inline ::perfetto::protos::BlockDirtyBufferFtraceEvent* FtraceEvent::release_block_dirty_buffer() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_dirty_buffer)
  if (has_block_dirty_buffer()) {
    clear_has_event();
      ::perfetto::protos::BlockDirtyBufferFtraceEvent* temp = event_.block_dirty_buffer_;
    event_.block_dirty_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockDirtyBufferFtraceEvent& FtraceEvent::block_dirty_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_dirty_buffer)
  return has_block_dirty_buffer()
      ? *event_.block_dirty_buffer_
      : *reinterpret_cast< ::perfetto::protos::BlockDirtyBufferFtraceEvent*>(&::perfetto::protos::_BlockDirtyBufferFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockDirtyBufferFtraceEvent* FtraceEvent::mutable_block_dirty_buffer() {
  if (!has_block_dirty_buffer()) {
    clear_event();
    set_has_block_dirty_buffer();
    event_.block_dirty_buffer_ = CreateMaybeMessage< ::perfetto::protos::BlockDirtyBufferFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_dirty_buffer)
  return event_.block_dirty_buffer_;
}

// optional .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
inline bool FtraceEvent::has_block_getrq() const {
  return event_case() == kBlockGetrq;
}
inline void FtraceEvent::set_has_block_getrq() {
  _oneof_case_[0] = kBlockGetrq;
}
inline ::perfetto::protos::BlockGetrqFtraceEvent* FtraceEvent::release_block_getrq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_getrq)
  if (has_block_getrq()) {
    clear_has_event();
      ::perfetto::protos::BlockGetrqFtraceEvent* temp = event_.block_getrq_;
    event_.block_getrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockGetrqFtraceEvent& FtraceEvent::block_getrq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_getrq)
  return has_block_getrq()
      ? *event_.block_getrq_
      : *reinterpret_cast< ::perfetto::protos::BlockGetrqFtraceEvent*>(&::perfetto::protos::_BlockGetrqFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockGetrqFtraceEvent* FtraceEvent::mutable_block_getrq() {
  if (!has_block_getrq()) {
    clear_event();
    set_has_block_getrq();
    event_.block_getrq_ = CreateMaybeMessage< ::perfetto::protos::BlockGetrqFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_getrq)
  return event_.block_getrq_;
}

// optional .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
inline bool FtraceEvent::has_block_plug() const {
  return event_case() == kBlockPlug;
}
inline void FtraceEvent::set_has_block_plug() {
  _oneof_case_[0] = kBlockPlug;
}
inline ::perfetto::protos::BlockPlugFtraceEvent* FtraceEvent::release_block_plug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_plug)
  if (has_block_plug()) {
    clear_has_event();
      ::perfetto::protos::BlockPlugFtraceEvent* temp = event_.block_plug_;
    event_.block_plug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockPlugFtraceEvent& FtraceEvent::block_plug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_plug)
  return has_block_plug()
      ? *event_.block_plug_
      : *reinterpret_cast< ::perfetto::protos::BlockPlugFtraceEvent*>(&::perfetto::protos::_BlockPlugFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockPlugFtraceEvent* FtraceEvent::mutable_block_plug() {
  if (!has_block_plug()) {
    clear_event();
    set_has_block_plug();
    event_.block_plug_ = CreateMaybeMessage< ::perfetto::protos::BlockPlugFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_plug)
  return event_.block_plug_;
}

// optional .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
inline bool FtraceEvent::has_block_rq_abort() const {
  return event_case() == kBlockRqAbort;
}
inline void FtraceEvent::set_has_block_rq_abort() {
  _oneof_case_[0] = kBlockRqAbort;
}
inline ::perfetto::protos::BlockRqAbortFtraceEvent* FtraceEvent::release_block_rq_abort() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_abort)
  if (has_block_rq_abort()) {
    clear_has_event();
      ::perfetto::protos::BlockRqAbortFtraceEvent* temp = event_.block_rq_abort_;
    event_.block_rq_abort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqAbortFtraceEvent& FtraceEvent::block_rq_abort() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_abort)
  return has_block_rq_abort()
      ? *event_.block_rq_abort_
      : *reinterpret_cast< ::perfetto::protos::BlockRqAbortFtraceEvent*>(&::perfetto::protos::_BlockRqAbortFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockRqAbortFtraceEvent* FtraceEvent::mutable_block_rq_abort() {
  if (!has_block_rq_abort()) {
    clear_event();
    set_has_block_rq_abort();
    event_.block_rq_abort_ = CreateMaybeMessage< ::perfetto::protos::BlockRqAbortFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_abort)
  return event_.block_rq_abort_;
}

// optional .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
inline bool FtraceEvent::has_block_rq_complete() const {
  return event_case() == kBlockRqComplete;
}
inline void FtraceEvent::set_has_block_rq_complete() {
  _oneof_case_[0] = kBlockRqComplete;
}
inline ::perfetto::protos::BlockRqCompleteFtraceEvent* FtraceEvent::release_block_rq_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_complete)
  if (has_block_rq_complete()) {
    clear_has_event();
      ::perfetto::protos::BlockRqCompleteFtraceEvent* temp = event_.block_rq_complete_;
    event_.block_rq_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqCompleteFtraceEvent& FtraceEvent::block_rq_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_complete)
  return has_block_rq_complete()
      ? *event_.block_rq_complete_
      : *reinterpret_cast< ::perfetto::protos::BlockRqCompleteFtraceEvent*>(&::perfetto::protos::_BlockRqCompleteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockRqCompleteFtraceEvent* FtraceEvent::mutable_block_rq_complete() {
  if (!has_block_rq_complete()) {
    clear_event();
    set_has_block_rq_complete();
    event_.block_rq_complete_ = CreateMaybeMessage< ::perfetto::protos::BlockRqCompleteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_complete)
  return event_.block_rq_complete_;
}

// optional .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
inline bool FtraceEvent::has_block_rq_insert() const {
  return event_case() == kBlockRqInsert;
}
inline void FtraceEvent::set_has_block_rq_insert() {
  _oneof_case_[0] = kBlockRqInsert;
}
inline ::perfetto::protos::BlockRqInsertFtraceEvent* FtraceEvent::release_block_rq_insert() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_insert)
  if (has_block_rq_insert()) {
    clear_has_event();
      ::perfetto::protos::BlockRqInsertFtraceEvent* temp = event_.block_rq_insert_;
    event_.block_rq_insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqInsertFtraceEvent& FtraceEvent::block_rq_insert() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_insert)
  return has_block_rq_insert()
      ? *event_.block_rq_insert_
      : *reinterpret_cast< ::perfetto::protos::BlockRqInsertFtraceEvent*>(&::perfetto::protos::_BlockRqInsertFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockRqInsertFtraceEvent* FtraceEvent::mutable_block_rq_insert() {
  if (!has_block_rq_insert()) {
    clear_event();
    set_has_block_rq_insert();
    event_.block_rq_insert_ = CreateMaybeMessage< ::perfetto::protos::BlockRqInsertFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_insert)
  return event_.block_rq_insert_;
}

// optional .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
inline bool FtraceEvent::has_block_rq_remap() const {
  return event_case() == kBlockRqRemap;
}
inline void FtraceEvent::set_has_block_rq_remap() {
  _oneof_case_[0] = kBlockRqRemap;
}
inline ::perfetto::protos::BlockRqRemapFtraceEvent* FtraceEvent::release_block_rq_remap() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_remap)
  if (has_block_rq_remap()) {
    clear_has_event();
      ::perfetto::protos::BlockRqRemapFtraceEvent* temp = event_.block_rq_remap_;
    event_.block_rq_remap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqRemapFtraceEvent& FtraceEvent::block_rq_remap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_remap)
  return has_block_rq_remap()
      ? *event_.block_rq_remap_
      : *reinterpret_cast< ::perfetto::protos::BlockRqRemapFtraceEvent*>(&::perfetto::protos::_BlockRqRemapFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockRqRemapFtraceEvent* FtraceEvent::mutable_block_rq_remap() {
  if (!has_block_rq_remap()) {
    clear_event();
    set_has_block_rq_remap();
    event_.block_rq_remap_ = CreateMaybeMessage< ::perfetto::protos::BlockRqRemapFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_remap)
  return event_.block_rq_remap_;
}

// optional .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
inline bool FtraceEvent::has_block_rq_requeue() const {
  return event_case() == kBlockRqRequeue;
}
inline void FtraceEvent::set_has_block_rq_requeue() {
  _oneof_case_[0] = kBlockRqRequeue;
}
inline ::perfetto::protos::BlockRqRequeueFtraceEvent* FtraceEvent::release_block_rq_requeue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_requeue)
  if (has_block_rq_requeue()) {
    clear_has_event();
      ::perfetto::protos::BlockRqRequeueFtraceEvent* temp = event_.block_rq_requeue_;
    event_.block_rq_requeue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqRequeueFtraceEvent& FtraceEvent::block_rq_requeue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_requeue)
  return has_block_rq_requeue()
      ? *event_.block_rq_requeue_
      : *reinterpret_cast< ::perfetto::protos::BlockRqRequeueFtraceEvent*>(&::perfetto::protos::_BlockRqRequeueFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockRqRequeueFtraceEvent* FtraceEvent::mutable_block_rq_requeue() {
  if (!has_block_rq_requeue()) {
    clear_event();
    set_has_block_rq_requeue();
    event_.block_rq_requeue_ = CreateMaybeMessage< ::perfetto::protos::BlockRqRequeueFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_requeue)
  return event_.block_rq_requeue_;
}

// optional .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
inline bool FtraceEvent::has_block_sleeprq() const {
  return event_case() == kBlockSleeprq;
}
inline void FtraceEvent::set_has_block_sleeprq() {
  _oneof_case_[0] = kBlockSleeprq;
}
inline ::perfetto::protos::BlockSleeprqFtraceEvent* FtraceEvent::release_block_sleeprq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_sleeprq)
  if (has_block_sleeprq()) {
    clear_has_event();
      ::perfetto::protos::BlockSleeprqFtraceEvent* temp = event_.block_sleeprq_;
    event_.block_sleeprq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockSleeprqFtraceEvent& FtraceEvent::block_sleeprq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_sleeprq)
  return has_block_sleeprq()
      ? *event_.block_sleeprq_
      : *reinterpret_cast< ::perfetto::protos::BlockSleeprqFtraceEvent*>(&::perfetto::protos::_BlockSleeprqFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockSleeprqFtraceEvent* FtraceEvent::mutable_block_sleeprq() {
  if (!has_block_sleeprq()) {
    clear_event();
    set_has_block_sleeprq();
    event_.block_sleeprq_ = CreateMaybeMessage< ::perfetto::protos::BlockSleeprqFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_sleeprq)
  return event_.block_sleeprq_;
}

// optional .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
inline bool FtraceEvent::has_block_split() const {
  return event_case() == kBlockSplit;
}
inline void FtraceEvent::set_has_block_split() {
  _oneof_case_[0] = kBlockSplit;
}
inline ::perfetto::protos::BlockSplitFtraceEvent* FtraceEvent::release_block_split() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_split)
  if (has_block_split()) {
    clear_has_event();
      ::perfetto::protos::BlockSplitFtraceEvent* temp = event_.block_split_;
    event_.block_split_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockSplitFtraceEvent& FtraceEvent::block_split() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_split)
  return has_block_split()
      ? *event_.block_split_
      : *reinterpret_cast< ::perfetto::protos::BlockSplitFtraceEvent*>(&::perfetto::protos::_BlockSplitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockSplitFtraceEvent* FtraceEvent::mutable_block_split() {
  if (!has_block_split()) {
    clear_event();
    set_has_block_split();
    event_.block_split_ = CreateMaybeMessage< ::perfetto::protos::BlockSplitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_split)
  return event_.block_split_;
}

// optional .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
inline bool FtraceEvent::has_block_touch_buffer() const {
  return event_case() == kBlockTouchBuffer;
}
inline void FtraceEvent::set_has_block_touch_buffer() {
  _oneof_case_[0] = kBlockTouchBuffer;
}
inline ::perfetto::protos::BlockTouchBufferFtraceEvent* FtraceEvent::release_block_touch_buffer() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_touch_buffer)
  if (has_block_touch_buffer()) {
    clear_has_event();
      ::perfetto::protos::BlockTouchBufferFtraceEvent* temp = event_.block_touch_buffer_;
    event_.block_touch_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockTouchBufferFtraceEvent& FtraceEvent::block_touch_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_touch_buffer)
  return has_block_touch_buffer()
      ? *event_.block_touch_buffer_
      : *reinterpret_cast< ::perfetto::protos::BlockTouchBufferFtraceEvent*>(&::perfetto::protos::_BlockTouchBufferFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockTouchBufferFtraceEvent* FtraceEvent::mutable_block_touch_buffer() {
  if (!has_block_touch_buffer()) {
    clear_event();
    set_has_block_touch_buffer();
    event_.block_touch_buffer_ = CreateMaybeMessage< ::perfetto::protos::BlockTouchBufferFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_touch_buffer)
  return event_.block_touch_buffer_;
}

// optional .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
inline bool FtraceEvent::has_block_unplug() const {
  return event_case() == kBlockUnplug;
}
inline void FtraceEvent::set_has_block_unplug() {
  _oneof_case_[0] = kBlockUnplug;
}
inline ::perfetto::protos::BlockUnplugFtraceEvent* FtraceEvent::release_block_unplug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_unplug)
  if (has_block_unplug()) {
    clear_has_event();
      ::perfetto::protos::BlockUnplugFtraceEvent* temp = event_.block_unplug_;
    event_.block_unplug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockUnplugFtraceEvent& FtraceEvent::block_unplug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_unplug)
  return has_block_unplug()
      ? *event_.block_unplug_
      : *reinterpret_cast< ::perfetto::protos::BlockUnplugFtraceEvent*>(&::perfetto::protos::_BlockUnplugFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BlockUnplugFtraceEvent* FtraceEvent::mutable_block_unplug() {
  if (!has_block_unplug()) {
    clear_event();
    set_has_block_unplug();
    event_.block_unplug_ = CreateMaybeMessage< ::perfetto::protos::BlockUnplugFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_unplug)
  return event_.block_unplug_;
}

// optional .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
inline bool FtraceEvent::has_ext4_alloc_da_blocks() const {
  return event_case() == kExt4AllocDaBlocks;
}
inline void FtraceEvent::set_has_ext4_alloc_da_blocks() {
  _oneof_case_[0] = kExt4AllocDaBlocks;
}
inline ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* FtraceEvent::release_ext4_alloc_da_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  if (has_ext4_alloc_da_blocks()) {
    clear_has_event();
      ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* temp = event_.ext4_alloc_da_blocks_;
    event_.ext4_alloc_da_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& FtraceEvent::ext4_alloc_da_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  return has_ext4_alloc_da_blocks()
      ? *event_.ext4_alloc_da_blocks_
      : *reinterpret_cast< ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent*>(&::perfetto::protos::_Ext4AllocDaBlocksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* FtraceEvent::mutable_ext4_alloc_da_blocks() {
  if (!has_ext4_alloc_da_blocks()) {
    clear_event();
    set_has_ext4_alloc_da_blocks();
    event_.ext4_alloc_da_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  return event_.ext4_alloc_da_blocks_;
}

// optional .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
inline bool FtraceEvent::has_ext4_allocate_blocks() const {
  return event_case() == kExt4AllocateBlocks;
}
inline void FtraceEvent::set_has_ext4_allocate_blocks() {
  _oneof_case_[0] = kExt4AllocateBlocks;
}
inline ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* FtraceEvent::release_ext4_allocate_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  if (has_ext4_allocate_blocks()) {
    clear_has_event();
      ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* temp = event_.ext4_allocate_blocks_;
    event_.ext4_allocate_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& FtraceEvent::ext4_allocate_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  return has_ext4_allocate_blocks()
      ? *event_.ext4_allocate_blocks_
      : *reinterpret_cast< ::perfetto::protos::Ext4AllocateBlocksFtraceEvent*>(&::perfetto::protos::_Ext4AllocateBlocksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* FtraceEvent::mutable_ext4_allocate_blocks() {
  if (!has_ext4_allocate_blocks()) {
    clear_event();
    set_has_ext4_allocate_blocks();
    event_.ext4_allocate_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4AllocateBlocksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  return event_.ext4_allocate_blocks_;
}

// optional .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
inline bool FtraceEvent::has_ext4_allocate_inode() const {
  return event_case() == kExt4AllocateInode;
}
inline void FtraceEvent::set_has_ext4_allocate_inode() {
  _oneof_case_[0] = kExt4AllocateInode;
}
inline ::perfetto::protos::Ext4AllocateInodeFtraceEvent* FtraceEvent::release_ext4_allocate_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  if (has_ext4_allocate_inode()) {
    clear_has_event();
      ::perfetto::protos::Ext4AllocateInodeFtraceEvent* temp = event_.ext4_allocate_inode_;
    event_.ext4_allocate_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& FtraceEvent::ext4_allocate_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  return has_ext4_allocate_inode()
      ? *event_.ext4_allocate_inode_
      : *reinterpret_cast< ::perfetto::protos::Ext4AllocateInodeFtraceEvent*>(&::perfetto::protos::_Ext4AllocateInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4AllocateInodeFtraceEvent* FtraceEvent::mutable_ext4_allocate_inode() {
  if (!has_ext4_allocate_inode()) {
    clear_event();
    set_has_ext4_allocate_inode();
    event_.ext4_allocate_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4AllocateInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  return event_.ext4_allocate_inode_;
}

// optional .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
inline bool FtraceEvent::has_ext4_begin_ordered_truncate() const {
  return event_case() == kExt4BeginOrderedTruncate;
}
inline void FtraceEvent::set_has_ext4_begin_ordered_truncate() {
  _oneof_case_[0] = kExt4BeginOrderedTruncate;
}
inline ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::release_ext4_begin_ordered_truncate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  if (has_ext4_begin_ordered_truncate()) {
    clear_has_event();
      ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* temp = event_.ext4_begin_ordered_truncate_;
    event_.ext4_begin_ordered_truncate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& FtraceEvent::ext4_begin_ordered_truncate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  return has_ext4_begin_ordered_truncate()
      ? *event_.ext4_begin_ordered_truncate_
      : *reinterpret_cast< ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent*>(&::perfetto::protos::_Ext4BeginOrderedTruncateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::mutable_ext4_begin_ordered_truncate() {
  if (!has_ext4_begin_ordered_truncate()) {
    clear_event();
    set_has_ext4_begin_ordered_truncate();
    event_.ext4_begin_ordered_truncate_ = CreateMaybeMessage< ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  return event_.ext4_begin_ordered_truncate_;
}

// optional .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
inline bool FtraceEvent::has_ext4_collapse_range() const {
  return event_case() == kExt4CollapseRange;
}
inline void FtraceEvent::set_has_ext4_collapse_range() {
  _oneof_case_[0] = kExt4CollapseRange;
}
inline ::perfetto::protos::Ext4CollapseRangeFtraceEvent* FtraceEvent::release_ext4_collapse_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_collapse_range)
  if (has_ext4_collapse_range()) {
    clear_has_event();
      ::perfetto::protos::Ext4CollapseRangeFtraceEvent* temp = event_.ext4_collapse_range_;
    event_.ext4_collapse_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& FtraceEvent::ext4_collapse_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_collapse_range)
  return has_ext4_collapse_range()
      ? *event_.ext4_collapse_range_
      : *reinterpret_cast< ::perfetto::protos::Ext4CollapseRangeFtraceEvent*>(&::perfetto::protos::_Ext4CollapseRangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4CollapseRangeFtraceEvent* FtraceEvent::mutable_ext4_collapse_range() {
  if (!has_ext4_collapse_range()) {
    clear_event();
    set_has_ext4_collapse_range();
    event_.ext4_collapse_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4CollapseRangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_collapse_range)
  return event_.ext4_collapse_range_;
}

// optional .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
inline bool FtraceEvent::has_ext4_da_release_space() const {
  return event_case() == kExt4DaReleaseSpace;
}
inline void FtraceEvent::set_has_ext4_da_release_space() {
  _oneof_case_[0] = kExt4DaReleaseSpace;
}
inline ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::release_ext4_da_release_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_release_space)
  if (has_ext4_da_release_space()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* temp = event_.ext4_da_release_space_;
    event_.ext4_da_release_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& FtraceEvent::ext4_da_release_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_release_space)
  return has_ext4_da_release_space()
      ? *event_.ext4_da_release_space_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent*>(&::perfetto::protos::_Ext4DaReleaseSpaceFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::mutable_ext4_da_release_space() {
  if (!has_ext4_da_release_space()) {
    clear_event();
    set_has_ext4_da_release_space();
    event_.ext4_da_release_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_release_space)
  return event_.ext4_da_release_space_;
}

// optional .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
inline bool FtraceEvent::has_ext4_da_reserve_space() const {
  return event_case() == kExt4DaReserveSpace;
}
inline void FtraceEvent::set_has_ext4_da_reserve_space() {
  _oneof_case_[0] = kExt4DaReserveSpace;
}
inline ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* FtraceEvent::release_ext4_da_reserve_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  if (has_ext4_da_reserve_space()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* temp = event_.ext4_da_reserve_space_;
    event_.ext4_da_reserve_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& FtraceEvent::ext4_da_reserve_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  return has_ext4_da_reserve_space()
      ? *event_.ext4_da_reserve_space_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent*>(&::perfetto::protos::_Ext4DaReserveSpaceFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* FtraceEvent::mutable_ext4_da_reserve_space() {
  if (!has_ext4_da_reserve_space()) {
    clear_event();
    set_has_ext4_da_reserve_space();
    event_.ext4_da_reserve_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  return event_.ext4_da_reserve_space_;
}

// optional .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
inline bool FtraceEvent::has_ext4_da_update_reserve_space() const {
  return event_case() == kExt4DaUpdateReserveSpace;
}
inline void FtraceEvent::set_has_ext4_da_update_reserve_space() {
  _oneof_case_[0] = kExt4DaUpdateReserveSpace;
}
inline ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::release_ext4_da_update_reserve_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  if (has_ext4_da_update_reserve_space()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* temp = event_.ext4_da_update_reserve_space_;
    event_.ext4_da_update_reserve_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& FtraceEvent::ext4_da_update_reserve_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  return has_ext4_da_update_reserve_space()
      ? *event_.ext4_da_update_reserve_space_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent*>(&::perfetto::protos::_Ext4DaUpdateReserveSpaceFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::mutable_ext4_da_update_reserve_space() {
  if (!has_ext4_da_update_reserve_space()) {
    clear_event();
    set_has_ext4_da_update_reserve_space();
    event_.ext4_da_update_reserve_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  return event_.ext4_da_update_reserve_space_;
}

// optional .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
inline bool FtraceEvent::has_ext4_da_write_pages() const {
  return event_case() == kExt4DaWritePages;
}
inline void FtraceEvent::set_has_ext4_da_write_pages() {
  _oneof_case_[0] = kExt4DaWritePages;
}
inline ::perfetto::protos::Ext4DaWritePagesFtraceEvent* FtraceEvent::release_ext4_da_write_pages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  if (has_ext4_da_write_pages()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaWritePagesFtraceEvent* temp = event_.ext4_da_write_pages_;
    event_.ext4_da_write_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& FtraceEvent::ext4_da_write_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  return has_ext4_da_write_pages()
      ? *event_.ext4_da_write_pages_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaWritePagesFtraceEvent*>(&::perfetto::protos::_Ext4DaWritePagesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaWritePagesFtraceEvent* FtraceEvent::mutable_ext4_da_write_pages() {
  if (!has_ext4_da_write_pages()) {
    clear_event();
    set_has_ext4_da_write_pages();
    event_.ext4_da_write_pages_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWritePagesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  return event_.ext4_da_write_pages_;
}

// optional .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
inline bool FtraceEvent::has_ext4_da_write_pages_extent() const {
  return event_case() == kExt4DaWritePagesExtent;
}
inline void FtraceEvent::set_has_ext4_da_write_pages_extent() {
  _oneof_case_[0] = kExt4DaWritePagesExtent;
}
inline ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::release_ext4_da_write_pages_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  if (has_ext4_da_write_pages_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* temp = event_.ext4_da_write_pages_extent_;
    event_.ext4_da_write_pages_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& FtraceEvent::ext4_da_write_pages_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  return has_ext4_da_write_pages_extent()
      ? *event_.ext4_da_write_pages_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent*>(&::perfetto::protos::_Ext4DaWritePagesExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::mutable_ext4_da_write_pages_extent() {
  if (!has_ext4_da_write_pages_extent()) {
    clear_event();
    set_has_ext4_da_write_pages_extent();
    event_.ext4_da_write_pages_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  return event_.ext4_da_write_pages_extent_;
}

// optional .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
inline bool FtraceEvent::has_ext4_direct_io_enter() const {
  return event_case() == kExt4DirectIOEnter;
}
inline void FtraceEvent::set_has_ext4_direct_io_enter() {
  _oneof_case_[0] = kExt4DirectIOEnter;
}
inline ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* FtraceEvent::release_ext4_direct_io_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  if (has_ext4_direct_io_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* temp = event_.ext4_direct_io_enter_;
    event_.ext4_direct_io_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& FtraceEvent::ext4_direct_io_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  return has_ext4_direct_io_enter()
      ? *event_.ext4_direct_io_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4DirectIOEnterFtraceEvent*>(&::perfetto::protos::_Ext4DirectIOEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* FtraceEvent::mutable_ext4_direct_io_enter() {
  if (!has_ext4_direct_io_enter()) {
    clear_event();
    set_has_ext4_direct_io_enter();
    event_.ext4_direct_io_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4DirectIOEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  return event_.ext4_direct_io_enter_;
}

// optional .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
inline bool FtraceEvent::has_ext4_direct_io_exit() const {
  return event_case() == kExt4DirectIOExit;
}
inline void FtraceEvent::set_has_ext4_direct_io_exit() {
  _oneof_case_[0] = kExt4DirectIOExit;
}
inline ::perfetto::protos::Ext4DirectIOExitFtraceEvent* FtraceEvent::release_ext4_direct_io_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  if (has_ext4_direct_io_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4DirectIOExitFtraceEvent* temp = event_.ext4_direct_io_exit_;
    event_.ext4_direct_io_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& FtraceEvent::ext4_direct_io_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  return has_ext4_direct_io_exit()
      ? *event_.ext4_direct_io_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4DirectIOExitFtraceEvent*>(&::perfetto::protos::_Ext4DirectIOExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DirectIOExitFtraceEvent* FtraceEvent::mutable_ext4_direct_io_exit() {
  if (!has_ext4_direct_io_exit()) {
    clear_event();
    set_has_ext4_direct_io_exit();
    event_.ext4_direct_io_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4DirectIOExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  return event_.ext4_direct_io_exit_;
}

// optional .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
inline bool FtraceEvent::has_ext4_discard_blocks() const {
  return event_case() == kExt4DiscardBlocks;
}
inline void FtraceEvent::set_has_ext4_discard_blocks() {
  _oneof_case_[0] = kExt4DiscardBlocks;
}
inline ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* FtraceEvent::release_ext4_discard_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  if (has_ext4_discard_blocks()) {
    clear_has_event();
      ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* temp = event_.ext4_discard_blocks_;
    event_.ext4_discard_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& FtraceEvent::ext4_discard_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  return has_ext4_discard_blocks()
      ? *event_.ext4_discard_blocks_
      : *reinterpret_cast< ::perfetto::protos::Ext4DiscardBlocksFtraceEvent*>(&::perfetto::protos::_Ext4DiscardBlocksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* FtraceEvent::mutable_ext4_discard_blocks() {
  if (!has_ext4_discard_blocks()) {
    clear_event();
    set_has_ext4_discard_blocks();
    event_.ext4_discard_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4DiscardBlocksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  return event_.ext4_discard_blocks_;
}

// optional .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
inline bool FtraceEvent::has_ext4_discard_preallocations() const {
  return event_case() == kExt4DiscardPreallocations;
}
inline void FtraceEvent::set_has_ext4_discard_preallocations() {
  _oneof_case_[0] = kExt4DiscardPreallocations;
}
inline ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::release_ext4_discard_preallocations() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  if (has_ext4_discard_preallocations()) {
    clear_has_event();
      ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* temp = event_.ext4_discard_preallocations_;
    event_.ext4_discard_preallocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& FtraceEvent::ext4_discard_preallocations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  return has_ext4_discard_preallocations()
      ? *event_.ext4_discard_preallocations_
      : *reinterpret_cast< ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent*>(&::perfetto::protos::_Ext4DiscardPreallocationsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::mutable_ext4_discard_preallocations() {
  if (!has_ext4_discard_preallocations()) {
    clear_event();
    set_has_ext4_discard_preallocations();
    event_.ext4_discard_preallocations_ = CreateMaybeMessage< ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  return event_.ext4_discard_preallocations_;
}

// optional .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
inline bool FtraceEvent::has_ext4_drop_inode() const {
  return event_case() == kExt4DropInode;
}
inline void FtraceEvent::set_has_ext4_drop_inode() {
  _oneof_case_[0] = kExt4DropInode;
}
inline ::perfetto::protos::Ext4DropInodeFtraceEvent* FtraceEvent::release_ext4_drop_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_drop_inode)
  if (has_ext4_drop_inode()) {
    clear_has_event();
      ::perfetto::protos::Ext4DropInodeFtraceEvent* temp = event_.ext4_drop_inode_;
    event_.ext4_drop_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DropInodeFtraceEvent& FtraceEvent::ext4_drop_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_drop_inode)
  return has_ext4_drop_inode()
      ? *event_.ext4_drop_inode_
      : *reinterpret_cast< ::perfetto::protos::Ext4DropInodeFtraceEvent*>(&::perfetto::protos::_Ext4DropInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4DropInodeFtraceEvent* FtraceEvent::mutable_ext4_drop_inode() {
  if (!has_ext4_drop_inode()) {
    clear_event();
    set_has_ext4_drop_inode();
    event_.ext4_drop_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4DropInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_drop_inode)
  return event_.ext4_drop_inode_;
}

// optional .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
inline bool FtraceEvent::has_ext4_es_cache_extent() const {
  return event_case() == kExt4EsCacheExtent;
}
inline void FtraceEvent::set_has_ext4_es_cache_extent() {
  _oneof_case_[0] = kExt4EsCacheExtent;
}
inline ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* FtraceEvent::release_ext4_es_cache_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  if (has_ext4_es_cache_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* temp = event_.ext4_es_cache_extent_;
    event_.ext4_es_cache_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& FtraceEvent::ext4_es_cache_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  return has_ext4_es_cache_extent()
      ? *event_.ext4_es_cache_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsCacheExtentFtraceEvent*>(&::perfetto::protos::_Ext4EsCacheExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* FtraceEvent::mutable_ext4_es_cache_extent() {
  if (!has_ext4_es_cache_extent()) {
    clear_event();
    set_has_ext4_es_cache_extent();
    event_.ext4_es_cache_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsCacheExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  return event_.ext4_es_cache_extent_;
}

// optional .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
inline bool FtraceEvent::has_ext4_es_find_delayed_extent_range_enter() const {
  return event_case() == kExt4EsFindDelayedExtentRangeEnter;
}
inline void FtraceEvent::set_has_ext4_es_find_delayed_extent_range_enter() {
  _oneof_case_[0] = kExt4EsFindDelayedExtentRangeEnter;
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::release_ext4_es_find_delayed_extent_range_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  if (has_ext4_es_find_delayed_extent_range_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* temp = event_.ext4_es_find_delayed_extent_range_enter_;
    event_.ext4_es_find_delayed_extent_range_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& FtraceEvent::ext4_es_find_delayed_extent_range_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  return has_ext4_es_find_delayed_extent_range_enter()
      ? *event_.ext4_es_find_delayed_extent_range_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent*>(&::perfetto::protos::_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::mutable_ext4_es_find_delayed_extent_range_enter() {
  if (!has_ext4_es_find_delayed_extent_range_enter()) {
    clear_event();
    set_has_ext4_es_find_delayed_extent_range_enter();
    event_.ext4_es_find_delayed_extent_range_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  return event_.ext4_es_find_delayed_extent_range_enter_;
}

// optional .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
inline bool FtraceEvent::has_ext4_es_find_delayed_extent_range_exit() const {
  return event_case() == kExt4EsFindDelayedExtentRangeExit;
}
inline void FtraceEvent::set_has_ext4_es_find_delayed_extent_range_exit() {
  _oneof_case_[0] = kExt4EsFindDelayedExtentRangeExit;
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::release_ext4_es_find_delayed_extent_range_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  if (has_ext4_es_find_delayed_extent_range_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* temp = event_.ext4_es_find_delayed_extent_range_exit_;
    event_.ext4_es_find_delayed_extent_range_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& FtraceEvent::ext4_es_find_delayed_extent_range_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  return has_ext4_es_find_delayed_extent_range_exit()
      ? *event_.ext4_es_find_delayed_extent_range_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent*>(&::perfetto::protos::_Ext4EsFindDelayedExtentRangeExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::mutable_ext4_es_find_delayed_extent_range_exit() {
  if (!has_ext4_es_find_delayed_extent_range_exit()) {
    clear_event();
    set_has_ext4_es_find_delayed_extent_range_exit();
    event_.ext4_es_find_delayed_extent_range_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  return event_.ext4_es_find_delayed_extent_range_exit_;
}

// optional .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
inline bool FtraceEvent::has_ext4_es_insert_extent() const {
  return event_case() == kExt4EsInsertExtent;
}
inline void FtraceEvent::set_has_ext4_es_insert_extent() {
  _oneof_case_[0] = kExt4EsInsertExtent;
}
inline ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* FtraceEvent::release_ext4_es_insert_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  if (has_ext4_es_insert_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* temp = event_.ext4_es_insert_extent_;
    event_.ext4_es_insert_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& FtraceEvent::ext4_es_insert_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  return has_ext4_es_insert_extent()
      ? *event_.ext4_es_insert_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsInsertExtentFtraceEvent*>(&::perfetto::protos::_Ext4EsInsertExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* FtraceEvent::mutable_ext4_es_insert_extent() {
  if (!has_ext4_es_insert_extent()) {
    clear_event();
    set_has_ext4_es_insert_extent();
    event_.ext4_es_insert_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsInsertExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  return event_.ext4_es_insert_extent_;
}

// optional .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
inline bool FtraceEvent::has_ext4_es_lookup_extent_enter() const {
  return event_case() == kExt4EsLookupExtentEnter;
}
inline void FtraceEvent::set_has_ext4_es_lookup_extent_enter() {
  _oneof_case_[0] = kExt4EsLookupExtentEnter;
}
inline ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::release_ext4_es_lookup_extent_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  if (has_ext4_es_lookup_extent_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* temp = event_.ext4_es_lookup_extent_enter_;
    event_.ext4_es_lookup_extent_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& FtraceEvent::ext4_es_lookup_extent_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  return has_ext4_es_lookup_extent_enter()
      ? *event_.ext4_es_lookup_extent_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent*>(&::perfetto::protos::_Ext4EsLookupExtentEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::mutable_ext4_es_lookup_extent_enter() {
  if (!has_ext4_es_lookup_extent_enter()) {
    clear_event();
    set_has_ext4_es_lookup_extent_enter();
    event_.ext4_es_lookup_extent_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  return event_.ext4_es_lookup_extent_enter_;
}

// optional .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
inline bool FtraceEvent::has_ext4_es_lookup_extent_exit() const {
  return event_case() == kExt4EsLookupExtentExit;
}
inline void FtraceEvent::set_has_ext4_es_lookup_extent_exit() {
  _oneof_case_[0] = kExt4EsLookupExtentExit;
}
inline ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::release_ext4_es_lookup_extent_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  if (has_ext4_es_lookup_extent_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* temp = event_.ext4_es_lookup_extent_exit_;
    event_.ext4_es_lookup_extent_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& FtraceEvent::ext4_es_lookup_extent_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  return has_ext4_es_lookup_extent_exit()
      ? *event_.ext4_es_lookup_extent_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent*>(&::perfetto::protos::_Ext4EsLookupExtentExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::mutable_ext4_es_lookup_extent_exit() {
  if (!has_ext4_es_lookup_extent_exit()) {
    clear_event();
    set_has_ext4_es_lookup_extent_exit();
    event_.ext4_es_lookup_extent_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  return event_.ext4_es_lookup_extent_exit_;
}

// optional .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
inline bool FtraceEvent::has_ext4_es_remove_extent() const {
  return event_case() == kExt4EsRemoveExtent;
}
inline void FtraceEvent::set_has_ext4_es_remove_extent() {
  _oneof_case_[0] = kExt4EsRemoveExtent;
}
inline ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* FtraceEvent::release_ext4_es_remove_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  if (has_ext4_es_remove_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* temp = event_.ext4_es_remove_extent_;
    event_.ext4_es_remove_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& FtraceEvent::ext4_es_remove_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  return has_ext4_es_remove_extent()
      ? *event_.ext4_es_remove_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent*>(&::perfetto::protos::_Ext4EsRemoveExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* FtraceEvent::mutable_ext4_es_remove_extent() {
  if (!has_ext4_es_remove_extent()) {
    clear_event();
    set_has_ext4_es_remove_extent();
    event_.ext4_es_remove_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  return event_.ext4_es_remove_extent_;
}

// optional .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
inline bool FtraceEvent::has_ext4_es_shrink() const {
  return event_case() == kExt4EsShrink;
}
inline void FtraceEvent::set_has_ext4_es_shrink() {
  _oneof_case_[0] = kExt4EsShrink;
}
inline ::perfetto::protos::Ext4EsShrinkFtraceEvent* FtraceEvent::release_ext4_es_shrink() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink)
  if (has_ext4_es_shrink()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsShrinkFtraceEvent* temp = event_.ext4_es_shrink_;
    event_.ext4_es_shrink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkFtraceEvent& FtraceEvent::ext4_es_shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink)
  return has_ext4_es_shrink()
      ? *event_.ext4_es_shrink_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsShrinkFtraceEvent*>(&::perfetto::protos::_Ext4EsShrinkFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsShrinkFtraceEvent* FtraceEvent::mutable_ext4_es_shrink() {
  if (!has_ext4_es_shrink()) {
    clear_event();
    set_has_ext4_es_shrink();
    event_.ext4_es_shrink_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink)
  return event_.ext4_es_shrink_;
}

// optional .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
inline bool FtraceEvent::has_ext4_es_shrink_count() const {
  return event_case() == kExt4EsShrinkCount;
}
inline void FtraceEvent::set_has_ext4_es_shrink_count() {
  _oneof_case_[0] = kExt4EsShrinkCount;
}
inline ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* FtraceEvent::release_ext4_es_shrink_count() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  if (has_ext4_es_shrink_count()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* temp = event_.ext4_es_shrink_count_;
    event_.ext4_es_shrink_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& FtraceEvent::ext4_es_shrink_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  return has_ext4_es_shrink_count()
      ? *event_.ext4_es_shrink_count_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsShrinkCountFtraceEvent*>(&::perfetto::protos::_Ext4EsShrinkCountFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* FtraceEvent::mutable_ext4_es_shrink_count() {
  if (!has_ext4_es_shrink_count()) {
    clear_event();
    set_has_ext4_es_shrink_count();
    event_.ext4_es_shrink_count_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkCountFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  return event_.ext4_es_shrink_count_;
}

// optional .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
inline bool FtraceEvent::has_ext4_es_shrink_scan_enter() const {
  return event_case() == kExt4EsShrinkScanEnter;
}
inline void FtraceEvent::set_has_ext4_es_shrink_scan_enter() {
  _oneof_case_[0] = kExt4EsShrinkScanEnter;
}
inline ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::release_ext4_es_shrink_scan_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  if (has_ext4_es_shrink_scan_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* temp = event_.ext4_es_shrink_scan_enter_;
    event_.ext4_es_shrink_scan_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& FtraceEvent::ext4_es_shrink_scan_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  return has_ext4_es_shrink_scan_enter()
      ? *event_.ext4_es_shrink_scan_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent*>(&::perfetto::protos::_Ext4EsShrinkScanEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::mutable_ext4_es_shrink_scan_enter() {
  if (!has_ext4_es_shrink_scan_enter()) {
    clear_event();
    set_has_ext4_es_shrink_scan_enter();
    event_.ext4_es_shrink_scan_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  return event_.ext4_es_shrink_scan_enter_;
}

// optional .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
inline bool FtraceEvent::has_ext4_es_shrink_scan_exit() const {
  return event_case() == kExt4EsShrinkScanExit;
}
inline void FtraceEvent::set_has_ext4_es_shrink_scan_exit() {
  _oneof_case_[0] = kExt4EsShrinkScanExit;
}
inline ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::release_ext4_es_shrink_scan_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  if (has_ext4_es_shrink_scan_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* temp = event_.ext4_es_shrink_scan_exit_;
    event_.ext4_es_shrink_scan_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& FtraceEvent::ext4_es_shrink_scan_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  return has_ext4_es_shrink_scan_exit()
      ? *event_.ext4_es_shrink_scan_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent*>(&::perfetto::protos::_Ext4EsShrinkScanExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::mutable_ext4_es_shrink_scan_exit() {
  if (!has_ext4_es_shrink_scan_exit()) {
    clear_event();
    set_has_ext4_es_shrink_scan_exit();
    event_.ext4_es_shrink_scan_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  return event_.ext4_es_shrink_scan_exit_;
}

// optional .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
inline bool FtraceEvent::has_ext4_evict_inode() const {
  return event_case() == kExt4EvictInode;
}
inline void FtraceEvent::set_has_ext4_evict_inode() {
  _oneof_case_[0] = kExt4EvictInode;
}
inline ::perfetto::protos::Ext4EvictInodeFtraceEvent* FtraceEvent::release_ext4_evict_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_evict_inode)
  if (has_ext4_evict_inode()) {
    clear_has_event();
      ::perfetto::protos::Ext4EvictInodeFtraceEvent* temp = event_.ext4_evict_inode_;
    event_.ext4_evict_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EvictInodeFtraceEvent& FtraceEvent::ext4_evict_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_evict_inode)
  return has_ext4_evict_inode()
      ? *event_.ext4_evict_inode_
      : *reinterpret_cast< ::perfetto::protos::Ext4EvictInodeFtraceEvent*>(&::perfetto::protos::_Ext4EvictInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4EvictInodeFtraceEvent* FtraceEvent::mutable_ext4_evict_inode() {
  if (!has_ext4_evict_inode()) {
    clear_event();
    set_has_ext4_evict_inode();
    event_.ext4_evict_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4EvictInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_evict_inode)
  return event_.ext4_evict_inode_;
}

// optional .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
inline bool FtraceEvent::has_ext4_ext_convert_to_initialized_enter() const {
  return event_case() == kExt4ExtConvertToInitializedEnter;
}
inline void FtraceEvent::set_has_ext4_ext_convert_to_initialized_enter() {
  _oneof_case_[0] = kExt4ExtConvertToInitializedEnter;
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::release_ext4_ext_convert_to_initialized_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  if (has_ext4_ext_convert_to_initialized_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* temp = event_.ext4_ext_convert_to_initialized_enter_;
    event_.ext4_ext_convert_to_initialized_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& FtraceEvent::ext4_ext_convert_to_initialized_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  return has_ext4_ext_convert_to_initialized_enter()
      ? *event_.ext4_ext_convert_to_initialized_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent*>(&::perfetto::protos::_Ext4ExtConvertToInitializedEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::mutable_ext4_ext_convert_to_initialized_enter() {
  if (!has_ext4_ext_convert_to_initialized_enter()) {
    clear_event();
    set_has_ext4_ext_convert_to_initialized_enter();
    event_.ext4_ext_convert_to_initialized_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  return event_.ext4_ext_convert_to_initialized_enter_;
}

// optional .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
inline bool FtraceEvent::has_ext4_ext_convert_to_initialized_fastpath() const {
  return event_case() == kExt4ExtConvertToInitializedFastpath;
}
inline void FtraceEvent::set_has_ext4_ext_convert_to_initialized_fastpath() {
  _oneof_case_[0] = kExt4ExtConvertToInitializedFastpath;
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::release_ext4_ext_convert_to_initialized_fastpath() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  if (has_ext4_ext_convert_to_initialized_fastpath()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* temp = event_.ext4_ext_convert_to_initialized_fastpath_;
    event_.ext4_ext_convert_to_initialized_fastpath_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& FtraceEvent::ext4_ext_convert_to_initialized_fastpath() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  return has_ext4_ext_convert_to_initialized_fastpath()
      ? *event_.ext4_ext_convert_to_initialized_fastpath_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent*>(&::perfetto::protos::_Ext4ExtConvertToInitializedFastpathFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::mutable_ext4_ext_convert_to_initialized_fastpath() {
  if (!has_ext4_ext_convert_to_initialized_fastpath()) {
    clear_event();
    set_has_ext4_ext_convert_to_initialized_fastpath();
    event_.ext4_ext_convert_to_initialized_fastpath_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  return event_.ext4_ext_convert_to_initialized_fastpath_;
}

// optional .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
inline bool FtraceEvent::has_ext4_ext_handle_unwritten_extents() const {
  return event_case() == kExt4ExtHandleUnwrittenExtents;
}
inline void FtraceEvent::set_has_ext4_ext_handle_unwritten_extents() {
  _oneof_case_[0] = kExt4ExtHandleUnwrittenExtents;
}
inline ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::release_ext4_ext_handle_unwritten_extents() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  if (has_ext4_ext_handle_unwritten_extents()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* temp = event_.ext4_ext_handle_unwritten_extents_;
    event_.ext4_ext_handle_unwritten_extents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& FtraceEvent::ext4_ext_handle_unwritten_extents() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  return has_ext4_ext_handle_unwritten_extents()
      ? *event_.ext4_ext_handle_unwritten_extents_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent*>(&::perfetto::protos::_Ext4ExtHandleUnwrittenExtentsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::mutable_ext4_ext_handle_unwritten_extents() {
  if (!has_ext4_ext_handle_unwritten_extents()) {
    clear_event();
    set_has_ext4_ext_handle_unwritten_extents();
    event_.ext4_ext_handle_unwritten_extents_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  return event_.ext4_ext_handle_unwritten_extents_;
}

// optional .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
inline bool FtraceEvent::has_ext4_ext_in_cache() const {
  return event_case() == kExt4ExtInCache;
}
inline void FtraceEvent::set_has_ext4_ext_in_cache() {
  _oneof_case_[0] = kExt4ExtInCache;
}
inline ::perfetto::protos::Ext4ExtInCacheFtraceEvent* FtraceEvent::release_ext4_ext_in_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  if (has_ext4_ext_in_cache()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtInCacheFtraceEvent* temp = event_.ext4_ext_in_cache_;
    event_.ext4_ext_in_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& FtraceEvent::ext4_ext_in_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  return has_ext4_ext_in_cache()
      ? *event_.ext4_ext_in_cache_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtInCacheFtraceEvent*>(&::perfetto::protos::_Ext4ExtInCacheFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtInCacheFtraceEvent* FtraceEvent::mutable_ext4_ext_in_cache() {
  if (!has_ext4_ext_in_cache()) {
    clear_event();
    set_has_ext4_ext_in_cache();
    event_.ext4_ext_in_cache_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtInCacheFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  return event_.ext4_ext_in_cache_;
}

// optional .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
inline bool FtraceEvent::has_ext4_ext_load_extent() const {
  return event_case() == kExt4ExtLoadExtent;
}
inline void FtraceEvent::set_has_ext4_ext_load_extent() {
  _oneof_case_[0] = kExt4ExtLoadExtent;
}
inline ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* FtraceEvent::release_ext4_ext_load_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  if (has_ext4_ext_load_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* temp = event_.ext4_ext_load_extent_;
    event_.ext4_ext_load_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& FtraceEvent::ext4_ext_load_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  return has_ext4_ext_load_extent()
      ? *event_.ext4_ext_load_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent*>(&::perfetto::protos::_Ext4ExtLoadExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* FtraceEvent::mutable_ext4_ext_load_extent() {
  if (!has_ext4_ext_load_extent()) {
    clear_event();
    set_has_ext4_ext_load_extent();
    event_.ext4_ext_load_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  return event_.ext4_ext_load_extent_;
}

// optional .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
inline bool FtraceEvent::has_ext4_ext_map_blocks_enter() const {
  return event_case() == kExt4ExtMapBlocksEnter;
}
inline void FtraceEvent::set_has_ext4_ext_map_blocks_enter() {
  _oneof_case_[0] = kExt4ExtMapBlocksEnter;
}
inline ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::release_ext4_ext_map_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  if (has_ext4_ext_map_blocks_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* temp = event_.ext4_ext_map_blocks_enter_;
    event_.ext4_ext_map_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& FtraceEvent::ext4_ext_map_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  return has_ext4_ext_map_blocks_enter()
      ? *event_.ext4_ext_map_blocks_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent*>(&::perfetto::protos::_Ext4ExtMapBlocksEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::mutable_ext4_ext_map_blocks_enter() {
  if (!has_ext4_ext_map_blocks_enter()) {
    clear_event();
    set_has_ext4_ext_map_blocks_enter();
    event_.ext4_ext_map_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  return event_.ext4_ext_map_blocks_enter_;
}

// optional .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
inline bool FtraceEvent::has_ext4_ext_map_blocks_exit() const {
  return event_case() == kExt4ExtMapBlocksExit;
}
inline void FtraceEvent::set_has_ext4_ext_map_blocks_exit() {
  _oneof_case_[0] = kExt4ExtMapBlocksExit;
}
inline ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::release_ext4_ext_map_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  if (has_ext4_ext_map_blocks_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* temp = event_.ext4_ext_map_blocks_exit_;
    event_.ext4_ext_map_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& FtraceEvent::ext4_ext_map_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  return has_ext4_ext_map_blocks_exit()
      ? *event_.ext4_ext_map_blocks_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent*>(&::perfetto::protos::_Ext4ExtMapBlocksExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::mutable_ext4_ext_map_blocks_exit() {
  if (!has_ext4_ext_map_blocks_exit()) {
    clear_event();
    set_has_ext4_ext_map_blocks_exit();
    event_.ext4_ext_map_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  return event_.ext4_ext_map_blocks_exit_;
}

// optional .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
inline bool FtraceEvent::has_ext4_ext_put_in_cache() const {
  return event_case() == kExt4ExtPutInCache;
}
inline void FtraceEvent::set_has_ext4_ext_put_in_cache() {
  _oneof_case_[0] = kExt4ExtPutInCache;
}
inline ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* FtraceEvent::release_ext4_ext_put_in_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  if (has_ext4_ext_put_in_cache()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* temp = event_.ext4_ext_put_in_cache_;
    event_.ext4_ext_put_in_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& FtraceEvent::ext4_ext_put_in_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  return has_ext4_ext_put_in_cache()
      ? *event_.ext4_ext_put_in_cache_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent*>(&::perfetto::protos::_Ext4ExtPutInCacheFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* FtraceEvent::mutable_ext4_ext_put_in_cache() {
  if (!has_ext4_ext_put_in_cache()) {
    clear_event();
    set_has_ext4_ext_put_in_cache();
    event_.ext4_ext_put_in_cache_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  return event_.ext4_ext_put_in_cache_;
}

// optional .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
inline bool FtraceEvent::has_ext4_ext_remove_space() const {
  return event_case() == kExt4ExtRemoveSpace;
}
inline void FtraceEvent::set_has_ext4_ext_remove_space() {
  _oneof_case_[0] = kExt4ExtRemoveSpace;
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::release_ext4_ext_remove_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  if (has_ext4_ext_remove_space()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* temp = event_.ext4_ext_remove_space_;
    event_.ext4_ext_remove_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& FtraceEvent::ext4_ext_remove_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  return has_ext4_ext_remove_space()
      ? *event_.ext4_ext_remove_space_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent*>(&::perfetto::protos::_Ext4ExtRemoveSpaceFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::mutable_ext4_ext_remove_space() {
  if (!has_ext4_ext_remove_space()) {
    clear_event();
    set_has_ext4_ext_remove_space();
    event_.ext4_ext_remove_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  return event_.ext4_ext_remove_space_;
}

// optional .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
inline bool FtraceEvent::has_ext4_ext_remove_space_done() const {
  return event_case() == kExt4ExtRemoveSpaceDone;
}
inline void FtraceEvent::set_has_ext4_ext_remove_space_done() {
  _oneof_case_[0] = kExt4ExtRemoveSpaceDone;
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::release_ext4_ext_remove_space_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  if (has_ext4_ext_remove_space_done()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* temp = event_.ext4_ext_remove_space_done_;
    event_.ext4_ext_remove_space_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& FtraceEvent::ext4_ext_remove_space_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  return has_ext4_ext_remove_space_done()
      ? *event_.ext4_ext_remove_space_done_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent*>(&::perfetto::protos::_Ext4ExtRemoveSpaceDoneFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::mutable_ext4_ext_remove_space_done() {
  if (!has_ext4_ext_remove_space_done()) {
    clear_event();
    set_has_ext4_ext_remove_space_done();
    event_.ext4_ext_remove_space_done_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  return event_.ext4_ext_remove_space_done_;
}

// optional .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
inline bool FtraceEvent::has_ext4_ext_rm_idx() const {
  return event_case() == kExt4ExtRmIdx;
}
inline void FtraceEvent::set_has_ext4_ext_rm_idx() {
  _oneof_case_[0] = kExt4ExtRmIdx;
}
inline ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* FtraceEvent::release_ext4_ext_rm_idx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  if (has_ext4_ext_rm_idx()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* temp = event_.ext4_ext_rm_idx_;
    event_.ext4_ext_rm_idx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& FtraceEvent::ext4_ext_rm_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  return has_ext4_ext_rm_idx()
      ? *event_.ext4_ext_rm_idx_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtRmIdxFtraceEvent*>(&::perfetto::protos::_Ext4ExtRmIdxFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* FtraceEvent::mutable_ext4_ext_rm_idx() {
  if (!has_ext4_ext_rm_idx()) {
    clear_event();
    set_has_ext4_ext_rm_idx();
    event_.ext4_ext_rm_idx_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRmIdxFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  return event_.ext4_ext_rm_idx_;
}

// optional .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
inline bool FtraceEvent::has_ext4_ext_rm_leaf() const {
  return event_case() == kExt4ExtRmLeaf;
}
inline void FtraceEvent::set_has_ext4_ext_rm_leaf() {
  _oneof_case_[0] = kExt4ExtRmLeaf;
}
inline ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* FtraceEvent::release_ext4_ext_rm_leaf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  if (has_ext4_ext_rm_leaf()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* temp = event_.ext4_ext_rm_leaf_;
    event_.ext4_ext_rm_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& FtraceEvent::ext4_ext_rm_leaf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  return has_ext4_ext_rm_leaf()
      ? *event_.ext4_ext_rm_leaf_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtRmLeafFtraceEvent*>(&::perfetto::protos::_Ext4ExtRmLeafFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* FtraceEvent::mutable_ext4_ext_rm_leaf() {
  if (!has_ext4_ext_rm_leaf()) {
    clear_event();
    set_has_ext4_ext_rm_leaf();
    event_.ext4_ext_rm_leaf_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRmLeafFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  return event_.ext4_ext_rm_leaf_;
}

// optional .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
inline bool FtraceEvent::has_ext4_ext_show_extent() const {
  return event_case() == kExt4ExtShowExtent;
}
inline void FtraceEvent::set_has_ext4_ext_show_extent() {
  _oneof_case_[0] = kExt4ExtShowExtent;
}
inline ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* FtraceEvent::release_ext4_ext_show_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  if (has_ext4_ext_show_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* temp = event_.ext4_ext_show_extent_;
    event_.ext4_ext_show_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& FtraceEvent::ext4_ext_show_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  return has_ext4_ext_show_extent()
      ? *event_.ext4_ext_show_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4ExtShowExtentFtraceEvent*>(&::perfetto::protos::_Ext4ExtShowExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* FtraceEvent::mutable_ext4_ext_show_extent() {
  if (!has_ext4_ext_show_extent()) {
    clear_event();
    set_has_ext4_ext_show_extent();
    event_.ext4_ext_show_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtShowExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  return event_.ext4_ext_show_extent_;
}

// optional .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
inline bool FtraceEvent::has_ext4_fallocate_enter() const {
  return event_case() == kExt4FallocateEnter;
}
inline void FtraceEvent::set_has_ext4_fallocate_enter() {
  _oneof_case_[0] = kExt4FallocateEnter;
}
inline ::perfetto::protos::Ext4FallocateEnterFtraceEvent* FtraceEvent::release_ext4_fallocate_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  if (has_ext4_fallocate_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4FallocateEnterFtraceEvent* temp = event_.ext4_fallocate_enter_;
    event_.ext4_fallocate_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& FtraceEvent::ext4_fallocate_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  return has_ext4_fallocate_enter()
      ? *event_.ext4_fallocate_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4FallocateEnterFtraceEvent*>(&::perfetto::protos::_Ext4FallocateEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4FallocateEnterFtraceEvent* FtraceEvent::mutable_ext4_fallocate_enter() {
  if (!has_ext4_fallocate_enter()) {
    clear_event();
    set_has_ext4_fallocate_enter();
    event_.ext4_fallocate_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4FallocateEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  return event_.ext4_fallocate_enter_;
}

// optional .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
inline bool FtraceEvent::has_ext4_fallocate_exit() const {
  return event_case() == kExt4FallocateExit;
}
inline void FtraceEvent::set_has_ext4_fallocate_exit() {
  _oneof_case_[0] = kExt4FallocateExit;
}
inline ::perfetto::protos::Ext4FallocateExitFtraceEvent* FtraceEvent::release_ext4_fallocate_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  if (has_ext4_fallocate_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4FallocateExitFtraceEvent* temp = event_.ext4_fallocate_exit_;
    event_.ext4_fallocate_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FallocateExitFtraceEvent& FtraceEvent::ext4_fallocate_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  return has_ext4_fallocate_exit()
      ? *event_.ext4_fallocate_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4FallocateExitFtraceEvent*>(&::perfetto::protos::_Ext4FallocateExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4FallocateExitFtraceEvent* FtraceEvent::mutable_ext4_fallocate_exit() {
  if (!has_ext4_fallocate_exit()) {
    clear_event();
    set_has_ext4_fallocate_exit();
    event_.ext4_fallocate_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4FallocateExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  return event_.ext4_fallocate_exit_;
}

// optional .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
inline bool FtraceEvent::has_ext4_find_delalloc_range() const {
  return event_case() == kExt4FindDelallocRange;
}
inline void FtraceEvent::set_has_ext4_find_delalloc_range() {
  _oneof_case_[0] = kExt4FindDelallocRange;
}
inline ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* FtraceEvent::release_ext4_find_delalloc_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  if (has_ext4_find_delalloc_range()) {
    clear_has_event();
      ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* temp = event_.ext4_find_delalloc_range_;
    event_.ext4_find_delalloc_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& FtraceEvent::ext4_find_delalloc_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  return has_ext4_find_delalloc_range()
      ? *event_.ext4_find_delalloc_range_
      : *reinterpret_cast< ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent*>(&::perfetto::protos::_Ext4FindDelallocRangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* FtraceEvent::mutable_ext4_find_delalloc_range() {
  if (!has_ext4_find_delalloc_range()) {
    clear_event();
    set_has_ext4_find_delalloc_range();
    event_.ext4_find_delalloc_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  return event_.ext4_find_delalloc_range_;
}

// optional .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
inline bool FtraceEvent::has_ext4_forget() const {
  return event_case() == kExt4Forget;
}
inline void FtraceEvent::set_has_ext4_forget() {
  _oneof_case_[0] = kExt4Forget;
}
inline ::perfetto::protos::Ext4ForgetFtraceEvent* FtraceEvent::release_ext4_forget() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_forget)
  if (has_ext4_forget()) {
    clear_has_event();
      ::perfetto::protos::Ext4ForgetFtraceEvent* temp = event_.ext4_forget_;
    event_.ext4_forget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ForgetFtraceEvent& FtraceEvent::ext4_forget() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_forget)
  return has_ext4_forget()
      ? *event_.ext4_forget_
      : *reinterpret_cast< ::perfetto::protos::Ext4ForgetFtraceEvent*>(&::perfetto::protos::_Ext4ForgetFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ForgetFtraceEvent* FtraceEvent::mutable_ext4_forget() {
  if (!has_ext4_forget()) {
    clear_event();
    set_has_ext4_forget();
    event_.ext4_forget_ = CreateMaybeMessage< ::perfetto::protos::Ext4ForgetFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_forget)
  return event_.ext4_forget_;
}

// optional .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
inline bool FtraceEvent::has_ext4_free_blocks() const {
  return event_case() == kExt4FreeBlocks;
}
inline void FtraceEvent::set_has_ext4_free_blocks() {
  _oneof_case_[0] = kExt4FreeBlocks;
}
inline ::perfetto::protos::Ext4FreeBlocksFtraceEvent* FtraceEvent::release_ext4_free_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_free_blocks)
  if (has_ext4_free_blocks()) {
    clear_has_event();
      ::perfetto::protos::Ext4FreeBlocksFtraceEvent* temp = event_.ext4_free_blocks_;
    event_.ext4_free_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& FtraceEvent::ext4_free_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_free_blocks)
  return has_ext4_free_blocks()
      ? *event_.ext4_free_blocks_
      : *reinterpret_cast< ::perfetto::protos::Ext4FreeBlocksFtraceEvent*>(&::perfetto::protos::_Ext4FreeBlocksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4FreeBlocksFtraceEvent* FtraceEvent::mutable_ext4_free_blocks() {
  if (!has_ext4_free_blocks()) {
    clear_event();
    set_has_ext4_free_blocks();
    event_.ext4_free_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4FreeBlocksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_free_blocks)
  return event_.ext4_free_blocks_;
}

// optional .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
inline bool FtraceEvent::has_ext4_free_inode() const {
  return event_case() == kExt4FreeInode;
}
inline void FtraceEvent::set_has_ext4_free_inode() {
  _oneof_case_[0] = kExt4FreeInode;
}
inline ::perfetto::protos::Ext4FreeInodeFtraceEvent* FtraceEvent::release_ext4_free_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_free_inode)
  if (has_ext4_free_inode()) {
    clear_has_event();
      ::perfetto::protos::Ext4FreeInodeFtraceEvent* temp = event_.ext4_free_inode_;
    event_.ext4_free_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FreeInodeFtraceEvent& FtraceEvent::ext4_free_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_free_inode)
  return has_ext4_free_inode()
      ? *event_.ext4_free_inode_
      : *reinterpret_cast< ::perfetto::protos::Ext4FreeInodeFtraceEvent*>(&::perfetto::protos::_Ext4FreeInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4FreeInodeFtraceEvent* FtraceEvent::mutable_ext4_free_inode() {
  if (!has_ext4_free_inode()) {
    clear_event();
    set_has_ext4_free_inode();
    event_.ext4_free_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4FreeInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_free_inode)
  return event_.ext4_free_inode_;
}

// optional .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
inline bool FtraceEvent::has_ext4_get_implied_cluster_alloc_exit() const {
  return event_case() == kExt4GetImpliedClusterAllocExit;
}
inline void FtraceEvent::set_has_ext4_get_implied_cluster_alloc_exit() {
  _oneof_case_[0] = kExt4GetImpliedClusterAllocExit;
}
inline ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::release_ext4_get_implied_cluster_alloc_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  if (has_ext4_get_implied_cluster_alloc_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* temp = event_.ext4_get_implied_cluster_alloc_exit_;
    event_.ext4_get_implied_cluster_alloc_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& FtraceEvent::ext4_get_implied_cluster_alloc_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  return has_ext4_get_implied_cluster_alloc_exit()
      ? *event_.ext4_get_implied_cluster_alloc_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent*>(&::perfetto::protos::_Ext4GetImpliedClusterAllocExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::mutable_ext4_get_implied_cluster_alloc_exit() {
  if (!has_ext4_get_implied_cluster_alloc_exit()) {
    clear_event();
    set_has_ext4_get_implied_cluster_alloc_exit();
    event_.ext4_get_implied_cluster_alloc_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  return event_.ext4_get_implied_cluster_alloc_exit_;
}

// optional .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
inline bool FtraceEvent::has_ext4_get_reserved_cluster_alloc() const {
  return event_case() == kExt4GetReservedClusterAlloc;
}
inline void FtraceEvent::set_has_ext4_get_reserved_cluster_alloc() {
  _oneof_case_[0] = kExt4GetReservedClusterAlloc;
}
inline ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::release_ext4_get_reserved_cluster_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  if (has_ext4_get_reserved_cluster_alloc()) {
    clear_has_event();
      ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* temp = event_.ext4_get_reserved_cluster_alloc_;
    event_.ext4_get_reserved_cluster_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& FtraceEvent::ext4_get_reserved_cluster_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  return has_ext4_get_reserved_cluster_alloc()
      ? *event_.ext4_get_reserved_cluster_alloc_
      : *reinterpret_cast< ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent*>(&::perfetto::protos::_Ext4GetReservedClusterAllocFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::mutable_ext4_get_reserved_cluster_alloc() {
  if (!has_ext4_get_reserved_cluster_alloc()) {
    clear_event();
    set_has_ext4_get_reserved_cluster_alloc();
    event_.ext4_get_reserved_cluster_alloc_ = CreateMaybeMessage< ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  return event_.ext4_get_reserved_cluster_alloc_;
}

// optional .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
inline bool FtraceEvent::has_ext4_ind_map_blocks_enter() const {
  return event_case() == kExt4IndMapBlocksEnter;
}
inline void FtraceEvent::set_has_ext4_ind_map_blocks_enter() {
  _oneof_case_[0] = kExt4IndMapBlocksEnter;
}
inline ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::release_ext4_ind_map_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  if (has_ext4_ind_map_blocks_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* temp = event_.ext4_ind_map_blocks_enter_;
    event_.ext4_ind_map_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& FtraceEvent::ext4_ind_map_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  return has_ext4_ind_map_blocks_enter()
      ? *event_.ext4_ind_map_blocks_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent*>(&::perfetto::protos::_Ext4IndMapBlocksEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::mutable_ext4_ind_map_blocks_enter() {
  if (!has_ext4_ind_map_blocks_enter()) {
    clear_event();
    set_has_ext4_ind_map_blocks_enter();
    event_.ext4_ind_map_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  return event_.ext4_ind_map_blocks_enter_;
}

// optional .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
inline bool FtraceEvent::has_ext4_ind_map_blocks_exit() const {
  return event_case() == kExt4IndMapBlocksExit;
}
inline void FtraceEvent::set_has_ext4_ind_map_blocks_exit() {
  _oneof_case_[0] = kExt4IndMapBlocksExit;
}
inline ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::release_ext4_ind_map_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  if (has_ext4_ind_map_blocks_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* temp = event_.ext4_ind_map_blocks_exit_;
    event_.ext4_ind_map_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& FtraceEvent::ext4_ind_map_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  return has_ext4_ind_map_blocks_exit()
      ? *event_.ext4_ind_map_blocks_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent*>(&::perfetto::protos::_Ext4IndMapBlocksExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::mutable_ext4_ind_map_blocks_exit() {
  if (!has_ext4_ind_map_blocks_exit()) {
    clear_event();
    set_has_ext4_ind_map_blocks_exit();
    event_.ext4_ind_map_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  return event_.ext4_ind_map_blocks_exit_;
}

// optional .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
inline bool FtraceEvent::has_ext4_insert_range() const {
  return event_case() == kExt4InsertRange;
}
inline void FtraceEvent::set_has_ext4_insert_range() {
  _oneof_case_[0] = kExt4InsertRange;
}
inline ::perfetto::protos::Ext4InsertRangeFtraceEvent* FtraceEvent::release_ext4_insert_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_insert_range)
  if (has_ext4_insert_range()) {
    clear_has_event();
      ::perfetto::protos::Ext4InsertRangeFtraceEvent* temp = event_.ext4_insert_range_;
    event_.ext4_insert_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4InsertRangeFtraceEvent& FtraceEvent::ext4_insert_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_insert_range)
  return has_ext4_insert_range()
      ? *event_.ext4_insert_range_
      : *reinterpret_cast< ::perfetto::protos::Ext4InsertRangeFtraceEvent*>(&::perfetto::protos::_Ext4InsertRangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4InsertRangeFtraceEvent* FtraceEvent::mutable_ext4_insert_range() {
  if (!has_ext4_insert_range()) {
    clear_event();
    set_has_ext4_insert_range();
    event_.ext4_insert_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4InsertRangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_insert_range)
  return event_.ext4_insert_range_;
}

// optional .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
inline bool FtraceEvent::has_ext4_invalidatepage() const {
  return event_case() == kExt4Invalidatepage;
}
inline void FtraceEvent::set_has_ext4_invalidatepage() {
  _oneof_case_[0] = kExt4Invalidatepage;
}
inline ::perfetto::protos::Ext4InvalidatepageFtraceEvent* FtraceEvent::release_ext4_invalidatepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  if (has_ext4_invalidatepage()) {
    clear_has_event();
      ::perfetto::protos::Ext4InvalidatepageFtraceEvent* temp = event_.ext4_invalidatepage_;
    event_.ext4_invalidatepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& FtraceEvent::ext4_invalidatepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  return has_ext4_invalidatepage()
      ? *event_.ext4_invalidatepage_
      : *reinterpret_cast< ::perfetto::protos::Ext4InvalidatepageFtraceEvent*>(&::perfetto::protos::_Ext4InvalidatepageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4InvalidatepageFtraceEvent* FtraceEvent::mutable_ext4_invalidatepage() {
  if (!has_ext4_invalidatepage()) {
    clear_event();
    set_has_ext4_invalidatepage();
    event_.ext4_invalidatepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4InvalidatepageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  return event_.ext4_invalidatepage_;
}

// optional .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
inline bool FtraceEvent::has_ext4_journal_start() const {
  return event_case() == kExt4JournalStart;
}
inline void FtraceEvent::set_has_ext4_journal_start() {
  _oneof_case_[0] = kExt4JournalStart;
}
inline ::perfetto::protos::Ext4JournalStartFtraceEvent* FtraceEvent::release_ext4_journal_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journal_start)
  if (has_ext4_journal_start()) {
    clear_has_event();
      ::perfetto::protos::Ext4JournalStartFtraceEvent* temp = event_.ext4_journal_start_;
    event_.ext4_journal_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalStartFtraceEvent& FtraceEvent::ext4_journal_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journal_start)
  return has_ext4_journal_start()
      ? *event_.ext4_journal_start_
      : *reinterpret_cast< ::perfetto::protos::Ext4JournalStartFtraceEvent*>(&::perfetto::protos::_Ext4JournalStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4JournalStartFtraceEvent* FtraceEvent::mutable_ext4_journal_start() {
  if (!has_ext4_journal_start()) {
    clear_event();
    set_has_ext4_journal_start();
    event_.ext4_journal_start_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journal_start)
  return event_.ext4_journal_start_;
}

// optional .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
inline bool FtraceEvent::has_ext4_journal_start_reserved() const {
  return event_case() == kExt4JournalStartReserved;
}
inline void FtraceEvent::set_has_ext4_journal_start_reserved() {
  _oneof_case_[0] = kExt4JournalStartReserved;
}
inline ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* FtraceEvent::release_ext4_journal_start_reserved() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  if (has_ext4_journal_start_reserved()) {
    clear_has_event();
      ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* temp = event_.ext4_journal_start_reserved_;
    event_.ext4_journal_start_reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& FtraceEvent::ext4_journal_start_reserved() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  return has_ext4_journal_start_reserved()
      ? *event_.ext4_journal_start_reserved_
      : *reinterpret_cast< ::perfetto::protos::Ext4JournalStartReservedFtraceEvent*>(&::perfetto::protos::_Ext4JournalStartReservedFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* FtraceEvent::mutable_ext4_journal_start_reserved() {
  if (!has_ext4_journal_start_reserved()) {
    clear_event();
    set_has_ext4_journal_start_reserved();
    event_.ext4_journal_start_reserved_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalStartReservedFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  return event_.ext4_journal_start_reserved_;
}

// optional .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
inline bool FtraceEvent::has_ext4_journalled_invalidatepage() const {
  return event_case() == kExt4JournalledInvalidatepage;
}
inline void FtraceEvent::set_has_ext4_journalled_invalidatepage() {
  _oneof_case_[0] = kExt4JournalledInvalidatepage;
}
inline ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::release_ext4_journalled_invalidatepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  if (has_ext4_journalled_invalidatepage()) {
    clear_has_event();
      ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* temp = event_.ext4_journalled_invalidatepage_;
    event_.ext4_journalled_invalidatepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& FtraceEvent::ext4_journalled_invalidatepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  return has_ext4_journalled_invalidatepage()
      ? *event_.ext4_journalled_invalidatepage_
      : *reinterpret_cast< ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent*>(&::perfetto::protos::_Ext4JournalledInvalidatepageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::mutable_ext4_journalled_invalidatepage() {
  if (!has_ext4_journalled_invalidatepage()) {
    clear_event();
    set_has_ext4_journalled_invalidatepage();
    event_.ext4_journalled_invalidatepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  return event_.ext4_journalled_invalidatepage_;
}

// optional .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
inline bool FtraceEvent::has_ext4_journalled_write_end() const {
  return event_case() == kExt4JournalledWriteEnd;
}
inline void FtraceEvent::set_has_ext4_journalled_write_end() {
  _oneof_case_[0] = kExt4JournalledWriteEnd;
}
inline ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* FtraceEvent::release_ext4_journalled_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  if (has_ext4_journalled_write_end()) {
    clear_has_event();
      ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* temp = event_.ext4_journalled_write_end_;
    event_.ext4_journalled_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& FtraceEvent::ext4_journalled_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  return has_ext4_journalled_write_end()
      ? *event_.ext4_journalled_write_end_
      : *reinterpret_cast< ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent*>(&::perfetto::protos::_Ext4JournalledWriteEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* FtraceEvent::mutable_ext4_journalled_write_end() {
  if (!has_ext4_journalled_write_end()) {
    clear_event();
    set_has_ext4_journalled_write_end();
    event_.ext4_journalled_write_end_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  return event_.ext4_journalled_write_end_;
}

// optional .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
inline bool FtraceEvent::has_ext4_load_inode() const {
  return event_case() == kExt4LoadInode;
}
inline void FtraceEvent::set_has_ext4_load_inode() {
  _oneof_case_[0] = kExt4LoadInode;
}
inline ::perfetto::protos::Ext4LoadInodeFtraceEvent* FtraceEvent::release_ext4_load_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_load_inode)
  if (has_ext4_load_inode()) {
    clear_has_event();
      ::perfetto::protos::Ext4LoadInodeFtraceEvent* temp = event_.ext4_load_inode_;
    event_.ext4_load_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4LoadInodeFtraceEvent& FtraceEvent::ext4_load_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_load_inode)
  return has_ext4_load_inode()
      ? *event_.ext4_load_inode_
      : *reinterpret_cast< ::perfetto::protos::Ext4LoadInodeFtraceEvent*>(&::perfetto::protos::_Ext4LoadInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4LoadInodeFtraceEvent* FtraceEvent::mutable_ext4_load_inode() {
  if (!has_ext4_load_inode()) {
    clear_event();
    set_has_ext4_load_inode();
    event_.ext4_load_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4LoadInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_load_inode)
  return event_.ext4_load_inode_;
}

// optional .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
inline bool FtraceEvent::has_ext4_load_inode_bitmap() const {
  return event_case() == kExt4LoadInodeBitmap;
}
inline void FtraceEvent::set_has_ext4_load_inode_bitmap() {
  _oneof_case_[0] = kExt4LoadInodeBitmap;
}
inline ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::release_ext4_load_inode_bitmap() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  if (has_ext4_load_inode_bitmap()) {
    clear_has_event();
      ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* temp = event_.ext4_load_inode_bitmap_;
    event_.ext4_load_inode_bitmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& FtraceEvent::ext4_load_inode_bitmap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  return has_ext4_load_inode_bitmap()
      ? *event_.ext4_load_inode_bitmap_
      : *reinterpret_cast< ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent*>(&::perfetto::protos::_Ext4LoadInodeBitmapFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::mutable_ext4_load_inode_bitmap() {
  if (!has_ext4_load_inode_bitmap()) {
    clear_event();
    set_has_ext4_load_inode_bitmap();
    event_.ext4_load_inode_bitmap_ = CreateMaybeMessage< ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  return event_.ext4_load_inode_bitmap_;
}

// optional .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
inline bool FtraceEvent::has_ext4_mark_inode_dirty() const {
  return event_case() == kExt4MarkInodeDirty;
}
inline void FtraceEvent::set_has_ext4_mark_inode_dirty() {
  _oneof_case_[0] = kExt4MarkInodeDirty;
}
inline ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::release_ext4_mark_inode_dirty() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  if (has_ext4_mark_inode_dirty()) {
    clear_has_event();
      ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* temp = event_.ext4_mark_inode_dirty_;
    event_.ext4_mark_inode_dirty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& FtraceEvent::ext4_mark_inode_dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  return has_ext4_mark_inode_dirty()
      ? *event_.ext4_mark_inode_dirty_
      : *reinterpret_cast< ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent*>(&::perfetto::protos::_Ext4MarkInodeDirtyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::mutable_ext4_mark_inode_dirty() {
  if (!has_ext4_mark_inode_dirty()) {
    clear_event();
    set_has_ext4_mark_inode_dirty();
    event_.ext4_mark_inode_dirty_ = CreateMaybeMessage< ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  return event_.ext4_mark_inode_dirty_;
}

// optional .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
inline bool FtraceEvent::has_ext4_mb_bitmap_load() const {
  return event_case() == kExt4MbBitmapLoad;
}
inline void FtraceEvent::set_has_ext4_mb_bitmap_load() {
  _oneof_case_[0] = kExt4MbBitmapLoad;
}
inline ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* FtraceEvent::release_ext4_mb_bitmap_load() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  if (has_ext4_mb_bitmap_load()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* temp = event_.ext4_mb_bitmap_load_;
    event_.ext4_mb_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& FtraceEvent::ext4_mb_bitmap_load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  return has_ext4_mb_bitmap_load()
      ? *event_.ext4_mb_bitmap_load_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent*>(&::perfetto::protos::_Ext4MbBitmapLoadFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* FtraceEvent::mutable_ext4_mb_bitmap_load() {
  if (!has_ext4_mb_bitmap_load()) {
    clear_event();
    set_has_ext4_mb_bitmap_load();
    event_.ext4_mb_bitmap_load_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  return event_.ext4_mb_bitmap_load_;
}

// optional .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
inline bool FtraceEvent::has_ext4_mb_buddy_bitmap_load() const {
  return event_case() == kExt4MbBuddyBitmapLoad;
}
inline void FtraceEvent::set_has_ext4_mb_buddy_bitmap_load() {
  _oneof_case_[0] = kExt4MbBuddyBitmapLoad;
}
inline ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::release_ext4_mb_buddy_bitmap_load() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  if (has_ext4_mb_buddy_bitmap_load()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* temp = event_.ext4_mb_buddy_bitmap_load_;
    event_.ext4_mb_buddy_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& FtraceEvent::ext4_mb_buddy_bitmap_load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  return has_ext4_mb_buddy_bitmap_load()
      ? *event_.ext4_mb_buddy_bitmap_load_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent*>(&::perfetto::protos::_Ext4MbBuddyBitmapLoadFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::mutable_ext4_mb_buddy_bitmap_load() {
  if (!has_ext4_mb_buddy_bitmap_load()) {
    clear_event();
    set_has_ext4_mb_buddy_bitmap_load();
    event_.ext4_mb_buddy_bitmap_load_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  return event_.ext4_mb_buddy_bitmap_load_;
}

// optional .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
inline bool FtraceEvent::has_ext4_mb_discard_preallocations() const {
  return event_case() == kExt4MbDiscardPreallocations;
}
inline void FtraceEvent::set_has_ext4_mb_discard_preallocations() {
  _oneof_case_[0] = kExt4MbDiscardPreallocations;
}
inline ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::release_ext4_mb_discard_preallocations() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  if (has_ext4_mb_discard_preallocations()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* temp = event_.ext4_mb_discard_preallocations_;
    event_.ext4_mb_discard_preallocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& FtraceEvent::ext4_mb_discard_preallocations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  return has_ext4_mb_discard_preallocations()
      ? *event_.ext4_mb_discard_preallocations_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent*>(&::perfetto::protos::_Ext4MbDiscardPreallocationsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::mutable_ext4_mb_discard_preallocations() {
  if (!has_ext4_mb_discard_preallocations()) {
    clear_event();
    set_has_ext4_mb_discard_preallocations();
    event_.ext4_mb_discard_preallocations_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  return event_.ext4_mb_discard_preallocations_;
}

// optional .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
inline bool FtraceEvent::has_ext4_mb_new_group_pa() const {
  return event_case() == kExt4MbNewGroupPa;
}
inline void FtraceEvent::set_has_ext4_mb_new_group_pa() {
  _oneof_case_[0] = kExt4MbNewGroupPa;
}
inline ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* FtraceEvent::release_ext4_mb_new_group_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  if (has_ext4_mb_new_group_pa()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* temp = event_.ext4_mb_new_group_pa_;
    event_.ext4_mb_new_group_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& FtraceEvent::ext4_mb_new_group_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  return has_ext4_mb_new_group_pa()
      ? *event_.ext4_mb_new_group_pa_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent*>(&::perfetto::protos::_Ext4MbNewGroupPaFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* FtraceEvent::mutable_ext4_mb_new_group_pa() {
  if (!has_ext4_mb_new_group_pa()) {
    clear_event();
    set_has_ext4_mb_new_group_pa();
    event_.ext4_mb_new_group_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  return event_.ext4_mb_new_group_pa_;
}

// optional .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
inline bool FtraceEvent::has_ext4_mb_new_inode_pa() const {
  return event_case() == kExt4MbNewInodePa;
}
inline void FtraceEvent::set_has_ext4_mb_new_inode_pa() {
  _oneof_case_[0] = kExt4MbNewInodePa;
}
inline ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* FtraceEvent::release_ext4_mb_new_inode_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  if (has_ext4_mb_new_inode_pa()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* temp = event_.ext4_mb_new_inode_pa_;
    event_.ext4_mb_new_inode_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& FtraceEvent::ext4_mb_new_inode_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  return has_ext4_mb_new_inode_pa()
      ? *event_.ext4_mb_new_inode_pa_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbNewInodePaFtraceEvent*>(&::perfetto::protos::_Ext4MbNewInodePaFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* FtraceEvent::mutable_ext4_mb_new_inode_pa() {
  if (!has_ext4_mb_new_inode_pa()) {
    clear_event();
    set_has_ext4_mb_new_inode_pa();
    event_.ext4_mb_new_inode_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbNewInodePaFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  return event_.ext4_mb_new_inode_pa_;
}

// optional .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
inline bool FtraceEvent::has_ext4_mb_release_group_pa() const {
  return event_case() == kExt4MbReleaseGroupPa;
}
inline void FtraceEvent::set_has_ext4_mb_release_group_pa() {
  _oneof_case_[0] = kExt4MbReleaseGroupPa;
}
inline ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::release_ext4_mb_release_group_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  if (has_ext4_mb_release_group_pa()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* temp = event_.ext4_mb_release_group_pa_;
    event_.ext4_mb_release_group_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& FtraceEvent::ext4_mb_release_group_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  return has_ext4_mb_release_group_pa()
      ? *event_.ext4_mb_release_group_pa_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent*>(&::perfetto::protos::_Ext4MbReleaseGroupPaFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::mutable_ext4_mb_release_group_pa() {
  if (!has_ext4_mb_release_group_pa()) {
    clear_event();
    set_has_ext4_mb_release_group_pa();
    event_.ext4_mb_release_group_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  return event_.ext4_mb_release_group_pa_;
}

// optional .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
inline bool FtraceEvent::has_ext4_mb_release_inode_pa() const {
  return event_case() == kExt4MbReleaseInodePa;
}
inline void FtraceEvent::set_has_ext4_mb_release_inode_pa() {
  _oneof_case_[0] = kExt4MbReleaseInodePa;
}
inline ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::release_ext4_mb_release_inode_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  if (has_ext4_mb_release_inode_pa()) {
    clear_has_event();
      ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* temp = event_.ext4_mb_release_inode_pa_;
    event_.ext4_mb_release_inode_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& FtraceEvent::ext4_mb_release_inode_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  return has_ext4_mb_release_inode_pa()
      ? *event_.ext4_mb_release_inode_pa_
      : *reinterpret_cast< ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent*>(&::perfetto::protos::_Ext4MbReleaseInodePaFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::mutable_ext4_mb_release_inode_pa() {
  if (!has_ext4_mb_release_inode_pa()) {
    clear_event();
    set_has_ext4_mb_release_inode_pa();
    event_.ext4_mb_release_inode_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  return event_.ext4_mb_release_inode_pa_;
}

// optional .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
inline bool FtraceEvent::has_ext4_mballoc_alloc() const {
  return event_case() == kExt4MballocAlloc;
}
inline void FtraceEvent::set_has_ext4_mballoc_alloc() {
  _oneof_case_[0] = kExt4MballocAlloc;
}
inline ::perfetto::protos::Ext4MballocAllocFtraceEvent* FtraceEvent::release_ext4_mballoc_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  if (has_ext4_mballoc_alloc()) {
    clear_has_event();
      ::perfetto::protos::Ext4MballocAllocFtraceEvent* temp = event_.ext4_mballoc_alloc_;
    event_.ext4_mballoc_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocAllocFtraceEvent& FtraceEvent::ext4_mballoc_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  return has_ext4_mballoc_alloc()
      ? *event_.ext4_mballoc_alloc_
      : *reinterpret_cast< ::perfetto::protos::Ext4MballocAllocFtraceEvent*>(&::perfetto::protos::_Ext4MballocAllocFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MballocAllocFtraceEvent* FtraceEvent::mutable_ext4_mballoc_alloc() {
  if (!has_ext4_mballoc_alloc()) {
    clear_event();
    set_has_ext4_mballoc_alloc();
    event_.ext4_mballoc_alloc_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocAllocFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  return event_.ext4_mballoc_alloc_;
}

// optional .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
inline bool FtraceEvent::has_ext4_mballoc_discard() const {
  return event_case() == kExt4MballocDiscard;
}
inline void FtraceEvent::set_has_ext4_mballoc_discard() {
  _oneof_case_[0] = kExt4MballocDiscard;
}
inline ::perfetto::protos::Ext4MballocDiscardFtraceEvent* FtraceEvent::release_ext4_mballoc_discard() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  if (has_ext4_mballoc_discard()) {
    clear_has_event();
      ::perfetto::protos::Ext4MballocDiscardFtraceEvent* temp = event_.ext4_mballoc_discard_;
    event_.ext4_mballoc_discard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& FtraceEvent::ext4_mballoc_discard() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  return has_ext4_mballoc_discard()
      ? *event_.ext4_mballoc_discard_
      : *reinterpret_cast< ::perfetto::protos::Ext4MballocDiscardFtraceEvent*>(&::perfetto::protos::_Ext4MballocDiscardFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MballocDiscardFtraceEvent* FtraceEvent::mutable_ext4_mballoc_discard() {
  if (!has_ext4_mballoc_discard()) {
    clear_event();
    set_has_ext4_mballoc_discard();
    event_.ext4_mballoc_discard_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocDiscardFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  return event_.ext4_mballoc_discard_;
}

// optional .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
inline bool FtraceEvent::has_ext4_mballoc_free() const {
  return event_case() == kExt4MballocFree;
}
inline void FtraceEvent::set_has_ext4_mballoc_free() {
  _oneof_case_[0] = kExt4MballocFree;
}
inline ::perfetto::protos::Ext4MballocFreeFtraceEvent* FtraceEvent::release_ext4_mballoc_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  if (has_ext4_mballoc_free()) {
    clear_has_event();
      ::perfetto::protos::Ext4MballocFreeFtraceEvent* temp = event_.ext4_mballoc_free_;
    event_.ext4_mballoc_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocFreeFtraceEvent& FtraceEvent::ext4_mballoc_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  return has_ext4_mballoc_free()
      ? *event_.ext4_mballoc_free_
      : *reinterpret_cast< ::perfetto::protos::Ext4MballocFreeFtraceEvent*>(&::perfetto::protos::_Ext4MballocFreeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MballocFreeFtraceEvent* FtraceEvent::mutable_ext4_mballoc_free() {
  if (!has_ext4_mballoc_free()) {
    clear_event();
    set_has_ext4_mballoc_free();
    event_.ext4_mballoc_free_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocFreeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  return event_.ext4_mballoc_free_;
}

// optional .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
inline bool FtraceEvent::has_ext4_mballoc_prealloc() const {
  return event_case() == kExt4MballocPrealloc;
}
inline void FtraceEvent::set_has_ext4_mballoc_prealloc() {
  _oneof_case_[0] = kExt4MballocPrealloc;
}
inline ::perfetto::protos::Ext4MballocPreallocFtraceEvent* FtraceEvent::release_ext4_mballoc_prealloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  if (has_ext4_mballoc_prealloc()) {
    clear_has_event();
      ::perfetto::protos::Ext4MballocPreallocFtraceEvent* temp = event_.ext4_mballoc_prealloc_;
    event_.ext4_mballoc_prealloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& FtraceEvent::ext4_mballoc_prealloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  return has_ext4_mballoc_prealloc()
      ? *event_.ext4_mballoc_prealloc_
      : *reinterpret_cast< ::perfetto::protos::Ext4MballocPreallocFtraceEvent*>(&::perfetto::protos::_Ext4MballocPreallocFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4MballocPreallocFtraceEvent* FtraceEvent::mutable_ext4_mballoc_prealloc() {
  if (!has_ext4_mballoc_prealloc()) {
    clear_event();
    set_has_ext4_mballoc_prealloc();
    event_.ext4_mballoc_prealloc_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocPreallocFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  return event_.ext4_mballoc_prealloc_;
}

// optional .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
inline bool FtraceEvent::has_ext4_other_inode_update_time() const {
  return event_case() == kExt4OtherInodeUpdateTime;
}
inline void FtraceEvent::set_has_ext4_other_inode_update_time() {
  _oneof_case_[0] = kExt4OtherInodeUpdateTime;
}
inline ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::release_ext4_other_inode_update_time() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  if (has_ext4_other_inode_update_time()) {
    clear_has_event();
      ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* temp = event_.ext4_other_inode_update_time_;
    event_.ext4_other_inode_update_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& FtraceEvent::ext4_other_inode_update_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  return has_ext4_other_inode_update_time()
      ? *event_.ext4_other_inode_update_time_
      : *reinterpret_cast< ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent*>(&::perfetto::protos::_Ext4OtherInodeUpdateTimeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::mutable_ext4_other_inode_update_time() {
  if (!has_ext4_other_inode_update_time()) {
    clear_event();
    set_has_ext4_other_inode_update_time();
    event_.ext4_other_inode_update_time_ = CreateMaybeMessage< ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  return event_.ext4_other_inode_update_time_;
}

// optional .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
inline bool FtraceEvent::has_ext4_punch_hole() const {
  return event_case() == kExt4PunchHole;
}
inline void FtraceEvent::set_has_ext4_punch_hole() {
  _oneof_case_[0] = kExt4PunchHole;
}
inline ::perfetto::protos::Ext4PunchHoleFtraceEvent* FtraceEvent::release_ext4_punch_hole() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_punch_hole)
  if (has_ext4_punch_hole()) {
    clear_has_event();
      ::perfetto::protos::Ext4PunchHoleFtraceEvent* temp = event_.ext4_punch_hole_;
    event_.ext4_punch_hole_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4PunchHoleFtraceEvent& FtraceEvent::ext4_punch_hole() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_punch_hole)
  return has_ext4_punch_hole()
      ? *event_.ext4_punch_hole_
      : *reinterpret_cast< ::perfetto::protos::Ext4PunchHoleFtraceEvent*>(&::perfetto::protos::_Ext4PunchHoleFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4PunchHoleFtraceEvent* FtraceEvent::mutable_ext4_punch_hole() {
  if (!has_ext4_punch_hole()) {
    clear_event();
    set_has_ext4_punch_hole();
    event_.ext4_punch_hole_ = CreateMaybeMessage< ::perfetto::protos::Ext4PunchHoleFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_punch_hole)
  return event_.ext4_punch_hole_;
}

// optional .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
inline bool FtraceEvent::has_ext4_read_block_bitmap_load() const {
  return event_case() == kExt4ReadBlockBitmapLoad;
}
inline void FtraceEvent::set_has_ext4_read_block_bitmap_load() {
  _oneof_case_[0] = kExt4ReadBlockBitmapLoad;
}
inline ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::release_ext4_read_block_bitmap_load() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  if (has_ext4_read_block_bitmap_load()) {
    clear_has_event();
      ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* temp = event_.ext4_read_block_bitmap_load_;
    event_.ext4_read_block_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& FtraceEvent::ext4_read_block_bitmap_load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  return has_ext4_read_block_bitmap_load()
      ? *event_.ext4_read_block_bitmap_load_
      : *reinterpret_cast< ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent*>(&::perfetto::protos::_Ext4ReadBlockBitmapLoadFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::mutable_ext4_read_block_bitmap_load() {
  if (!has_ext4_read_block_bitmap_load()) {
    clear_event();
    set_has_ext4_read_block_bitmap_load();
    event_.ext4_read_block_bitmap_load_ = CreateMaybeMessage< ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  return event_.ext4_read_block_bitmap_load_;
}

// optional .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
inline bool FtraceEvent::has_ext4_readpage() const {
  return event_case() == kExt4Readpage;
}
inline void FtraceEvent::set_has_ext4_readpage() {
  _oneof_case_[0] = kExt4Readpage;
}
inline ::perfetto::protos::Ext4ReadpageFtraceEvent* FtraceEvent::release_ext4_readpage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_readpage)
  if (has_ext4_readpage()) {
    clear_has_event();
      ::perfetto::protos::Ext4ReadpageFtraceEvent* temp = event_.ext4_readpage_;
    event_.ext4_readpage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ReadpageFtraceEvent& FtraceEvent::ext4_readpage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_readpage)
  return has_ext4_readpage()
      ? *event_.ext4_readpage_
      : *reinterpret_cast< ::perfetto::protos::Ext4ReadpageFtraceEvent*>(&::perfetto::protos::_Ext4ReadpageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ReadpageFtraceEvent* FtraceEvent::mutable_ext4_readpage() {
  if (!has_ext4_readpage()) {
    clear_event();
    set_has_ext4_readpage();
    event_.ext4_readpage_ = CreateMaybeMessage< ::perfetto::protos::Ext4ReadpageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_readpage)
  return event_.ext4_readpage_;
}

// optional .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
inline bool FtraceEvent::has_ext4_releasepage() const {
  return event_case() == kExt4Releasepage;
}
inline void FtraceEvent::set_has_ext4_releasepage() {
  _oneof_case_[0] = kExt4Releasepage;
}
inline ::perfetto::protos::Ext4ReleasepageFtraceEvent* FtraceEvent::release_ext4_releasepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_releasepage)
  if (has_ext4_releasepage()) {
    clear_has_event();
      ::perfetto::protos::Ext4ReleasepageFtraceEvent* temp = event_.ext4_releasepage_;
    event_.ext4_releasepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ReleasepageFtraceEvent& FtraceEvent::ext4_releasepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_releasepage)
  return has_ext4_releasepage()
      ? *event_.ext4_releasepage_
      : *reinterpret_cast< ::perfetto::protos::Ext4ReleasepageFtraceEvent*>(&::perfetto::protos::_Ext4ReleasepageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ReleasepageFtraceEvent* FtraceEvent::mutable_ext4_releasepage() {
  if (!has_ext4_releasepage()) {
    clear_event();
    set_has_ext4_releasepage();
    event_.ext4_releasepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4ReleasepageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_releasepage)
  return event_.ext4_releasepage_;
}

// optional .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
inline bool FtraceEvent::has_ext4_remove_blocks() const {
  return event_case() == kExt4RemoveBlocks;
}
inline void FtraceEvent::set_has_ext4_remove_blocks() {
  _oneof_case_[0] = kExt4RemoveBlocks;
}
inline ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* FtraceEvent::release_ext4_remove_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  if (has_ext4_remove_blocks()) {
    clear_has_event();
      ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* temp = event_.ext4_remove_blocks_;
    event_.ext4_remove_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& FtraceEvent::ext4_remove_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  return has_ext4_remove_blocks()
      ? *event_.ext4_remove_blocks_
      : *reinterpret_cast< ::perfetto::protos::Ext4RemoveBlocksFtraceEvent*>(&::perfetto::protos::_Ext4RemoveBlocksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* FtraceEvent::mutable_ext4_remove_blocks() {
  if (!has_ext4_remove_blocks()) {
    clear_event();
    set_has_ext4_remove_blocks();
    event_.ext4_remove_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4RemoveBlocksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  return event_.ext4_remove_blocks_;
}

// optional .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
inline bool FtraceEvent::has_ext4_request_blocks() const {
  return event_case() == kExt4RequestBlocks;
}
inline void FtraceEvent::set_has_ext4_request_blocks() {
  _oneof_case_[0] = kExt4RequestBlocks;
}
inline ::perfetto::protos::Ext4RequestBlocksFtraceEvent* FtraceEvent::release_ext4_request_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_request_blocks)
  if (has_ext4_request_blocks()) {
    clear_has_event();
      ::perfetto::protos::Ext4RequestBlocksFtraceEvent* temp = event_.ext4_request_blocks_;
    event_.ext4_request_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& FtraceEvent::ext4_request_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_request_blocks)
  return has_ext4_request_blocks()
      ? *event_.ext4_request_blocks_
      : *reinterpret_cast< ::perfetto::protos::Ext4RequestBlocksFtraceEvent*>(&::perfetto::protos::_Ext4RequestBlocksFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4RequestBlocksFtraceEvent* FtraceEvent::mutable_ext4_request_blocks() {
  if (!has_ext4_request_blocks()) {
    clear_event();
    set_has_ext4_request_blocks();
    event_.ext4_request_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4RequestBlocksFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_request_blocks)
  return event_.ext4_request_blocks_;
}

// optional .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
inline bool FtraceEvent::has_ext4_request_inode() const {
  return event_case() == kExt4RequestInode;
}
inline void FtraceEvent::set_has_ext4_request_inode() {
  _oneof_case_[0] = kExt4RequestInode;
}
inline ::perfetto::protos::Ext4RequestInodeFtraceEvent* FtraceEvent::release_ext4_request_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_request_inode)
  if (has_ext4_request_inode()) {
    clear_has_event();
      ::perfetto::protos::Ext4RequestInodeFtraceEvent* temp = event_.ext4_request_inode_;
    event_.ext4_request_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4RequestInodeFtraceEvent& FtraceEvent::ext4_request_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_request_inode)
  return has_ext4_request_inode()
      ? *event_.ext4_request_inode_
      : *reinterpret_cast< ::perfetto::protos::Ext4RequestInodeFtraceEvent*>(&::perfetto::protos::_Ext4RequestInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4RequestInodeFtraceEvent* FtraceEvent::mutable_ext4_request_inode() {
  if (!has_ext4_request_inode()) {
    clear_event();
    set_has_ext4_request_inode();
    event_.ext4_request_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4RequestInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_request_inode)
  return event_.ext4_request_inode_;
}

// optional .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
inline bool FtraceEvent::has_ext4_sync_fs() const {
  return event_case() == kExt4SyncFs;
}
inline void FtraceEvent::set_has_ext4_sync_fs() {
  _oneof_case_[0] = kExt4SyncFs;
}
inline ::perfetto::protos::Ext4SyncFsFtraceEvent* FtraceEvent::release_ext4_sync_fs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_sync_fs)
  if (has_ext4_sync_fs()) {
    clear_has_event();
      ::perfetto::protos::Ext4SyncFsFtraceEvent* temp = event_.ext4_sync_fs_;
    event_.ext4_sync_fs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4SyncFsFtraceEvent& FtraceEvent::ext4_sync_fs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_sync_fs)
  return has_ext4_sync_fs()
      ? *event_.ext4_sync_fs_
      : *reinterpret_cast< ::perfetto::protos::Ext4SyncFsFtraceEvent*>(&::perfetto::protos::_Ext4SyncFsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4SyncFsFtraceEvent* FtraceEvent::mutable_ext4_sync_fs() {
  if (!has_ext4_sync_fs()) {
    clear_event();
    set_has_ext4_sync_fs();
    event_.ext4_sync_fs_ = CreateMaybeMessage< ::perfetto::protos::Ext4SyncFsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_sync_fs)
  return event_.ext4_sync_fs_;
}

// optional .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
inline bool FtraceEvent::has_ext4_trim_all_free() const {
  return event_case() == kExt4TrimAllFree;
}
inline void FtraceEvent::set_has_ext4_trim_all_free() {
  _oneof_case_[0] = kExt4TrimAllFree;
}
inline ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* FtraceEvent::release_ext4_trim_all_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  if (has_ext4_trim_all_free()) {
    clear_has_event();
      ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* temp = event_.ext4_trim_all_free_;
    event_.ext4_trim_all_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& FtraceEvent::ext4_trim_all_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  return has_ext4_trim_all_free()
      ? *event_.ext4_trim_all_free_
      : *reinterpret_cast< ::perfetto::protos::Ext4TrimAllFreeFtraceEvent*>(&::perfetto::protos::_Ext4TrimAllFreeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* FtraceEvent::mutable_ext4_trim_all_free() {
  if (!has_ext4_trim_all_free()) {
    clear_event();
    set_has_ext4_trim_all_free();
    event_.ext4_trim_all_free_ = CreateMaybeMessage< ::perfetto::protos::Ext4TrimAllFreeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  return event_.ext4_trim_all_free_;
}

// optional .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
inline bool FtraceEvent::has_ext4_trim_extent() const {
  return event_case() == kExt4TrimExtent;
}
inline void FtraceEvent::set_has_ext4_trim_extent() {
  _oneof_case_[0] = kExt4TrimExtent;
}
inline ::perfetto::protos::Ext4TrimExtentFtraceEvent* FtraceEvent::release_ext4_trim_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_trim_extent)
  if (has_ext4_trim_extent()) {
    clear_has_event();
      ::perfetto::protos::Ext4TrimExtentFtraceEvent* temp = event_.ext4_trim_extent_;
    event_.ext4_trim_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TrimExtentFtraceEvent& FtraceEvent::ext4_trim_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_trim_extent)
  return has_ext4_trim_extent()
      ? *event_.ext4_trim_extent_
      : *reinterpret_cast< ::perfetto::protos::Ext4TrimExtentFtraceEvent*>(&::perfetto::protos::_Ext4TrimExtentFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4TrimExtentFtraceEvent* FtraceEvent::mutable_ext4_trim_extent() {
  if (!has_ext4_trim_extent()) {
    clear_event();
    set_has_ext4_trim_extent();
    event_.ext4_trim_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4TrimExtentFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_trim_extent)
  return event_.ext4_trim_extent_;
}

// optional .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
inline bool FtraceEvent::has_ext4_truncate_enter() const {
  return event_case() == kExt4TruncateEnter;
}
inline void FtraceEvent::set_has_ext4_truncate_enter() {
  _oneof_case_[0] = kExt4TruncateEnter;
}
inline ::perfetto::protos::Ext4TruncateEnterFtraceEvent* FtraceEvent::release_ext4_truncate_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  if (has_ext4_truncate_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4TruncateEnterFtraceEvent* temp = event_.ext4_truncate_enter_;
    event_.ext4_truncate_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& FtraceEvent::ext4_truncate_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  return has_ext4_truncate_enter()
      ? *event_.ext4_truncate_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4TruncateEnterFtraceEvent*>(&::perfetto::protos::_Ext4TruncateEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4TruncateEnterFtraceEvent* FtraceEvent::mutable_ext4_truncate_enter() {
  if (!has_ext4_truncate_enter()) {
    clear_event();
    set_has_ext4_truncate_enter();
    event_.ext4_truncate_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4TruncateEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  return event_.ext4_truncate_enter_;
}

// optional .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
inline bool FtraceEvent::has_ext4_truncate_exit() const {
  return event_case() == kExt4TruncateExit;
}
inline void FtraceEvent::set_has_ext4_truncate_exit() {
  _oneof_case_[0] = kExt4TruncateExit;
}
inline ::perfetto::protos::Ext4TruncateExitFtraceEvent* FtraceEvent::release_ext4_truncate_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  if (has_ext4_truncate_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4TruncateExitFtraceEvent* temp = event_.ext4_truncate_exit_;
    event_.ext4_truncate_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TruncateExitFtraceEvent& FtraceEvent::ext4_truncate_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  return has_ext4_truncate_exit()
      ? *event_.ext4_truncate_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4TruncateExitFtraceEvent*>(&::perfetto::protos::_Ext4TruncateExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4TruncateExitFtraceEvent* FtraceEvent::mutable_ext4_truncate_exit() {
  if (!has_ext4_truncate_exit()) {
    clear_event();
    set_has_ext4_truncate_exit();
    event_.ext4_truncate_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4TruncateExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  return event_.ext4_truncate_exit_;
}

// optional .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
inline bool FtraceEvent::has_ext4_unlink_enter() const {
  return event_case() == kExt4UnlinkEnter;
}
inline void FtraceEvent::set_has_ext4_unlink_enter() {
  _oneof_case_[0] = kExt4UnlinkEnter;
}
inline ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* FtraceEvent::release_ext4_unlink_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  if (has_ext4_unlink_enter()) {
    clear_has_event();
      ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* temp = event_.ext4_unlink_enter_;
    event_.ext4_unlink_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& FtraceEvent::ext4_unlink_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  return has_ext4_unlink_enter()
      ? *event_.ext4_unlink_enter_
      : *reinterpret_cast< ::perfetto::protos::Ext4UnlinkEnterFtraceEvent*>(&::perfetto::protos::_Ext4UnlinkEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* FtraceEvent::mutable_ext4_unlink_enter() {
  if (!has_ext4_unlink_enter()) {
    clear_event();
    set_has_ext4_unlink_enter();
    event_.ext4_unlink_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4UnlinkEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  return event_.ext4_unlink_enter_;
}

// optional .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
inline bool FtraceEvent::has_ext4_unlink_exit() const {
  return event_case() == kExt4UnlinkExit;
}
inline void FtraceEvent::set_has_ext4_unlink_exit() {
  _oneof_case_[0] = kExt4UnlinkExit;
}
inline ::perfetto::protos::Ext4UnlinkExitFtraceEvent* FtraceEvent::release_ext4_unlink_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  if (has_ext4_unlink_exit()) {
    clear_has_event();
      ::perfetto::protos::Ext4UnlinkExitFtraceEvent* temp = event_.ext4_unlink_exit_;
    event_.ext4_unlink_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& FtraceEvent::ext4_unlink_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  return has_ext4_unlink_exit()
      ? *event_.ext4_unlink_exit_
      : *reinterpret_cast< ::perfetto::protos::Ext4UnlinkExitFtraceEvent*>(&::perfetto::protos::_Ext4UnlinkExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4UnlinkExitFtraceEvent* FtraceEvent::mutable_ext4_unlink_exit() {
  if (!has_ext4_unlink_exit()) {
    clear_event();
    set_has_ext4_unlink_exit();
    event_.ext4_unlink_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4UnlinkExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  return event_.ext4_unlink_exit_;
}

// optional .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
inline bool FtraceEvent::has_ext4_write_begin() const {
  return event_case() == kExt4WriteBegin;
}
inline void FtraceEvent::set_has_ext4_write_begin() {
  _oneof_case_[0] = kExt4WriteBegin;
}
inline ::perfetto::protos::Ext4WriteBeginFtraceEvent* FtraceEvent::release_ext4_write_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_write_begin)
  if (has_ext4_write_begin()) {
    clear_has_event();
      ::perfetto::protos::Ext4WriteBeginFtraceEvent* temp = event_.ext4_write_begin_;
    event_.ext4_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WriteBeginFtraceEvent& FtraceEvent::ext4_write_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_write_begin)
  return has_ext4_write_begin()
      ? *event_.ext4_write_begin_
      : *reinterpret_cast< ::perfetto::protos::Ext4WriteBeginFtraceEvent*>(&::perfetto::protos::_Ext4WriteBeginFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4WriteBeginFtraceEvent* FtraceEvent::mutable_ext4_write_begin() {
  if (!has_ext4_write_begin()) {
    clear_event();
    set_has_ext4_write_begin();
    event_.ext4_write_begin_ = CreateMaybeMessage< ::perfetto::protos::Ext4WriteBeginFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_write_begin)
  return event_.ext4_write_begin_;
}

// optional .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
inline bool FtraceEvent::has_ext4_write_end() const {
  return event_case() == kExt4WriteEnd;
}
inline void FtraceEvent::set_has_ext4_write_end() {
  _oneof_case_[0] = kExt4WriteEnd;
}
inline ::perfetto::protos::Ext4WriteEndFtraceEvent* FtraceEvent::release_ext4_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_write_end)
  if (has_ext4_write_end()) {
    clear_has_event();
      ::perfetto::protos::Ext4WriteEndFtraceEvent* temp = event_.ext4_write_end_;
    event_.ext4_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WriteEndFtraceEvent& FtraceEvent::ext4_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_write_end)
  return has_ext4_write_end()
      ? *event_.ext4_write_end_
      : *reinterpret_cast< ::perfetto::protos::Ext4WriteEndFtraceEvent*>(&::perfetto::protos::_Ext4WriteEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4WriteEndFtraceEvent* FtraceEvent::mutable_ext4_write_end() {
  if (!has_ext4_write_end()) {
    clear_event();
    set_has_ext4_write_end();
    event_.ext4_write_end_ = CreateMaybeMessage< ::perfetto::protos::Ext4WriteEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_write_end)
  return event_.ext4_write_end_;
}

// optional .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
inline bool FtraceEvent::has_ext4_writepage() const {
  return event_case() == kExt4Writepage;
}
inline void FtraceEvent::set_has_ext4_writepage() {
  _oneof_case_[0] = kExt4Writepage;
}
inline ::perfetto::protos::Ext4WritepageFtraceEvent* FtraceEvent::release_ext4_writepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_writepage)
  if (has_ext4_writepage()) {
    clear_has_event();
      ::perfetto::protos::Ext4WritepageFtraceEvent* temp = event_.ext4_writepage_;
    event_.ext4_writepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WritepageFtraceEvent& FtraceEvent::ext4_writepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_writepage)
  return has_ext4_writepage()
      ? *event_.ext4_writepage_
      : *reinterpret_cast< ::perfetto::protos::Ext4WritepageFtraceEvent*>(&::perfetto::protos::_Ext4WritepageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4WritepageFtraceEvent* FtraceEvent::mutable_ext4_writepage() {
  if (!has_ext4_writepage()) {
    clear_event();
    set_has_ext4_writepage();
    event_.ext4_writepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4WritepageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_writepage)
  return event_.ext4_writepage_;
}

// optional .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
inline bool FtraceEvent::has_ext4_writepages() const {
  return event_case() == kExt4Writepages;
}
inline void FtraceEvent::set_has_ext4_writepages() {
  _oneof_case_[0] = kExt4Writepages;
}
inline ::perfetto::protos::Ext4WritepagesFtraceEvent* FtraceEvent::release_ext4_writepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_writepages)
  if (has_ext4_writepages()) {
    clear_has_event();
      ::perfetto::protos::Ext4WritepagesFtraceEvent* temp = event_.ext4_writepages_;
    event_.ext4_writepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WritepagesFtraceEvent& FtraceEvent::ext4_writepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_writepages)
  return has_ext4_writepages()
      ? *event_.ext4_writepages_
      : *reinterpret_cast< ::perfetto::protos::Ext4WritepagesFtraceEvent*>(&::perfetto::protos::_Ext4WritepagesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4WritepagesFtraceEvent* FtraceEvent::mutable_ext4_writepages() {
  if (!has_ext4_writepages()) {
    clear_event();
    set_has_ext4_writepages();
    event_.ext4_writepages_ = CreateMaybeMessage< ::perfetto::protos::Ext4WritepagesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_writepages)
  return event_.ext4_writepages_;
}

// optional .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
inline bool FtraceEvent::has_ext4_writepages_result() const {
  return event_case() == kExt4WritepagesResult;
}
inline void FtraceEvent::set_has_ext4_writepages_result() {
  _oneof_case_[0] = kExt4WritepagesResult;
}
inline ::perfetto::protos::Ext4WritepagesResultFtraceEvent* FtraceEvent::release_ext4_writepages_result() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_writepages_result)
  if (has_ext4_writepages_result()) {
    clear_has_event();
      ::perfetto::protos::Ext4WritepagesResultFtraceEvent* temp = event_.ext4_writepages_result_;
    event_.ext4_writepages_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& FtraceEvent::ext4_writepages_result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_writepages_result)
  return has_ext4_writepages_result()
      ? *event_.ext4_writepages_result_
      : *reinterpret_cast< ::perfetto::protos::Ext4WritepagesResultFtraceEvent*>(&::perfetto::protos::_Ext4WritepagesResultFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4WritepagesResultFtraceEvent* FtraceEvent::mutable_ext4_writepages_result() {
  if (!has_ext4_writepages_result()) {
    clear_event();
    set_has_ext4_writepages_result();
    event_.ext4_writepages_result_ = CreateMaybeMessage< ::perfetto::protos::Ext4WritepagesResultFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_writepages_result)
  return event_.ext4_writepages_result_;
}

// optional .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
inline bool FtraceEvent::has_ext4_zero_range() const {
  return event_case() == kExt4ZeroRange;
}
inline void FtraceEvent::set_has_ext4_zero_range() {
  _oneof_case_[0] = kExt4ZeroRange;
}
inline ::perfetto::protos::Ext4ZeroRangeFtraceEvent* FtraceEvent::release_ext4_zero_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_zero_range)
  if (has_ext4_zero_range()) {
    clear_has_event();
      ::perfetto::protos::Ext4ZeroRangeFtraceEvent* temp = event_.ext4_zero_range_;
    event_.ext4_zero_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& FtraceEvent::ext4_zero_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_zero_range)
  return has_ext4_zero_range()
      ? *event_.ext4_zero_range_
      : *reinterpret_cast< ::perfetto::protos::Ext4ZeroRangeFtraceEvent*>(&::perfetto::protos::_Ext4ZeroRangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::Ext4ZeroRangeFtraceEvent* FtraceEvent::mutable_ext4_zero_range() {
  if (!has_ext4_zero_range()) {
    clear_event();
    set_has_ext4_zero_range();
    event_.ext4_zero_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4ZeroRangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_zero_range)
  return event_.ext4_zero_range_;
}

// optional .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
inline bool FtraceEvent::has_task_newtask() const {
  return event_case() == kTaskNewtask;
}
inline void FtraceEvent::set_has_task_newtask() {
  _oneof_case_[0] = kTaskNewtask;
}
inline ::perfetto::protos::TaskNewtaskFtraceEvent* FtraceEvent::release_task_newtask() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.task_newtask)
  if (has_task_newtask()) {
    clear_has_event();
      ::perfetto::protos::TaskNewtaskFtraceEvent* temp = event_.task_newtask_;
    event_.task_newtask_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TaskNewtaskFtraceEvent& FtraceEvent::task_newtask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.task_newtask)
  return has_task_newtask()
      ? *event_.task_newtask_
      : *reinterpret_cast< ::perfetto::protos::TaskNewtaskFtraceEvent*>(&::perfetto::protos::_TaskNewtaskFtraceEvent_default_instance_);
}
inline ::perfetto::protos::TaskNewtaskFtraceEvent* FtraceEvent::mutable_task_newtask() {
  if (!has_task_newtask()) {
    clear_event();
    set_has_task_newtask();
    event_.task_newtask_ = CreateMaybeMessage< ::perfetto::protos::TaskNewtaskFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.task_newtask)
  return event_.task_newtask_;
}

// optional .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
inline bool FtraceEvent::has_task_rename() const {
  return event_case() == kTaskRename;
}
inline void FtraceEvent::set_has_task_rename() {
  _oneof_case_[0] = kTaskRename;
}
inline ::perfetto::protos::TaskRenameFtraceEvent* FtraceEvent::release_task_rename() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.task_rename)
  if (has_task_rename()) {
    clear_has_event();
      ::perfetto::protos::TaskRenameFtraceEvent* temp = event_.task_rename_;
    event_.task_rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TaskRenameFtraceEvent& FtraceEvent::task_rename() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.task_rename)
  return has_task_rename()
      ? *event_.task_rename_
      : *reinterpret_cast< ::perfetto::protos::TaskRenameFtraceEvent*>(&::perfetto::protos::_TaskRenameFtraceEvent_default_instance_);
}
inline ::perfetto::protos::TaskRenameFtraceEvent* FtraceEvent::mutable_task_rename() {
  if (!has_task_rename()) {
    clear_event();
    set_has_task_rename();
    event_.task_rename_ = CreateMaybeMessage< ::perfetto::protos::TaskRenameFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.task_rename)
  return event_.task_rename_;
}

// optional .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
inline bool FtraceEvent::has_sched_process_exec() const {
  return event_case() == kSchedProcessExec;
}
inline void FtraceEvent::set_has_sched_process_exec() {
  _oneof_case_[0] = kSchedProcessExec;
}
inline ::perfetto::protos::SchedProcessExecFtraceEvent* FtraceEvent::release_sched_process_exec() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_exec)
  if (has_sched_process_exec()) {
    clear_has_event();
      ::perfetto::protos::SchedProcessExecFtraceEvent* temp = event_.sched_process_exec_;
    event_.sched_process_exec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessExecFtraceEvent& FtraceEvent::sched_process_exec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_exec)
  return has_sched_process_exec()
      ? *event_.sched_process_exec_
      : *reinterpret_cast< ::perfetto::protos::SchedProcessExecFtraceEvent*>(&::perfetto::protos::_SchedProcessExecFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedProcessExecFtraceEvent* FtraceEvent::mutable_sched_process_exec() {
  if (!has_sched_process_exec()) {
    clear_event();
    set_has_sched_process_exec();
    event_.sched_process_exec_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessExecFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_exec)
  return event_.sched_process_exec_;
}

// optional .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
inline bool FtraceEvent::has_sched_process_exit() const {
  return event_case() == kSchedProcessExit;
}
inline void FtraceEvent::set_has_sched_process_exit() {
  _oneof_case_[0] = kSchedProcessExit;
}
inline ::perfetto::protos::SchedProcessExitFtraceEvent* FtraceEvent::release_sched_process_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_exit)
  if (has_sched_process_exit()) {
    clear_has_event();
      ::perfetto::protos::SchedProcessExitFtraceEvent* temp = event_.sched_process_exit_;
    event_.sched_process_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessExitFtraceEvent& FtraceEvent::sched_process_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_exit)
  return has_sched_process_exit()
      ? *event_.sched_process_exit_
      : *reinterpret_cast< ::perfetto::protos::SchedProcessExitFtraceEvent*>(&::perfetto::protos::_SchedProcessExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedProcessExitFtraceEvent* FtraceEvent::mutable_sched_process_exit() {
  if (!has_sched_process_exit()) {
    clear_event();
    set_has_sched_process_exit();
    event_.sched_process_exit_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_exit)
  return event_.sched_process_exit_;
}

// optional .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
inline bool FtraceEvent::has_sched_process_fork() const {
  return event_case() == kSchedProcessFork;
}
inline void FtraceEvent::set_has_sched_process_fork() {
  _oneof_case_[0] = kSchedProcessFork;
}
inline ::perfetto::protos::SchedProcessForkFtraceEvent* FtraceEvent::release_sched_process_fork() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_fork)
  if (has_sched_process_fork()) {
    clear_has_event();
      ::perfetto::protos::SchedProcessForkFtraceEvent* temp = event_.sched_process_fork_;
    event_.sched_process_fork_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessForkFtraceEvent& FtraceEvent::sched_process_fork() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_fork)
  return has_sched_process_fork()
      ? *event_.sched_process_fork_
      : *reinterpret_cast< ::perfetto::protos::SchedProcessForkFtraceEvent*>(&::perfetto::protos::_SchedProcessForkFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedProcessForkFtraceEvent* FtraceEvent::mutable_sched_process_fork() {
  if (!has_sched_process_fork()) {
    clear_event();
    set_has_sched_process_fork();
    event_.sched_process_fork_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessForkFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_fork)
  return event_.sched_process_fork_;
}

// optional .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
inline bool FtraceEvent::has_sched_process_free() const {
  return event_case() == kSchedProcessFree;
}
inline void FtraceEvent::set_has_sched_process_free() {
  _oneof_case_[0] = kSchedProcessFree;
}
inline ::perfetto::protos::SchedProcessFreeFtraceEvent* FtraceEvent::release_sched_process_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_free)
  if (has_sched_process_free()) {
    clear_has_event();
      ::perfetto::protos::SchedProcessFreeFtraceEvent* temp = event_.sched_process_free_;
    event_.sched_process_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessFreeFtraceEvent& FtraceEvent::sched_process_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_free)
  return has_sched_process_free()
      ? *event_.sched_process_free_
      : *reinterpret_cast< ::perfetto::protos::SchedProcessFreeFtraceEvent*>(&::perfetto::protos::_SchedProcessFreeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedProcessFreeFtraceEvent* FtraceEvent::mutable_sched_process_free() {
  if (!has_sched_process_free()) {
    clear_event();
    set_has_sched_process_free();
    event_.sched_process_free_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessFreeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_free)
  return event_.sched_process_free_;
}

// optional .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
inline bool FtraceEvent::has_sched_process_hang() const {
  return event_case() == kSchedProcessHang;
}
inline void FtraceEvent::set_has_sched_process_hang() {
  _oneof_case_[0] = kSchedProcessHang;
}
inline ::perfetto::protos::SchedProcessHangFtraceEvent* FtraceEvent::release_sched_process_hang() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_hang)
  if (has_sched_process_hang()) {
    clear_has_event();
      ::perfetto::protos::SchedProcessHangFtraceEvent* temp = event_.sched_process_hang_;
    event_.sched_process_hang_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessHangFtraceEvent& FtraceEvent::sched_process_hang() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_hang)
  return has_sched_process_hang()
      ? *event_.sched_process_hang_
      : *reinterpret_cast< ::perfetto::protos::SchedProcessHangFtraceEvent*>(&::perfetto::protos::_SchedProcessHangFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedProcessHangFtraceEvent* FtraceEvent::mutable_sched_process_hang() {
  if (!has_sched_process_hang()) {
    clear_event();
    set_has_sched_process_hang();
    event_.sched_process_hang_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessHangFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_hang)
  return event_.sched_process_hang_;
}

// optional .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
inline bool FtraceEvent::has_sched_process_wait() const {
  return event_case() == kSchedProcessWait;
}
inline void FtraceEvent::set_has_sched_process_wait() {
  _oneof_case_[0] = kSchedProcessWait;
}
inline ::perfetto::protos::SchedProcessWaitFtraceEvent* FtraceEvent::release_sched_process_wait() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_wait)
  if (has_sched_process_wait()) {
    clear_has_event();
      ::perfetto::protos::SchedProcessWaitFtraceEvent* temp = event_.sched_process_wait_;
    event_.sched_process_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessWaitFtraceEvent& FtraceEvent::sched_process_wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_wait)
  return has_sched_process_wait()
      ? *event_.sched_process_wait_
      : *reinterpret_cast< ::perfetto::protos::SchedProcessWaitFtraceEvent*>(&::perfetto::protos::_SchedProcessWaitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SchedProcessWaitFtraceEvent* FtraceEvent::mutable_sched_process_wait() {
  if (!has_sched_process_wait()) {
    clear_event();
    set_has_sched_process_wait();
    event_.sched_process_wait_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessWaitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_wait)
  return event_.sched_process_wait_;
}

// optional .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
inline bool FtraceEvent::has_f2fs_do_submit_bio() const {
  return event_case() == kF2FsDoSubmitBio;
}
inline void FtraceEvent::set_has_f2fs_do_submit_bio() {
  _oneof_case_[0] = kF2FsDoSubmitBio;
}
inline ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* FtraceEvent::release_f2fs_do_submit_bio() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  if (has_f2fs_do_submit_bio()) {
    clear_has_event();
      ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* temp = event_.f2fs_do_submit_bio_;
    event_.f2fs_do_submit_bio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& FtraceEvent::f2fs_do_submit_bio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  return has_f2fs_do_submit_bio()
      ? *event_.f2fs_do_submit_bio_
      : *reinterpret_cast< ::perfetto::protos::F2fsDoSubmitBioFtraceEvent*>(&::perfetto::protos::_F2fsDoSubmitBioFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* FtraceEvent::mutable_f2fs_do_submit_bio() {
  if (!has_f2fs_do_submit_bio()) {
    clear_event();
    set_has_f2fs_do_submit_bio();
    event_.f2fs_do_submit_bio_ = CreateMaybeMessage< ::perfetto::protos::F2fsDoSubmitBioFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  return event_.f2fs_do_submit_bio_;
}

// optional .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
inline bool FtraceEvent::has_f2fs_evict_inode() const {
  return event_case() == kF2FsEvictInode;
}
inline void FtraceEvent::set_has_f2fs_evict_inode() {
  _oneof_case_[0] = kF2FsEvictInode;
}
inline ::perfetto::protos::F2fsEvictInodeFtraceEvent* FtraceEvent::release_f2fs_evict_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  if (has_f2fs_evict_inode()) {
    clear_has_event();
      ::perfetto::protos::F2fsEvictInodeFtraceEvent* temp = event_.f2fs_evict_inode_;
    event_.f2fs_evict_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsEvictInodeFtraceEvent& FtraceEvent::f2fs_evict_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  return has_f2fs_evict_inode()
      ? *event_.f2fs_evict_inode_
      : *reinterpret_cast< ::perfetto::protos::F2fsEvictInodeFtraceEvent*>(&::perfetto::protos::_F2fsEvictInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsEvictInodeFtraceEvent* FtraceEvent::mutable_f2fs_evict_inode() {
  if (!has_f2fs_evict_inode()) {
    clear_event();
    set_has_f2fs_evict_inode();
    event_.f2fs_evict_inode_ = CreateMaybeMessage< ::perfetto::protos::F2fsEvictInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  return event_.f2fs_evict_inode_;
}

// optional .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
inline bool FtraceEvent::has_f2fs_fallocate() const {
  return event_case() == kF2FsFallocate;
}
inline void FtraceEvent::set_has_f2fs_fallocate() {
  _oneof_case_[0] = kF2FsFallocate;
}
inline ::perfetto::protos::F2fsFallocateFtraceEvent* FtraceEvent::release_f2fs_fallocate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_fallocate)
  if (has_f2fs_fallocate()) {
    clear_has_event();
      ::perfetto::protos::F2fsFallocateFtraceEvent* temp = event_.f2fs_fallocate_;
    event_.f2fs_fallocate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsFallocateFtraceEvent& FtraceEvent::f2fs_fallocate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_fallocate)
  return has_f2fs_fallocate()
      ? *event_.f2fs_fallocate_
      : *reinterpret_cast< ::perfetto::protos::F2fsFallocateFtraceEvent*>(&::perfetto::protos::_F2fsFallocateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsFallocateFtraceEvent* FtraceEvent::mutable_f2fs_fallocate() {
  if (!has_f2fs_fallocate()) {
    clear_event();
    set_has_f2fs_fallocate();
    event_.f2fs_fallocate_ = CreateMaybeMessage< ::perfetto::protos::F2fsFallocateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_fallocate)
  return event_.f2fs_fallocate_;
}

// optional .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
inline bool FtraceEvent::has_f2fs_get_data_block() const {
  return event_case() == kF2FsGetDataBlock;
}
inline void FtraceEvent::set_has_f2fs_get_data_block() {
  _oneof_case_[0] = kF2FsGetDataBlock;
}
inline ::perfetto::protos::F2fsGetDataBlockFtraceEvent* FtraceEvent::release_f2fs_get_data_block() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  if (has_f2fs_get_data_block()) {
    clear_has_event();
      ::perfetto::protos::F2fsGetDataBlockFtraceEvent* temp = event_.f2fs_get_data_block_;
    event_.f2fs_get_data_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& FtraceEvent::f2fs_get_data_block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  return has_f2fs_get_data_block()
      ? *event_.f2fs_get_data_block_
      : *reinterpret_cast< ::perfetto::protos::F2fsGetDataBlockFtraceEvent*>(&::perfetto::protos::_F2fsGetDataBlockFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsGetDataBlockFtraceEvent* FtraceEvent::mutable_f2fs_get_data_block() {
  if (!has_f2fs_get_data_block()) {
    clear_event();
    set_has_f2fs_get_data_block();
    event_.f2fs_get_data_block_ = CreateMaybeMessage< ::perfetto::protos::F2fsGetDataBlockFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  return event_.f2fs_get_data_block_;
}

// optional .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
inline bool FtraceEvent::has_f2fs_get_victim() const {
  return event_case() == kF2FsGetVictim;
}
inline void FtraceEvent::set_has_f2fs_get_victim() {
  _oneof_case_[0] = kF2FsGetVictim;
}
inline ::perfetto::protos::F2fsGetVictimFtraceEvent* FtraceEvent::release_f2fs_get_victim() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_get_victim)
  if (has_f2fs_get_victim()) {
    clear_has_event();
      ::perfetto::protos::F2fsGetVictimFtraceEvent* temp = event_.f2fs_get_victim_;
    event_.f2fs_get_victim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsGetVictimFtraceEvent& FtraceEvent::f2fs_get_victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_get_victim)
  return has_f2fs_get_victim()
      ? *event_.f2fs_get_victim_
      : *reinterpret_cast< ::perfetto::protos::F2fsGetVictimFtraceEvent*>(&::perfetto::protos::_F2fsGetVictimFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsGetVictimFtraceEvent* FtraceEvent::mutable_f2fs_get_victim() {
  if (!has_f2fs_get_victim()) {
    clear_event();
    set_has_f2fs_get_victim();
    event_.f2fs_get_victim_ = CreateMaybeMessage< ::perfetto::protos::F2fsGetVictimFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_get_victim)
  return event_.f2fs_get_victim_;
}

// optional .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
inline bool FtraceEvent::has_f2fs_iget() const {
  return event_case() == kF2FsIget;
}
inline void FtraceEvent::set_has_f2fs_iget() {
  _oneof_case_[0] = kF2FsIget;
}
inline ::perfetto::protos::F2fsIgetFtraceEvent* FtraceEvent::release_f2fs_iget() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_iget)
  if (has_f2fs_iget()) {
    clear_has_event();
      ::perfetto::protos::F2fsIgetFtraceEvent* temp = event_.f2fs_iget_;
    event_.f2fs_iget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsIgetFtraceEvent& FtraceEvent::f2fs_iget() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_iget)
  return has_f2fs_iget()
      ? *event_.f2fs_iget_
      : *reinterpret_cast< ::perfetto::protos::F2fsIgetFtraceEvent*>(&::perfetto::protos::_F2fsIgetFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsIgetFtraceEvent* FtraceEvent::mutable_f2fs_iget() {
  if (!has_f2fs_iget()) {
    clear_event();
    set_has_f2fs_iget();
    event_.f2fs_iget_ = CreateMaybeMessage< ::perfetto::protos::F2fsIgetFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_iget)
  return event_.f2fs_iget_;
}

// optional .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
inline bool FtraceEvent::has_f2fs_iget_exit() const {
  return event_case() == kF2FsIgetExit;
}
inline void FtraceEvent::set_has_f2fs_iget_exit() {
  _oneof_case_[0] = kF2FsIgetExit;
}
inline ::perfetto::protos::F2fsIgetExitFtraceEvent* FtraceEvent::release_f2fs_iget_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  if (has_f2fs_iget_exit()) {
    clear_has_event();
      ::perfetto::protos::F2fsIgetExitFtraceEvent* temp = event_.f2fs_iget_exit_;
    event_.f2fs_iget_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsIgetExitFtraceEvent& FtraceEvent::f2fs_iget_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  return has_f2fs_iget_exit()
      ? *event_.f2fs_iget_exit_
      : *reinterpret_cast< ::perfetto::protos::F2fsIgetExitFtraceEvent*>(&::perfetto::protos::_F2fsIgetExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsIgetExitFtraceEvent* FtraceEvent::mutable_f2fs_iget_exit() {
  if (!has_f2fs_iget_exit()) {
    clear_event();
    set_has_f2fs_iget_exit();
    event_.f2fs_iget_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsIgetExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  return event_.f2fs_iget_exit_;
}

// optional .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
inline bool FtraceEvent::has_f2fs_new_inode() const {
  return event_case() == kF2FsNewInode;
}
inline void FtraceEvent::set_has_f2fs_new_inode() {
  _oneof_case_[0] = kF2FsNewInode;
}
inline ::perfetto::protos::F2fsNewInodeFtraceEvent* FtraceEvent::release_f2fs_new_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_new_inode)
  if (has_f2fs_new_inode()) {
    clear_has_event();
      ::perfetto::protos::F2fsNewInodeFtraceEvent* temp = event_.f2fs_new_inode_;
    event_.f2fs_new_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsNewInodeFtraceEvent& FtraceEvent::f2fs_new_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_new_inode)
  return has_f2fs_new_inode()
      ? *event_.f2fs_new_inode_
      : *reinterpret_cast< ::perfetto::protos::F2fsNewInodeFtraceEvent*>(&::perfetto::protos::_F2fsNewInodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsNewInodeFtraceEvent* FtraceEvent::mutable_f2fs_new_inode() {
  if (!has_f2fs_new_inode()) {
    clear_event();
    set_has_f2fs_new_inode();
    event_.f2fs_new_inode_ = CreateMaybeMessage< ::perfetto::protos::F2fsNewInodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_new_inode)
  return event_.f2fs_new_inode_;
}

// optional .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
inline bool FtraceEvent::has_f2fs_readpage() const {
  return event_case() == kF2FsReadpage;
}
inline void FtraceEvent::set_has_f2fs_readpage() {
  _oneof_case_[0] = kF2FsReadpage;
}
inline ::perfetto::protos::F2fsReadpageFtraceEvent* FtraceEvent::release_f2fs_readpage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_readpage)
  if (has_f2fs_readpage()) {
    clear_has_event();
      ::perfetto::protos::F2fsReadpageFtraceEvent* temp = event_.f2fs_readpage_;
    event_.f2fs_readpage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsReadpageFtraceEvent& FtraceEvent::f2fs_readpage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_readpage)
  return has_f2fs_readpage()
      ? *event_.f2fs_readpage_
      : *reinterpret_cast< ::perfetto::protos::F2fsReadpageFtraceEvent*>(&::perfetto::protos::_F2fsReadpageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsReadpageFtraceEvent* FtraceEvent::mutable_f2fs_readpage() {
  if (!has_f2fs_readpage()) {
    clear_event();
    set_has_f2fs_readpage();
    event_.f2fs_readpage_ = CreateMaybeMessage< ::perfetto::protos::F2fsReadpageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_readpage)
  return event_.f2fs_readpage_;
}

// optional .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
inline bool FtraceEvent::has_f2fs_reserve_new_block() const {
  return event_case() == kF2FsReserveNewBlock;
}
inline void FtraceEvent::set_has_f2fs_reserve_new_block() {
  _oneof_case_[0] = kF2FsReserveNewBlock;
}
inline ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* FtraceEvent::release_f2fs_reserve_new_block() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  if (has_f2fs_reserve_new_block()) {
    clear_has_event();
      ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* temp = event_.f2fs_reserve_new_block_;
    event_.f2fs_reserve_new_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& FtraceEvent::f2fs_reserve_new_block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  return has_f2fs_reserve_new_block()
      ? *event_.f2fs_reserve_new_block_
      : *reinterpret_cast< ::perfetto::protos::F2fsReserveNewBlockFtraceEvent*>(&::perfetto::protos::_F2fsReserveNewBlockFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* FtraceEvent::mutable_f2fs_reserve_new_block() {
  if (!has_f2fs_reserve_new_block()) {
    clear_event();
    set_has_f2fs_reserve_new_block();
    event_.f2fs_reserve_new_block_ = CreateMaybeMessage< ::perfetto::protos::F2fsReserveNewBlockFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  return event_.f2fs_reserve_new_block_;
}

// optional .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
inline bool FtraceEvent::has_f2fs_set_page_dirty() const {
  return event_case() == kF2FsSetPageDirty;
}
inline void FtraceEvent::set_has_f2fs_set_page_dirty() {
  _oneof_case_[0] = kF2FsSetPageDirty;
}
inline ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* FtraceEvent::release_f2fs_set_page_dirty() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  if (has_f2fs_set_page_dirty()) {
    clear_has_event();
      ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* temp = event_.f2fs_set_page_dirty_;
    event_.f2fs_set_page_dirty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& FtraceEvent::f2fs_set_page_dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  return has_f2fs_set_page_dirty()
      ? *event_.f2fs_set_page_dirty_
      : *reinterpret_cast< ::perfetto::protos::F2fsSetPageDirtyFtraceEvent*>(&::perfetto::protos::_F2fsSetPageDirtyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* FtraceEvent::mutable_f2fs_set_page_dirty() {
  if (!has_f2fs_set_page_dirty()) {
    clear_event();
    set_has_f2fs_set_page_dirty();
    event_.f2fs_set_page_dirty_ = CreateMaybeMessage< ::perfetto::protos::F2fsSetPageDirtyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  return event_.f2fs_set_page_dirty_;
}

// optional .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
inline bool FtraceEvent::has_f2fs_submit_write_page() const {
  return event_case() == kF2FsSubmitWritePage;
}
inline void FtraceEvent::set_has_f2fs_submit_write_page() {
  _oneof_case_[0] = kF2FsSubmitWritePage;
}
inline ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* FtraceEvent::release_f2fs_submit_write_page() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  if (has_f2fs_submit_write_page()) {
    clear_has_event();
      ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* temp = event_.f2fs_submit_write_page_;
    event_.f2fs_submit_write_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& FtraceEvent::f2fs_submit_write_page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  return has_f2fs_submit_write_page()
      ? *event_.f2fs_submit_write_page_
      : *reinterpret_cast< ::perfetto::protos::F2fsSubmitWritePageFtraceEvent*>(&::perfetto::protos::_F2fsSubmitWritePageFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* FtraceEvent::mutable_f2fs_submit_write_page() {
  if (!has_f2fs_submit_write_page()) {
    clear_event();
    set_has_f2fs_submit_write_page();
    event_.f2fs_submit_write_page_ = CreateMaybeMessage< ::perfetto::protos::F2fsSubmitWritePageFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  return event_.f2fs_submit_write_page_;
}

// optional .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
inline bool FtraceEvent::has_f2fs_sync_file_enter() const {
  return event_case() == kF2FsSyncFileEnter;
}
inline void FtraceEvent::set_has_f2fs_sync_file_enter() {
  _oneof_case_[0] = kF2FsSyncFileEnter;
}
inline ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* FtraceEvent::release_f2fs_sync_file_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  if (has_f2fs_sync_file_enter()) {
    clear_has_event();
      ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* temp = event_.f2fs_sync_file_enter_;
    event_.f2fs_sync_file_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& FtraceEvent::f2fs_sync_file_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  return has_f2fs_sync_file_enter()
      ? *event_.f2fs_sync_file_enter_
      : *reinterpret_cast< ::perfetto::protos::F2fsSyncFileEnterFtraceEvent*>(&::perfetto::protos::_F2fsSyncFileEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* FtraceEvent::mutable_f2fs_sync_file_enter() {
  if (!has_f2fs_sync_file_enter()) {
    clear_event();
    set_has_f2fs_sync_file_enter();
    event_.f2fs_sync_file_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsSyncFileEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  return event_.f2fs_sync_file_enter_;
}

// optional .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
inline bool FtraceEvent::has_f2fs_sync_file_exit() const {
  return event_case() == kF2FsSyncFileExit;
}
inline void FtraceEvent::set_has_f2fs_sync_file_exit() {
  _oneof_case_[0] = kF2FsSyncFileExit;
}
inline ::perfetto::protos::F2fsSyncFileExitFtraceEvent* FtraceEvent::release_f2fs_sync_file_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  if (has_f2fs_sync_file_exit()) {
    clear_has_event();
      ::perfetto::protos::F2fsSyncFileExitFtraceEvent* temp = event_.f2fs_sync_file_exit_;
    event_.f2fs_sync_file_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& FtraceEvent::f2fs_sync_file_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  return has_f2fs_sync_file_exit()
      ? *event_.f2fs_sync_file_exit_
      : *reinterpret_cast< ::perfetto::protos::F2fsSyncFileExitFtraceEvent*>(&::perfetto::protos::_F2fsSyncFileExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsSyncFileExitFtraceEvent* FtraceEvent::mutable_f2fs_sync_file_exit() {
  if (!has_f2fs_sync_file_exit()) {
    clear_event();
    set_has_f2fs_sync_file_exit();
    event_.f2fs_sync_file_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsSyncFileExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  return event_.f2fs_sync_file_exit_;
}

// optional .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
inline bool FtraceEvent::has_f2fs_sync_fs() const {
  return event_case() == kF2FsSyncFs;
}
inline void FtraceEvent::set_has_f2fs_sync_fs() {
  _oneof_case_[0] = kF2FsSyncFs;
}
inline ::perfetto::protos::F2fsSyncFsFtraceEvent* FtraceEvent::release_f2fs_sync_fs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  if (has_f2fs_sync_fs()) {
    clear_has_event();
      ::perfetto::protos::F2fsSyncFsFtraceEvent* temp = event_.f2fs_sync_fs_;
    event_.f2fs_sync_fs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSyncFsFtraceEvent& FtraceEvent::f2fs_sync_fs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  return has_f2fs_sync_fs()
      ? *event_.f2fs_sync_fs_
      : *reinterpret_cast< ::perfetto::protos::F2fsSyncFsFtraceEvent*>(&::perfetto::protos::_F2fsSyncFsFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsSyncFsFtraceEvent* FtraceEvent::mutable_f2fs_sync_fs() {
  if (!has_f2fs_sync_fs()) {
    clear_event();
    set_has_f2fs_sync_fs();
    event_.f2fs_sync_fs_ = CreateMaybeMessage< ::perfetto::protos::F2fsSyncFsFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  return event_.f2fs_sync_fs_;
}

// optional .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
inline bool FtraceEvent::has_f2fs_truncate() const {
  return event_case() == kF2FsTruncate;
}
inline void FtraceEvent::set_has_f2fs_truncate() {
  _oneof_case_[0] = kF2FsTruncate;
}
inline ::perfetto::protos::F2fsTruncateFtraceEvent* FtraceEvent::release_f2fs_truncate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate)
  if (has_f2fs_truncate()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateFtraceEvent* temp = event_.f2fs_truncate_;
    event_.f2fs_truncate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateFtraceEvent& FtraceEvent::f2fs_truncate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate)
  return has_f2fs_truncate()
      ? *event_.f2fs_truncate_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateFtraceEvent*>(&::perfetto::protos::_F2fsTruncateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateFtraceEvent* FtraceEvent::mutable_f2fs_truncate() {
  if (!has_f2fs_truncate()) {
    clear_event();
    set_has_f2fs_truncate();
    event_.f2fs_truncate_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate)
  return event_.f2fs_truncate_;
}

// optional .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
inline bool FtraceEvent::has_f2fs_truncate_blocks_enter() const {
  return event_case() == kF2FsTruncateBlocksEnter;
}
inline void FtraceEvent::set_has_f2fs_truncate_blocks_enter() {
  _oneof_case_[0] = kF2FsTruncateBlocksEnter;
}
inline ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::release_f2fs_truncate_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  if (has_f2fs_truncate_blocks_enter()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* temp = event_.f2fs_truncate_blocks_enter_;
    event_.f2fs_truncate_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& FtraceEvent::f2fs_truncate_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  return has_f2fs_truncate_blocks_enter()
      ? *event_.f2fs_truncate_blocks_enter_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent*>(&::perfetto::protos::_F2fsTruncateBlocksEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::mutable_f2fs_truncate_blocks_enter() {
  if (!has_f2fs_truncate_blocks_enter()) {
    clear_event();
    set_has_f2fs_truncate_blocks_enter();
    event_.f2fs_truncate_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  return event_.f2fs_truncate_blocks_enter_;
}

// optional .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
inline bool FtraceEvent::has_f2fs_truncate_blocks_exit() const {
  return event_case() == kF2FsTruncateBlocksExit;
}
inline void FtraceEvent::set_has_f2fs_truncate_blocks_exit() {
  _oneof_case_[0] = kF2FsTruncateBlocksExit;
}
inline ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::release_f2fs_truncate_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  if (has_f2fs_truncate_blocks_exit()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* temp = event_.f2fs_truncate_blocks_exit_;
    event_.f2fs_truncate_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& FtraceEvent::f2fs_truncate_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  return has_f2fs_truncate_blocks_exit()
      ? *event_.f2fs_truncate_blocks_exit_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent*>(&::perfetto::protos::_F2fsTruncateBlocksExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::mutable_f2fs_truncate_blocks_exit() {
  if (!has_f2fs_truncate_blocks_exit()) {
    clear_event();
    set_has_f2fs_truncate_blocks_exit();
    event_.f2fs_truncate_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  return event_.f2fs_truncate_blocks_exit_;
}

// optional .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
inline bool FtraceEvent::has_f2fs_truncate_data_blocks_range() const {
  return event_case() == kF2FsTruncateDataBlocksRange;
}
inline void FtraceEvent::set_has_f2fs_truncate_data_blocks_range() {
  _oneof_case_[0] = kF2FsTruncateDataBlocksRange;
}
inline ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::release_f2fs_truncate_data_blocks_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  if (has_f2fs_truncate_data_blocks_range()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* temp = event_.f2fs_truncate_data_blocks_range_;
    event_.f2fs_truncate_data_blocks_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& FtraceEvent::f2fs_truncate_data_blocks_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  return has_f2fs_truncate_data_blocks_range()
      ? *event_.f2fs_truncate_data_blocks_range_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent*>(&::perfetto::protos::_F2fsTruncateDataBlocksRangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::mutable_f2fs_truncate_data_blocks_range() {
  if (!has_f2fs_truncate_data_blocks_range()) {
    clear_event();
    set_has_f2fs_truncate_data_blocks_range();
    event_.f2fs_truncate_data_blocks_range_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  return event_.f2fs_truncate_data_blocks_range_;
}

// optional .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
inline bool FtraceEvent::has_f2fs_truncate_inode_blocks_enter() const {
  return event_case() == kF2FsTruncateInodeBlocksEnter;
}
inline void FtraceEvent::set_has_f2fs_truncate_inode_blocks_enter() {
  _oneof_case_[0] = kF2FsTruncateInodeBlocksEnter;
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::release_f2fs_truncate_inode_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  if (has_f2fs_truncate_inode_blocks_enter()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* temp = event_.f2fs_truncate_inode_blocks_enter_;
    event_.f2fs_truncate_inode_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& FtraceEvent::f2fs_truncate_inode_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  return has_f2fs_truncate_inode_blocks_enter()
      ? *event_.f2fs_truncate_inode_blocks_enter_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent*>(&::perfetto::protos::_F2fsTruncateInodeBlocksEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::mutable_f2fs_truncate_inode_blocks_enter() {
  if (!has_f2fs_truncate_inode_blocks_enter()) {
    clear_event();
    set_has_f2fs_truncate_inode_blocks_enter();
    event_.f2fs_truncate_inode_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  return event_.f2fs_truncate_inode_blocks_enter_;
}

// optional .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
inline bool FtraceEvent::has_f2fs_truncate_inode_blocks_exit() const {
  return event_case() == kF2FsTruncateInodeBlocksExit;
}
inline void FtraceEvent::set_has_f2fs_truncate_inode_blocks_exit() {
  _oneof_case_[0] = kF2FsTruncateInodeBlocksExit;
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::release_f2fs_truncate_inode_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  if (has_f2fs_truncate_inode_blocks_exit()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* temp = event_.f2fs_truncate_inode_blocks_exit_;
    event_.f2fs_truncate_inode_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& FtraceEvent::f2fs_truncate_inode_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  return has_f2fs_truncate_inode_blocks_exit()
      ? *event_.f2fs_truncate_inode_blocks_exit_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent*>(&::perfetto::protos::_F2fsTruncateInodeBlocksExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::mutable_f2fs_truncate_inode_blocks_exit() {
  if (!has_f2fs_truncate_inode_blocks_exit()) {
    clear_event();
    set_has_f2fs_truncate_inode_blocks_exit();
    event_.f2fs_truncate_inode_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  return event_.f2fs_truncate_inode_blocks_exit_;
}

// optional .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
inline bool FtraceEvent::has_f2fs_truncate_node() const {
  return event_case() == kF2FsTruncateNode;
}
inline void FtraceEvent::set_has_f2fs_truncate_node() {
  _oneof_case_[0] = kF2FsTruncateNode;
}
inline ::perfetto::protos::F2fsTruncateNodeFtraceEvent* FtraceEvent::release_f2fs_truncate_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  if (has_f2fs_truncate_node()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateNodeFtraceEvent* temp = event_.f2fs_truncate_node_;
    event_.f2fs_truncate_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& FtraceEvent::f2fs_truncate_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  return has_f2fs_truncate_node()
      ? *event_.f2fs_truncate_node_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateNodeFtraceEvent*>(&::perfetto::protos::_F2fsTruncateNodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateNodeFtraceEvent* FtraceEvent::mutable_f2fs_truncate_node() {
  if (!has_f2fs_truncate_node()) {
    clear_event();
    set_has_f2fs_truncate_node();
    event_.f2fs_truncate_node_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateNodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  return event_.f2fs_truncate_node_;
}

// optional .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
inline bool FtraceEvent::has_f2fs_truncate_nodes_enter() const {
  return event_case() == kF2FsTruncateNodesEnter;
}
inline void FtraceEvent::set_has_f2fs_truncate_nodes_enter() {
  _oneof_case_[0] = kF2FsTruncateNodesEnter;
}
inline ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::release_f2fs_truncate_nodes_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  if (has_f2fs_truncate_nodes_enter()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* temp = event_.f2fs_truncate_nodes_enter_;
    event_.f2fs_truncate_nodes_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& FtraceEvent::f2fs_truncate_nodes_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  return has_f2fs_truncate_nodes_enter()
      ? *event_.f2fs_truncate_nodes_enter_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent*>(&::perfetto::protos::_F2fsTruncateNodesEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::mutable_f2fs_truncate_nodes_enter() {
  if (!has_f2fs_truncate_nodes_enter()) {
    clear_event();
    set_has_f2fs_truncate_nodes_enter();
    event_.f2fs_truncate_nodes_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  return event_.f2fs_truncate_nodes_enter_;
}

// optional .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
inline bool FtraceEvent::has_f2fs_truncate_nodes_exit() const {
  return event_case() == kF2FsTruncateNodesExit;
}
inline void FtraceEvent::set_has_f2fs_truncate_nodes_exit() {
  _oneof_case_[0] = kF2FsTruncateNodesExit;
}
inline ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* FtraceEvent::release_f2fs_truncate_nodes_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  if (has_f2fs_truncate_nodes_exit()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* temp = event_.f2fs_truncate_nodes_exit_;
    event_.f2fs_truncate_nodes_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& FtraceEvent::f2fs_truncate_nodes_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  return has_f2fs_truncate_nodes_exit()
      ? *event_.f2fs_truncate_nodes_exit_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent*>(&::perfetto::protos::_F2fsTruncateNodesExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* FtraceEvent::mutable_f2fs_truncate_nodes_exit() {
  if (!has_f2fs_truncate_nodes_exit()) {
    clear_event();
    set_has_f2fs_truncate_nodes_exit();
    event_.f2fs_truncate_nodes_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  return event_.f2fs_truncate_nodes_exit_;
}

// optional .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
inline bool FtraceEvent::has_f2fs_truncate_partial_nodes() const {
  return event_case() == kF2FsTruncatePartialNodes;
}
inline void FtraceEvent::set_has_f2fs_truncate_partial_nodes() {
  _oneof_case_[0] = kF2FsTruncatePartialNodes;
}
inline ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::release_f2fs_truncate_partial_nodes() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  if (has_f2fs_truncate_partial_nodes()) {
    clear_has_event();
      ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* temp = event_.f2fs_truncate_partial_nodes_;
    event_.f2fs_truncate_partial_nodes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& FtraceEvent::f2fs_truncate_partial_nodes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  return has_f2fs_truncate_partial_nodes()
      ? *event_.f2fs_truncate_partial_nodes_
      : *reinterpret_cast< ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent*>(&::perfetto::protos::_F2fsTruncatePartialNodesFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::mutable_f2fs_truncate_partial_nodes() {
  if (!has_f2fs_truncate_partial_nodes()) {
    clear_event();
    set_has_f2fs_truncate_partial_nodes();
    event_.f2fs_truncate_partial_nodes_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  return event_.f2fs_truncate_partial_nodes_;
}

// optional .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
inline bool FtraceEvent::has_f2fs_unlink_enter() const {
  return event_case() == kF2FsUnlinkEnter;
}
inline void FtraceEvent::set_has_f2fs_unlink_enter() {
  _oneof_case_[0] = kF2FsUnlinkEnter;
}
inline ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* FtraceEvent::release_f2fs_unlink_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  if (has_f2fs_unlink_enter()) {
    clear_has_event();
      ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* temp = event_.f2fs_unlink_enter_;
    event_.f2fs_unlink_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& FtraceEvent::f2fs_unlink_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  return has_f2fs_unlink_enter()
      ? *event_.f2fs_unlink_enter_
      : *reinterpret_cast< ::perfetto::protos::F2fsUnlinkEnterFtraceEvent*>(&::perfetto::protos::_F2fsUnlinkEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* FtraceEvent::mutable_f2fs_unlink_enter() {
  if (!has_f2fs_unlink_enter()) {
    clear_event();
    set_has_f2fs_unlink_enter();
    event_.f2fs_unlink_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsUnlinkEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  return event_.f2fs_unlink_enter_;
}

// optional .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
inline bool FtraceEvent::has_f2fs_unlink_exit() const {
  return event_case() == kF2FsUnlinkExit;
}
inline void FtraceEvent::set_has_f2fs_unlink_exit() {
  _oneof_case_[0] = kF2FsUnlinkExit;
}
inline ::perfetto::protos::F2fsUnlinkExitFtraceEvent* FtraceEvent::release_f2fs_unlink_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  if (has_f2fs_unlink_exit()) {
    clear_has_event();
      ::perfetto::protos::F2fsUnlinkExitFtraceEvent* temp = event_.f2fs_unlink_exit_;
    event_.f2fs_unlink_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& FtraceEvent::f2fs_unlink_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  return has_f2fs_unlink_exit()
      ? *event_.f2fs_unlink_exit_
      : *reinterpret_cast< ::perfetto::protos::F2fsUnlinkExitFtraceEvent*>(&::perfetto::protos::_F2fsUnlinkExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsUnlinkExitFtraceEvent* FtraceEvent::mutable_f2fs_unlink_exit() {
  if (!has_f2fs_unlink_exit()) {
    clear_event();
    set_has_f2fs_unlink_exit();
    event_.f2fs_unlink_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsUnlinkExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  return event_.f2fs_unlink_exit_;
}

// optional .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
inline bool FtraceEvent::has_f2fs_vm_page_mkwrite() const {
  return event_case() == kF2FsVmPageMkwrite;
}
inline void FtraceEvent::set_has_f2fs_vm_page_mkwrite() {
  _oneof_case_[0] = kF2FsVmPageMkwrite;
}
inline ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* FtraceEvent::release_f2fs_vm_page_mkwrite() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  if (has_f2fs_vm_page_mkwrite()) {
    clear_has_event();
      ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* temp = event_.f2fs_vm_page_mkwrite_;
    event_.f2fs_vm_page_mkwrite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& FtraceEvent::f2fs_vm_page_mkwrite() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  return has_f2fs_vm_page_mkwrite()
      ? *event_.f2fs_vm_page_mkwrite_
      : *reinterpret_cast< ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent*>(&::perfetto::protos::_F2fsVmPageMkwriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* FtraceEvent::mutable_f2fs_vm_page_mkwrite() {
  if (!has_f2fs_vm_page_mkwrite()) {
    clear_event();
    set_has_f2fs_vm_page_mkwrite();
    event_.f2fs_vm_page_mkwrite_ = CreateMaybeMessage< ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  return event_.f2fs_vm_page_mkwrite_;
}

// optional .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
inline bool FtraceEvent::has_f2fs_write_begin() const {
  return event_case() == kF2FsWriteBegin;
}
inline void FtraceEvent::set_has_f2fs_write_begin() {
  _oneof_case_[0] = kF2FsWriteBegin;
}
inline ::perfetto::protos::F2fsWriteBeginFtraceEvent* FtraceEvent::release_f2fs_write_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_write_begin)
  if (has_f2fs_write_begin()) {
    clear_has_event();
      ::perfetto::protos::F2fsWriteBeginFtraceEvent* temp = event_.f2fs_write_begin_;
    event_.f2fs_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsWriteBeginFtraceEvent& FtraceEvent::f2fs_write_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_write_begin)
  return has_f2fs_write_begin()
      ? *event_.f2fs_write_begin_
      : *reinterpret_cast< ::perfetto::protos::F2fsWriteBeginFtraceEvent*>(&::perfetto::protos::_F2fsWriteBeginFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsWriteBeginFtraceEvent* FtraceEvent::mutable_f2fs_write_begin() {
  if (!has_f2fs_write_begin()) {
    clear_event();
    set_has_f2fs_write_begin();
    event_.f2fs_write_begin_ = CreateMaybeMessage< ::perfetto::protos::F2fsWriteBeginFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_write_begin)
  return event_.f2fs_write_begin_;
}

// optional .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
inline bool FtraceEvent::has_f2fs_write_checkpoint() const {
  return event_case() == kF2FsWriteCheckpoint;
}
inline void FtraceEvent::set_has_f2fs_write_checkpoint() {
  _oneof_case_[0] = kF2FsWriteCheckpoint;
}
inline ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* FtraceEvent::release_f2fs_write_checkpoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  if (has_f2fs_write_checkpoint()) {
    clear_has_event();
      ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* temp = event_.f2fs_write_checkpoint_;
    event_.f2fs_write_checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& FtraceEvent::f2fs_write_checkpoint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  return has_f2fs_write_checkpoint()
      ? *event_.f2fs_write_checkpoint_
      : *reinterpret_cast< ::perfetto::protos::F2fsWriteCheckpointFtraceEvent*>(&::perfetto::protos::_F2fsWriteCheckpointFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* FtraceEvent::mutable_f2fs_write_checkpoint() {
  if (!has_f2fs_write_checkpoint()) {
    clear_event();
    set_has_f2fs_write_checkpoint();
    event_.f2fs_write_checkpoint_ = CreateMaybeMessage< ::perfetto::protos::F2fsWriteCheckpointFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  return event_.f2fs_write_checkpoint_;
}

// optional .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
inline bool FtraceEvent::has_f2fs_write_end() const {
  return event_case() == kF2FsWriteEnd;
}
inline void FtraceEvent::set_has_f2fs_write_end() {
  _oneof_case_[0] = kF2FsWriteEnd;
}
inline ::perfetto::protos::F2fsWriteEndFtraceEvent* FtraceEvent::release_f2fs_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_write_end)
  if (has_f2fs_write_end()) {
    clear_has_event();
      ::perfetto::protos::F2fsWriteEndFtraceEvent* temp = event_.f2fs_write_end_;
    event_.f2fs_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsWriteEndFtraceEvent& FtraceEvent::f2fs_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_write_end)
  return has_f2fs_write_end()
      ? *event_.f2fs_write_end_
      : *reinterpret_cast< ::perfetto::protos::F2fsWriteEndFtraceEvent*>(&::perfetto::protos::_F2fsWriteEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::F2fsWriteEndFtraceEvent* FtraceEvent::mutable_f2fs_write_end() {
  if (!has_f2fs_write_end()) {
    clear_event();
    set_has_f2fs_write_end();
    event_.f2fs_write_end_ = CreateMaybeMessage< ::perfetto::protos::F2fsWriteEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_write_end)
  return event_.f2fs_write_end_;
}

// optional .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
inline bool FtraceEvent::has_alloc_pages_iommu_end() const {
  return event_case() == kAllocPagesIommuEnd;
}
inline void FtraceEvent::set_has_alloc_pages_iommu_end() {
  _oneof_case_[0] = kAllocPagesIommuEnd;
}
inline ::perfetto::protos::AllocPagesIommuEndFtraceEvent* FtraceEvent::release_alloc_pages_iommu_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  if (has_alloc_pages_iommu_end()) {
    clear_has_event();
      ::perfetto::protos::AllocPagesIommuEndFtraceEvent* temp = event_.alloc_pages_iommu_end_;
    event_.alloc_pages_iommu_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& FtraceEvent::alloc_pages_iommu_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  return has_alloc_pages_iommu_end()
      ? *event_.alloc_pages_iommu_end_
      : *reinterpret_cast< ::perfetto::protos::AllocPagesIommuEndFtraceEvent*>(&::perfetto::protos::_AllocPagesIommuEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::AllocPagesIommuEndFtraceEvent* FtraceEvent::mutable_alloc_pages_iommu_end() {
  if (!has_alloc_pages_iommu_end()) {
    clear_event();
    set_has_alloc_pages_iommu_end();
    event_.alloc_pages_iommu_end_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesIommuEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  return event_.alloc_pages_iommu_end_;
}

// optional .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
inline bool FtraceEvent::has_alloc_pages_iommu_fail() const {
  return event_case() == kAllocPagesIommuFail;
}
inline void FtraceEvent::set_has_alloc_pages_iommu_fail() {
  _oneof_case_[0] = kAllocPagesIommuFail;
}
inline ::perfetto::protos::AllocPagesIommuFailFtraceEvent* FtraceEvent::release_alloc_pages_iommu_fail() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  if (has_alloc_pages_iommu_fail()) {
    clear_has_event();
      ::perfetto::protos::AllocPagesIommuFailFtraceEvent* temp = event_.alloc_pages_iommu_fail_;
    event_.alloc_pages_iommu_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& FtraceEvent::alloc_pages_iommu_fail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  return has_alloc_pages_iommu_fail()
      ? *event_.alloc_pages_iommu_fail_
      : *reinterpret_cast< ::perfetto::protos::AllocPagesIommuFailFtraceEvent*>(&::perfetto::protos::_AllocPagesIommuFailFtraceEvent_default_instance_);
}
inline ::perfetto::protos::AllocPagesIommuFailFtraceEvent* FtraceEvent::mutable_alloc_pages_iommu_fail() {
  if (!has_alloc_pages_iommu_fail()) {
    clear_event();
    set_has_alloc_pages_iommu_fail();
    event_.alloc_pages_iommu_fail_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesIommuFailFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  return event_.alloc_pages_iommu_fail_;
}

// optional .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
inline bool FtraceEvent::has_alloc_pages_iommu_start() const {
  return event_case() == kAllocPagesIommuStart;
}
inline void FtraceEvent::set_has_alloc_pages_iommu_start() {
  _oneof_case_[0] = kAllocPagesIommuStart;
}
inline ::perfetto::protos::AllocPagesIommuStartFtraceEvent* FtraceEvent::release_alloc_pages_iommu_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  if (has_alloc_pages_iommu_start()) {
    clear_has_event();
      ::perfetto::protos::AllocPagesIommuStartFtraceEvent* temp = event_.alloc_pages_iommu_start_;
    event_.alloc_pages_iommu_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& FtraceEvent::alloc_pages_iommu_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  return has_alloc_pages_iommu_start()
      ? *event_.alloc_pages_iommu_start_
      : *reinterpret_cast< ::perfetto::protos::AllocPagesIommuStartFtraceEvent*>(&::perfetto::protos::_AllocPagesIommuStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::AllocPagesIommuStartFtraceEvent* FtraceEvent::mutable_alloc_pages_iommu_start() {
  if (!has_alloc_pages_iommu_start()) {
    clear_event();
    set_has_alloc_pages_iommu_start();
    event_.alloc_pages_iommu_start_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesIommuStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  return event_.alloc_pages_iommu_start_;
}

// optional .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
inline bool FtraceEvent::has_alloc_pages_sys_end() const {
  return event_case() == kAllocPagesSysEnd;
}
inline void FtraceEvent::set_has_alloc_pages_sys_end() {
  _oneof_case_[0] = kAllocPagesSysEnd;
}
inline ::perfetto::protos::AllocPagesSysEndFtraceEvent* FtraceEvent::release_alloc_pages_sys_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  if (has_alloc_pages_sys_end()) {
    clear_has_event();
      ::perfetto::protos::AllocPagesSysEndFtraceEvent* temp = event_.alloc_pages_sys_end_;
    event_.alloc_pages_sys_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesSysEndFtraceEvent& FtraceEvent::alloc_pages_sys_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  return has_alloc_pages_sys_end()
      ? *event_.alloc_pages_sys_end_
      : *reinterpret_cast< ::perfetto::protos::AllocPagesSysEndFtraceEvent*>(&::perfetto::protos::_AllocPagesSysEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::AllocPagesSysEndFtraceEvent* FtraceEvent::mutable_alloc_pages_sys_end() {
  if (!has_alloc_pages_sys_end()) {
    clear_event();
    set_has_alloc_pages_sys_end();
    event_.alloc_pages_sys_end_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesSysEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  return event_.alloc_pages_sys_end_;
}

// optional .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
inline bool FtraceEvent::has_alloc_pages_sys_fail() const {
  return event_case() == kAllocPagesSysFail;
}
inline void FtraceEvent::set_has_alloc_pages_sys_fail() {
  _oneof_case_[0] = kAllocPagesSysFail;
}
inline ::perfetto::protos::AllocPagesSysFailFtraceEvent* FtraceEvent::release_alloc_pages_sys_fail() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  if (has_alloc_pages_sys_fail()) {
    clear_has_event();
      ::perfetto::protos::AllocPagesSysFailFtraceEvent* temp = event_.alloc_pages_sys_fail_;
    event_.alloc_pages_sys_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesSysFailFtraceEvent& FtraceEvent::alloc_pages_sys_fail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  return has_alloc_pages_sys_fail()
      ? *event_.alloc_pages_sys_fail_
      : *reinterpret_cast< ::perfetto::protos::AllocPagesSysFailFtraceEvent*>(&::perfetto::protos::_AllocPagesSysFailFtraceEvent_default_instance_);
}
inline ::perfetto::protos::AllocPagesSysFailFtraceEvent* FtraceEvent::mutable_alloc_pages_sys_fail() {
  if (!has_alloc_pages_sys_fail()) {
    clear_event();
    set_has_alloc_pages_sys_fail();
    event_.alloc_pages_sys_fail_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesSysFailFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  return event_.alloc_pages_sys_fail_;
}

// optional .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
inline bool FtraceEvent::has_alloc_pages_sys_start() const {
  return event_case() == kAllocPagesSysStart;
}
inline void FtraceEvent::set_has_alloc_pages_sys_start() {
  _oneof_case_[0] = kAllocPagesSysStart;
}
inline ::perfetto::protos::AllocPagesSysStartFtraceEvent* FtraceEvent::release_alloc_pages_sys_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  if (has_alloc_pages_sys_start()) {
    clear_has_event();
      ::perfetto::protos::AllocPagesSysStartFtraceEvent* temp = event_.alloc_pages_sys_start_;
    event_.alloc_pages_sys_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesSysStartFtraceEvent& FtraceEvent::alloc_pages_sys_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  return has_alloc_pages_sys_start()
      ? *event_.alloc_pages_sys_start_
      : *reinterpret_cast< ::perfetto::protos::AllocPagesSysStartFtraceEvent*>(&::perfetto::protos::_AllocPagesSysStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::AllocPagesSysStartFtraceEvent* FtraceEvent::mutable_alloc_pages_sys_start() {
  if (!has_alloc_pages_sys_start()) {
    clear_event();
    set_has_alloc_pages_sys_start();
    event_.alloc_pages_sys_start_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesSysStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  return event_.alloc_pages_sys_start_;
}

// optional .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
inline bool FtraceEvent::has_dma_alloc_contiguous_retry() const {
  return event_case() == kDmaAllocContiguousRetry;
}
inline void FtraceEvent::set_has_dma_alloc_contiguous_retry() {
  _oneof_case_[0] = kDmaAllocContiguousRetry;
}
inline ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* FtraceEvent::release_dma_alloc_contiguous_retry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  if (has_dma_alloc_contiguous_retry()) {
    clear_has_event();
      ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* temp = event_.dma_alloc_contiguous_retry_;
    event_.dma_alloc_contiguous_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& FtraceEvent::dma_alloc_contiguous_retry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  return has_dma_alloc_contiguous_retry()
      ? *event_.dma_alloc_contiguous_retry_
      : *reinterpret_cast< ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent*>(&::perfetto::protos::_DmaAllocContiguousRetryFtraceEvent_default_instance_);
}
inline ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* FtraceEvent::mutable_dma_alloc_contiguous_retry() {
  if (!has_dma_alloc_contiguous_retry()) {
    clear_event();
    set_has_dma_alloc_contiguous_retry();
    event_.dma_alloc_contiguous_retry_ = CreateMaybeMessage< ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  return event_.dma_alloc_contiguous_retry_;
}

// optional .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
inline bool FtraceEvent::has_iommu_map_range() const {
  return event_case() == kIommuMapRange;
}
inline void FtraceEvent::set_has_iommu_map_range() {
  _oneof_case_[0] = kIommuMapRange;
}
inline ::perfetto::protos::IommuMapRangeFtraceEvent* FtraceEvent::release_iommu_map_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.iommu_map_range)
  if (has_iommu_map_range()) {
    clear_has_event();
      ::perfetto::protos::IommuMapRangeFtraceEvent* temp = event_.iommu_map_range_;
    event_.iommu_map_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IommuMapRangeFtraceEvent& FtraceEvent::iommu_map_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.iommu_map_range)
  return has_iommu_map_range()
      ? *event_.iommu_map_range_
      : *reinterpret_cast< ::perfetto::protos::IommuMapRangeFtraceEvent*>(&::perfetto::protos::_IommuMapRangeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IommuMapRangeFtraceEvent* FtraceEvent::mutable_iommu_map_range() {
  if (!has_iommu_map_range()) {
    clear_event();
    set_has_iommu_map_range();
    event_.iommu_map_range_ = CreateMaybeMessage< ::perfetto::protos::IommuMapRangeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.iommu_map_range)
  return event_.iommu_map_range_;
}

// optional .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
inline bool FtraceEvent::has_iommu_sec_ptbl_map_range_end() const {
  return event_case() == kIommuSecPtblMapRangeEnd;
}
inline void FtraceEvent::set_has_iommu_sec_ptbl_map_range_end() {
  _oneof_case_[0] = kIommuSecPtblMapRangeEnd;
}
inline ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* FtraceEvent::release_iommu_sec_ptbl_map_range_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  if (has_iommu_sec_ptbl_map_range_end()) {
    clear_has_event();
      ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* temp = event_.iommu_sec_ptbl_map_range_end_;
    event_.iommu_sec_ptbl_map_range_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& FtraceEvent::iommu_sec_ptbl_map_range_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  return has_iommu_sec_ptbl_map_range_end()
      ? *event_.iommu_sec_ptbl_map_range_end_
      : *reinterpret_cast< ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent*>(&::perfetto::protos::_IommuSecPtblMapRangeEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* FtraceEvent::mutable_iommu_sec_ptbl_map_range_end() {
  if (!has_iommu_sec_ptbl_map_range_end()) {
    clear_event();
    set_has_iommu_sec_ptbl_map_range_end();
    event_.iommu_sec_ptbl_map_range_end_ = CreateMaybeMessage< ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  return event_.iommu_sec_ptbl_map_range_end_;
}

// optional .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
inline bool FtraceEvent::has_iommu_sec_ptbl_map_range_start() const {
  return event_case() == kIommuSecPtblMapRangeStart;
}
inline void FtraceEvent::set_has_iommu_sec_ptbl_map_range_start() {
  _oneof_case_[0] = kIommuSecPtblMapRangeStart;
}
inline ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* FtraceEvent::release_iommu_sec_ptbl_map_range_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  if (has_iommu_sec_ptbl_map_range_start()) {
    clear_has_event();
      ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* temp = event_.iommu_sec_ptbl_map_range_start_;
    event_.iommu_sec_ptbl_map_range_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& FtraceEvent::iommu_sec_ptbl_map_range_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  return has_iommu_sec_ptbl_map_range_start()
      ? *event_.iommu_sec_ptbl_map_range_start_
      : *reinterpret_cast< ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent*>(&::perfetto::protos::_IommuSecPtblMapRangeStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* FtraceEvent::mutable_iommu_sec_ptbl_map_range_start() {
  if (!has_iommu_sec_ptbl_map_range_start()) {
    clear_event();
    set_has_iommu_sec_ptbl_map_range_start();
    event_.iommu_sec_ptbl_map_range_start_ = CreateMaybeMessage< ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  return event_.iommu_sec_ptbl_map_range_start_;
}

// optional .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
inline bool FtraceEvent::has_ion_alloc_buffer_end() const {
  return event_case() == kIonAllocBufferEnd;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_end() {
  _oneof_case_[0] = kIonAllocBufferEnd;
}
inline ::perfetto::protos::IonAllocBufferEndFtraceEvent* FtraceEvent::release_ion_alloc_buffer_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  if (has_ion_alloc_buffer_end()) {
    clear_has_event();
      ::perfetto::protos::IonAllocBufferEndFtraceEvent* temp = event_.ion_alloc_buffer_end_;
    event_.ion_alloc_buffer_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferEndFtraceEvent& FtraceEvent::ion_alloc_buffer_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  return has_ion_alloc_buffer_end()
      ? *event_.ion_alloc_buffer_end_
      : *reinterpret_cast< ::perfetto::protos::IonAllocBufferEndFtraceEvent*>(&::perfetto::protos::_IonAllocBufferEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonAllocBufferEndFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_end() {
  if (!has_ion_alloc_buffer_end()) {
    clear_event();
    set_has_ion_alloc_buffer_end();
    event_.ion_alloc_buffer_end_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  return event_.ion_alloc_buffer_end_;
}

// optional .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
inline bool FtraceEvent::has_ion_alloc_buffer_fail() const {
  return event_case() == kIonAllocBufferFail;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_fail() {
  _oneof_case_[0] = kIonAllocBufferFail;
}
inline ::perfetto::protos::IonAllocBufferFailFtraceEvent* FtraceEvent::release_ion_alloc_buffer_fail() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  if (has_ion_alloc_buffer_fail()) {
    clear_has_event();
      ::perfetto::protos::IonAllocBufferFailFtraceEvent* temp = event_.ion_alloc_buffer_fail_;
    event_.ion_alloc_buffer_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferFailFtraceEvent& FtraceEvent::ion_alloc_buffer_fail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  return has_ion_alloc_buffer_fail()
      ? *event_.ion_alloc_buffer_fail_
      : *reinterpret_cast< ::perfetto::protos::IonAllocBufferFailFtraceEvent*>(&::perfetto::protos::_IonAllocBufferFailFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonAllocBufferFailFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_fail() {
  if (!has_ion_alloc_buffer_fail()) {
    clear_event();
    set_has_ion_alloc_buffer_fail();
    event_.ion_alloc_buffer_fail_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferFailFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  return event_.ion_alloc_buffer_fail_;
}

// optional .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
inline bool FtraceEvent::has_ion_alloc_buffer_fallback() const {
  return event_case() == kIonAllocBufferFallback;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_fallback() {
  _oneof_case_[0] = kIonAllocBufferFallback;
}
inline ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* FtraceEvent::release_ion_alloc_buffer_fallback() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  if (has_ion_alloc_buffer_fallback()) {
    clear_has_event();
      ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* temp = event_.ion_alloc_buffer_fallback_;
    event_.ion_alloc_buffer_fallback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& FtraceEvent::ion_alloc_buffer_fallback() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  return has_ion_alloc_buffer_fallback()
      ? *event_.ion_alloc_buffer_fallback_
      : *reinterpret_cast< ::perfetto::protos::IonAllocBufferFallbackFtraceEvent*>(&::perfetto::protos::_IonAllocBufferFallbackFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_fallback() {
  if (!has_ion_alloc_buffer_fallback()) {
    clear_event();
    set_has_ion_alloc_buffer_fallback();
    event_.ion_alloc_buffer_fallback_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferFallbackFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  return event_.ion_alloc_buffer_fallback_;
}

// optional .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
inline bool FtraceEvent::has_ion_alloc_buffer_start() const {
  return event_case() == kIonAllocBufferStart;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_start() {
  _oneof_case_[0] = kIonAllocBufferStart;
}
inline ::perfetto::protos::IonAllocBufferStartFtraceEvent* FtraceEvent::release_ion_alloc_buffer_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  if (has_ion_alloc_buffer_start()) {
    clear_has_event();
      ::perfetto::protos::IonAllocBufferStartFtraceEvent* temp = event_.ion_alloc_buffer_start_;
    event_.ion_alloc_buffer_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferStartFtraceEvent& FtraceEvent::ion_alloc_buffer_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  return has_ion_alloc_buffer_start()
      ? *event_.ion_alloc_buffer_start_
      : *reinterpret_cast< ::perfetto::protos::IonAllocBufferStartFtraceEvent*>(&::perfetto::protos::_IonAllocBufferStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonAllocBufferStartFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_start() {
  if (!has_ion_alloc_buffer_start()) {
    clear_event();
    set_has_ion_alloc_buffer_start();
    event_.ion_alloc_buffer_start_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  return event_.ion_alloc_buffer_start_;
}

// optional .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
inline bool FtraceEvent::has_ion_cp_alloc_retry() const {
  return event_case() == kIonCpAllocRetry;
}
inline void FtraceEvent::set_has_ion_cp_alloc_retry() {
  _oneof_case_[0] = kIonCpAllocRetry;
}
inline ::perfetto::protos::IonCpAllocRetryFtraceEvent* FtraceEvent::release_ion_cp_alloc_retry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  if (has_ion_cp_alloc_retry()) {
    clear_has_event();
      ::perfetto::protos::IonCpAllocRetryFtraceEvent* temp = event_.ion_cp_alloc_retry_;
    event_.ion_cp_alloc_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonCpAllocRetryFtraceEvent& FtraceEvent::ion_cp_alloc_retry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  return has_ion_cp_alloc_retry()
      ? *event_.ion_cp_alloc_retry_
      : *reinterpret_cast< ::perfetto::protos::IonCpAllocRetryFtraceEvent*>(&::perfetto::protos::_IonCpAllocRetryFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonCpAllocRetryFtraceEvent* FtraceEvent::mutable_ion_cp_alloc_retry() {
  if (!has_ion_cp_alloc_retry()) {
    clear_event();
    set_has_ion_cp_alloc_retry();
    event_.ion_cp_alloc_retry_ = CreateMaybeMessage< ::perfetto::protos::IonCpAllocRetryFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  return event_.ion_cp_alloc_retry_;
}

// optional .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
inline bool FtraceEvent::has_ion_cp_secure_buffer_end() const {
  return event_case() == kIonCpSecureBufferEnd;
}
inline void FtraceEvent::set_has_ion_cp_secure_buffer_end() {
  _oneof_case_[0] = kIonCpSecureBufferEnd;
}
inline ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* FtraceEvent::release_ion_cp_secure_buffer_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  if (has_ion_cp_secure_buffer_end()) {
    clear_has_event();
      ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* temp = event_.ion_cp_secure_buffer_end_;
    event_.ion_cp_secure_buffer_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& FtraceEvent::ion_cp_secure_buffer_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  return has_ion_cp_secure_buffer_end()
      ? *event_.ion_cp_secure_buffer_end_
      : *reinterpret_cast< ::perfetto::protos::IonCpSecureBufferEndFtraceEvent*>(&::perfetto::protos::_IonCpSecureBufferEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* FtraceEvent::mutable_ion_cp_secure_buffer_end() {
  if (!has_ion_cp_secure_buffer_end()) {
    clear_event();
    set_has_ion_cp_secure_buffer_end();
    event_.ion_cp_secure_buffer_end_ = CreateMaybeMessage< ::perfetto::protos::IonCpSecureBufferEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  return event_.ion_cp_secure_buffer_end_;
}

// optional .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
inline bool FtraceEvent::has_ion_cp_secure_buffer_start() const {
  return event_case() == kIonCpSecureBufferStart;
}
inline void FtraceEvent::set_has_ion_cp_secure_buffer_start() {
  _oneof_case_[0] = kIonCpSecureBufferStart;
}
inline ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* FtraceEvent::release_ion_cp_secure_buffer_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  if (has_ion_cp_secure_buffer_start()) {
    clear_has_event();
      ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* temp = event_.ion_cp_secure_buffer_start_;
    event_.ion_cp_secure_buffer_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& FtraceEvent::ion_cp_secure_buffer_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  return has_ion_cp_secure_buffer_start()
      ? *event_.ion_cp_secure_buffer_start_
      : *reinterpret_cast< ::perfetto::protos::IonCpSecureBufferStartFtraceEvent*>(&::perfetto::protos::_IonCpSecureBufferStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* FtraceEvent::mutable_ion_cp_secure_buffer_start() {
  if (!has_ion_cp_secure_buffer_start()) {
    clear_event();
    set_has_ion_cp_secure_buffer_start();
    event_.ion_cp_secure_buffer_start_ = CreateMaybeMessage< ::perfetto::protos::IonCpSecureBufferStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  return event_.ion_cp_secure_buffer_start_;
}

// optional .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
inline bool FtraceEvent::has_ion_prefetching() const {
  return event_case() == kIonPrefetching;
}
inline void FtraceEvent::set_has_ion_prefetching() {
  _oneof_case_[0] = kIonPrefetching;
}
inline ::perfetto::protos::IonPrefetchingFtraceEvent* FtraceEvent::release_ion_prefetching() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_prefetching)
  if (has_ion_prefetching()) {
    clear_has_event();
      ::perfetto::protos::IonPrefetchingFtraceEvent* temp = event_.ion_prefetching_;
    event_.ion_prefetching_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonPrefetchingFtraceEvent& FtraceEvent::ion_prefetching() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_prefetching)
  return has_ion_prefetching()
      ? *event_.ion_prefetching_
      : *reinterpret_cast< ::perfetto::protos::IonPrefetchingFtraceEvent*>(&::perfetto::protos::_IonPrefetchingFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonPrefetchingFtraceEvent* FtraceEvent::mutable_ion_prefetching() {
  if (!has_ion_prefetching()) {
    clear_event();
    set_has_ion_prefetching();
    event_.ion_prefetching_ = CreateMaybeMessage< ::perfetto::protos::IonPrefetchingFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_prefetching)
  return event_.ion_prefetching_;
}

// optional .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
inline bool FtraceEvent::has_ion_secure_cma_add_to_pool_end() const {
  return event_case() == kIonSecureCmaAddToPoolEnd;
}
inline void FtraceEvent::set_has_ion_secure_cma_add_to_pool_end() {
  _oneof_case_[0] = kIonSecureCmaAddToPoolEnd;
}
inline ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* FtraceEvent::release_ion_secure_cma_add_to_pool_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  if (has_ion_secure_cma_add_to_pool_end()) {
    clear_has_event();
      ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* temp = event_.ion_secure_cma_add_to_pool_end_;
    event_.ion_secure_cma_add_to_pool_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& FtraceEvent::ion_secure_cma_add_to_pool_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  return has_ion_secure_cma_add_to_pool_end()
      ? *event_.ion_secure_cma_add_to_pool_end_
      : *reinterpret_cast< ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent*>(&::perfetto::protos::_IonSecureCmaAddToPoolEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* FtraceEvent::mutable_ion_secure_cma_add_to_pool_end() {
  if (!has_ion_secure_cma_add_to_pool_end()) {
    clear_event();
    set_has_ion_secure_cma_add_to_pool_end();
    event_.ion_secure_cma_add_to_pool_end_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  return event_.ion_secure_cma_add_to_pool_end_;
}

// optional .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
inline bool FtraceEvent::has_ion_secure_cma_add_to_pool_start() const {
  return event_case() == kIonSecureCmaAddToPoolStart;
}
inline void FtraceEvent::set_has_ion_secure_cma_add_to_pool_start() {
  _oneof_case_[0] = kIonSecureCmaAddToPoolStart;
}
inline ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* FtraceEvent::release_ion_secure_cma_add_to_pool_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  if (has_ion_secure_cma_add_to_pool_start()) {
    clear_has_event();
      ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* temp = event_.ion_secure_cma_add_to_pool_start_;
    event_.ion_secure_cma_add_to_pool_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& FtraceEvent::ion_secure_cma_add_to_pool_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  return has_ion_secure_cma_add_to_pool_start()
      ? *event_.ion_secure_cma_add_to_pool_start_
      : *reinterpret_cast< ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent*>(&::perfetto::protos::_IonSecureCmaAddToPoolStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* FtraceEvent::mutable_ion_secure_cma_add_to_pool_start() {
  if (!has_ion_secure_cma_add_to_pool_start()) {
    clear_event();
    set_has_ion_secure_cma_add_to_pool_start();
    event_.ion_secure_cma_add_to_pool_start_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  return event_.ion_secure_cma_add_to_pool_start_;
}

// optional .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
inline bool FtraceEvent::has_ion_secure_cma_allocate_end() const {
  return event_case() == kIonSecureCmaAllocateEnd;
}
inline void FtraceEvent::set_has_ion_secure_cma_allocate_end() {
  _oneof_case_[0] = kIonSecureCmaAllocateEnd;
}
inline ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* FtraceEvent::release_ion_secure_cma_allocate_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  if (has_ion_secure_cma_allocate_end()) {
    clear_has_event();
      ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* temp = event_.ion_secure_cma_allocate_end_;
    event_.ion_secure_cma_allocate_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& FtraceEvent::ion_secure_cma_allocate_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  return has_ion_secure_cma_allocate_end()
      ? *event_.ion_secure_cma_allocate_end_
      : *reinterpret_cast< ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent*>(&::perfetto::protos::_IonSecureCmaAllocateEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* FtraceEvent::mutable_ion_secure_cma_allocate_end() {
  if (!has_ion_secure_cma_allocate_end()) {
    clear_event();
    set_has_ion_secure_cma_allocate_end();
    event_.ion_secure_cma_allocate_end_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  return event_.ion_secure_cma_allocate_end_;
}

// optional .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
inline bool FtraceEvent::has_ion_secure_cma_allocate_start() const {
  return event_case() == kIonSecureCmaAllocateStart;
}
inline void FtraceEvent::set_has_ion_secure_cma_allocate_start() {
  _oneof_case_[0] = kIonSecureCmaAllocateStart;
}
inline ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* FtraceEvent::release_ion_secure_cma_allocate_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  if (has_ion_secure_cma_allocate_start()) {
    clear_has_event();
      ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* temp = event_.ion_secure_cma_allocate_start_;
    event_.ion_secure_cma_allocate_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& FtraceEvent::ion_secure_cma_allocate_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  return has_ion_secure_cma_allocate_start()
      ? *event_.ion_secure_cma_allocate_start_
      : *reinterpret_cast< ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent*>(&::perfetto::protos::_IonSecureCmaAllocateStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* FtraceEvent::mutable_ion_secure_cma_allocate_start() {
  if (!has_ion_secure_cma_allocate_start()) {
    clear_event();
    set_has_ion_secure_cma_allocate_start();
    event_.ion_secure_cma_allocate_start_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  return event_.ion_secure_cma_allocate_start_;
}

// optional .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
inline bool FtraceEvent::has_ion_secure_cma_shrink_pool_end() const {
  return event_case() == kIonSecureCmaShrinkPoolEnd;
}
inline void FtraceEvent::set_has_ion_secure_cma_shrink_pool_end() {
  _oneof_case_[0] = kIonSecureCmaShrinkPoolEnd;
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* FtraceEvent::release_ion_secure_cma_shrink_pool_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  if (has_ion_secure_cma_shrink_pool_end()) {
    clear_has_event();
      ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* temp = event_.ion_secure_cma_shrink_pool_end_;
    event_.ion_secure_cma_shrink_pool_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& FtraceEvent::ion_secure_cma_shrink_pool_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  return has_ion_secure_cma_shrink_pool_end()
      ? *event_.ion_secure_cma_shrink_pool_end_
      : *reinterpret_cast< ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent*>(&::perfetto::protos::_IonSecureCmaShrinkPoolEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* FtraceEvent::mutable_ion_secure_cma_shrink_pool_end() {
  if (!has_ion_secure_cma_shrink_pool_end()) {
    clear_event();
    set_has_ion_secure_cma_shrink_pool_end();
    event_.ion_secure_cma_shrink_pool_end_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  return event_.ion_secure_cma_shrink_pool_end_;
}

// optional .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
inline bool FtraceEvent::has_ion_secure_cma_shrink_pool_start() const {
  return event_case() == kIonSecureCmaShrinkPoolStart;
}
inline void FtraceEvent::set_has_ion_secure_cma_shrink_pool_start() {
  _oneof_case_[0] = kIonSecureCmaShrinkPoolStart;
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* FtraceEvent::release_ion_secure_cma_shrink_pool_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  if (has_ion_secure_cma_shrink_pool_start()) {
    clear_has_event();
      ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* temp = event_.ion_secure_cma_shrink_pool_start_;
    event_.ion_secure_cma_shrink_pool_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& FtraceEvent::ion_secure_cma_shrink_pool_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  return has_ion_secure_cma_shrink_pool_start()
      ? *event_.ion_secure_cma_shrink_pool_start_
      : *reinterpret_cast< ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent*>(&::perfetto::protos::_IonSecureCmaShrinkPoolStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* FtraceEvent::mutable_ion_secure_cma_shrink_pool_start() {
  if (!has_ion_secure_cma_shrink_pool_start()) {
    clear_event();
    set_has_ion_secure_cma_shrink_pool_start();
    event_.ion_secure_cma_shrink_pool_start_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  return event_.ion_secure_cma_shrink_pool_start_;
}

// optional .perfetto.protos.KfreeFtraceEvent kfree = 298;
inline bool FtraceEvent::has_kfree() const {
  return event_case() == kKfree;
}
inline void FtraceEvent::set_has_kfree() {
  _oneof_case_[0] = kKfree;
}
inline ::perfetto::protos::KfreeFtraceEvent* FtraceEvent::release_kfree() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kfree)
  if (has_kfree()) {
    clear_has_event();
      ::perfetto::protos::KfreeFtraceEvent* temp = event_.kfree_;
    event_.kfree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KfreeFtraceEvent& FtraceEvent::kfree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kfree)
  return has_kfree()
      ? *event_.kfree_
      : *reinterpret_cast< ::perfetto::protos::KfreeFtraceEvent*>(&::perfetto::protos::_KfreeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::KfreeFtraceEvent* FtraceEvent::mutable_kfree() {
  if (!has_kfree()) {
    clear_event();
    set_has_kfree();
    event_.kfree_ = CreateMaybeMessage< ::perfetto::protos::KfreeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kfree)
  return event_.kfree_;
}

// optional .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
inline bool FtraceEvent::has_kmalloc() const {
  return event_case() == kKmalloc;
}
inline void FtraceEvent::set_has_kmalloc() {
  _oneof_case_[0] = kKmalloc;
}
inline ::perfetto::protos::KmallocFtraceEvent* FtraceEvent::release_kmalloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmalloc)
  if (has_kmalloc()) {
    clear_has_event();
      ::perfetto::protos::KmallocFtraceEvent* temp = event_.kmalloc_;
    event_.kmalloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmallocFtraceEvent& FtraceEvent::kmalloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmalloc)
  return has_kmalloc()
      ? *event_.kmalloc_
      : *reinterpret_cast< ::perfetto::protos::KmallocFtraceEvent*>(&::perfetto::protos::_KmallocFtraceEvent_default_instance_);
}
inline ::perfetto::protos::KmallocFtraceEvent* FtraceEvent::mutable_kmalloc() {
  if (!has_kmalloc()) {
    clear_event();
    set_has_kmalloc();
    event_.kmalloc_ = CreateMaybeMessage< ::perfetto::protos::KmallocFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmalloc)
  return event_.kmalloc_;
}

// optional .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
inline bool FtraceEvent::has_kmalloc_node() const {
  return event_case() == kKmallocNode;
}
inline void FtraceEvent::set_has_kmalloc_node() {
  _oneof_case_[0] = kKmallocNode;
}
inline ::perfetto::protos::KmallocNodeFtraceEvent* FtraceEvent::release_kmalloc_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmalloc_node)
  if (has_kmalloc_node()) {
    clear_has_event();
      ::perfetto::protos::KmallocNodeFtraceEvent* temp = event_.kmalloc_node_;
    event_.kmalloc_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmallocNodeFtraceEvent& FtraceEvent::kmalloc_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmalloc_node)
  return has_kmalloc_node()
      ? *event_.kmalloc_node_
      : *reinterpret_cast< ::perfetto::protos::KmallocNodeFtraceEvent*>(&::perfetto::protos::_KmallocNodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::KmallocNodeFtraceEvent* FtraceEvent::mutable_kmalloc_node() {
  if (!has_kmalloc_node()) {
    clear_event();
    set_has_kmalloc_node();
    event_.kmalloc_node_ = CreateMaybeMessage< ::perfetto::protos::KmallocNodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmalloc_node)
  return event_.kmalloc_node_;
}

// optional .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
inline bool FtraceEvent::has_kmem_cache_alloc() const {
  return event_case() == kKmemCacheAlloc;
}
inline void FtraceEvent::set_has_kmem_cache_alloc() {
  _oneof_case_[0] = kKmemCacheAlloc;
}
inline ::perfetto::protos::KmemCacheAllocFtraceEvent* FtraceEvent::release_kmem_cache_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  if (has_kmem_cache_alloc()) {
    clear_has_event();
      ::perfetto::protos::KmemCacheAllocFtraceEvent* temp = event_.kmem_cache_alloc_;
    event_.kmem_cache_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmemCacheAllocFtraceEvent& FtraceEvent::kmem_cache_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  return has_kmem_cache_alloc()
      ? *event_.kmem_cache_alloc_
      : *reinterpret_cast< ::perfetto::protos::KmemCacheAllocFtraceEvent*>(&::perfetto::protos::_KmemCacheAllocFtraceEvent_default_instance_);
}
inline ::perfetto::protos::KmemCacheAllocFtraceEvent* FtraceEvent::mutable_kmem_cache_alloc() {
  if (!has_kmem_cache_alloc()) {
    clear_event();
    set_has_kmem_cache_alloc();
    event_.kmem_cache_alloc_ = CreateMaybeMessage< ::perfetto::protos::KmemCacheAllocFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  return event_.kmem_cache_alloc_;
}

// optional .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
inline bool FtraceEvent::has_kmem_cache_alloc_node() const {
  return event_case() == kKmemCacheAllocNode;
}
inline void FtraceEvent::set_has_kmem_cache_alloc_node() {
  _oneof_case_[0] = kKmemCacheAllocNode;
}
inline ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* FtraceEvent::release_kmem_cache_alloc_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  if (has_kmem_cache_alloc_node()) {
    clear_has_event();
      ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* temp = event_.kmem_cache_alloc_node_;
    event_.kmem_cache_alloc_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& FtraceEvent::kmem_cache_alloc_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  return has_kmem_cache_alloc_node()
      ? *event_.kmem_cache_alloc_node_
      : *reinterpret_cast< ::perfetto::protos::KmemCacheAllocNodeFtraceEvent*>(&::perfetto::protos::_KmemCacheAllocNodeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* FtraceEvent::mutable_kmem_cache_alloc_node() {
  if (!has_kmem_cache_alloc_node()) {
    clear_event();
    set_has_kmem_cache_alloc_node();
    event_.kmem_cache_alloc_node_ = CreateMaybeMessage< ::perfetto::protos::KmemCacheAllocNodeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  return event_.kmem_cache_alloc_node_;
}

// optional .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
inline bool FtraceEvent::has_kmem_cache_free() const {
  return event_case() == kKmemCacheFree;
}
inline void FtraceEvent::set_has_kmem_cache_free() {
  _oneof_case_[0] = kKmemCacheFree;
}
inline ::perfetto::protos::KmemCacheFreeFtraceEvent* FtraceEvent::release_kmem_cache_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmem_cache_free)
  if (has_kmem_cache_free()) {
    clear_has_event();
      ::perfetto::protos::KmemCacheFreeFtraceEvent* temp = event_.kmem_cache_free_;
    event_.kmem_cache_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmemCacheFreeFtraceEvent& FtraceEvent::kmem_cache_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmem_cache_free)
  return has_kmem_cache_free()
      ? *event_.kmem_cache_free_
      : *reinterpret_cast< ::perfetto::protos::KmemCacheFreeFtraceEvent*>(&::perfetto::protos::_KmemCacheFreeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::KmemCacheFreeFtraceEvent* FtraceEvent::mutable_kmem_cache_free() {
  if (!has_kmem_cache_free()) {
    clear_event();
    set_has_kmem_cache_free();
    event_.kmem_cache_free_ = CreateMaybeMessage< ::perfetto::protos::KmemCacheFreeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmem_cache_free)
  return event_.kmem_cache_free_;
}

// optional .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
inline bool FtraceEvent::has_migrate_pages_end() const {
  return event_case() == kMigratePagesEnd;
}
inline void FtraceEvent::set_has_migrate_pages_end() {
  _oneof_case_[0] = kMigratePagesEnd;
}
inline ::perfetto::protos::MigratePagesEndFtraceEvent* FtraceEvent::release_migrate_pages_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.migrate_pages_end)
  if (has_migrate_pages_end()) {
    clear_has_event();
      ::perfetto::protos::MigratePagesEndFtraceEvent* temp = event_.migrate_pages_end_;
    event_.migrate_pages_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MigratePagesEndFtraceEvent& FtraceEvent::migrate_pages_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.migrate_pages_end)
  return has_migrate_pages_end()
      ? *event_.migrate_pages_end_
      : *reinterpret_cast< ::perfetto::protos::MigratePagesEndFtraceEvent*>(&::perfetto::protos::_MigratePagesEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MigratePagesEndFtraceEvent* FtraceEvent::mutable_migrate_pages_end() {
  if (!has_migrate_pages_end()) {
    clear_event();
    set_has_migrate_pages_end();
    event_.migrate_pages_end_ = CreateMaybeMessage< ::perfetto::protos::MigratePagesEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.migrate_pages_end)
  return event_.migrate_pages_end_;
}

// optional .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
inline bool FtraceEvent::has_migrate_pages_start() const {
  return event_case() == kMigratePagesStart;
}
inline void FtraceEvent::set_has_migrate_pages_start() {
  _oneof_case_[0] = kMigratePagesStart;
}
inline ::perfetto::protos::MigratePagesStartFtraceEvent* FtraceEvent::release_migrate_pages_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.migrate_pages_start)
  if (has_migrate_pages_start()) {
    clear_has_event();
      ::perfetto::protos::MigratePagesStartFtraceEvent* temp = event_.migrate_pages_start_;
    event_.migrate_pages_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MigratePagesStartFtraceEvent& FtraceEvent::migrate_pages_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.migrate_pages_start)
  return has_migrate_pages_start()
      ? *event_.migrate_pages_start_
      : *reinterpret_cast< ::perfetto::protos::MigratePagesStartFtraceEvent*>(&::perfetto::protos::_MigratePagesStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MigratePagesStartFtraceEvent* FtraceEvent::mutable_migrate_pages_start() {
  if (!has_migrate_pages_start()) {
    clear_event();
    set_has_migrate_pages_start();
    event_.migrate_pages_start_ = CreateMaybeMessage< ::perfetto::protos::MigratePagesStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.migrate_pages_start)
  return event_.migrate_pages_start_;
}

// optional .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
inline bool FtraceEvent::has_migrate_retry() const {
  return event_case() == kMigrateRetry;
}
inline void FtraceEvent::set_has_migrate_retry() {
  _oneof_case_[0] = kMigrateRetry;
}
inline ::perfetto::protos::MigrateRetryFtraceEvent* FtraceEvent::release_migrate_retry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.migrate_retry)
  if (has_migrate_retry()) {
    clear_has_event();
      ::perfetto::protos::MigrateRetryFtraceEvent* temp = event_.migrate_retry_;
    event_.migrate_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MigrateRetryFtraceEvent& FtraceEvent::migrate_retry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.migrate_retry)
  return has_migrate_retry()
      ? *event_.migrate_retry_
      : *reinterpret_cast< ::perfetto::protos::MigrateRetryFtraceEvent*>(&::perfetto::protos::_MigrateRetryFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MigrateRetryFtraceEvent* FtraceEvent::mutable_migrate_retry() {
  if (!has_migrate_retry()) {
    clear_event();
    set_has_migrate_retry();
    event_.migrate_retry_ = CreateMaybeMessage< ::perfetto::protos::MigrateRetryFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.migrate_retry)
  return event_.migrate_retry_;
}

// optional .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
inline bool FtraceEvent::has_mm_page_alloc() const {
  return event_case() == kMmPageAlloc;
}
inline void FtraceEvent::set_has_mm_page_alloc() {
  _oneof_case_[0] = kMmPageAlloc;
}
inline ::perfetto::protos::MmPageAllocFtraceEvent* FtraceEvent::release_mm_page_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_alloc)
  if (has_mm_page_alloc()) {
    clear_has_event();
      ::perfetto::protos::MmPageAllocFtraceEvent* temp = event_.mm_page_alloc_;
    event_.mm_page_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageAllocFtraceEvent& FtraceEvent::mm_page_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_alloc)
  return has_mm_page_alloc()
      ? *event_.mm_page_alloc_
      : *reinterpret_cast< ::perfetto::protos::MmPageAllocFtraceEvent*>(&::perfetto::protos::_MmPageAllocFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmPageAllocFtraceEvent* FtraceEvent::mutable_mm_page_alloc() {
  if (!has_mm_page_alloc()) {
    clear_event();
    set_has_mm_page_alloc();
    event_.mm_page_alloc_ = CreateMaybeMessage< ::perfetto::protos::MmPageAllocFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_alloc)
  return event_.mm_page_alloc_;
}

// optional .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
inline bool FtraceEvent::has_mm_page_alloc_extfrag() const {
  return event_case() == kMmPageAllocExtfrag;
}
inline void FtraceEvent::set_has_mm_page_alloc_extfrag() {
  _oneof_case_[0] = kMmPageAllocExtfrag;
}
inline ::perfetto::protos::MmPageAllocExtfragFtraceEvent* FtraceEvent::release_mm_page_alloc_extfrag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  if (has_mm_page_alloc_extfrag()) {
    clear_has_event();
      ::perfetto::protos::MmPageAllocExtfragFtraceEvent* temp = event_.mm_page_alloc_extfrag_;
    event_.mm_page_alloc_extfrag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& FtraceEvent::mm_page_alloc_extfrag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  return has_mm_page_alloc_extfrag()
      ? *event_.mm_page_alloc_extfrag_
      : *reinterpret_cast< ::perfetto::protos::MmPageAllocExtfragFtraceEvent*>(&::perfetto::protos::_MmPageAllocExtfragFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmPageAllocExtfragFtraceEvent* FtraceEvent::mutable_mm_page_alloc_extfrag() {
  if (!has_mm_page_alloc_extfrag()) {
    clear_event();
    set_has_mm_page_alloc_extfrag();
    event_.mm_page_alloc_extfrag_ = CreateMaybeMessage< ::perfetto::protos::MmPageAllocExtfragFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  return event_.mm_page_alloc_extfrag_;
}

// optional .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
inline bool FtraceEvent::has_mm_page_alloc_zone_locked() const {
  return event_case() == kMmPageAllocZoneLocked;
}
inline void FtraceEvent::set_has_mm_page_alloc_zone_locked() {
  _oneof_case_[0] = kMmPageAllocZoneLocked;
}
inline ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* FtraceEvent::release_mm_page_alloc_zone_locked() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  if (has_mm_page_alloc_zone_locked()) {
    clear_has_event();
      ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* temp = event_.mm_page_alloc_zone_locked_;
    event_.mm_page_alloc_zone_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& FtraceEvent::mm_page_alloc_zone_locked() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  return has_mm_page_alloc_zone_locked()
      ? *event_.mm_page_alloc_zone_locked_
      : *reinterpret_cast< ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent*>(&::perfetto::protos::_MmPageAllocZoneLockedFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* FtraceEvent::mutable_mm_page_alloc_zone_locked() {
  if (!has_mm_page_alloc_zone_locked()) {
    clear_event();
    set_has_mm_page_alloc_zone_locked();
    event_.mm_page_alloc_zone_locked_ = CreateMaybeMessage< ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  return event_.mm_page_alloc_zone_locked_;
}

// optional .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
inline bool FtraceEvent::has_mm_page_free() const {
  return event_case() == kMmPageFree;
}
inline void FtraceEvent::set_has_mm_page_free() {
  _oneof_case_[0] = kMmPageFree;
}
inline ::perfetto::protos::MmPageFreeFtraceEvent* FtraceEvent::release_mm_page_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_free)
  if (has_mm_page_free()) {
    clear_has_event();
      ::perfetto::protos::MmPageFreeFtraceEvent* temp = event_.mm_page_free_;
    event_.mm_page_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageFreeFtraceEvent& FtraceEvent::mm_page_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_free)
  return has_mm_page_free()
      ? *event_.mm_page_free_
      : *reinterpret_cast< ::perfetto::protos::MmPageFreeFtraceEvent*>(&::perfetto::protos::_MmPageFreeFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmPageFreeFtraceEvent* FtraceEvent::mutable_mm_page_free() {
  if (!has_mm_page_free()) {
    clear_event();
    set_has_mm_page_free();
    event_.mm_page_free_ = CreateMaybeMessage< ::perfetto::protos::MmPageFreeFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_free)
  return event_.mm_page_free_;
}

// optional .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
inline bool FtraceEvent::has_mm_page_free_batched() const {
  return event_case() == kMmPageFreeBatched;
}
inline void FtraceEvent::set_has_mm_page_free_batched() {
  _oneof_case_[0] = kMmPageFreeBatched;
}
inline ::perfetto::protos::MmPageFreeBatchedFtraceEvent* FtraceEvent::release_mm_page_free_batched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_free_batched)
  if (has_mm_page_free_batched()) {
    clear_has_event();
      ::perfetto::protos::MmPageFreeBatchedFtraceEvent* temp = event_.mm_page_free_batched_;
    event_.mm_page_free_batched_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& FtraceEvent::mm_page_free_batched() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_free_batched)
  return has_mm_page_free_batched()
      ? *event_.mm_page_free_batched_
      : *reinterpret_cast< ::perfetto::protos::MmPageFreeBatchedFtraceEvent*>(&::perfetto::protos::_MmPageFreeBatchedFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmPageFreeBatchedFtraceEvent* FtraceEvent::mutable_mm_page_free_batched() {
  if (!has_mm_page_free_batched()) {
    clear_event();
    set_has_mm_page_free_batched();
    event_.mm_page_free_batched_ = CreateMaybeMessage< ::perfetto::protos::MmPageFreeBatchedFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_free_batched)
  return event_.mm_page_free_batched_;
}

// optional .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
inline bool FtraceEvent::has_mm_page_pcpu_drain() const {
  return event_case() == kMmPagePcpuDrain;
}
inline void FtraceEvent::set_has_mm_page_pcpu_drain() {
  _oneof_case_[0] = kMmPagePcpuDrain;
}
inline ::perfetto::protos::MmPagePcpuDrainFtraceEvent* FtraceEvent::release_mm_page_pcpu_drain() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  if (has_mm_page_pcpu_drain()) {
    clear_has_event();
      ::perfetto::protos::MmPagePcpuDrainFtraceEvent* temp = event_.mm_page_pcpu_drain_;
    event_.mm_page_pcpu_drain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& FtraceEvent::mm_page_pcpu_drain() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  return has_mm_page_pcpu_drain()
      ? *event_.mm_page_pcpu_drain_
      : *reinterpret_cast< ::perfetto::protos::MmPagePcpuDrainFtraceEvent*>(&::perfetto::protos::_MmPagePcpuDrainFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmPagePcpuDrainFtraceEvent* FtraceEvent::mutable_mm_page_pcpu_drain() {
  if (!has_mm_page_pcpu_drain()) {
    clear_event();
    set_has_mm_page_pcpu_drain();
    event_.mm_page_pcpu_drain_ = CreateMaybeMessage< ::perfetto::protos::MmPagePcpuDrainFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  return event_.mm_page_pcpu_drain_;
}

// optional .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
inline bool FtraceEvent::has_rss_stat() const {
  return event_case() == kRssStat;
}
inline void FtraceEvent::set_has_rss_stat() {
  _oneof_case_[0] = kRssStat;
}
inline ::perfetto::protos::RssStatFtraceEvent* FtraceEvent::release_rss_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.rss_stat)
  if (has_rss_stat()) {
    clear_has_event();
      ::perfetto::protos::RssStatFtraceEvent* temp = event_.rss_stat_;
    event_.rss_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RssStatFtraceEvent& FtraceEvent::rss_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.rss_stat)
  return has_rss_stat()
      ? *event_.rss_stat_
      : *reinterpret_cast< ::perfetto::protos::RssStatFtraceEvent*>(&::perfetto::protos::_RssStatFtraceEvent_default_instance_);
}
inline ::perfetto::protos::RssStatFtraceEvent* FtraceEvent::mutable_rss_stat() {
  if (!has_rss_stat()) {
    clear_event();
    set_has_rss_stat();
    event_.rss_stat_ = CreateMaybeMessage< ::perfetto::protos::RssStatFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.rss_stat)
  return event_.rss_stat_;
}

// optional .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
inline bool FtraceEvent::has_ion_heap_shrink() const {
  return event_case() == kIonHeapShrink;
}
inline void FtraceEvent::set_has_ion_heap_shrink() {
  _oneof_case_[0] = kIonHeapShrink;
}
inline ::perfetto::protos::IonHeapShrinkFtraceEvent* FtraceEvent::release_ion_heap_shrink() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_heap_shrink)
  if (has_ion_heap_shrink()) {
    clear_has_event();
      ::perfetto::protos::IonHeapShrinkFtraceEvent* temp = event_.ion_heap_shrink_;
    event_.ion_heap_shrink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonHeapShrinkFtraceEvent& FtraceEvent::ion_heap_shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_heap_shrink)
  return has_ion_heap_shrink()
      ? *event_.ion_heap_shrink_
      : *reinterpret_cast< ::perfetto::protos::IonHeapShrinkFtraceEvent*>(&::perfetto::protos::_IonHeapShrinkFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonHeapShrinkFtraceEvent* FtraceEvent::mutable_ion_heap_shrink() {
  if (!has_ion_heap_shrink()) {
    clear_event();
    set_has_ion_heap_shrink();
    event_.ion_heap_shrink_ = CreateMaybeMessage< ::perfetto::protos::IonHeapShrinkFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_heap_shrink)
  return event_.ion_heap_shrink_;
}

// optional .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
inline bool FtraceEvent::has_ion_heap_grow() const {
  return event_case() == kIonHeapGrow;
}
inline void FtraceEvent::set_has_ion_heap_grow() {
  _oneof_case_[0] = kIonHeapGrow;
}
inline ::perfetto::protos::IonHeapGrowFtraceEvent* FtraceEvent::release_ion_heap_grow() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_heap_grow)
  if (has_ion_heap_grow()) {
    clear_has_event();
      ::perfetto::protos::IonHeapGrowFtraceEvent* temp = event_.ion_heap_grow_;
    event_.ion_heap_grow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonHeapGrowFtraceEvent& FtraceEvent::ion_heap_grow() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_heap_grow)
  return has_ion_heap_grow()
      ? *event_.ion_heap_grow_
      : *reinterpret_cast< ::perfetto::protos::IonHeapGrowFtraceEvent*>(&::perfetto::protos::_IonHeapGrowFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonHeapGrowFtraceEvent* FtraceEvent::mutable_ion_heap_grow() {
  if (!has_ion_heap_grow()) {
    clear_event();
    set_has_ion_heap_grow();
    event_.ion_heap_grow_ = CreateMaybeMessage< ::perfetto::protos::IonHeapGrowFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_heap_grow)
  return event_.ion_heap_grow_;
}

// optional .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
inline bool FtraceEvent::has_fence_init() const {
  return event_case() == kFenceInit;
}
inline void FtraceEvent::set_has_fence_init() {
  _oneof_case_[0] = kFenceInit;
}
inline ::perfetto::protos::FenceInitFtraceEvent* FtraceEvent::release_fence_init() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_init)
  if (has_fence_init()) {
    clear_has_event();
      ::perfetto::protos::FenceInitFtraceEvent* temp = event_.fence_init_;
    event_.fence_init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceInitFtraceEvent& FtraceEvent::fence_init() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_init)
  return has_fence_init()
      ? *event_.fence_init_
      : *reinterpret_cast< ::perfetto::protos::FenceInitFtraceEvent*>(&::perfetto::protos::_FenceInitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::FenceInitFtraceEvent* FtraceEvent::mutable_fence_init() {
  if (!has_fence_init()) {
    clear_event();
    set_has_fence_init();
    event_.fence_init_ = CreateMaybeMessage< ::perfetto::protos::FenceInitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_init)
  return event_.fence_init_;
}

// optional .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
inline bool FtraceEvent::has_fence_destroy() const {
  return event_case() == kFenceDestroy;
}
inline void FtraceEvent::set_has_fence_destroy() {
  _oneof_case_[0] = kFenceDestroy;
}
inline ::perfetto::protos::FenceDestroyFtraceEvent* FtraceEvent::release_fence_destroy() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_destroy)
  if (has_fence_destroy()) {
    clear_has_event();
      ::perfetto::protos::FenceDestroyFtraceEvent* temp = event_.fence_destroy_;
    event_.fence_destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceDestroyFtraceEvent& FtraceEvent::fence_destroy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_destroy)
  return has_fence_destroy()
      ? *event_.fence_destroy_
      : *reinterpret_cast< ::perfetto::protos::FenceDestroyFtraceEvent*>(&::perfetto::protos::_FenceDestroyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::FenceDestroyFtraceEvent* FtraceEvent::mutable_fence_destroy() {
  if (!has_fence_destroy()) {
    clear_event();
    set_has_fence_destroy();
    event_.fence_destroy_ = CreateMaybeMessage< ::perfetto::protos::FenceDestroyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_destroy)
  return event_.fence_destroy_;
}

// optional .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
inline bool FtraceEvent::has_fence_enable_signal() const {
  return event_case() == kFenceEnableSignal;
}
inline void FtraceEvent::set_has_fence_enable_signal() {
  _oneof_case_[0] = kFenceEnableSignal;
}
inline ::perfetto::protos::FenceEnableSignalFtraceEvent* FtraceEvent::release_fence_enable_signal() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_enable_signal)
  if (has_fence_enable_signal()) {
    clear_has_event();
      ::perfetto::protos::FenceEnableSignalFtraceEvent* temp = event_.fence_enable_signal_;
    event_.fence_enable_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceEnableSignalFtraceEvent& FtraceEvent::fence_enable_signal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_enable_signal)
  return has_fence_enable_signal()
      ? *event_.fence_enable_signal_
      : *reinterpret_cast< ::perfetto::protos::FenceEnableSignalFtraceEvent*>(&::perfetto::protos::_FenceEnableSignalFtraceEvent_default_instance_);
}
inline ::perfetto::protos::FenceEnableSignalFtraceEvent* FtraceEvent::mutable_fence_enable_signal() {
  if (!has_fence_enable_signal()) {
    clear_event();
    set_has_fence_enable_signal();
    event_.fence_enable_signal_ = CreateMaybeMessage< ::perfetto::protos::FenceEnableSignalFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_enable_signal)
  return event_.fence_enable_signal_;
}

// optional .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
inline bool FtraceEvent::has_fence_signaled() const {
  return event_case() == kFenceSignaled;
}
inline void FtraceEvent::set_has_fence_signaled() {
  _oneof_case_[0] = kFenceSignaled;
}
inline ::perfetto::protos::FenceSignaledFtraceEvent* FtraceEvent::release_fence_signaled() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_signaled)
  if (has_fence_signaled()) {
    clear_has_event();
      ::perfetto::protos::FenceSignaledFtraceEvent* temp = event_.fence_signaled_;
    event_.fence_signaled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceSignaledFtraceEvent& FtraceEvent::fence_signaled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_signaled)
  return has_fence_signaled()
      ? *event_.fence_signaled_
      : *reinterpret_cast< ::perfetto::protos::FenceSignaledFtraceEvent*>(&::perfetto::protos::_FenceSignaledFtraceEvent_default_instance_);
}
inline ::perfetto::protos::FenceSignaledFtraceEvent* FtraceEvent::mutable_fence_signaled() {
  if (!has_fence_signaled()) {
    clear_event();
    set_has_fence_signaled();
    event_.fence_signaled_ = CreateMaybeMessage< ::perfetto::protos::FenceSignaledFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_signaled)
  return event_.fence_signaled_;
}

// optional .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
inline bool FtraceEvent::has_clk_enable() const {
  return event_case() == kClkEnable;
}
inline void FtraceEvent::set_has_clk_enable() {
  _oneof_case_[0] = kClkEnable;
}
inline ::perfetto::protos::ClkEnableFtraceEvent* FtraceEvent::release_clk_enable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clk_enable)
  if (has_clk_enable()) {
    clear_has_event();
      ::perfetto::protos::ClkEnableFtraceEvent* temp = event_.clk_enable_;
    event_.clk_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClkEnableFtraceEvent& FtraceEvent::clk_enable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clk_enable)
  return has_clk_enable()
      ? *event_.clk_enable_
      : *reinterpret_cast< ::perfetto::protos::ClkEnableFtraceEvent*>(&::perfetto::protos::_ClkEnableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ClkEnableFtraceEvent* FtraceEvent::mutable_clk_enable() {
  if (!has_clk_enable()) {
    clear_event();
    set_has_clk_enable();
    event_.clk_enable_ = CreateMaybeMessage< ::perfetto::protos::ClkEnableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clk_enable)
  return event_.clk_enable_;
}

// optional .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
inline bool FtraceEvent::has_clk_disable() const {
  return event_case() == kClkDisable;
}
inline void FtraceEvent::set_has_clk_disable() {
  _oneof_case_[0] = kClkDisable;
}
inline ::perfetto::protos::ClkDisableFtraceEvent* FtraceEvent::release_clk_disable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clk_disable)
  if (has_clk_disable()) {
    clear_has_event();
      ::perfetto::protos::ClkDisableFtraceEvent* temp = event_.clk_disable_;
    event_.clk_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClkDisableFtraceEvent& FtraceEvent::clk_disable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clk_disable)
  return has_clk_disable()
      ? *event_.clk_disable_
      : *reinterpret_cast< ::perfetto::protos::ClkDisableFtraceEvent*>(&::perfetto::protos::_ClkDisableFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ClkDisableFtraceEvent* FtraceEvent::mutable_clk_disable() {
  if (!has_clk_disable()) {
    clear_event();
    set_has_clk_disable();
    event_.clk_disable_ = CreateMaybeMessage< ::perfetto::protos::ClkDisableFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clk_disable)
  return event_.clk_disable_;
}

// optional .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
inline bool FtraceEvent::has_clk_set_rate() const {
  return event_case() == kClkSetRate;
}
inline void FtraceEvent::set_has_clk_set_rate() {
  _oneof_case_[0] = kClkSetRate;
}
inline ::perfetto::protos::ClkSetRateFtraceEvent* FtraceEvent::release_clk_set_rate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clk_set_rate)
  if (has_clk_set_rate()) {
    clear_has_event();
      ::perfetto::protos::ClkSetRateFtraceEvent* temp = event_.clk_set_rate_;
    event_.clk_set_rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClkSetRateFtraceEvent& FtraceEvent::clk_set_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clk_set_rate)
  return has_clk_set_rate()
      ? *event_.clk_set_rate_
      : *reinterpret_cast< ::perfetto::protos::ClkSetRateFtraceEvent*>(&::perfetto::protos::_ClkSetRateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ClkSetRateFtraceEvent* FtraceEvent::mutable_clk_set_rate() {
  if (!has_clk_set_rate()) {
    clear_event();
    set_has_clk_set_rate();
    event_.clk_set_rate_ = CreateMaybeMessage< ::perfetto::protos::ClkSetRateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clk_set_rate)
  return event_.clk_set_rate_;
}

// optional .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
inline bool FtraceEvent::has_binder_transaction_alloc_buf() const {
  return event_case() == kBinderTransactionAllocBuf;
}
inline void FtraceEvent::set_has_binder_transaction_alloc_buf() {
  _oneof_case_[0] = kBinderTransactionAllocBuf;
}
inline ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* FtraceEvent::release_binder_transaction_alloc_buf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  if (has_binder_transaction_alloc_buf()) {
    clear_has_event();
      ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* temp = event_.binder_transaction_alloc_buf_;
    event_.binder_transaction_alloc_buf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& FtraceEvent::binder_transaction_alloc_buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  return has_binder_transaction_alloc_buf()
      ? *event_.binder_transaction_alloc_buf_
      : *reinterpret_cast< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent*>(&::perfetto::protos::_BinderTransactionAllocBufFtraceEvent_default_instance_);
}
inline ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* FtraceEvent::mutable_binder_transaction_alloc_buf() {
  if (!has_binder_transaction_alloc_buf()) {
    clear_event();
    set_has_binder_transaction_alloc_buf();
    event_.binder_transaction_alloc_buf_ = CreateMaybeMessage< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  return event_.binder_transaction_alloc_buf_;
}

// optional .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
inline bool FtraceEvent::has_signal_deliver() const {
  return event_case() == kSignalDeliver;
}
inline void FtraceEvent::set_has_signal_deliver() {
  _oneof_case_[0] = kSignalDeliver;
}
inline ::perfetto::protos::SignalDeliverFtraceEvent* FtraceEvent::release_signal_deliver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.signal_deliver)
  if (has_signal_deliver()) {
    clear_has_event();
      ::perfetto::protos::SignalDeliverFtraceEvent* temp = event_.signal_deliver_;
    event_.signal_deliver_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SignalDeliverFtraceEvent& FtraceEvent::signal_deliver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.signal_deliver)
  return has_signal_deliver()
      ? *event_.signal_deliver_
      : *reinterpret_cast< ::perfetto::protos::SignalDeliverFtraceEvent*>(&::perfetto::protos::_SignalDeliverFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SignalDeliverFtraceEvent* FtraceEvent::mutable_signal_deliver() {
  if (!has_signal_deliver()) {
    clear_event();
    set_has_signal_deliver();
    event_.signal_deliver_ = CreateMaybeMessage< ::perfetto::protos::SignalDeliverFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.signal_deliver)
  return event_.signal_deliver_;
}

// optional .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
inline bool FtraceEvent::has_signal_generate() const {
  return event_case() == kSignalGenerate;
}
inline void FtraceEvent::set_has_signal_generate() {
  _oneof_case_[0] = kSignalGenerate;
}
inline ::perfetto::protos::SignalGenerateFtraceEvent* FtraceEvent::release_signal_generate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.signal_generate)
  if (has_signal_generate()) {
    clear_has_event();
      ::perfetto::protos::SignalGenerateFtraceEvent* temp = event_.signal_generate_;
    event_.signal_generate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SignalGenerateFtraceEvent& FtraceEvent::signal_generate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.signal_generate)
  return has_signal_generate()
      ? *event_.signal_generate_
      : *reinterpret_cast< ::perfetto::protos::SignalGenerateFtraceEvent*>(&::perfetto::protos::_SignalGenerateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SignalGenerateFtraceEvent* FtraceEvent::mutable_signal_generate() {
  if (!has_signal_generate()) {
    clear_event();
    set_has_signal_generate();
    event_.signal_generate_ = CreateMaybeMessage< ::perfetto::protos::SignalGenerateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.signal_generate)
  return event_.signal_generate_;
}

// optional .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
inline bool FtraceEvent::has_oom_score_adj_update() const {
  return event_case() == kOomScoreAdjUpdate;
}
inline void FtraceEvent::set_has_oom_score_adj_update() {
  _oneof_case_[0] = kOomScoreAdjUpdate;
}
inline ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* FtraceEvent::release_oom_score_adj_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.oom_score_adj_update)
  if (has_oom_score_adj_update()) {
    clear_has_event();
      ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* temp = event_.oom_score_adj_update_;
    event_.oom_score_adj_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& FtraceEvent::oom_score_adj_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.oom_score_adj_update)
  return has_oom_score_adj_update()
      ? *event_.oom_score_adj_update_
      : *reinterpret_cast< ::perfetto::protos::OomScoreAdjUpdateFtraceEvent*>(&::perfetto::protos::_OomScoreAdjUpdateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* FtraceEvent::mutable_oom_score_adj_update() {
  if (!has_oom_score_adj_update()) {
    clear_event();
    set_has_oom_score_adj_update();
    event_.oom_score_adj_update_ = CreateMaybeMessage< ::perfetto::protos::OomScoreAdjUpdateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.oom_score_adj_update)
  return event_.oom_score_adj_update_;
}

// optional .perfetto.protos.GenericFtraceEvent generic = 327;
inline bool FtraceEvent::has_generic() const {
  return event_case() == kGeneric;
}
inline void FtraceEvent::set_has_generic() {
  _oneof_case_[0] = kGeneric;
}
inline ::perfetto::protos::GenericFtraceEvent* FtraceEvent::release_generic() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.generic)
  if (has_generic()) {
    clear_has_event();
      ::perfetto::protos::GenericFtraceEvent* temp = event_.generic_;
    event_.generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GenericFtraceEvent& FtraceEvent::generic() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.generic)
  return has_generic()
      ? *event_.generic_
      : *reinterpret_cast< ::perfetto::protos::GenericFtraceEvent*>(&::perfetto::protos::_GenericFtraceEvent_default_instance_);
}
inline ::perfetto::protos::GenericFtraceEvent* FtraceEvent::mutable_generic() {
  if (!has_generic()) {
    clear_event();
    set_has_generic();
    event_.generic_ = CreateMaybeMessage< ::perfetto::protos::GenericFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.generic)
  return event_.generic_;
}

// optional .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
inline bool FtraceEvent::has_mm_event_record() const {
  return event_case() == kMmEventRecord;
}
inline void FtraceEvent::set_has_mm_event_record() {
  _oneof_case_[0] = kMmEventRecord;
}
inline ::perfetto::protos::MmEventRecordFtraceEvent* FtraceEvent::release_mm_event_record() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_event_record)
  if (has_mm_event_record()) {
    clear_has_event();
      ::perfetto::protos::MmEventRecordFtraceEvent* temp = event_.mm_event_record_;
    event_.mm_event_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmEventRecordFtraceEvent& FtraceEvent::mm_event_record() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_event_record)
  return has_mm_event_record()
      ? *event_.mm_event_record_
      : *reinterpret_cast< ::perfetto::protos::MmEventRecordFtraceEvent*>(&::perfetto::protos::_MmEventRecordFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MmEventRecordFtraceEvent* FtraceEvent::mutable_mm_event_record() {
  if (!has_mm_event_record()) {
    clear_event();
    set_has_mm_event_record();
    event_.mm_event_record_ = CreateMaybeMessage< ::perfetto::protos::MmEventRecordFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_event_record)
  return event_.mm_event_record_;
}

// optional .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
inline bool FtraceEvent::has_sys_enter() const {
  return event_case() == kSysEnter;
}
inline void FtraceEvent::set_has_sys_enter() {
  _oneof_case_[0] = kSysEnter;
}
inline ::perfetto::protos::SysEnterFtraceEvent* FtraceEvent::release_sys_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sys_enter)
  if (has_sys_enter()) {
    clear_has_event();
      ::perfetto::protos::SysEnterFtraceEvent* temp = event_.sys_enter_;
    event_.sys_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SysEnterFtraceEvent& FtraceEvent::sys_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sys_enter)
  return has_sys_enter()
      ? *event_.sys_enter_
      : *reinterpret_cast< ::perfetto::protos::SysEnterFtraceEvent*>(&::perfetto::protos::_SysEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SysEnterFtraceEvent* FtraceEvent::mutable_sys_enter() {
  if (!has_sys_enter()) {
    clear_event();
    set_has_sys_enter();
    event_.sys_enter_ = CreateMaybeMessage< ::perfetto::protos::SysEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sys_enter)
  return event_.sys_enter_;
}

// optional .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
inline bool FtraceEvent::has_sys_exit() const {
  return event_case() == kSysExit;
}
inline void FtraceEvent::set_has_sys_exit() {
  _oneof_case_[0] = kSysExit;
}
inline ::perfetto::protos::SysExitFtraceEvent* FtraceEvent::release_sys_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sys_exit)
  if (has_sys_exit()) {
    clear_has_event();
      ::perfetto::protos::SysExitFtraceEvent* temp = event_.sys_exit_;
    event_.sys_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SysExitFtraceEvent& FtraceEvent::sys_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sys_exit)
  return has_sys_exit()
      ? *event_.sys_exit_
      : *reinterpret_cast< ::perfetto::protos::SysExitFtraceEvent*>(&::perfetto::protos::_SysExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SysExitFtraceEvent* FtraceEvent::mutable_sys_exit() {
  if (!has_sys_exit()) {
    clear_event();
    set_has_sys_exit();
    event_.sys_exit_ = CreateMaybeMessage< ::perfetto::protos::SysExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sys_exit)
  return event_.sys_exit_;
}

// optional .perfetto.protos.ZeroFtraceEvent zero = 331;
inline bool FtraceEvent::has_zero() const {
  return event_case() == kZero;
}
inline void FtraceEvent::set_has_zero() {
  _oneof_case_[0] = kZero;
}
inline ::perfetto::protos::ZeroFtraceEvent* FtraceEvent::release_zero() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.zero)
  if (has_zero()) {
    clear_has_event();
      ::perfetto::protos::ZeroFtraceEvent* temp = event_.zero_;
    event_.zero_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ZeroFtraceEvent& FtraceEvent::zero() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.zero)
  return has_zero()
      ? *event_.zero_
      : *reinterpret_cast< ::perfetto::protos::ZeroFtraceEvent*>(&::perfetto::protos::_ZeroFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ZeroFtraceEvent* FtraceEvent::mutable_zero() {
  if (!has_zero()) {
    clear_event();
    set_has_zero();
    event_.zero_ = CreateMaybeMessage< ::perfetto::protos::ZeroFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.zero)
  return event_.zero_;
}

// optional .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
inline bool FtraceEvent::has_gpu_frequency() const {
  return event_case() == kGpuFrequency;
}
inline void FtraceEvent::set_has_gpu_frequency() {
  _oneof_case_[0] = kGpuFrequency;
}
inline ::perfetto::protos::GpuFrequencyFtraceEvent* FtraceEvent::release_gpu_frequency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.gpu_frequency)
  if (has_gpu_frequency()) {
    clear_has_event();
      ::perfetto::protos::GpuFrequencyFtraceEvent* temp = event_.gpu_frequency_;
    event_.gpu_frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuFrequencyFtraceEvent& FtraceEvent::gpu_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.gpu_frequency)
  return has_gpu_frequency()
      ? *event_.gpu_frequency_
      : *reinterpret_cast< ::perfetto::protos::GpuFrequencyFtraceEvent*>(&::perfetto::protos::_GpuFrequencyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::GpuFrequencyFtraceEvent* FtraceEvent::mutable_gpu_frequency() {
  if (!has_gpu_frequency()) {
    clear_event();
    set_has_gpu_frequency();
    event_.gpu_frequency_ = CreateMaybeMessage< ::perfetto::protos::GpuFrequencyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.gpu_frequency)
  return event_.gpu_frequency_;
}

// optional .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
inline bool FtraceEvent::has_sde_tracing_mark_write() const {
  return event_case() == kSdeTracingMarkWrite;
}
inline void FtraceEvent::set_has_sde_tracing_mark_write() {
  _oneof_case_[0] = kSdeTracingMarkWrite;
}
inline ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* FtraceEvent::release_sde_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  if (has_sde_tracing_mark_write()) {
    clear_has_event();
      ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* temp = event_.sde_tracing_mark_write_;
    event_.sde_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& FtraceEvent::sde_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  return has_sde_tracing_mark_write()
      ? *event_.sde_tracing_mark_write_
      : *reinterpret_cast< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent*>(&::perfetto::protos::_SdeTracingMarkWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* FtraceEvent::mutable_sde_tracing_mark_write() {
  if (!has_sde_tracing_mark_write()) {
    clear_event();
    set_has_sde_tracing_mark_write();
    event_.sde_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  return event_.sde_tracing_mark_write_;
}

// optional .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
inline bool FtraceEvent::has_mark_victim() const {
  return event_case() == kMarkVictim;
}
inline void FtraceEvent::set_has_mark_victim() {
  _oneof_case_[0] = kMarkVictim;
}
inline ::perfetto::protos::MarkVictimFtraceEvent* FtraceEvent::release_mark_victim() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mark_victim)
  if (has_mark_victim()) {
    clear_has_event();
      ::perfetto::protos::MarkVictimFtraceEvent* temp = event_.mark_victim_;
    event_.mark_victim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MarkVictimFtraceEvent& FtraceEvent::mark_victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mark_victim)
  return has_mark_victim()
      ? *event_.mark_victim_
      : *reinterpret_cast< ::perfetto::protos::MarkVictimFtraceEvent*>(&::perfetto::protos::_MarkVictimFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MarkVictimFtraceEvent* FtraceEvent::mutable_mark_victim() {
  if (!has_mark_victim()) {
    clear_event();
    set_has_mark_victim();
    event_.mark_victim_ = CreateMaybeMessage< ::perfetto::protos::MarkVictimFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mark_victim)
  return event_.mark_victim_;
}

// optional .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
inline bool FtraceEvent::has_ion_stat() const {
  return event_case() == kIonStat;
}
inline void FtraceEvent::set_has_ion_stat() {
  _oneof_case_[0] = kIonStat;
}
inline ::perfetto::protos::IonStatFtraceEvent* FtraceEvent::release_ion_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_stat)
  if (has_ion_stat()) {
    clear_has_event();
      ::perfetto::protos::IonStatFtraceEvent* temp = event_.ion_stat_;
    event_.ion_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonStatFtraceEvent& FtraceEvent::ion_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_stat)
  return has_ion_stat()
      ? *event_.ion_stat_
      : *reinterpret_cast< ::perfetto::protos::IonStatFtraceEvent*>(&::perfetto::protos::_IonStatFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonStatFtraceEvent* FtraceEvent::mutable_ion_stat() {
  if (!has_ion_stat()) {
    clear_event();
    set_has_ion_stat();
    event_.ion_stat_ = CreateMaybeMessage< ::perfetto::protos::IonStatFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_stat)
  return event_.ion_stat_;
}

// optional .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
inline bool FtraceEvent::has_ion_buffer_create() const {
  return event_case() == kIonBufferCreate;
}
inline void FtraceEvent::set_has_ion_buffer_create() {
  _oneof_case_[0] = kIonBufferCreate;
}
inline ::perfetto::protos::IonBufferCreateFtraceEvent* FtraceEvent::release_ion_buffer_create() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_buffer_create)
  if (has_ion_buffer_create()) {
    clear_has_event();
      ::perfetto::protos::IonBufferCreateFtraceEvent* temp = event_.ion_buffer_create_;
    event_.ion_buffer_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonBufferCreateFtraceEvent& FtraceEvent::ion_buffer_create() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_buffer_create)
  return has_ion_buffer_create()
      ? *event_.ion_buffer_create_
      : *reinterpret_cast< ::perfetto::protos::IonBufferCreateFtraceEvent*>(&::perfetto::protos::_IonBufferCreateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonBufferCreateFtraceEvent* FtraceEvent::mutable_ion_buffer_create() {
  if (!has_ion_buffer_create()) {
    clear_event();
    set_has_ion_buffer_create();
    event_.ion_buffer_create_ = CreateMaybeMessage< ::perfetto::protos::IonBufferCreateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_buffer_create)
  return event_.ion_buffer_create_;
}

// optional .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
inline bool FtraceEvent::has_ion_buffer_destroy() const {
  return event_case() == kIonBufferDestroy;
}
inline void FtraceEvent::set_has_ion_buffer_destroy() {
  _oneof_case_[0] = kIonBufferDestroy;
}
inline ::perfetto::protos::IonBufferDestroyFtraceEvent* FtraceEvent::release_ion_buffer_destroy() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  if (has_ion_buffer_destroy()) {
    clear_has_event();
      ::perfetto::protos::IonBufferDestroyFtraceEvent* temp = event_.ion_buffer_destroy_;
    event_.ion_buffer_destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonBufferDestroyFtraceEvent& FtraceEvent::ion_buffer_destroy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  return has_ion_buffer_destroy()
      ? *event_.ion_buffer_destroy_
      : *reinterpret_cast< ::perfetto::protos::IonBufferDestroyFtraceEvent*>(&::perfetto::protos::_IonBufferDestroyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::IonBufferDestroyFtraceEvent* FtraceEvent::mutable_ion_buffer_destroy() {
  if (!has_ion_buffer_destroy()) {
    clear_event();
    set_has_ion_buffer_destroy();
    event_.ion_buffer_destroy_ = CreateMaybeMessage< ::perfetto::protos::IonBufferDestroyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  return event_.ion_buffer_destroy_;
}

// optional .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
inline bool FtraceEvent::has_scm_call_start() const {
  return event_case() == kScmCallStart;
}
inline void FtraceEvent::set_has_scm_call_start() {
  _oneof_case_[0] = kScmCallStart;
}
inline ::perfetto::protos::ScmCallStartFtraceEvent* FtraceEvent::release_scm_call_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.scm_call_start)
  if (has_scm_call_start()) {
    clear_has_event();
      ::perfetto::protos::ScmCallStartFtraceEvent* temp = event_.scm_call_start_;
    event_.scm_call_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ScmCallStartFtraceEvent& FtraceEvent::scm_call_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.scm_call_start)
  return has_scm_call_start()
      ? *event_.scm_call_start_
      : *reinterpret_cast< ::perfetto::protos::ScmCallStartFtraceEvent*>(&::perfetto::protos::_ScmCallStartFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ScmCallStartFtraceEvent* FtraceEvent::mutable_scm_call_start() {
  if (!has_scm_call_start()) {
    clear_event();
    set_has_scm_call_start();
    event_.scm_call_start_ = CreateMaybeMessage< ::perfetto::protos::ScmCallStartFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.scm_call_start)
  return event_.scm_call_start_;
}

// optional .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
inline bool FtraceEvent::has_scm_call_end() const {
  return event_case() == kScmCallEnd;
}
inline void FtraceEvent::set_has_scm_call_end() {
  _oneof_case_[0] = kScmCallEnd;
}
inline ::perfetto::protos::ScmCallEndFtraceEvent* FtraceEvent::release_scm_call_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.scm_call_end)
  if (has_scm_call_end()) {
    clear_has_event();
      ::perfetto::protos::ScmCallEndFtraceEvent* temp = event_.scm_call_end_;
    event_.scm_call_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ScmCallEndFtraceEvent& FtraceEvent::scm_call_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.scm_call_end)
  return has_scm_call_end()
      ? *event_.scm_call_end_
      : *reinterpret_cast< ::perfetto::protos::ScmCallEndFtraceEvent*>(&::perfetto::protos::_ScmCallEndFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ScmCallEndFtraceEvent* FtraceEvent::mutable_scm_call_end() {
  if (!has_scm_call_end()) {
    clear_event();
    set_has_scm_call_end();
    event_.scm_call_end_ = CreateMaybeMessage< ::perfetto::protos::ScmCallEndFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.scm_call_end)
  return event_.scm_call_end_;
}

// optional .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
inline bool FtraceEvent::has_gpu_mem_total() const {
  return event_case() == kGpuMemTotal;
}
inline void FtraceEvent::set_has_gpu_mem_total() {
  _oneof_case_[0] = kGpuMemTotal;
}
inline ::perfetto::protos::GpuMemTotalFtraceEvent* FtraceEvent::release_gpu_mem_total() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.gpu_mem_total)
  if (has_gpu_mem_total()) {
    clear_has_event();
      ::perfetto::protos::GpuMemTotalFtraceEvent* temp = event_.gpu_mem_total_;
    event_.gpu_mem_total_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuMemTotalFtraceEvent& FtraceEvent::gpu_mem_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.gpu_mem_total)
  return has_gpu_mem_total()
      ? *event_.gpu_mem_total_
      : *reinterpret_cast< ::perfetto::protos::GpuMemTotalFtraceEvent*>(&::perfetto::protos::_GpuMemTotalFtraceEvent_default_instance_);
}
inline ::perfetto::protos::GpuMemTotalFtraceEvent* FtraceEvent::mutable_gpu_mem_total() {
  if (!has_gpu_mem_total()) {
    clear_event();
    set_has_gpu_mem_total();
    event_.gpu_mem_total_ = CreateMaybeMessage< ::perfetto::protos::GpuMemTotalFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.gpu_mem_total)
  return event_.gpu_mem_total_;
}

// optional .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
inline bool FtraceEvent::has_thermal_temperature() const {
  return event_case() == kThermalTemperature;
}
inline void FtraceEvent::set_has_thermal_temperature() {
  _oneof_case_[0] = kThermalTemperature;
}
inline ::perfetto::protos::ThermalTemperatureFtraceEvent* FtraceEvent::release_thermal_temperature() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.thermal_temperature)
  if (has_thermal_temperature()) {
    clear_has_event();
      ::perfetto::protos::ThermalTemperatureFtraceEvent* temp = event_.thermal_temperature_;
    event_.thermal_temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ThermalTemperatureFtraceEvent& FtraceEvent::thermal_temperature() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.thermal_temperature)
  return has_thermal_temperature()
      ? *event_.thermal_temperature_
      : *reinterpret_cast< ::perfetto::protos::ThermalTemperatureFtraceEvent*>(&::perfetto::protos::_ThermalTemperatureFtraceEvent_default_instance_);
}
inline ::perfetto::protos::ThermalTemperatureFtraceEvent* FtraceEvent::mutable_thermal_temperature() {
  if (!has_thermal_temperature()) {
    clear_event();
    set_has_thermal_temperature();
    event_.thermal_temperature_ = CreateMaybeMessage< ::perfetto::protos::ThermalTemperatureFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.thermal_temperature)
  return event_.thermal_temperature_;
}

// optional .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
inline bool FtraceEvent::has_cdev_update() const {
  return event_case() == kCdevUpdate;
}
inline void FtraceEvent::set_has_cdev_update() {
  _oneof_case_[0] = kCdevUpdate;
}
inline ::perfetto::protos::CdevUpdateFtraceEvent* FtraceEvent::release_cdev_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cdev_update)
  if (has_cdev_update()) {
    clear_has_event();
      ::perfetto::protos::CdevUpdateFtraceEvent* temp = event_.cdev_update_;
    event_.cdev_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CdevUpdateFtraceEvent& FtraceEvent::cdev_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cdev_update)
  return has_cdev_update()
      ? *event_.cdev_update_
      : *reinterpret_cast< ::perfetto::protos::CdevUpdateFtraceEvent*>(&::perfetto::protos::_CdevUpdateFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CdevUpdateFtraceEvent* FtraceEvent::mutable_cdev_update() {
  if (!has_cdev_update()) {
    clear_event();
    set_has_cdev_update();
    event_.cdev_update_ = CreateMaybeMessage< ::perfetto::protos::CdevUpdateFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cdev_update)
  return event_.cdev_update_;
}

// optional .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
inline bool FtraceEvent::has_cpuhp_exit() const {
  return event_case() == kCpuhpExit;
}
inline void FtraceEvent::set_has_cpuhp_exit() {
  _oneof_case_[0] = kCpuhpExit;
}
inline ::perfetto::protos::CpuhpExitFtraceEvent* FtraceEvent::release_cpuhp_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_exit)
  if (has_cpuhp_exit()) {
    clear_has_event();
      ::perfetto::protos::CpuhpExitFtraceEvent* temp = event_.cpuhp_exit_;
    event_.cpuhp_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpExitFtraceEvent& FtraceEvent::cpuhp_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_exit)
  return has_cpuhp_exit()
      ? *event_.cpuhp_exit_
      : *reinterpret_cast< ::perfetto::protos::CpuhpExitFtraceEvent*>(&::perfetto::protos::_CpuhpExitFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuhpExitFtraceEvent* FtraceEvent::mutable_cpuhp_exit() {
  if (!has_cpuhp_exit()) {
    clear_event();
    set_has_cpuhp_exit();
    event_.cpuhp_exit_ = CreateMaybeMessage< ::perfetto::protos::CpuhpExitFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_exit)
  return event_.cpuhp_exit_;
}

// optional .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
inline bool FtraceEvent::has_cpuhp_multi_enter() const {
  return event_case() == kCpuhpMultiEnter;
}
inline void FtraceEvent::set_has_cpuhp_multi_enter() {
  _oneof_case_[0] = kCpuhpMultiEnter;
}
inline ::perfetto::protos::CpuhpMultiEnterFtraceEvent* FtraceEvent::release_cpuhp_multi_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  if (has_cpuhp_multi_enter()) {
    clear_has_event();
      ::perfetto::protos::CpuhpMultiEnterFtraceEvent* temp = event_.cpuhp_multi_enter_;
    event_.cpuhp_multi_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& FtraceEvent::cpuhp_multi_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  return has_cpuhp_multi_enter()
      ? *event_.cpuhp_multi_enter_
      : *reinterpret_cast< ::perfetto::protos::CpuhpMultiEnterFtraceEvent*>(&::perfetto::protos::_CpuhpMultiEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuhpMultiEnterFtraceEvent* FtraceEvent::mutable_cpuhp_multi_enter() {
  if (!has_cpuhp_multi_enter()) {
    clear_event();
    set_has_cpuhp_multi_enter();
    event_.cpuhp_multi_enter_ = CreateMaybeMessage< ::perfetto::protos::CpuhpMultiEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  return event_.cpuhp_multi_enter_;
}

// optional .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
inline bool FtraceEvent::has_cpuhp_enter() const {
  return event_case() == kCpuhpEnter;
}
inline void FtraceEvent::set_has_cpuhp_enter() {
  _oneof_case_[0] = kCpuhpEnter;
}
inline ::perfetto::protos::CpuhpEnterFtraceEvent* FtraceEvent::release_cpuhp_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_enter)
  if (has_cpuhp_enter()) {
    clear_has_event();
      ::perfetto::protos::CpuhpEnterFtraceEvent* temp = event_.cpuhp_enter_;
    event_.cpuhp_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpEnterFtraceEvent& FtraceEvent::cpuhp_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_enter)
  return has_cpuhp_enter()
      ? *event_.cpuhp_enter_
      : *reinterpret_cast< ::perfetto::protos::CpuhpEnterFtraceEvent*>(&::perfetto::protos::_CpuhpEnterFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuhpEnterFtraceEvent* FtraceEvent::mutable_cpuhp_enter() {
  if (!has_cpuhp_enter()) {
    clear_event();
    set_has_cpuhp_enter();
    event_.cpuhp_enter_ = CreateMaybeMessage< ::perfetto::protos::CpuhpEnterFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_enter)
  return event_.cpuhp_enter_;
}

// optional .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
inline bool FtraceEvent::has_cpuhp_latency() const {
  return event_case() == kCpuhpLatency;
}
inline void FtraceEvent::set_has_cpuhp_latency() {
  _oneof_case_[0] = kCpuhpLatency;
}
inline ::perfetto::protos::CpuhpLatencyFtraceEvent* FtraceEvent::release_cpuhp_latency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_latency)
  if (has_cpuhp_latency()) {
    clear_has_event();
      ::perfetto::protos::CpuhpLatencyFtraceEvent* temp = event_.cpuhp_latency_;
    event_.cpuhp_latency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpLatencyFtraceEvent& FtraceEvent::cpuhp_latency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_latency)
  return has_cpuhp_latency()
      ? *event_.cpuhp_latency_
      : *reinterpret_cast< ::perfetto::protos::CpuhpLatencyFtraceEvent*>(&::perfetto::protos::_CpuhpLatencyFtraceEvent_default_instance_);
}
inline ::perfetto::protos::CpuhpLatencyFtraceEvent* FtraceEvent::mutable_cpuhp_latency() {
  if (!has_cpuhp_latency()) {
    clear_event();
    set_has_cpuhp_latency();
    event_.cpuhp_latency_ = CreateMaybeMessage< ::perfetto::protos::CpuhpLatencyFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_latency)
  return event_.cpuhp_latency_;
}

// optional .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
inline bool FtraceEvent::has_fastrpc_dma_stat() const {
  return event_case() == kFastrpcDmaStat;
}
inline void FtraceEvent::set_has_fastrpc_dma_stat() {
  _oneof_case_[0] = kFastrpcDmaStat;
}
inline ::perfetto::protos::FastrpcDmaStatFtraceEvent* FtraceEvent::release_fastrpc_dma_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  if (has_fastrpc_dma_stat()) {
    clear_has_event();
      ::perfetto::protos::FastrpcDmaStatFtraceEvent* temp = event_.fastrpc_dma_stat_;
    event_.fastrpc_dma_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FastrpcDmaStatFtraceEvent& FtraceEvent::fastrpc_dma_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  return has_fastrpc_dma_stat()
      ? *event_.fastrpc_dma_stat_
      : *reinterpret_cast< ::perfetto::protos::FastrpcDmaStatFtraceEvent*>(&::perfetto::protos::_FastrpcDmaStatFtraceEvent_default_instance_);
}
inline ::perfetto::protos::FastrpcDmaStatFtraceEvent* FtraceEvent::mutable_fastrpc_dma_stat() {
  if (!has_fastrpc_dma_stat()) {
    clear_event();
    set_has_fastrpc_dma_stat();
    event_.fastrpc_dma_stat_ = CreateMaybeMessage< ::perfetto::protos::FastrpcDmaStatFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  return event_.fastrpc_dma_stat_;
}

// optional .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
inline bool FtraceEvent::has_dpu_tracing_mark_write() const {
  return event_case() == kDpuTracingMarkWrite;
}
inline void FtraceEvent::set_has_dpu_tracing_mark_write() {
  _oneof_case_[0] = kDpuTracingMarkWrite;
}
inline ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* FtraceEvent::release_dpu_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  if (has_dpu_tracing_mark_write()) {
    clear_has_event();
      ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* temp = event_.dpu_tracing_mark_write_;
    event_.dpu_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& FtraceEvent::dpu_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  return has_dpu_tracing_mark_write()
      ? *event_.dpu_tracing_mark_write_
      : *reinterpret_cast< ::perfetto::protos::DpuTracingMarkWriteFtraceEvent*>(&::perfetto::protos::_DpuTracingMarkWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* FtraceEvent::mutable_dpu_tracing_mark_write() {
  if (!has_dpu_tracing_mark_write()) {
    clear_event();
    set_has_dpu_tracing_mark_write();
    event_.dpu_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::DpuTracingMarkWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  return event_.dpu_tracing_mark_write_;
}

// optional .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
inline bool FtraceEvent::has_g2d_tracing_mark_write() const {
  return event_case() == kG2DTracingMarkWrite;
}
inline void FtraceEvent::set_has_g2d_tracing_mark_write() {
  _oneof_case_[0] = kG2DTracingMarkWrite;
}
inline ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* FtraceEvent::release_g2d_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  if (has_g2d_tracing_mark_write()) {
    clear_has_event();
      ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* temp = event_.g2d_tracing_mark_write_;
    event_.g2d_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& FtraceEvent::g2d_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  return has_g2d_tracing_mark_write()
      ? *event_.g2d_tracing_mark_write_
      : *reinterpret_cast< ::perfetto::protos::G2dTracingMarkWriteFtraceEvent*>(&::perfetto::protos::_G2dTracingMarkWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* FtraceEvent::mutable_g2d_tracing_mark_write() {
  if (!has_g2d_tracing_mark_write()) {
    clear_event();
    set_has_g2d_tracing_mark_write();
    event_.g2d_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::G2dTracingMarkWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  return event_.g2d_tracing_mark_write_;
}

// optional .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
inline bool FtraceEvent::has_mali_tracing_mark_write() const {
  return event_case() == kMaliTracingMarkWrite;
}
inline void FtraceEvent::set_has_mali_tracing_mark_write() {
  _oneof_case_[0] = kMaliTracingMarkWrite;
}
inline ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* FtraceEvent::release_mali_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  if (has_mali_tracing_mark_write()) {
    clear_has_event();
      ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* temp = event_.mali_tracing_mark_write_;
    event_.mali_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& FtraceEvent::mali_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  return has_mali_tracing_mark_write()
      ? *event_.mali_tracing_mark_write_
      : *reinterpret_cast< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent*>(&::perfetto::protos::_MaliTracingMarkWriteFtraceEvent_default_instance_);
}
inline ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* FtraceEvent::mutable_mali_tracing_mark_write() {
  if (!has_mali_tracing_mark_write()) {
    clear_event();
    set_has_mali_tracing_mark_write();
    event_.mali_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  return event_.mali_tracing_mark_write_;
}

inline bool FtraceEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void FtraceEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline FtraceEvent::EventCase FtraceEvent::event_case() const {
  return FtraceEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto
