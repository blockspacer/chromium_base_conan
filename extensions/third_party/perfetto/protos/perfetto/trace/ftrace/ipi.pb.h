// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ipi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class IpiEntryFtraceEvent;
class IpiEntryFtraceEventDefaultTypeInternal;
extern IpiEntryFtraceEventDefaultTypeInternal _IpiEntryFtraceEvent_default_instance_;
class IpiExitFtraceEvent;
class IpiExitFtraceEventDefaultTypeInternal;
extern IpiExitFtraceEventDefaultTypeInternal _IpiExitFtraceEvent_default_instance_;
class IpiRaiseFtraceEvent;
class IpiRaiseFtraceEventDefaultTypeInternal;
extern IpiRaiseFtraceEventDefaultTypeInternal _IpiRaiseFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::IpiEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IpiEntryFtraceEvent>(Arena*);
template<> ::perfetto::protos::IpiExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IpiExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::IpiRaiseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IpiRaiseFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class IpiEntryFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.IpiEntryFtraceEvent) */ {
 public:
  IpiEntryFtraceEvent();
  virtual ~IpiEntryFtraceEvent();

  IpiEntryFtraceEvent(const IpiEntryFtraceEvent& from);
  IpiEntryFtraceEvent(IpiEntryFtraceEvent&& from) noexcept
    : IpiEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IpiEntryFtraceEvent& operator=(const IpiEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpiEntryFtraceEvent& operator=(IpiEntryFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IpiEntryFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpiEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IpiEntryFtraceEvent*>(
               &_IpiEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IpiEntryFtraceEvent& a, IpiEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IpiEntryFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpiEntryFtraceEvent* New() const final {
    return CreateMaybeMessage<IpiEntryFtraceEvent>(nullptr);
  }

  IpiEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpiEntryFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IpiEntryFtraceEvent& from);
  void MergeFrom(const IpiEntryFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpiEntryFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.IpiEntryFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:perfetto.protos.IpiEntryFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto;
};
// -------------------------------------------------------------------

class IpiExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.IpiExitFtraceEvent) */ {
 public:
  IpiExitFtraceEvent();
  virtual ~IpiExitFtraceEvent();

  IpiExitFtraceEvent(const IpiExitFtraceEvent& from);
  IpiExitFtraceEvent(IpiExitFtraceEvent&& from) noexcept
    : IpiExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IpiExitFtraceEvent& operator=(const IpiExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpiExitFtraceEvent& operator=(IpiExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IpiExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpiExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IpiExitFtraceEvent*>(
               &_IpiExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IpiExitFtraceEvent& a, IpiExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IpiExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpiExitFtraceEvent* New() const final {
    return CreateMaybeMessage<IpiExitFtraceEvent>(nullptr);
  }

  IpiExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpiExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IpiExitFtraceEvent& from);
  void MergeFrom(const IpiExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpiExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.IpiExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:perfetto.protos.IpiExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto;
};
// -------------------------------------------------------------------

class IpiRaiseFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.IpiRaiseFtraceEvent) */ {
 public:
  IpiRaiseFtraceEvent();
  virtual ~IpiRaiseFtraceEvent();

  IpiRaiseFtraceEvent(const IpiRaiseFtraceEvent& from);
  IpiRaiseFtraceEvent(IpiRaiseFtraceEvent&& from) noexcept
    : IpiRaiseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IpiRaiseFtraceEvent& operator=(const IpiRaiseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpiRaiseFtraceEvent& operator=(IpiRaiseFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IpiRaiseFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpiRaiseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IpiRaiseFtraceEvent*>(
               &_IpiRaiseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IpiRaiseFtraceEvent& a, IpiRaiseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IpiRaiseFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpiRaiseFtraceEvent* New() const final {
    return CreateMaybeMessage<IpiRaiseFtraceEvent>(nullptr);
  }

  IpiRaiseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpiRaiseFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IpiRaiseFtraceEvent& from);
  void MergeFrom(const IpiRaiseFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpiRaiseFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.IpiRaiseFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kTargetCpusFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // optional uint32 target_cpus = 1;
  bool has_target_cpus() const;
  void clear_target_cpus();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_cpus() const;
  void set_target_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.IpiRaiseFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_cpus_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpiEntryFtraceEvent

// optional string reason = 1;
inline bool IpiEntryFtraceEvent::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpiEntryFtraceEvent::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpiEntryFtraceEvent::reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IpiEntryFtraceEvent.reason)
  return reason_.GetNoArena();
}
inline void IpiEntryFtraceEvent::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IpiEntryFtraceEvent.reason)
}
inline void IpiEntryFtraceEvent::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.IpiEntryFtraceEvent.reason)
}
inline void IpiEntryFtraceEvent::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.IpiEntryFtraceEvent.reason)
}
inline void IpiEntryFtraceEvent::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.IpiEntryFtraceEvent.reason)
}
inline std::string* IpiEntryFtraceEvent::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.IpiEntryFtraceEvent.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpiEntryFtraceEvent::release_reason() {
  // @@protoc_insertion_point(field_release:perfetto.protos.IpiEntryFtraceEvent.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpiEntryFtraceEvent::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.IpiEntryFtraceEvent.reason)
}

// -------------------------------------------------------------------

// IpiExitFtraceEvent

// optional string reason = 1;
inline bool IpiExitFtraceEvent::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpiExitFtraceEvent::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpiExitFtraceEvent::reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IpiExitFtraceEvent.reason)
  return reason_.GetNoArena();
}
inline void IpiExitFtraceEvent::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IpiExitFtraceEvent.reason)
}
inline void IpiExitFtraceEvent::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.IpiExitFtraceEvent.reason)
}
inline void IpiExitFtraceEvent::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.IpiExitFtraceEvent.reason)
}
inline void IpiExitFtraceEvent::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.IpiExitFtraceEvent.reason)
}
inline std::string* IpiExitFtraceEvent::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.IpiExitFtraceEvent.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpiExitFtraceEvent::release_reason() {
  // @@protoc_insertion_point(field_release:perfetto.protos.IpiExitFtraceEvent.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpiExitFtraceEvent::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.IpiExitFtraceEvent.reason)
}

// -------------------------------------------------------------------

// IpiRaiseFtraceEvent

// optional uint32 target_cpus = 1;
inline bool IpiRaiseFtraceEvent::has_target_cpus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpiRaiseFtraceEvent::clear_target_cpus() {
  target_cpus_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpiRaiseFtraceEvent::target_cpus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IpiRaiseFtraceEvent.target_cpus)
  return target_cpus_;
}
inline void IpiRaiseFtraceEvent::set_target_cpus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  target_cpus_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.IpiRaiseFtraceEvent.target_cpus)
}

// optional string reason = 2;
inline bool IpiRaiseFtraceEvent::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpiRaiseFtraceEvent::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpiRaiseFtraceEvent::reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IpiRaiseFtraceEvent.reason)
  return reason_.GetNoArena();
}
inline void IpiRaiseFtraceEvent::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IpiRaiseFtraceEvent.reason)
}
inline void IpiRaiseFtraceEvent::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.IpiRaiseFtraceEvent.reason)
}
inline void IpiRaiseFtraceEvent::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.IpiRaiseFtraceEvent.reason)
}
inline void IpiRaiseFtraceEvent::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.IpiRaiseFtraceEvent.reason)
}
inline std::string* IpiRaiseFtraceEvent::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.IpiRaiseFtraceEvent.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpiRaiseFtraceEvent::release_reason() {
  // @@protoc_insertion_point(field_release:perfetto.protos.IpiRaiseFtraceEvent.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpiRaiseFtraceEvent::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.IpiRaiseFtraceEvent.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto
