#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/compaction.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent() = default;
MmCompactionWakeupKcompactdFtraceEvent::~MmCompactionWakeupKcompactdFtraceEvent() = default;
MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent(const MmCompactionWakeupKcompactdFtraceEvent&) = default;
MmCompactionWakeupKcompactdFtraceEvent& MmCompactionWakeupKcompactdFtraceEvent::operator=(const MmCompactionWakeupKcompactdFtraceEvent&) = default;
MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent(MmCompactionWakeupKcompactdFtraceEvent&&) noexcept = default;
MmCompactionWakeupKcompactdFtraceEvent& MmCompactionWakeupKcompactdFtraceEvent::operator=(MmCompactionWakeupKcompactdFtraceEvent&&) = default;

bool MmCompactionWakeupKcompactdFtraceEvent::operator==(const MmCompactionWakeupKcompactdFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && order_ == other.order_
   && classzone_idx_ == other.classzone_idx_;
}

bool MmCompactionWakeupKcompactdFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* order */:
        field.get(&order_);
        break;
      case 3 /* classzone_idx */:
        field.get(&classzone_idx_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionWakeupKcompactdFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionWakeupKcompactdFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionWakeupKcompactdFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: order
  if (_has_field_[2]) {
    msg->AppendVarInt(2, order_);
  }

  // Field 3: classzone_idx
  if (_has_field_[3]) {
    msg->AppendVarInt(3, classzone_idx_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent() = default;
MmCompactionTryToCompactPagesFtraceEvent::~MmCompactionTryToCompactPagesFtraceEvent() = default;
MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent(const MmCompactionTryToCompactPagesFtraceEvent&) = default;
MmCompactionTryToCompactPagesFtraceEvent& MmCompactionTryToCompactPagesFtraceEvent::operator=(const MmCompactionTryToCompactPagesFtraceEvent&) = default;
MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent(MmCompactionTryToCompactPagesFtraceEvent&&) noexcept = default;
MmCompactionTryToCompactPagesFtraceEvent& MmCompactionTryToCompactPagesFtraceEvent::operator=(MmCompactionTryToCompactPagesFtraceEvent&&) = default;

bool MmCompactionTryToCompactPagesFtraceEvent::operator==(const MmCompactionTryToCompactPagesFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && order_ == other.order_
   && gfp_mask_ == other.gfp_mask_
   && mode_ == other.mode_;
}

bool MmCompactionTryToCompactPagesFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* order */:
        field.get(&order_);
        break;
      case 2 /* gfp_mask */:
        field.get(&gfp_mask_);
        break;
      case 3 /* mode */:
        field.get(&mode_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionTryToCompactPagesFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionTryToCompactPagesFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionTryToCompactPagesFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: order
  if (_has_field_[1]) {
    msg->AppendVarInt(1, order_);
  }

  // Field 2: gfp_mask
  if (_has_field_[2]) {
    msg->AppendVarInt(2, gfp_mask_);
  }

  // Field 3: mode
  if (_has_field_[3]) {
    msg->AppendVarInt(3, mode_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent() = default;
MmCompactionSuitableFtraceEvent::~MmCompactionSuitableFtraceEvent() = default;
MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent(const MmCompactionSuitableFtraceEvent&) = default;
MmCompactionSuitableFtraceEvent& MmCompactionSuitableFtraceEvent::operator=(const MmCompactionSuitableFtraceEvent&) = default;
MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent(MmCompactionSuitableFtraceEvent&&) noexcept = default;
MmCompactionSuitableFtraceEvent& MmCompactionSuitableFtraceEvent::operator=(MmCompactionSuitableFtraceEvent&&) = default;

bool MmCompactionSuitableFtraceEvent::operator==(const MmCompactionSuitableFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && idx_ == other.idx_
   && order_ == other.order_
   && ret_ == other.ret_;
}

bool MmCompactionSuitableFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* idx */:
        field.get(&idx_);
        break;
      case 3 /* order */:
        field.get(&order_);
        break;
      case 4 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionSuitableFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionSuitableFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionSuitableFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: idx
  if (_has_field_[2]) {
    msg->AppendVarInt(2, idx_);
  }

  // Field 3: order
  if (_has_field_[3]) {
    msg->AppendVarInt(3, order_);
  }

  // Field 4: ret
  if (_has_field_[4]) {
    msg->AppendVarInt(4, ret_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent() = default;
MmCompactionMigratepagesFtraceEvent::~MmCompactionMigratepagesFtraceEvent() = default;
MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent(const MmCompactionMigratepagesFtraceEvent&) = default;
MmCompactionMigratepagesFtraceEvent& MmCompactionMigratepagesFtraceEvent::operator=(const MmCompactionMigratepagesFtraceEvent&) = default;
MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent(MmCompactionMigratepagesFtraceEvent&&) noexcept = default;
MmCompactionMigratepagesFtraceEvent& MmCompactionMigratepagesFtraceEvent::operator=(MmCompactionMigratepagesFtraceEvent&&) = default;

bool MmCompactionMigratepagesFtraceEvent::operator==(const MmCompactionMigratepagesFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nr_migrated_ == other.nr_migrated_
   && nr_failed_ == other.nr_failed_;
}

bool MmCompactionMigratepagesFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nr_migrated */:
        field.get(&nr_migrated_);
        break;
      case 2 /* nr_failed */:
        field.get(&nr_failed_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionMigratepagesFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionMigratepagesFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionMigratepagesFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nr_migrated
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nr_migrated_);
  }

  // Field 2: nr_failed
  if (_has_field_[2]) {
    msg->AppendVarInt(2, nr_failed_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent() = default;
MmCompactionKcompactdWakeFtraceEvent::~MmCompactionKcompactdWakeFtraceEvent() = default;
MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent(const MmCompactionKcompactdWakeFtraceEvent&) = default;
MmCompactionKcompactdWakeFtraceEvent& MmCompactionKcompactdWakeFtraceEvent::operator=(const MmCompactionKcompactdWakeFtraceEvent&) = default;
MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent(MmCompactionKcompactdWakeFtraceEvent&&) noexcept = default;
MmCompactionKcompactdWakeFtraceEvent& MmCompactionKcompactdWakeFtraceEvent::operator=(MmCompactionKcompactdWakeFtraceEvent&&) = default;

bool MmCompactionKcompactdWakeFtraceEvent::operator==(const MmCompactionKcompactdWakeFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && order_ == other.order_
   && classzone_idx_ == other.classzone_idx_;
}

bool MmCompactionKcompactdWakeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* order */:
        field.get(&order_);
        break;
      case 3 /* classzone_idx */:
        field.get(&classzone_idx_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionKcompactdWakeFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionKcompactdWakeFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionKcompactdWakeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: order
  if (_has_field_[2]) {
    msg->AppendVarInt(2, order_);
  }

  // Field 3: classzone_idx
  if (_has_field_[3]) {
    msg->AppendVarInt(3, classzone_idx_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent() = default;
MmCompactionKcompactdSleepFtraceEvent::~MmCompactionKcompactdSleepFtraceEvent() = default;
MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent(const MmCompactionKcompactdSleepFtraceEvent&) = default;
MmCompactionKcompactdSleepFtraceEvent& MmCompactionKcompactdSleepFtraceEvent::operator=(const MmCompactionKcompactdSleepFtraceEvent&) = default;
MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent(MmCompactionKcompactdSleepFtraceEvent&&) noexcept = default;
MmCompactionKcompactdSleepFtraceEvent& MmCompactionKcompactdSleepFtraceEvent::operator=(MmCompactionKcompactdSleepFtraceEvent&&) = default;

bool MmCompactionKcompactdSleepFtraceEvent::operator==(const MmCompactionKcompactdSleepFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_;
}

bool MmCompactionKcompactdSleepFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionKcompactdSleepFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionKcompactdSleepFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionKcompactdSleepFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent() = default;
MmCompactionIsolateMigratepagesFtraceEvent::~MmCompactionIsolateMigratepagesFtraceEvent() = default;
MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent(const MmCompactionIsolateMigratepagesFtraceEvent&) = default;
MmCompactionIsolateMigratepagesFtraceEvent& MmCompactionIsolateMigratepagesFtraceEvent::operator=(const MmCompactionIsolateMigratepagesFtraceEvent&) = default;
MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent(MmCompactionIsolateMigratepagesFtraceEvent&&) noexcept = default;
MmCompactionIsolateMigratepagesFtraceEvent& MmCompactionIsolateMigratepagesFtraceEvent::operator=(MmCompactionIsolateMigratepagesFtraceEvent&&) = default;

bool MmCompactionIsolateMigratepagesFtraceEvent::operator==(const MmCompactionIsolateMigratepagesFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && start_pfn_ == other.start_pfn_
   && end_pfn_ == other.end_pfn_
   && nr_scanned_ == other.nr_scanned_
   && nr_taken_ == other.nr_taken_;
}

bool MmCompactionIsolateMigratepagesFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* start_pfn */:
        field.get(&start_pfn_);
        break;
      case 2 /* end_pfn */:
        field.get(&end_pfn_);
        break;
      case 3 /* nr_scanned */:
        field.get(&nr_scanned_);
        break;
      case 4 /* nr_taken */:
        field.get(&nr_taken_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionIsolateMigratepagesFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionIsolateMigratepagesFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionIsolateMigratepagesFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: start_pfn
  if (_has_field_[1]) {
    msg->AppendVarInt(1, start_pfn_);
  }

  // Field 2: end_pfn
  if (_has_field_[2]) {
    msg->AppendVarInt(2, end_pfn_);
  }

  // Field 3: nr_scanned
  if (_has_field_[3]) {
    msg->AppendVarInt(3, nr_scanned_);
  }

  // Field 4: nr_taken
  if (_has_field_[4]) {
    msg->AppendVarInt(4, nr_taken_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent() = default;
MmCompactionIsolateFreepagesFtraceEvent::~MmCompactionIsolateFreepagesFtraceEvent() = default;
MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent(const MmCompactionIsolateFreepagesFtraceEvent&) = default;
MmCompactionIsolateFreepagesFtraceEvent& MmCompactionIsolateFreepagesFtraceEvent::operator=(const MmCompactionIsolateFreepagesFtraceEvent&) = default;
MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent(MmCompactionIsolateFreepagesFtraceEvent&&) noexcept = default;
MmCompactionIsolateFreepagesFtraceEvent& MmCompactionIsolateFreepagesFtraceEvent::operator=(MmCompactionIsolateFreepagesFtraceEvent&&) = default;

bool MmCompactionIsolateFreepagesFtraceEvent::operator==(const MmCompactionIsolateFreepagesFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && start_pfn_ == other.start_pfn_
   && end_pfn_ == other.end_pfn_
   && nr_scanned_ == other.nr_scanned_
   && nr_taken_ == other.nr_taken_;
}

bool MmCompactionIsolateFreepagesFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* start_pfn */:
        field.get(&start_pfn_);
        break;
      case 2 /* end_pfn */:
        field.get(&end_pfn_);
        break;
      case 3 /* nr_scanned */:
        field.get(&nr_scanned_);
        break;
      case 4 /* nr_taken */:
        field.get(&nr_taken_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionIsolateFreepagesFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionIsolateFreepagesFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionIsolateFreepagesFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: start_pfn
  if (_has_field_[1]) {
    msg->AppendVarInt(1, start_pfn_);
  }

  // Field 2: end_pfn
  if (_has_field_[2]) {
    msg->AppendVarInt(2, end_pfn_);
  }

  // Field 3: nr_scanned
  if (_has_field_[3]) {
    msg->AppendVarInt(3, nr_scanned_);
  }

  // Field 4: nr_taken
  if (_has_field_[4]) {
    msg->AppendVarInt(4, nr_taken_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent() = default;
MmCompactionFinishedFtraceEvent::~MmCompactionFinishedFtraceEvent() = default;
MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent(const MmCompactionFinishedFtraceEvent&) = default;
MmCompactionFinishedFtraceEvent& MmCompactionFinishedFtraceEvent::operator=(const MmCompactionFinishedFtraceEvent&) = default;
MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent(MmCompactionFinishedFtraceEvent&&) noexcept = default;
MmCompactionFinishedFtraceEvent& MmCompactionFinishedFtraceEvent::operator=(MmCompactionFinishedFtraceEvent&&) = default;

bool MmCompactionFinishedFtraceEvent::operator==(const MmCompactionFinishedFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && idx_ == other.idx_
   && order_ == other.order_
   && ret_ == other.ret_;
}

bool MmCompactionFinishedFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* idx */:
        field.get(&idx_);
        break;
      case 3 /* order */:
        field.get(&order_);
        break;
      case 4 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionFinishedFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionFinishedFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionFinishedFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: idx
  if (_has_field_[2]) {
    msg->AppendVarInt(2, idx_);
  }

  // Field 3: order
  if (_has_field_[3]) {
    msg->AppendVarInt(3, order_);
  }

  // Field 4: ret
  if (_has_field_[4]) {
    msg->AppendVarInt(4, ret_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent() = default;
MmCompactionEndFtraceEvent::~MmCompactionEndFtraceEvent() = default;
MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent(const MmCompactionEndFtraceEvent&) = default;
MmCompactionEndFtraceEvent& MmCompactionEndFtraceEvent::operator=(const MmCompactionEndFtraceEvent&) = default;
MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent(MmCompactionEndFtraceEvent&&) noexcept = default;
MmCompactionEndFtraceEvent& MmCompactionEndFtraceEvent::operator=(MmCompactionEndFtraceEvent&&) = default;

bool MmCompactionEndFtraceEvent::operator==(const MmCompactionEndFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && zone_start_ == other.zone_start_
   && migrate_pfn_ == other.migrate_pfn_
   && free_pfn_ == other.free_pfn_
   && zone_end_ == other.zone_end_
   && sync_ == other.sync_
   && status_ == other.status_;
}

bool MmCompactionEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* zone_start */:
        field.get(&zone_start_);
        break;
      case 2 /* migrate_pfn */:
        field.get(&migrate_pfn_);
        break;
      case 3 /* free_pfn */:
        field.get(&free_pfn_);
        break;
      case 4 /* zone_end */:
        field.get(&zone_end_);
        break;
      case 5 /* sync */:
        field.get(&sync_);
        break;
      case 6 /* status */:
        field.get(&status_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionEndFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionEndFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: zone_start
  if (_has_field_[1]) {
    msg->AppendVarInt(1, zone_start_);
  }

  // Field 2: migrate_pfn
  if (_has_field_[2]) {
    msg->AppendVarInt(2, migrate_pfn_);
  }

  // Field 3: free_pfn
  if (_has_field_[3]) {
    msg->AppendVarInt(3, free_pfn_);
  }

  // Field 4: zone_end
  if (_has_field_[4]) {
    msg->AppendVarInt(4, zone_end_);
  }

  // Field 5: sync
  if (_has_field_[5]) {
    msg->AppendVarInt(5, sync_);
  }

  // Field 6: status
  if (_has_field_[6]) {
    msg->AppendVarInt(6, status_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent() = default;
MmCompactionDeferResetFtraceEvent::~MmCompactionDeferResetFtraceEvent() = default;
MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent(const MmCompactionDeferResetFtraceEvent&) = default;
MmCompactionDeferResetFtraceEvent& MmCompactionDeferResetFtraceEvent::operator=(const MmCompactionDeferResetFtraceEvent&) = default;
MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent(MmCompactionDeferResetFtraceEvent&&) noexcept = default;
MmCompactionDeferResetFtraceEvent& MmCompactionDeferResetFtraceEvent::operator=(MmCompactionDeferResetFtraceEvent&&) = default;

bool MmCompactionDeferResetFtraceEvent::operator==(const MmCompactionDeferResetFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && idx_ == other.idx_
   && order_ == other.order_
   && considered_ == other.considered_
   && defer_shift_ == other.defer_shift_
   && order_failed_ == other.order_failed_;
}

bool MmCompactionDeferResetFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* idx */:
        field.get(&idx_);
        break;
      case 3 /* order */:
        field.get(&order_);
        break;
      case 4 /* considered */:
        field.get(&considered_);
        break;
      case 5 /* defer_shift */:
        field.get(&defer_shift_);
        break;
      case 6 /* order_failed */:
        field.get(&order_failed_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionDeferResetFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionDeferResetFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionDeferResetFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: idx
  if (_has_field_[2]) {
    msg->AppendVarInt(2, idx_);
  }

  // Field 3: order
  if (_has_field_[3]) {
    msg->AppendVarInt(3, order_);
  }

  // Field 4: considered
  if (_has_field_[4]) {
    msg->AppendVarInt(4, considered_);
  }

  // Field 5: defer_shift
  if (_has_field_[5]) {
    msg->AppendVarInt(5, defer_shift_);
  }

  // Field 6: order_failed
  if (_has_field_[6]) {
    msg->AppendVarInt(6, order_failed_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent() = default;
MmCompactionDeferredFtraceEvent::~MmCompactionDeferredFtraceEvent() = default;
MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent(const MmCompactionDeferredFtraceEvent&) = default;
MmCompactionDeferredFtraceEvent& MmCompactionDeferredFtraceEvent::operator=(const MmCompactionDeferredFtraceEvent&) = default;
MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent(MmCompactionDeferredFtraceEvent&&) noexcept = default;
MmCompactionDeferredFtraceEvent& MmCompactionDeferredFtraceEvent::operator=(MmCompactionDeferredFtraceEvent&&) = default;

bool MmCompactionDeferredFtraceEvent::operator==(const MmCompactionDeferredFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && idx_ == other.idx_
   && order_ == other.order_
   && considered_ == other.considered_
   && defer_shift_ == other.defer_shift_
   && order_failed_ == other.order_failed_;
}

bool MmCompactionDeferredFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* idx */:
        field.get(&idx_);
        break;
      case 3 /* order */:
        field.get(&order_);
        break;
      case 4 /* considered */:
        field.get(&considered_);
        break;
      case 5 /* defer_shift */:
        field.get(&defer_shift_);
        break;
      case 6 /* order_failed */:
        field.get(&order_failed_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionDeferredFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionDeferredFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionDeferredFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: idx
  if (_has_field_[2]) {
    msg->AppendVarInt(2, idx_);
  }

  // Field 3: order
  if (_has_field_[3]) {
    msg->AppendVarInt(3, order_);
  }

  // Field 4: considered
  if (_has_field_[4]) {
    msg->AppendVarInt(4, considered_);
  }

  // Field 5: defer_shift
  if (_has_field_[5]) {
    msg->AppendVarInt(5, defer_shift_);
  }

  // Field 6: order_failed
  if (_has_field_[6]) {
    msg->AppendVarInt(6, order_failed_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent() = default;
MmCompactionDeferCompactionFtraceEvent::~MmCompactionDeferCompactionFtraceEvent() = default;
MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent(const MmCompactionDeferCompactionFtraceEvent&) = default;
MmCompactionDeferCompactionFtraceEvent& MmCompactionDeferCompactionFtraceEvent::operator=(const MmCompactionDeferCompactionFtraceEvent&) = default;
MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent(MmCompactionDeferCompactionFtraceEvent&&) noexcept = default;
MmCompactionDeferCompactionFtraceEvent& MmCompactionDeferCompactionFtraceEvent::operator=(MmCompactionDeferCompactionFtraceEvent&&) = default;

bool MmCompactionDeferCompactionFtraceEvent::operator==(const MmCompactionDeferCompactionFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nid_ == other.nid_
   && idx_ == other.idx_
   && order_ == other.order_
   && considered_ == other.considered_
   && defer_shift_ == other.defer_shift_
   && order_failed_ == other.order_failed_;
}

bool MmCompactionDeferCompactionFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* idx */:
        field.get(&idx_);
        break;
      case 3 /* order */:
        field.get(&order_);
        break;
      case 4 /* considered */:
        field.get(&considered_);
        break;
      case 5 /* defer_shift */:
        field.get(&defer_shift_);
        break;
      case 6 /* order_failed */:
        field.get(&order_failed_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionDeferCompactionFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionDeferCompactionFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionDeferCompactionFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, nid_);
  }

  // Field 2: idx
  if (_has_field_[2]) {
    msg->AppendVarInt(2, idx_);
  }

  // Field 3: order
  if (_has_field_[3]) {
    msg->AppendVarInt(3, order_);
  }

  // Field 4: considered
  if (_has_field_[4]) {
    msg->AppendVarInt(4, considered_);
  }

  // Field 5: defer_shift
  if (_has_field_[5]) {
    msg->AppendVarInt(5, defer_shift_);
  }

  // Field 6: order_failed
  if (_has_field_[6]) {
    msg->AppendVarInt(6, order_failed_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent() = default;
MmCompactionBeginFtraceEvent::~MmCompactionBeginFtraceEvent() = default;
MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent(const MmCompactionBeginFtraceEvent&) = default;
MmCompactionBeginFtraceEvent& MmCompactionBeginFtraceEvent::operator=(const MmCompactionBeginFtraceEvent&) = default;
MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent(MmCompactionBeginFtraceEvent&&) noexcept = default;
MmCompactionBeginFtraceEvent& MmCompactionBeginFtraceEvent::operator=(MmCompactionBeginFtraceEvent&&) = default;

bool MmCompactionBeginFtraceEvent::operator==(const MmCompactionBeginFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && zone_start_ == other.zone_start_
   && migrate_pfn_ == other.migrate_pfn_
   && free_pfn_ == other.free_pfn_
   && zone_end_ == other.zone_end_
   && sync_ == other.sync_;
}

bool MmCompactionBeginFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* zone_start */:
        field.get(&zone_start_);
        break;
      case 2 /* migrate_pfn */:
        field.get(&migrate_pfn_);
        break;
      case 3 /* free_pfn */:
        field.get(&free_pfn_);
        break;
      case 4 /* zone_end */:
        field.get(&zone_end_);
        break;
      case 5 /* sync */:
        field.get(&sync_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmCompactionBeginFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmCompactionBeginFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmCompactionBeginFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: zone_start
  if (_has_field_[1]) {
    msg->AppendVarInt(1, zone_start_);
  }

  // Field 2: migrate_pfn
  if (_has_field_[2]) {
    msg->AppendVarInt(2, migrate_pfn_);
  }

  // Field 3: free_pfn
  if (_has_field_[3]) {
    msg->AppendVarInt(3, free_pfn_);
  }

  // Field 4: zone_end
  if (_has_field_[4]) {
    msg->AppendVarInt(4, zone_end_);
  }

  // Field 5: sync
  if (_has_field_[5]) {
    msg->AppendVarInt(5, sync_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
