// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/f2fs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class F2fsDoSubmitBioFtraceEvent;
class F2fsDoSubmitBioFtraceEventDefaultTypeInternal;
extern F2fsDoSubmitBioFtraceEventDefaultTypeInternal _F2fsDoSubmitBioFtraceEvent_default_instance_;
class F2fsEvictInodeFtraceEvent;
class F2fsEvictInodeFtraceEventDefaultTypeInternal;
extern F2fsEvictInodeFtraceEventDefaultTypeInternal _F2fsEvictInodeFtraceEvent_default_instance_;
class F2fsFallocateFtraceEvent;
class F2fsFallocateFtraceEventDefaultTypeInternal;
extern F2fsFallocateFtraceEventDefaultTypeInternal _F2fsFallocateFtraceEvent_default_instance_;
class F2fsGetDataBlockFtraceEvent;
class F2fsGetDataBlockFtraceEventDefaultTypeInternal;
extern F2fsGetDataBlockFtraceEventDefaultTypeInternal _F2fsGetDataBlockFtraceEvent_default_instance_;
class F2fsGetVictimFtraceEvent;
class F2fsGetVictimFtraceEventDefaultTypeInternal;
extern F2fsGetVictimFtraceEventDefaultTypeInternal _F2fsGetVictimFtraceEvent_default_instance_;
class F2fsIgetExitFtraceEvent;
class F2fsIgetExitFtraceEventDefaultTypeInternal;
extern F2fsIgetExitFtraceEventDefaultTypeInternal _F2fsIgetExitFtraceEvent_default_instance_;
class F2fsIgetFtraceEvent;
class F2fsIgetFtraceEventDefaultTypeInternal;
extern F2fsIgetFtraceEventDefaultTypeInternal _F2fsIgetFtraceEvent_default_instance_;
class F2fsNewInodeFtraceEvent;
class F2fsNewInodeFtraceEventDefaultTypeInternal;
extern F2fsNewInodeFtraceEventDefaultTypeInternal _F2fsNewInodeFtraceEvent_default_instance_;
class F2fsReadpageFtraceEvent;
class F2fsReadpageFtraceEventDefaultTypeInternal;
extern F2fsReadpageFtraceEventDefaultTypeInternal _F2fsReadpageFtraceEvent_default_instance_;
class F2fsReserveNewBlockFtraceEvent;
class F2fsReserveNewBlockFtraceEventDefaultTypeInternal;
extern F2fsReserveNewBlockFtraceEventDefaultTypeInternal _F2fsReserveNewBlockFtraceEvent_default_instance_;
class F2fsSetPageDirtyFtraceEvent;
class F2fsSetPageDirtyFtraceEventDefaultTypeInternal;
extern F2fsSetPageDirtyFtraceEventDefaultTypeInternal _F2fsSetPageDirtyFtraceEvent_default_instance_;
class F2fsSubmitWritePageFtraceEvent;
class F2fsSubmitWritePageFtraceEventDefaultTypeInternal;
extern F2fsSubmitWritePageFtraceEventDefaultTypeInternal _F2fsSubmitWritePageFtraceEvent_default_instance_;
class F2fsSyncFileEnterFtraceEvent;
class F2fsSyncFileEnterFtraceEventDefaultTypeInternal;
extern F2fsSyncFileEnterFtraceEventDefaultTypeInternal _F2fsSyncFileEnterFtraceEvent_default_instance_;
class F2fsSyncFileExitFtraceEvent;
class F2fsSyncFileExitFtraceEventDefaultTypeInternal;
extern F2fsSyncFileExitFtraceEventDefaultTypeInternal _F2fsSyncFileExitFtraceEvent_default_instance_;
class F2fsSyncFsFtraceEvent;
class F2fsSyncFsFtraceEventDefaultTypeInternal;
extern F2fsSyncFsFtraceEventDefaultTypeInternal _F2fsSyncFsFtraceEvent_default_instance_;
class F2fsTruncateBlocksEnterFtraceEvent;
class F2fsTruncateBlocksEnterFtraceEventDefaultTypeInternal;
extern F2fsTruncateBlocksEnterFtraceEventDefaultTypeInternal _F2fsTruncateBlocksEnterFtraceEvent_default_instance_;
class F2fsTruncateBlocksExitFtraceEvent;
class F2fsTruncateBlocksExitFtraceEventDefaultTypeInternal;
extern F2fsTruncateBlocksExitFtraceEventDefaultTypeInternal _F2fsTruncateBlocksExitFtraceEvent_default_instance_;
class F2fsTruncateDataBlocksRangeFtraceEvent;
class F2fsTruncateDataBlocksRangeFtraceEventDefaultTypeInternal;
extern F2fsTruncateDataBlocksRangeFtraceEventDefaultTypeInternal _F2fsTruncateDataBlocksRangeFtraceEvent_default_instance_;
class F2fsTruncateFtraceEvent;
class F2fsTruncateFtraceEventDefaultTypeInternal;
extern F2fsTruncateFtraceEventDefaultTypeInternal _F2fsTruncateFtraceEvent_default_instance_;
class F2fsTruncateInodeBlocksEnterFtraceEvent;
class F2fsTruncateInodeBlocksEnterFtraceEventDefaultTypeInternal;
extern F2fsTruncateInodeBlocksEnterFtraceEventDefaultTypeInternal _F2fsTruncateInodeBlocksEnterFtraceEvent_default_instance_;
class F2fsTruncateInodeBlocksExitFtraceEvent;
class F2fsTruncateInodeBlocksExitFtraceEventDefaultTypeInternal;
extern F2fsTruncateInodeBlocksExitFtraceEventDefaultTypeInternal _F2fsTruncateInodeBlocksExitFtraceEvent_default_instance_;
class F2fsTruncateNodeFtraceEvent;
class F2fsTruncateNodeFtraceEventDefaultTypeInternal;
extern F2fsTruncateNodeFtraceEventDefaultTypeInternal _F2fsTruncateNodeFtraceEvent_default_instance_;
class F2fsTruncateNodesEnterFtraceEvent;
class F2fsTruncateNodesEnterFtraceEventDefaultTypeInternal;
extern F2fsTruncateNodesEnterFtraceEventDefaultTypeInternal _F2fsTruncateNodesEnterFtraceEvent_default_instance_;
class F2fsTruncateNodesExitFtraceEvent;
class F2fsTruncateNodesExitFtraceEventDefaultTypeInternal;
extern F2fsTruncateNodesExitFtraceEventDefaultTypeInternal _F2fsTruncateNodesExitFtraceEvent_default_instance_;
class F2fsTruncatePartialNodesFtraceEvent;
class F2fsTruncatePartialNodesFtraceEventDefaultTypeInternal;
extern F2fsTruncatePartialNodesFtraceEventDefaultTypeInternal _F2fsTruncatePartialNodesFtraceEvent_default_instance_;
class F2fsUnlinkEnterFtraceEvent;
class F2fsUnlinkEnterFtraceEventDefaultTypeInternal;
extern F2fsUnlinkEnterFtraceEventDefaultTypeInternal _F2fsUnlinkEnterFtraceEvent_default_instance_;
class F2fsUnlinkExitFtraceEvent;
class F2fsUnlinkExitFtraceEventDefaultTypeInternal;
extern F2fsUnlinkExitFtraceEventDefaultTypeInternal _F2fsUnlinkExitFtraceEvent_default_instance_;
class F2fsVmPageMkwriteFtraceEvent;
class F2fsVmPageMkwriteFtraceEventDefaultTypeInternal;
extern F2fsVmPageMkwriteFtraceEventDefaultTypeInternal _F2fsVmPageMkwriteFtraceEvent_default_instance_;
class F2fsWriteBeginFtraceEvent;
class F2fsWriteBeginFtraceEventDefaultTypeInternal;
extern F2fsWriteBeginFtraceEventDefaultTypeInternal _F2fsWriteBeginFtraceEvent_default_instance_;
class F2fsWriteCheckpointFtraceEvent;
class F2fsWriteCheckpointFtraceEventDefaultTypeInternal;
extern F2fsWriteCheckpointFtraceEventDefaultTypeInternal _F2fsWriteCheckpointFtraceEvent_default_instance_;
class F2fsWriteEndFtraceEvent;
class F2fsWriteEndFtraceEventDefaultTypeInternal;
extern F2fsWriteEndFtraceEventDefaultTypeInternal _F2fsWriteEndFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsDoSubmitBioFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsEvictInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsEvictInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsFallocateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsFallocateFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsGetDataBlockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsGetDataBlockFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsGetVictimFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsGetVictimFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsIgetExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsIgetExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsIgetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsIgetFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsNewInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsNewInodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsReadpageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsReadpageFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsReserveNewBlockFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSetPageDirtyFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSubmitWritePageFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSyncFileEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsSyncFileExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSyncFileExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsSyncFsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSyncFsFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateNodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateNodeFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateNodesExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsUnlinkEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsUnlinkExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsUnlinkExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsVmPageMkwriteFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsWriteBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsWriteBeginFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsWriteCheckpointFtraceEvent>(Arena*);
template<> ::perfetto::protos::F2fsWriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsWriteEndFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class F2fsDoSubmitBioFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsDoSubmitBioFtraceEvent) */ {
 public:
  F2fsDoSubmitBioFtraceEvent();
  virtual ~F2fsDoSubmitBioFtraceEvent();

  F2fsDoSubmitBioFtraceEvent(const F2fsDoSubmitBioFtraceEvent& from);
  F2fsDoSubmitBioFtraceEvent(F2fsDoSubmitBioFtraceEvent&& from) noexcept
    : F2fsDoSubmitBioFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsDoSubmitBioFtraceEvent& operator=(const F2fsDoSubmitBioFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsDoSubmitBioFtraceEvent& operator=(F2fsDoSubmitBioFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsDoSubmitBioFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsDoSubmitBioFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsDoSubmitBioFtraceEvent*>(
               &_F2fsDoSubmitBioFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(F2fsDoSubmitBioFtraceEvent& a, F2fsDoSubmitBioFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsDoSubmitBioFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsDoSubmitBioFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsDoSubmitBioFtraceEvent>(nullptr);
  }

  F2fsDoSubmitBioFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsDoSubmitBioFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsDoSubmitBioFtraceEvent& from);
  void MergeFrom(const F2fsDoSubmitBioFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsDoSubmitBioFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsDoSubmitBioFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kBtypeFieldNumber = 2,
    kSyncFieldNumber = 3,
    kSectorFieldNumber = 4,
    kSizeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 btype = 2;
  bool has_btype() const;
  void clear_btype();
  ::PROTOBUF_NAMESPACE_ID::int32 btype() const;
  void set_btype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 sync = 3;
  bool has_sync() const;
  void clear_sync();
  ::PROTOBUF_NAMESPACE_ID::uint32 sync() const;
  void set_sync(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 sector = 4;
  bool has_sector() const;
  void clear_sector();
  ::PROTOBUF_NAMESPACE_ID::uint64 sector() const;
  void set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 size = 5;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsDoSubmitBioFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 btype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sync_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsEvictInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsEvictInodeFtraceEvent) */ {
 public:
  F2fsEvictInodeFtraceEvent();
  virtual ~F2fsEvictInodeFtraceEvent();

  F2fsEvictInodeFtraceEvent(const F2fsEvictInodeFtraceEvent& from);
  F2fsEvictInodeFtraceEvent(F2fsEvictInodeFtraceEvent&& from) noexcept
    : F2fsEvictInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsEvictInodeFtraceEvent& operator=(const F2fsEvictInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsEvictInodeFtraceEvent& operator=(F2fsEvictInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsEvictInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsEvictInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsEvictInodeFtraceEvent*>(
               &_F2fsEvictInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(F2fsEvictInodeFtraceEvent& a, F2fsEvictInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsEvictInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsEvictInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsEvictInodeFtraceEvent>(nullptr);
  }

  F2fsEvictInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsEvictInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsEvictInodeFtraceEvent& from);
  void MergeFrom(const F2fsEvictInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsEvictInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsEvictInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino();
  ::PROTOBUF_NAMESPACE_ID::uint64 pino() const;
  void set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 5;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink() const;
  void set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise();
  ::PROTOBUF_NAMESPACE_ID::uint32 advise() const;
  void set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsEvictInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 advise_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsFallocateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsFallocateFtraceEvent) */ {
 public:
  F2fsFallocateFtraceEvent();
  virtual ~F2fsFallocateFtraceEvent();

  F2fsFallocateFtraceEvent(const F2fsFallocateFtraceEvent& from);
  F2fsFallocateFtraceEvent(F2fsFallocateFtraceEvent&& from) noexcept
    : F2fsFallocateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsFallocateFtraceEvent& operator=(const F2fsFallocateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsFallocateFtraceEvent& operator=(F2fsFallocateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsFallocateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsFallocateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsFallocateFtraceEvent*>(
               &_F2fsFallocateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(F2fsFallocateFtraceEvent& a, F2fsFallocateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsFallocateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsFallocateFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsFallocateFtraceEvent>(nullptr);
  }

  F2fsFallocateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsFallocateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsFallocateFtraceEvent& from);
  void MergeFrom(const F2fsFallocateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsFallocateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsFallocateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 4,
    kLenFieldNumber = 5,
    kModeFieldNumber = 3,
    kRetFieldNumber = 8,
    kSizeFieldNumber = 6,
    kBlocksFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 offset = 4;
  bool has_offset() const;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 len = 5;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 8;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 size = 6;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsFallocateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsGetDataBlockFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsGetDataBlockFtraceEvent) */ {
 public:
  F2fsGetDataBlockFtraceEvent();
  virtual ~F2fsGetDataBlockFtraceEvent();

  F2fsGetDataBlockFtraceEvent(const F2fsGetDataBlockFtraceEvent& from);
  F2fsGetDataBlockFtraceEvent(F2fsGetDataBlockFtraceEvent&& from) noexcept
    : F2fsGetDataBlockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsGetDataBlockFtraceEvent& operator=(const F2fsGetDataBlockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsGetDataBlockFtraceEvent& operator=(F2fsGetDataBlockFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsGetDataBlockFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsGetDataBlockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsGetDataBlockFtraceEvent*>(
               &_F2fsGetDataBlockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(F2fsGetDataBlockFtraceEvent& a, F2fsGetDataBlockFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsGetDataBlockFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsGetDataBlockFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsGetDataBlockFtraceEvent>(nullptr);
  }

  F2fsGetDataBlockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsGetDataBlockFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsGetDataBlockFtraceEvent& from);
  void MergeFrom(const F2fsGetDataBlockFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsGetDataBlockFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsGetDataBlockFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIblockFieldNumber = 3,
    kBhStartFieldNumber = 4,
    kBhSizeFieldNumber = 5,
    kRetFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 iblock = 3;
  bool has_iblock() const;
  void clear_iblock();
  ::PROTOBUF_NAMESPACE_ID::uint64 iblock() const;
  void set_iblock(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bh_start = 4;
  bool has_bh_start() const;
  void clear_bh_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 bh_start() const;
  void set_bh_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bh_size = 5;
  bool has_bh_size() const;
  void clear_bh_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 bh_size() const;
  void set_bh_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 6;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsGetDataBlockFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iblock_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bh_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bh_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsGetVictimFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsGetVictimFtraceEvent) */ {
 public:
  F2fsGetVictimFtraceEvent();
  virtual ~F2fsGetVictimFtraceEvent();

  F2fsGetVictimFtraceEvent(const F2fsGetVictimFtraceEvent& from);
  F2fsGetVictimFtraceEvent(F2fsGetVictimFtraceEvent&& from) noexcept
    : F2fsGetVictimFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsGetVictimFtraceEvent& operator=(const F2fsGetVictimFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsGetVictimFtraceEvent& operator=(F2fsGetVictimFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsGetVictimFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsGetVictimFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsGetVictimFtraceEvent*>(
               &_F2fsGetVictimFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(F2fsGetVictimFtraceEvent& a, F2fsGetVictimFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsGetVictimFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsGetVictimFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsGetVictimFtraceEvent>(nullptr);
  }

  F2fsGetVictimFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsGetVictimFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsGetVictimFtraceEvent& from);
  void MergeFrom(const F2fsGetVictimFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsGetVictimFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsGetVictimFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kTypeFieldNumber = 2,
    kGcTypeFieldNumber = 3,
    kAllocModeFieldNumber = 4,
    kGcModeFieldNumber = 5,
    kVictimFieldNumber = 6,
    kOfsUnitFieldNumber = 7,
    kPreVictimFieldNumber = 8,
    kPrefreeFieldNumber = 9,
    kFreeFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 gc_type = 3;
  bool has_gc_type() const;
  void clear_gc_type();
  ::PROTOBUF_NAMESPACE_ID::int32 gc_type() const;
  void set_gc_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 alloc_mode = 4;
  bool has_alloc_mode() const;
  void clear_alloc_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 alloc_mode() const;
  void set_alloc_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 gc_mode = 5;
  bool has_gc_mode() const;
  void clear_gc_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 gc_mode() const;
  void set_gc_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 victim = 6;
  bool has_victim() const;
  void clear_victim();
  ::PROTOBUF_NAMESPACE_ID::uint32 victim() const;
  void set_victim(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ofs_unit = 7;
  bool has_ofs_unit() const;
  void clear_ofs_unit();
  ::PROTOBUF_NAMESPACE_ID::uint32 ofs_unit() const;
  void set_ofs_unit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pre_victim = 8;
  bool has_pre_victim() const;
  void clear_pre_victim();
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_victim() const;
  void set_pre_victim(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 prefree = 9;
  bool has_prefree() const;
  void clear_prefree();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefree() const;
  void set_prefree(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 free = 10;
  bool has_free() const;
  void clear_free();
  ::PROTOBUF_NAMESPACE_ID::uint32 free() const;
  void set_free(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsGetVictimFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 gc_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 alloc_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 gc_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 victim_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ofs_unit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_victim_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefree_;
  ::PROTOBUF_NAMESPACE_ID::uint32 free_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsIgetFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsIgetFtraceEvent) */ {
 public:
  F2fsIgetFtraceEvent();
  virtual ~F2fsIgetFtraceEvent();

  F2fsIgetFtraceEvent(const F2fsIgetFtraceEvent& from);
  F2fsIgetFtraceEvent(F2fsIgetFtraceEvent&& from) noexcept
    : F2fsIgetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsIgetFtraceEvent& operator=(const F2fsIgetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsIgetFtraceEvent& operator=(F2fsIgetFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsIgetFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsIgetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsIgetFtraceEvent*>(
               &_F2fsIgetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(F2fsIgetFtraceEvent& a, F2fsIgetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsIgetFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsIgetFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsIgetFtraceEvent>(nullptr);
  }

  F2fsIgetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsIgetFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsIgetFtraceEvent& from);
  void MergeFrom(const F2fsIgetFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsIgetFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsIgetFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino();
  ::PROTOBUF_NAMESPACE_ID::uint64 pino() const;
  void set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 5;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink() const;
  void set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise();
  ::PROTOBUF_NAMESPACE_ID::uint32 advise() const;
  void set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsIgetFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 advise_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsIgetExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsIgetExitFtraceEvent) */ {
 public:
  F2fsIgetExitFtraceEvent();
  virtual ~F2fsIgetExitFtraceEvent();

  F2fsIgetExitFtraceEvent(const F2fsIgetExitFtraceEvent& from);
  F2fsIgetExitFtraceEvent(F2fsIgetExitFtraceEvent&& from) noexcept
    : F2fsIgetExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsIgetExitFtraceEvent& operator=(const F2fsIgetExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsIgetExitFtraceEvent& operator=(F2fsIgetExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsIgetExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsIgetExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsIgetExitFtraceEvent*>(
               &_F2fsIgetExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(F2fsIgetExitFtraceEvent& a, F2fsIgetExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsIgetExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsIgetExitFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsIgetExitFtraceEvent>(nullptr);
  }

  F2fsIgetExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsIgetExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsIgetExitFtraceEvent& from);
  void MergeFrom(const F2fsIgetExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsIgetExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsIgetExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsIgetExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsNewInodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsNewInodeFtraceEvent) */ {
 public:
  F2fsNewInodeFtraceEvent();
  virtual ~F2fsNewInodeFtraceEvent();

  F2fsNewInodeFtraceEvent(const F2fsNewInodeFtraceEvent& from);
  F2fsNewInodeFtraceEvent(F2fsNewInodeFtraceEvent&& from) noexcept
    : F2fsNewInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsNewInodeFtraceEvent& operator=(const F2fsNewInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsNewInodeFtraceEvent& operator=(F2fsNewInodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsNewInodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsNewInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsNewInodeFtraceEvent*>(
               &_F2fsNewInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(F2fsNewInodeFtraceEvent& a, F2fsNewInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsNewInodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsNewInodeFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsNewInodeFtraceEvent>(nullptr);
  }

  F2fsNewInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsNewInodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsNewInodeFtraceEvent& from);
  void MergeFrom(const F2fsNewInodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsNewInodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsNewInodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsNewInodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsReadpageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsReadpageFtraceEvent) */ {
 public:
  F2fsReadpageFtraceEvent();
  virtual ~F2fsReadpageFtraceEvent();

  F2fsReadpageFtraceEvent(const F2fsReadpageFtraceEvent& from);
  F2fsReadpageFtraceEvent(F2fsReadpageFtraceEvent&& from) noexcept
    : F2fsReadpageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsReadpageFtraceEvent& operator=(const F2fsReadpageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsReadpageFtraceEvent& operator=(F2fsReadpageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsReadpageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsReadpageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsReadpageFtraceEvent*>(
               &_F2fsReadpageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(F2fsReadpageFtraceEvent& a, F2fsReadpageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsReadpageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsReadpageFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsReadpageFtraceEvent>(nullptr);
  }

  F2fsReadpageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsReadpageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsReadpageFtraceEvent& from);
  void MergeFrom(const F2fsReadpageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsReadpageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsReadpageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kBlkaddrFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 blkaddr = 4;
  bool has_blkaddr() const;
  void clear_blkaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 blkaddr() const;
  void set_blkaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 type = 5;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsReadpageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blkaddr_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsReserveNewBlockFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsReserveNewBlockFtraceEvent) */ {
 public:
  F2fsReserveNewBlockFtraceEvent();
  virtual ~F2fsReserveNewBlockFtraceEvent();

  F2fsReserveNewBlockFtraceEvent(const F2fsReserveNewBlockFtraceEvent& from);
  F2fsReserveNewBlockFtraceEvent(F2fsReserveNewBlockFtraceEvent&& from) noexcept
    : F2fsReserveNewBlockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsReserveNewBlockFtraceEvent& operator=(const F2fsReserveNewBlockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsReserveNewBlockFtraceEvent& operator=(F2fsReserveNewBlockFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsReserveNewBlockFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsReserveNewBlockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsReserveNewBlockFtraceEvent*>(
               &_F2fsReserveNewBlockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(F2fsReserveNewBlockFtraceEvent& a, F2fsReserveNewBlockFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsReserveNewBlockFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsReserveNewBlockFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsReserveNewBlockFtraceEvent>(nullptr);
  }

  F2fsReserveNewBlockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsReserveNewBlockFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsReserveNewBlockFtraceEvent& from);
  void MergeFrom(const F2fsReserveNewBlockFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsReserveNewBlockFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsReserveNewBlockFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNidFieldNumber = 2,
    kOfsInNodeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nid = 2;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ofs_in_node = 3;
  bool has_ofs_in_node() const;
  void clear_ofs_in_node();
  ::PROTOBUF_NAMESPACE_ID::uint32 ofs_in_node() const;
  void set_ofs_in_node(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsReserveNewBlockFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ofs_in_node_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsSetPageDirtyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSetPageDirtyFtraceEvent) */ {
 public:
  F2fsSetPageDirtyFtraceEvent();
  virtual ~F2fsSetPageDirtyFtraceEvent();

  F2fsSetPageDirtyFtraceEvent(const F2fsSetPageDirtyFtraceEvent& from);
  F2fsSetPageDirtyFtraceEvent(F2fsSetPageDirtyFtraceEvent&& from) noexcept
    : F2fsSetPageDirtyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSetPageDirtyFtraceEvent& operator=(const F2fsSetPageDirtyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSetPageDirtyFtraceEvent& operator=(F2fsSetPageDirtyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsSetPageDirtyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsSetPageDirtyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSetPageDirtyFtraceEvent*>(
               &_F2fsSetPageDirtyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(F2fsSetPageDirtyFtraceEvent& a, F2fsSetPageDirtyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSetPageDirtyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsSetPageDirtyFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsSetPageDirtyFtraceEvent>(nullptr);
  }

  F2fsSetPageDirtyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsSetPageDirtyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsSetPageDirtyFtraceEvent& from);
  void MergeFrom(const F2fsSetPageDirtyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsSetPageDirtyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsSetPageDirtyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDirFieldNumber = 4,
    kIndexFieldNumber = 5,
    kDirtyFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dir = 4;
  bool has_dir() const;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::int32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 index = 5;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 dirty = 6;
  bool has_dirty() const;
  void clear_dirty();
  ::PROTOBUF_NAMESPACE_ID::int32 dirty() const;
  void set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSetPageDirtyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 dir_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsSubmitWritePageFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSubmitWritePageFtraceEvent) */ {
 public:
  F2fsSubmitWritePageFtraceEvent();
  virtual ~F2fsSubmitWritePageFtraceEvent();

  F2fsSubmitWritePageFtraceEvent(const F2fsSubmitWritePageFtraceEvent& from);
  F2fsSubmitWritePageFtraceEvent(F2fsSubmitWritePageFtraceEvent&& from) noexcept
    : F2fsSubmitWritePageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSubmitWritePageFtraceEvent& operator=(const F2fsSubmitWritePageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSubmitWritePageFtraceEvent& operator=(F2fsSubmitWritePageFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsSubmitWritePageFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsSubmitWritePageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSubmitWritePageFtraceEvent*>(
               &_F2fsSubmitWritePageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(F2fsSubmitWritePageFtraceEvent& a, F2fsSubmitWritePageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSubmitWritePageFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsSubmitWritePageFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsSubmitWritePageFtraceEvent>(nullptr);
  }

  F2fsSubmitWritePageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsSubmitWritePageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsSubmitWritePageFtraceEvent& from);
  void MergeFrom(const F2fsSubmitWritePageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsSubmitWritePageFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsSubmitWritePageFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 4,
    kTypeFieldNumber = 3,
    kBlockFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 index = 4;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 block = 5;
  bool has_block() const;
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint32 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSubmitWritePageFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsSyncFileEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSyncFileEnterFtraceEvent) */ {
 public:
  F2fsSyncFileEnterFtraceEvent();
  virtual ~F2fsSyncFileEnterFtraceEvent();

  F2fsSyncFileEnterFtraceEvent(const F2fsSyncFileEnterFtraceEvent& from);
  F2fsSyncFileEnterFtraceEvent(F2fsSyncFileEnterFtraceEvent&& from) noexcept
    : F2fsSyncFileEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSyncFileEnterFtraceEvent& operator=(const F2fsSyncFileEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSyncFileEnterFtraceEvent& operator=(F2fsSyncFileEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsSyncFileEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsSyncFileEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSyncFileEnterFtraceEvent*>(
               &_F2fsSyncFileEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(F2fsSyncFileEnterFtraceEvent& a, F2fsSyncFileEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSyncFileEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsSyncFileEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsSyncFileEnterFtraceEvent>(nullptr);
  }

  F2fsSyncFileEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsSyncFileEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsSyncFileEnterFtraceEvent& from);
  void MergeFrom(const F2fsSyncFileEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsSyncFileEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsSyncFileEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino();
  ::PROTOBUF_NAMESPACE_ID::uint64 pino() const;
  void set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 5;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink() const;
  void set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise();
  ::PROTOBUF_NAMESPACE_ID::uint32 advise() const;
  void set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSyncFileEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 advise_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsSyncFileExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSyncFileExitFtraceEvent) */ {
 public:
  F2fsSyncFileExitFtraceEvent();
  virtual ~F2fsSyncFileExitFtraceEvent();

  F2fsSyncFileExitFtraceEvent(const F2fsSyncFileExitFtraceEvent& from);
  F2fsSyncFileExitFtraceEvent(F2fsSyncFileExitFtraceEvent&& from) noexcept
    : F2fsSyncFileExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSyncFileExitFtraceEvent& operator=(const F2fsSyncFileExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSyncFileExitFtraceEvent& operator=(F2fsSyncFileExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsSyncFileExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsSyncFileExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSyncFileExitFtraceEvent*>(
               &_F2fsSyncFileExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(F2fsSyncFileExitFtraceEvent& a, F2fsSyncFileExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSyncFileExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsSyncFileExitFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsSyncFileExitFtraceEvent>(nullptr);
  }

  F2fsSyncFileExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsSyncFileExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsSyncFileExitFtraceEvent& from);
  void MergeFrom(const F2fsSyncFileExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsSyncFileExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsSyncFileExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNeedCpFieldNumber = 3,
    kDatasyncFieldNumber = 4,
    kRetFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 need_cp = 3;
  bool has_need_cp() const;
  void clear_need_cp();
  ::PROTOBUF_NAMESPACE_ID::uint32 need_cp() const;
  void set_need_cp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 datasync = 4;
  bool has_datasync() const;
  void clear_datasync();
  ::PROTOBUF_NAMESPACE_ID::int32 datasync() const;
  void set_datasync(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 5;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSyncFileExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 need_cp_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasync_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsSyncFsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSyncFsFtraceEvent) */ {
 public:
  F2fsSyncFsFtraceEvent();
  virtual ~F2fsSyncFsFtraceEvent();

  F2fsSyncFsFtraceEvent(const F2fsSyncFsFtraceEvent& from);
  F2fsSyncFsFtraceEvent(F2fsSyncFsFtraceEvent&& from) noexcept
    : F2fsSyncFsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSyncFsFtraceEvent& operator=(const F2fsSyncFsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSyncFsFtraceEvent& operator=(F2fsSyncFsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsSyncFsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsSyncFsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSyncFsFtraceEvent*>(
               &_F2fsSyncFsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(F2fsSyncFsFtraceEvent& a, F2fsSyncFsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSyncFsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsSyncFsFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsSyncFsFtraceEvent>(nullptr);
  }

  F2fsSyncFsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsSyncFsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsSyncFsFtraceEvent& from);
  void MergeFrom(const F2fsSyncFsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsSyncFsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsSyncFsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kDirtyFieldNumber = 2,
    kWaitFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 dirty = 2;
  bool has_dirty() const;
  void clear_dirty();
  ::PROTOBUF_NAMESPACE_ID::int32 dirty() const;
  void set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 wait = 3;
  bool has_wait() const;
  void clear_wait();
  ::PROTOBUF_NAMESPACE_ID::int32 wait() const;
  void set_wait(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSyncFsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateFtraceEvent) */ {
 public:
  F2fsTruncateFtraceEvent();
  virtual ~F2fsTruncateFtraceEvent();

  F2fsTruncateFtraceEvent(const F2fsTruncateFtraceEvent& from);
  F2fsTruncateFtraceEvent(F2fsTruncateFtraceEvent&& from) noexcept
    : F2fsTruncateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateFtraceEvent& operator=(const F2fsTruncateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateFtraceEvent& operator=(F2fsTruncateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateFtraceEvent*>(
               &_F2fsTruncateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(F2fsTruncateFtraceEvent& a, F2fsTruncateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateFtraceEvent>(nullptr);
  }

  F2fsTruncateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateFtraceEvent& from);
  void MergeFrom(const F2fsTruncateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino();
  ::PROTOBUF_NAMESPACE_ID::uint64 pino() const;
  void set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 5;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink() const;
  void set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise();
  ::PROTOBUF_NAMESPACE_ID::uint32 advise() const;
  void set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlink_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 advise_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateBlocksEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent) */ {
 public:
  F2fsTruncateBlocksEnterFtraceEvent();
  virtual ~F2fsTruncateBlocksEnterFtraceEvent();

  F2fsTruncateBlocksEnterFtraceEvent(const F2fsTruncateBlocksEnterFtraceEvent& from);
  F2fsTruncateBlocksEnterFtraceEvent(F2fsTruncateBlocksEnterFtraceEvent&& from) noexcept
    : F2fsTruncateBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateBlocksEnterFtraceEvent& operator=(const F2fsTruncateBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateBlocksEnterFtraceEvent& operator=(F2fsTruncateBlocksEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateBlocksEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateBlocksEnterFtraceEvent*>(
               &_F2fsTruncateBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(F2fsTruncateBlocksEnterFtraceEvent& a, F2fsTruncateBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateBlocksEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateBlocksEnterFtraceEvent>(nullptr);
  }

  F2fsTruncateBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateBlocksEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateBlocksEnterFtraceEvent& from);
  void MergeFrom(const F2fsTruncateBlocksEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateBlocksEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBlocksFieldNumber = 4,
    kFromFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 blocks = 4;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 from = 5;
  bool has_from() const;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateBlocksExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent) */ {
 public:
  F2fsTruncateBlocksExitFtraceEvent();
  virtual ~F2fsTruncateBlocksExitFtraceEvent();

  F2fsTruncateBlocksExitFtraceEvent(const F2fsTruncateBlocksExitFtraceEvent& from);
  F2fsTruncateBlocksExitFtraceEvent(F2fsTruncateBlocksExitFtraceEvent&& from) noexcept
    : F2fsTruncateBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateBlocksExitFtraceEvent& operator=(const F2fsTruncateBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateBlocksExitFtraceEvent& operator=(F2fsTruncateBlocksExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateBlocksExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateBlocksExitFtraceEvent*>(
               &_F2fsTruncateBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(F2fsTruncateBlocksExitFtraceEvent& a, F2fsTruncateBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateBlocksExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateBlocksExitFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateBlocksExitFtraceEvent>(nullptr);
  }

  F2fsTruncateBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateBlocksExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateBlocksExitFtraceEvent& from);
  void MergeFrom(const F2fsTruncateBlocksExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateBlocksExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateBlocksExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateDataBlocksRangeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent) */ {
 public:
  F2fsTruncateDataBlocksRangeFtraceEvent();
  virtual ~F2fsTruncateDataBlocksRangeFtraceEvent();

  F2fsTruncateDataBlocksRangeFtraceEvent(const F2fsTruncateDataBlocksRangeFtraceEvent& from);
  F2fsTruncateDataBlocksRangeFtraceEvent(F2fsTruncateDataBlocksRangeFtraceEvent&& from) noexcept
    : F2fsTruncateDataBlocksRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateDataBlocksRangeFtraceEvent& operator=(const F2fsTruncateDataBlocksRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateDataBlocksRangeFtraceEvent& operator=(F2fsTruncateDataBlocksRangeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateDataBlocksRangeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateDataBlocksRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateDataBlocksRangeFtraceEvent*>(
               &_F2fsTruncateDataBlocksRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(F2fsTruncateDataBlocksRangeFtraceEvent& a, F2fsTruncateDataBlocksRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateDataBlocksRangeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateDataBlocksRangeFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateDataBlocksRangeFtraceEvent>(nullptr);
  }

  F2fsTruncateDataBlocksRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateDataBlocksRangeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateDataBlocksRangeFtraceEvent& from);
  void MergeFrom(const F2fsTruncateDataBlocksRangeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateDataBlocksRangeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kOfsFieldNumber = 4,
    kFreeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ofs = 4;
  bool has_ofs() const;
  void clear_ofs();
  ::PROTOBUF_NAMESPACE_ID::uint32 ofs() const;
  void set_ofs(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 free = 5;
  bool has_free() const;
  void clear_free();
  ::PROTOBUF_NAMESPACE_ID::int32 free() const;
  void set_free(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ofs_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateInodeBlocksEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent) */ {
 public:
  F2fsTruncateInodeBlocksEnterFtraceEvent();
  virtual ~F2fsTruncateInodeBlocksEnterFtraceEvent();

  F2fsTruncateInodeBlocksEnterFtraceEvent(const F2fsTruncateInodeBlocksEnterFtraceEvent& from);
  F2fsTruncateInodeBlocksEnterFtraceEvent(F2fsTruncateInodeBlocksEnterFtraceEvent&& from) noexcept
    : F2fsTruncateInodeBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateInodeBlocksEnterFtraceEvent& operator=(const F2fsTruncateInodeBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateInodeBlocksEnterFtraceEvent& operator=(F2fsTruncateInodeBlocksEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateInodeBlocksEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateInodeBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateInodeBlocksEnterFtraceEvent*>(
               &_F2fsTruncateInodeBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(F2fsTruncateInodeBlocksEnterFtraceEvent& a, F2fsTruncateInodeBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateInodeBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateInodeBlocksEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateInodeBlocksEnterFtraceEvent>(nullptr);
  }

  F2fsTruncateInodeBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateInodeBlocksEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateInodeBlocksEnterFtraceEvent& from);
  void MergeFrom(const F2fsTruncateInodeBlocksEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateInodeBlocksEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBlocksFieldNumber = 4,
    kFromFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 blocks = 4;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 from = 5;
  bool has_from() const;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateInodeBlocksExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent) */ {
 public:
  F2fsTruncateInodeBlocksExitFtraceEvent();
  virtual ~F2fsTruncateInodeBlocksExitFtraceEvent();

  F2fsTruncateInodeBlocksExitFtraceEvent(const F2fsTruncateInodeBlocksExitFtraceEvent& from);
  F2fsTruncateInodeBlocksExitFtraceEvent(F2fsTruncateInodeBlocksExitFtraceEvent&& from) noexcept
    : F2fsTruncateInodeBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateInodeBlocksExitFtraceEvent& operator=(const F2fsTruncateInodeBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateInodeBlocksExitFtraceEvent& operator=(F2fsTruncateInodeBlocksExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateInodeBlocksExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateInodeBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateInodeBlocksExitFtraceEvent*>(
               &_F2fsTruncateInodeBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(F2fsTruncateInodeBlocksExitFtraceEvent& a, F2fsTruncateInodeBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateInodeBlocksExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateInodeBlocksExitFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateInodeBlocksExitFtraceEvent>(nullptr);
  }

  F2fsTruncateInodeBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateInodeBlocksExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateInodeBlocksExitFtraceEvent& from);
  void MergeFrom(const F2fsTruncateInodeBlocksExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateInodeBlocksExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateNodeFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateNodeFtraceEvent) */ {
 public:
  F2fsTruncateNodeFtraceEvent();
  virtual ~F2fsTruncateNodeFtraceEvent();

  F2fsTruncateNodeFtraceEvent(const F2fsTruncateNodeFtraceEvent& from);
  F2fsTruncateNodeFtraceEvent(F2fsTruncateNodeFtraceEvent&& from) noexcept
    : F2fsTruncateNodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateNodeFtraceEvent& operator=(const F2fsTruncateNodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateNodeFtraceEvent& operator=(F2fsTruncateNodeFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateNodeFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateNodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateNodeFtraceEvent*>(
               &_F2fsTruncateNodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(F2fsTruncateNodeFtraceEvent& a, F2fsTruncateNodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateNodeFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateNodeFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateNodeFtraceEvent>(nullptr);
  }

  F2fsTruncateNodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateNodeFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateNodeFtraceEvent& from);
  void MergeFrom(const F2fsTruncateNodeFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateNodeFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateNodeFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kBlkAddrFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 blk_addr = 4;
  bool has_blk_addr() const;
  void clear_blk_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_addr() const;
  void set_blk_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateNodeFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_addr_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateNodesEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent) */ {
 public:
  F2fsTruncateNodesEnterFtraceEvent();
  virtual ~F2fsTruncateNodesEnterFtraceEvent();

  F2fsTruncateNodesEnterFtraceEvent(const F2fsTruncateNodesEnterFtraceEvent& from);
  F2fsTruncateNodesEnterFtraceEvent(F2fsTruncateNodesEnterFtraceEvent&& from) noexcept
    : F2fsTruncateNodesEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateNodesEnterFtraceEvent& operator=(const F2fsTruncateNodesEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateNodesEnterFtraceEvent& operator=(F2fsTruncateNodesEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateNodesEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateNodesEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateNodesEnterFtraceEvent*>(
               &_F2fsTruncateNodesEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(F2fsTruncateNodesEnterFtraceEvent& a, F2fsTruncateNodesEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateNodesEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateNodesEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateNodesEnterFtraceEvent>(nullptr);
  }

  F2fsTruncateNodesEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateNodesEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateNodesEnterFtraceEvent& from);
  void MergeFrom(const F2fsTruncateNodesEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateNodesEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateNodesEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kBlkAddrFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 blk_addr = 4;
  bool has_blk_addr() const;
  void clear_blk_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_addr() const;
  void set_blk_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_addr_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncateNodesExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateNodesExitFtraceEvent) */ {
 public:
  F2fsTruncateNodesExitFtraceEvent();
  virtual ~F2fsTruncateNodesExitFtraceEvent();

  F2fsTruncateNodesExitFtraceEvent(const F2fsTruncateNodesExitFtraceEvent& from);
  F2fsTruncateNodesExitFtraceEvent(F2fsTruncateNodesExitFtraceEvent&& from) noexcept
    : F2fsTruncateNodesExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateNodesExitFtraceEvent& operator=(const F2fsTruncateNodesExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateNodesExitFtraceEvent& operator=(F2fsTruncateNodesExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncateNodesExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncateNodesExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateNodesExitFtraceEvent*>(
               &_F2fsTruncateNodesExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(F2fsTruncateNodesExitFtraceEvent& a, F2fsTruncateNodesExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateNodesExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncateNodesExitFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncateNodesExitFtraceEvent>(nullptr);
  }

  F2fsTruncateNodesExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncateNodesExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncateNodesExitFtraceEvent& from);
  void MergeFrom(const F2fsTruncateNodesExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncateNodesExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncateNodesExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateNodesExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsTruncatePartialNodesFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent) */ {
 public:
  F2fsTruncatePartialNodesFtraceEvent();
  virtual ~F2fsTruncatePartialNodesFtraceEvent();

  F2fsTruncatePartialNodesFtraceEvent(const F2fsTruncatePartialNodesFtraceEvent& from);
  F2fsTruncatePartialNodesFtraceEvent(F2fsTruncatePartialNodesFtraceEvent&& from) noexcept
    : F2fsTruncatePartialNodesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncatePartialNodesFtraceEvent& operator=(const F2fsTruncatePartialNodesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncatePartialNodesFtraceEvent& operator=(F2fsTruncatePartialNodesFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsTruncatePartialNodesFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsTruncatePartialNodesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncatePartialNodesFtraceEvent*>(
               &_F2fsTruncatePartialNodesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(F2fsTruncatePartialNodesFtraceEvent& a, F2fsTruncatePartialNodesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncatePartialNodesFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsTruncatePartialNodesFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsTruncatePartialNodesFtraceEvent>(nullptr);
  }

  F2fsTruncatePartialNodesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsTruncatePartialNodesFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsTruncatePartialNodesFtraceEvent& from);
  void MergeFrom(const F2fsTruncatePartialNodesFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsTruncatePartialNodesFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsTruncatePartialNodesFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kDepthFieldNumber = 4,
    kErrFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 depth = 4;
  bool has_depth() const;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 err = 5;
  bool has_err() const;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsUnlinkEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsUnlinkEnterFtraceEvent) */ {
 public:
  F2fsUnlinkEnterFtraceEvent();
  virtual ~F2fsUnlinkEnterFtraceEvent();

  F2fsUnlinkEnterFtraceEvent(const F2fsUnlinkEnterFtraceEvent& from);
  F2fsUnlinkEnterFtraceEvent(F2fsUnlinkEnterFtraceEvent&& from) noexcept
    : F2fsUnlinkEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsUnlinkEnterFtraceEvent& operator=(const F2fsUnlinkEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsUnlinkEnterFtraceEvent& operator=(F2fsUnlinkEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsUnlinkEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsUnlinkEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsUnlinkEnterFtraceEvent*>(
               &_F2fsUnlinkEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(F2fsUnlinkEnterFtraceEvent& a, F2fsUnlinkEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsUnlinkEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsUnlinkEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsUnlinkEnterFtraceEvent>(nullptr);
  }

  F2fsUnlinkEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsUnlinkEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsUnlinkEnterFtraceEvent& from);
  void MergeFrom(const F2fsUnlinkEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsUnlinkEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsUnlinkEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBlocksFieldNumber = 4,
  };
  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 blocks = 4;
  bool has_blocks() const;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsUnlinkEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsUnlinkExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsUnlinkExitFtraceEvent) */ {
 public:
  F2fsUnlinkExitFtraceEvent();
  virtual ~F2fsUnlinkExitFtraceEvent();

  F2fsUnlinkExitFtraceEvent(const F2fsUnlinkExitFtraceEvent& from);
  F2fsUnlinkExitFtraceEvent(F2fsUnlinkExitFtraceEvent&& from) noexcept
    : F2fsUnlinkExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsUnlinkExitFtraceEvent& operator=(const F2fsUnlinkExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsUnlinkExitFtraceEvent& operator=(F2fsUnlinkExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsUnlinkExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsUnlinkExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsUnlinkExitFtraceEvent*>(
               &_F2fsUnlinkExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(F2fsUnlinkExitFtraceEvent& a, F2fsUnlinkExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsUnlinkExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsUnlinkExitFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsUnlinkExitFtraceEvent>(nullptr);
  }

  F2fsUnlinkExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsUnlinkExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsUnlinkExitFtraceEvent& from);
  void MergeFrom(const F2fsUnlinkExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsUnlinkExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsUnlinkExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsUnlinkExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsVmPageMkwriteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsVmPageMkwriteFtraceEvent) */ {
 public:
  F2fsVmPageMkwriteFtraceEvent();
  virtual ~F2fsVmPageMkwriteFtraceEvent();

  F2fsVmPageMkwriteFtraceEvent(const F2fsVmPageMkwriteFtraceEvent& from);
  F2fsVmPageMkwriteFtraceEvent(F2fsVmPageMkwriteFtraceEvent&& from) noexcept
    : F2fsVmPageMkwriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsVmPageMkwriteFtraceEvent& operator=(const F2fsVmPageMkwriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsVmPageMkwriteFtraceEvent& operator=(F2fsVmPageMkwriteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsVmPageMkwriteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsVmPageMkwriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsVmPageMkwriteFtraceEvent*>(
               &_F2fsVmPageMkwriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(F2fsVmPageMkwriteFtraceEvent& a, F2fsVmPageMkwriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsVmPageMkwriteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsVmPageMkwriteFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsVmPageMkwriteFtraceEvent>(nullptr);
  }

  F2fsVmPageMkwriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsVmPageMkwriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsVmPageMkwriteFtraceEvent& from);
  void MergeFrom(const F2fsVmPageMkwriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsVmPageMkwriteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsVmPageMkwriteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDirFieldNumber = 4,
    kIndexFieldNumber = 5,
    kDirtyFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dir = 4;
  bool has_dir() const;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::int32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 index = 5;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 dirty = 6;
  bool has_dirty() const;
  void clear_dirty();
  ::PROTOBUF_NAMESPACE_ID::int32 dirty() const;
  void set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsVmPageMkwriteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 dir_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsWriteBeginFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsWriteBeginFtraceEvent) */ {
 public:
  F2fsWriteBeginFtraceEvent();
  virtual ~F2fsWriteBeginFtraceEvent();

  F2fsWriteBeginFtraceEvent(const F2fsWriteBeginFtraceEvent& from);
  F2fsWriteBeginFtraceEvent(F2fsWriteBeginFtraceEvent&& from) noexcept
    : F2fsWriteBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsWriteBeginFtraceEvent& operator=(const F2fsWriteBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsWriteBeginFtraceEvent& operator=(F2fsWriteBeginFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsWriteBeginFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsWriteBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsWriteBeginFtraceEvent*>(
               &_F2fsWriteBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(F2fsWriteBeginFtraceEvent& a, F2fsWriteBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsWriteBeginFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsWriteBeginFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsWriteBeginFtraceEvent>(nullptr);
  }

  F2fsWriteBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsWriteBeginFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsWriteBeginFtraceEvent& from);
  void MergeFrom(const F2fsWriteBeginFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsWriteBeginFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsWriteBeginFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsWriteBeginFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsWriteCheckpointFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsWriteCheckpointFtraceEvent) */ {
 public:
  F2fsWriteCheckpointFtraceEvent();
  virtual ~F2fsWriteCheckpointFtraceEvent();

  F2fsWriteCheckpointFtraceEvent(const F2fsWriteCheckpointFtraceEvent& from);
  F2fsWriteCheckpointFtraceEvent(F2fsWriteCheckpointFtraceEvent&& from) noexcept
    : F2fsWriteCheckpointFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsWriteCheckpointFtraceEvent& operator=(const F2fsWriteCheckpointFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsWriteCheckpointFtraceEvent& operator=(F2fsWriteCheckpointFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsWriteCheckpointFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsWriteCheckpointFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsWriteCheckpointFtraceEvent*>(
               &_F2fsWriteCheckpointFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(F2fsWriteCheckpointFtraceEvent& a, F2fsWriteCheckpointFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsWriteCheckpointFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsWriteCheckpointFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsWriteCheckpointFtraceEvent>(nullptr);
  }

  F2fsWriteCheckpointFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsWriteCheckpointFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsWriteCheckpointFtraceEvent& from);
  void MergeFrom(const F2fsWriteCheckpointFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsWriteCheckpointFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsWriteCheckpointFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kDevFieldNumber = 1,
    kIsUmountFieldNumber = 2,
  };
  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 is_umount = 2;
  bool has_is_umount() const;
  void clear_is_umount();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_umount() const;
  void set_is_umount(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsWriteCheckpointFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_umount_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// -------------------------------------------------------------------

class F2fsWriteEndFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsWriteEndFtraceEvent) */ {
 public:
  F2fsWriteEndFtraceEvent();
  virtual ~F2fsWriteEndFtraceEvent();

  F2fsWriteEndFtraceEvent(const F2fsWriteEndFtraceEvent& from);
  F2fsWriteEndFtraceEvent(F2fsWriteEndFtraceEvent&& from) noexcept
    : F2fsWriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsWriteEndFtraceEvent& operator=(const F2fsWriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsWriteEndFtraceEvent& operator=(F2fsWriteEndFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const F2fsWriteEndFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const F2fsWriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsWriteEndFtraceEvent*>(
               &_F2fsWriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(F2fsWriteEndFtraceEvent& a, F2fsWriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsWriteEndFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline F2fsWriteEndFtraceEvent* New() const final {
    return CreateMaybeMessage<F2fsWriteEndFtraceEvent>(nullptr);
  }

  F2fsWriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<F2fsWriteEndFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const F2fsWriteEndFtraceEvent& from);
  void MergeFrom(const F2fsWriteEndFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(F2fsWriteEndFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.F2fsWriteEndFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev();
  ::PROTOBUF_NAMESPACE_ID::uint64 dev() const;
  void set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino();
  ::PROTOBUF_NAMESPACE_ID::uint64 ino() const;
  void set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int64 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied();
  ::PROTOBUF_NAMESPACE_ID::uint32 copied() const;
  void set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsWriteEndFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dev_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ino_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copied_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// F2fsDoSubmitBioFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsDoSubmitBioFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsDoSubmitBioFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.dev)
  return dev_;
}
inline void F2fsDoSubmitBioFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.dev)
}

// optional int32 btype = 2;
inline bool F2fsDoSubmitBioFtraceEvent::has_btype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_btype() {
  btype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsDoSubmitBioFtraceEvent::btype() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.btype)
  return btype_;
}
inline void F2fsDoSubmitBioFtraceEvent::set_btype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  btype_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.btype)
}

// optional uint32 sync = 3;
inline bool F2fsDoSubmitBioFtraceEvent::has_sync() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_sync() {
  sync_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsDoSubmitBioFtraceEvent::sync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sync)
  return sync_;
}
inline void F2fsDoSubmitBioFtraceEvent::set_sync(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sync_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sync)
}

// optional uint64 sector = 4;
inline bool F2fsDoSubmitBioFtraceEvent::has_sector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_sector() {
  sector_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsDoSubmitBioFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sector)
  return sector_;
}
inline void F2fsDoSubmitBioFtraceEvent::set_sector(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sector_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sector)
}

// optional uint32 size = 5;
inline bool F2fsDoSubmitBioFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsDoSubmitBioFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.size)
  return size_;
}
inline void F2fsDoSubmitBioFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.size)
}

// -------------------------------------------------------------------

// F2fsEvictInodeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsEvictInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsEvictInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.dev)
  return dev_;
}
inline void F2fsEvictInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsEvictInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsEvictInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.ino)
  return ino_;
}
inline void F2fsEvictInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.ino)
}

// optional uint64 pino = 3;
inline bool F2fsEvictInodeFtraceEvent::has_pino() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_pino() {
  pino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsEvictInodeFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.pino)
  return pino_;
}
inline void F2fsEvictInodeFtraceEvent::set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.pino)
}

// optional uint32 mode = 4;
inline bool F2fsEvictInodeFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsEvictInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.mode)
  return mode_;
}
inline void F2fsEvictInodeFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.mode)
}

// optional int64 size = 5;
inline bool F2fsEvictInodeFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsEvictInodeFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.size)
  return size_;
}
inline void F2fsEvictInodeFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.size)
}

// optional uint32 nlink = 6;
inline bool F2fsEvictInodeFtraceEvent::has_nlink() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_nlink() {
  nlink_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsEvictInodeFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.nlink)
  return nlink_;
}
inline void F2fsEvictInodeFtraceEvent::set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nlink_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.nlink)
}

// optional uint64 blocks = 7;
inline bool F2fsEvictInodeFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsEvictInodeFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsEvictInodeFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.blocks)
}

// optional uint32 advise = 8;
inline bool F2fsEvictInodeFtraceEvent::has_advise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void F2fsEvictInodeFtraceEvent::clear_advise() {
  advise_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsEvictInodeFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.advise)
  return advise_;
}
inline void F2fsEvictInodeFtraceEvent::set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  advise_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.advise)
}

// -------------------------------------------------------------------

// F2fsFallocateFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsFallocateFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsFallocateFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.dev)
  return dev_;
}
inline void F2fsFallocateFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsFallocateFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsFallocateFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.ino)
  return ino_;
}
inline void F2fsFallocateFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.ino)
}

// optional int32 mode = 3;
inline bool F2fsFallocateFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsFallocateFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.mode)
  return mode_;
}
inline void F2fsFallocateFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.mode)
}

// optional int64 offset = 4;
inline bool F2fsFallocateFtraceEvent::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsFallocateFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.offset)
  return offset_;
}
inline void F2fsFallocateFtraceEvent::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.offset)
}

// optional int64 len = 5;
inline bool F2fsFallocateFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsFallocateFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.len)
  return len_;
}
inline void F2fsFallocateFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.len)
}

// optional int64 size = 6;
inline bool F2fsFallocateFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsFallocateFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.size)
  return size_;
}
inline void F2fsFallocateFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.size)
}

// optional uint64 blocks = 7;
inline bool F2fsFallocateFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsFallocateFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsFallocateFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.blocks)
}

// optional int32 ret = 8;
inline bool F2fsFallocateFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsFallocateFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsFallocateFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.ret)
  return ret_;
}
inline void F2fsFallocateFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsGetDataBlockFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsGetDataBlockFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsGetDataBlockFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsGetDataBlockFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.dev)
  return dev_;
}
inline void F2fsGetDataBlockFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsGetDataBlockFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsGetDataBlockFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsGetDataBlockFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.ino)
  return ino_;
}
inline void F2fsGetDataBlockFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.ino)
}

// optional uint64 iblock = 3;
inline bool F2fsGetDataBlockFtraceEvent::has_iblock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsGetDataBlockFtraceEvent::clear_iblock() {
  iblock_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsGetDataBlockFtraceEvent::iblock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.iblock)
  return iblock_;
}
inline void F2fsGetDataBlockFtraceEvent::set_iblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  iblock_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.iblock)
}

// optional uint64 bh_start = 4;
inline bool F2fsGetDataBlockFtraceEvent::has_bh_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsGetDataBlockFtraceEvent::clear_bh_start() {
  bh_start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsGetDataBlockFtraceEvent::bh_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_start)
  return bh_start_;
}
inline void F2fsGetDataBlockFtraceEvent::set_bh_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  bh_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_start)
}

// optional uint64 bh_size = 5;
inline bool F2fsGetDataBlockFtraceEvent::has_bh_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsGetDataBlockFtraceEvent::clear_bh_size() {
  bh_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsGetDataBlockFtraceEvent::bh_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_size)
  return bh_size_;
}
inline void F2fsGetDataBlockFtraceEvent::set_bh_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  bh_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_size)
}

// optional int32 ret = 6;
inline bool F2fsGetDataBlockFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsGetDataBlockFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsGetDataBlockFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.ret)
  return ret_;
}
inline void F2fsGetDataBlockFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsGetVictimFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsGetVictimFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsGetVictimFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.dev)
  return dev_;
}
inline void F2fsGetVictimFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.dev)
}

// optional int32 type = 2;
inline bool F2fsGetVictimFtraceEvent::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsGetVictimFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.type)
  return type_;
}
inline void F2fsGetVictimFtraceEvent::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.type)
}

// optional int32 gc_type = 3;
inline bool F2fsGetVictimFtraceEvent::has_gc_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_gc_type() {
  gc_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsGetVictimFtraceEvent::gc_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.gc_type)
  return gc_type_;
}
inline void F2fsGetVictimFtraceEvent::set_gc_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  gc_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.gc_type)
}

// optional int32 alloc_mode = 4;
inline bool F2fsGetVictimFtraceEvent::has_alloc_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_alloc_mode() {
  alloc_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsGetVictimFtraceEvent::alloc_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.alloc_mode)
  return alloc_mode_;
}
inline void F2fsGetVictimFtraceEvent::set_alloc_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  alloc_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.alloc_mode)
}

// optional int32 gc_mode = 5;
inline bool F2fsGetVictimFtraceEvent::has_gc_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_gc_mode() {
  gc_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsGetVictimFtraceEvent::gc_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.gc_mode)
  return gc_mode_;
}
inline void F2fsGetVictimFtraceEvent::set_gc_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  gc_mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.gc_mode)
}

// optional uint32 victim = 6;
inline bool F2fsGetVictimFtraceEvent::has_victim() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_victim() {
  victim_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsGetVictimFtraceEvent::victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.victim)
  return victim_;
}
inline void F2fsGetVictimFtraceEvent::set_victim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  victim_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.victim)
}

// optional uint32 ofs_unit = 7;
inline bool F2fsGetVictimFtraceEvent::has_ofs_unit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_ofs_unit() {
  ofs_unit_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsGetVictimFtraceEvent::ofs_unit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.ofs_unit)
  return ofs_unit_;
}
inline void F2fsGetVictimFtraceEvent::set_ofs_unit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ofs_unit_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.ofs_unit)
}

// optional uint32 pre_victim = 8;
inline bool F2fsGetVictimFtraceEvent::has_pre_victim() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_pre_victim() {
  pre_victim_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsGetVictimFtraceEvent::pre_victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.pre_victim)
  return pre_victim_;
}
inline void F2fsGetVictimFtraceEvent::set_pre_victim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  pre_victim_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.pre_victim)
}

// optional uint32 prefree = 9;
inline bool F2fsGetVictimFtraceEvent::has_prefree() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_prefree() {
  prefree_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsGetVictimFtraceEvent::prefree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.prefree)
  return prefree_;
}
inline void F2fsGetVictimFtraceEvent::set_prefree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  prefree_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.prefree)
}

// optional uint32 free = 10;
inline bool F2fsGetVictimFtraceEvent::has_free() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void F2fsGetVictimFtraceEvent::clear_free() {
  free_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsGetVictimFtraceEvent::free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.free)
  return free_;
}
inline void F2fsGetVictimFtraceEvent::set_free(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  free_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.free)
}

// -------------------------------------------------------------------

// F2fsIgetFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsIgetFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsIgetFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.dev)
  return dev_;
}
inline void F2fsIgetFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsIgetFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsIgetFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.ino)
  return ino_;
}
inline void F2fsIgetFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.ino)
}

// optional uint64 pino = 3;
inline bool F2fsIgetFtraceEvent::has_pino() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_pino() {
  pino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsIgetFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.pino)
  return pino_;
}
inline void F2fsIgetFtraceEvent::set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.pino)
}

// optional uint32 mode = 4;
inline bool F2fsIgetFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsIgetFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.mode)
  return mode_;
}
inline void F2fsIgetFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.mode)
}

// optional int64 size = 5;
inline bool F2fsIgetFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsIgetFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.size)
  return size_;
}
inline void F2fsIgetFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.size)
}

// optional uint32 nlink = 6;
inline bool F2fsIgetFtraceEvent::has_nlink() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_nlink() {
  nlink_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsIgetFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.nlink)
  return nlink_;
}
inline void F2fsIgetFtraceEvent::set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nlink_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.nlink)
}

// optional uint64 blocks = 7;
inline bool F2fsIgetFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsIgetFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsIgetFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.blocks)
}

// optional uint32 advise = 8;
inline bool F2fsIgetFtraceEvent::has_advise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void F2fsIgetFtraceEvent::clear_advise() {
  advise_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsIgetFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.advise)
  return advise_;
}
inline void F2fsIgetFtraceEvent::set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  advise_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.advise)
}

// -------------------------------------------------------------------

// F2fsIgetExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsIgetExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsIgetExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsIgetExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetExitFtraceEvent.dev)
  return dev_;
}
inline void F2fsIgetExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsIgetExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsIgetExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsIgetExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetExitFtraceEvent.ino)
  return ino_;
}
inline void F2fsIgetExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool F2fsIgetExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsIgetExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsIgetExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetExitFtraceEvent.ret)
  return ret_;
}
inline void F2fsIgetExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsNewInodeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsNewInodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsNewInodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsNewInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsNewInodeFtraceEvent.dev)
  return dev_;
}
inline void F2fsNewInodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsNewInodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsNewInodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsNewInodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsNewInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsNewInodeFtraceEvent.ino)
  return ino_;
}
inline void F2fsNewInodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsNewInodeFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool F2fsNewInodeFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsNewInodeFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsNewInodeFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsNewInodeFtraceEvent.ret)
  return ret_;
}
inline void F2fsNewInodeFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsNewInodeFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsReadpageFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsReadpageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsReadpageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsReadpageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.dev)
  return dev_;
}
inline void F2fsReadpageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsReadpageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsReadpageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsReadpageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.ino)
  return ino_;
}
inline void F2fsReadpageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.ino)
}

// optional uint64 index = 3;
inline bool F2fsReadpageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsReadpageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsReadpageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.index)
  return index_;
}
inline void F2fsReadpageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.index)
}

// optional uint64 blkaddr = 4;
inline bool F2fsReadpageFtraceEvent::has_blkaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsReadpageFtraceEvent::clear_blkaddr() {
  blkaddr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsReadpageFtraceEvent::blkaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.blkaddr)
  return blkaddr_;
}
inline void F2fsReadpageFtraceEvent::set_blkaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  blkaddr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.blkaddr)
}

// optional int32 type = 5;
inline bool F2fsReadpageFtraceEvent::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsReadpageFtraceEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsReadpageFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.type)
  return type_;
}
inline void F2fsReadpageFtraceEvent::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.type)
}

// -------------------------------------------------------------------

// F2fsReserveNewBlockFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsReserveNewBlockFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsReserveNewBlockFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsReserveNewBlockFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReserveNewBlockFtraceEvent.dev)
  return dev_;
}
inline void F2fsReserveNewBlockFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReserveNewBlockFtraceEvent.dev)
}

// optional uint32 nid = 2;
inline bool F2fsReserveNewBlockFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsReserveNewBlockFtraceEvent::clear_nid() {
  nid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsReserveNewBlockFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReserveNewBlockFtraceEvent.nid)
  return nid_;
}
inline void F2fsReserveNewBlockFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReserveNewBlockFtraceEvent.nid)
}

// optional uint32 ofs_in_node = 3;
inline bool F2fsReserveNewBlockFtraceEvent::has_ofs_in_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsReserveNewBlockFtraceEvent::clear_ofs_in_node() {
  ofs_in_node_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsReserveNewBlockFtraceEvent::ofs_in_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReserveNewBlockFtraceEvent.ofs_in_node)
  return ofs_in_node_;
}
inline void F2fsReserveNewBlockFtraceEvent::set_ofs_in_node(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ofs_in_node_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReserveNewBlockFtraceEvent.ofs_in_node)
}

// -------------------------------------------------------------------

// F2fsSetPageDirtyFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSetPageDirtyFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSetPageDirtyFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dev)
  return dev_;
}
inline void F2fsSetPageDirtyFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsSetPageDirtyFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSetPageDirtyFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.ino)
  return ino_;
}
inline void F2fsSetPageDirtyFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.ino)
}

// optional int32 type = 3;
inline bool F2fsSetPageDirtyFtraceEvent::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSetPageDirtyFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.type)
  return type_;
}
inline void F2fsSetPageDirtyFtraceEvent::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.type)
}

// optional int32 dir = 4;
inline bool F2fsSetPageDirtyFtraceEvent::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSetPageDirtyFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dir)
  return dir_;
}
inline void F2fsSetPageDirtyFtraceEvent::set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dir)
}

// optional uint64 index = 5;
inline bool F2fsSetPageDirtyFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSetPageDirtyFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.index)
  return index_;
}
inline void F2fsSetPageDirtyFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.index)
}

// optional int32 dirty = 6;
inline bool F2fsSetPageDirtyFtraceEvent::has_dirty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_dirty() {
  dirty_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSetPageDirtyFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dirty)
  return dirty_;
}
inline void F2fsSetPageDirtyFtraceEvent::set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  dirty_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dirty)
}

// -------------------------------------------------------------------

// F2fsSubmitWritePageFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSubmitWritePageFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSubmitWritePageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.dev)
  return dev_;
}
inline void F2fsSubmitWritePageFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsSubmitWritePageFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSubmitWritePageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.ino)
  return ino_;
}
inline void F2fsSubmitWritePageFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.ino)
}

// optional int32 type = 3;
inline bool F2fsSubmitWritePageFtraceEvent::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSubmitWritePageFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.type)
  return type_;
}
inline void F2fsSubmitWritePageFtraceEvent::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.type)
}

// optional uint64 index = 4;
inline bool F2fsSubmitWritePageFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSubmitWritePageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.index)
  return index_;
}
inline void F2fsSubmitWritePageFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.index)
}

// optional uint32 block = 5;
inline bool F2fsSubmitWritePageFtraceEvent::has_block() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_block() {
  block_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsSubmitWritePageFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.block)
  return block_;
}
inline void F2fsSubmitWritePageFtraceEvent::set_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  block_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.block)
}

// -------------------------------------------------------------------

// F2fsSyncFileEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSyncFileEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFileEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.dev)
  return dev_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsSyncFileEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFileEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.ino)
  return ino_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.ino)
}

// optional uint64 pino = 3;
inline bool F2fsSyncFileEnterFtraceEvent::has_pino() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_pino() {
  pino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFileEnterFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.pino)
  return pino_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.pino)
}

// optional uint32 mode = 4;
inline bool F2fsSyncFileEnterFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsSyncFileEnterFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.mode)
  return mode_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.mode)
}

// optional int64 size = 5;
inline bool F2fsSyncFileEnterFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsSyncFileEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.size)
  return size_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.size)
}

// optional uint32 nlink = 6;
inline bool F2fsSyncFileEnterFtraceEvent::has_nlink() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_nlink() {
  nlink_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsSyncFileEnterFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.nlink)
  return nlink_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nlink_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.nlink)
}

// optional uint64 blocks = 7;
inline bool F2fsSyncFileEnterFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFileEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.blocks)
}

// optional uint32 advise = 8;
inline bool F2fsSyncFileEnterFtraceEvent::has_advise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_advise() {
  advise_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsSyncFileEnterFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.advise)
  return advise_;
}
inline void F2fsSyncFileEnterFtraceEvent::set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  advise_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.advise)
}

// -------------------------------------------------------------------

// F2fsSyncFileExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSyncFileExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsSyncFileExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFileExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.dev)
  return dev_;
}
inline void F2fsSyncFileExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsSyncFileExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsSyncFileExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFileExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.ino)
  return ino_;
}
inline void F2fsSyncFileExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.ino)
}

// optional uint32 need_cp = 3;
inline bool F2fsSyncFileExitFtraceEvent::has_need_cp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsSyncFileExitFtraceEvent::clear_need_cp() {
  need_cp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsSyncFileExitFtraceEvent::need_cp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.need_cp)
  return need_cp_;
}
inline void F2fsSyncFileExitFtraceEvent::set_need_cp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  need_cp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.need_cp)
}

// optional int32 datasync = 4;
inline bool F2fsSyncFileExitFtraceEvent::has_datasync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsSyncFileExitFtraceEvent::clear_datasync() {
  datasync_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSyncFileExitFtraceEvent::datasync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.datasync)
  return datasync_;
}
inline void F2fsSyncFileExitFtraceEvent::set_datasync(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  datasync_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.datasync)
}

// optional int32 ret = 5;
inline bool F2fsSyncFileExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsSyncFileExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSyncFileExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.ret)
  return ret_;
}
inline void F2fsSyncFileExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsSyncFsFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSyncFsFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsSyncFsFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsSyncFsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFsFtraceEvent.dev)
  return dev_;
}
inline void F2fsSyncFsFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFsFtraceEvent.dev)
}

// optional int32 dirty = 2;
inline bool F2fsSyncFsFtraceEvent::has_dirty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsSyncFsFtraceEvent::clear_dirty() {
  dirty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSyncFsFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFsFtraceEvent.dirty)
  return dirty_;
}
inline void F2fsSyncFsFtraceEvent::set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dirty_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFsFtraceEvent.dirty)
}

// optional int32 wait = 3;
inline bool F2fsSyncFsFtraceEvent::has_wait() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsSyncFsFtraceEvent::clear_wait() {
  wait_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsSyncFsFtraceEvent::wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFsFtraceEvent.wait)
  return wait_;
}
inline void F2fsSyncFsFtraceEvent::set_wait(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  wait_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFsFtraceEvent.wait)
}

// -------------------------------------------------------------------

// F2fsTruncateFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.ino)
}

// optional uint64 pino = 3;
inline bool F2fsTruncateFtraceEvent::has_pino() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_pino() {
  pino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.pino)
  return pino_;
}
inline void F2fsTruncateFtraceEvent::set_pino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.pino)
}

// optional uint32 mode = 4;
inline bool F2fsTruncateFtraceEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.mode)
  return mode_;
}
inline void F2fsTruncateFtraceEvent::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.mode)
}

// optional int64 size = 5;
inline bool F2fsTruncateFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsTruncateFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.size)
  return size_;
}
inline void F2fsTruncateFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.size)
}

// optional uint32 nlink = 6;
inline bool F2fsTruncateFtraceEvent::has_nlink() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_nlink() {
  nlink_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.nlink)
  return nlink_;
}
inline void F2fsTruncateFtraceEvent::set_nlink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nlink_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.nlink)
}

// optional uint64 blocks = 7;
inline bool F2fsTruncateFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsTruncateFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.blocks)
}

// optional uint32 advise = 8;
inline bool F2fsTruncateFtraceEvent::has_advise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void F2fsTruncateFtraceEvent::clear_advise() {
  advise_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.advise)
  return advise_;
}
inline void F2fsTruncateFtraceEvent::set_advise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  advise_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.advise)
}

// -------------------------------------------------------------------

// F2fsTruncateBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.ino)
}

// optional int64 size = 3;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsTruncateBlocksEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.size)
  return size_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.size)
}

// optional uint64 blocks = 4;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateBlocksEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.blocks)
}

// optional uint64 from = 5;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateBlocksEnterFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.from)
  return from_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  from_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.from)
}

// -------------------------------------------------------------------

// F2fsTruncateBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateBlocksExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateBlocksExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateBlocksExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateBlocksExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateBlocksExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateBlocksExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool F2fsTruncateBlocksExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateBlocksExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsTruncateBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ret)
  return ret_;
}
inline void F2fsTruncateBlocksExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsTruncateDataBlocksRangeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateDataBlocksRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateDataBlocksRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ino)
}

// optional uint32 nid = 3;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_nid() {
  nid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateDataBlocksRangeFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.nid)
  return nid_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.nid)
}

// optional uint32 ofs = 4;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_ofs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_ofs() {
  ofs_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateDataBlocksRangeFtraceEvent::ofs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ofs)
  return ofs_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_ofs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ofs_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ofs)
}

// optional int32 free = 5;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_free() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_free() {
  free_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsTruncateDataBlocksRangeFtraceEvent::free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.free)
  return free_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  free_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.free)
}

// -------------------------------------------------------------------

// F2fsTruncateInodeBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateInodeBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateInodeBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.ino)
}

// optional int64 size = 3;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsTruncateInodeBlocksEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.size)
  return size_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.size)
}

// optional uint64 blocks = 4;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateInodeBlocksEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.blocks)
}

// optional uint64 from = 5;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateInodeBlocksEnterFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.from)
  return from_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  from_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.from)
}

// -------------------------------------------------------------------

// F2fsTruncateInodeBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateInodeBlocksExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateInodeBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateInodeBlocksExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateInodeBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool F2fsTruncateInodeBlocksExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsTruncateInodeBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ret)
  return ret_;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsTruncateNodeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateNodeFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateNodeFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateNodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateNodeFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateNodeFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateNodeFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateNodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateNodeFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.ino)
}

// optional uint32 nid = 3;
inline bool F2fsTruncateNodeFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateNodeFtraceEvent::clear_nid() {
  nid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateNodeFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.nid)
  return nid_;
}
inline void F2fsTruncateNodeFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.nid)
}

// optional uint32 blk_addr = 4;
inline bool F2fsTruncateNodeFtraceEvent::has_blk_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncateNodeFtraceEvent::clear_blk_addr() {
  blk_addr_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateNodeFtraceEvent::blk_addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.blk_addr)
  return blk_addr_;
}
inline void F2fsTruncateNodeFtraceEvent::set_blk_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  blk_addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.blk_addr)
}

// -------------------------------------------------------------------

// F2fsTruncateNodesEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateNodesEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateNodesEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.ino)
}

// optional uint32 nid = 3;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_nid() {
  nid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateNodesEnterFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.nid)
  return nid_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.nid)
}

// optional uint32 blk_addr = 4;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_blk_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_blk_addr() {
  blk_addr_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncateNodesEnterFtraceEvent::blk_addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.blk_addr)
  return blk_addr_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_blk_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  blk_addr_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.blk_addr)
}

// -------------------------------------------------------------------

// F2fsTruncateNodesExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateNodesExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncateNodesExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateNodesExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncateNodesExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncateNodesExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncateNodesExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncateNodesExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncateNodesExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool F2fsTruncateNodesExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncateNodesExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsTruncateNodesExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ret)
  return ret_;
}
inline void F2fsTruncateNodesExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsTruncatePartialNodesFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncatePartialNodesFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.dev)
  return dev_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsTruncatePartialNodesFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.ino)
  return ino_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.ino)
}

// optional uint32 nid = 3;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_nid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_nid() {
  nid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsTruncatePartialNodesFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.nid)
  return nid_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.nid)
}

// optional int32 depth = 4;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsTruncatePartialNodesFtraceEvent::depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.depth)
  return depth_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  depth_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.depth)
}

// optional int32 err = 5;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsTruncatePartialNodesFtraceEvent::err() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.err)
  return err_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  err_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.err)
}

// -------------------------------------------------------------------

// F2fsUnlinkEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsUnlinkEnterFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsUnlinkEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.dev)
  return dev_;
}
inline void F2fsUnlinkEnterFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsUnlinkEnterFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsUnlinkEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.ino)
  return ino_;
}
inline void F2fsUnlinkEnterFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.ino)
}

// optional int64 size = 3;
inline bool F2fsUnlinkEnterFtraceEvent::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsUnlinkEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.size)
  return size_;
}
inline void F2fsUnlinkEnterFtraceEvent::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.size)
}

// optional uint64 blocks = 4;
inline bool F2fsUnlinkEnterFtraceEvent::has_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsUnlinkEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.blocks)
  return blocks_;
}
inline void F2fsUnlinkEnterFtraceEvent::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  blocks_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.blocks)
}

// optional string name = 5;
inline bool F2fsUnlinkEnterFtraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& F2fsUnlinkEnterFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
  return name_.GetNoArena();
}
inline void F2fsUnlinkEnterFtraceEvent::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}
inline void F2fsUnlinkEnterFtraceEvent::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}
inline void F2fsUnlinkEnterFtraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}
inline void F2fsUnlinkEnterFtraceEvent::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}
inline std::string* F2fsUnlinkEnterFtraceEvent::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* F2fsUnlinkEnterFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void F2fsUnlinkEnterFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}

// -------------------------------------------------------------------

// F2fsUnlinkExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsUnlinkExitFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsUnlinkExitFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsUnlinkExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkExitFtraceEvent.dev)
  return dev_;
}
inline void F2fsUnlinkExitFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkExitFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsUnlinkExitFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsUnlinkExitFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsUnlinkExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkExitFtraceEvent.ino)
  return ino_;
}
inline void F2fsUnlinkExitFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkExitFtraceEvent.ino)
}

// optional int32 ret = 3;
inline bool F2fsUnlinkExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsUnlinkExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsUnlinkExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkExitFtraceEvent.ret)
  return ret_;
}
inline void F2fsUnlinkExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkExitFtraceEvent.ret)
}

// -------------------------------------------------------------------

// F2fsVmPageMkwriteFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsVmPageMkwriteFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsVmPageMkwriteFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dev)
  return dev_;
}
inline void F2fsVmPageMkwriteFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsVmPageMkwriteFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsVmPageMkwriteFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.ino)
  return ino_;
}
inline void F2fsVmPageMkwriteFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.ino)
}

// optional int32 type = 3;
inline bool F2fsVmPageMkwriteFtraceEvent::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsVmPageMkwriteFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.type)
  return type_;
}
inline void F2fsVmPageMkwriteFtraceEvent::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.type)
}

// optional int32 dir = 4;
inline bool F2fsVmPageMkwriteFtraceEvent::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsVmPageMkwriteFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dir)
  return dir_;
}
inline void F2fsVmPageMkwriteFtraceEvent::set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dir)
}

// optional uint64 index = 5;
inline bool F2fsVmPageMkwriteFtraceEvent::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsVmPageMkwriteFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.index)
  return index_;
}
inline void F2fsVmPageMkwriteFtraceEvent::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.index)
}

// optional int32 dirty = 6;
inline bool F2fsVmPageMkwriteFtraceEvent::has_dirty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_dirty() {
  dirty_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 F2fsVmPageMkwriteFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dirty)
  return dirty_;
}
inline void F2fsVmPageMkwriteFtraceEvent::set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  dirty_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dirty)
}

// -------------------------------------------------------------------

// F2fsWriteBeginFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsWriteBeginFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsWriteBeginFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsWriteBeginFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.dev)
  return dev_;
}
inline void F2fsWriteBeginFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsWriteBeginFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsWriteBeginFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsWriteBeginFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.ino)
  return ino_;
}
inline void F2fsWriteBeginFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool F2fsWriteBeginFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsWriteBeginFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsWriteBeginFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.pos)
  return pos_;
}
inline void F2fsWriteBeginFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool F2fsWriteBeginFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsWriteBeginFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsWriteBeginFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.len)
  return len_;
}
inline void F2fsWriteBeginFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.len)
}

// optional uint32 flags = 5;
inline bool F2fsWriteBeginFtraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsWriteBeginFtraceEvent::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsWriteBeginFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.flags)
  return flags_;
}
inline void F2fsWriteBeginFtraceEvent::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.flags)
}

// -------------------------------------------------------------------

// F2fsWriteCheckpointFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsWriteCheckpointFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsWriteCheckpointFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.dev)
  return dev_;
}
inline void F2fsWriteCheckpointFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.dev)
}

// optional uint32 is_umount = 2;
inline bool F2fsWriteCheckpointFtraceEvent::has_is_umount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_is_umount() {
  is_umount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsWriteCheckpointFtraceEvent::is_umount() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.is_umount)
  return is_umount_;
}
inline void F2fsWriteCheckpointFtraceEvent::set_is_umount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  is_umount_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.is_umount)
}

// optional string msg = 3;
inline bool F2fsWriteCheckpointFtraceEvent::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& F2fsWriteCheckpointFtraceEvent::msg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
  return msg_.GetNoArena();
}
inline void F2fsWriteCheckpointFtraceEvent::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}
inline void F2fsWriteCheckpointFtraceEvent::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}
inline void F2fsWriteCheckpointFtraceEvent::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}
inline void F2fsWriteCheckpointFtraceEvent::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}
inline std::string* F2fsWriteCheckpointFtraceEvent::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* F2fsWriteCheckpointFtraceEvent::release_msg() {
  // @@protoc_insertion_point(field_release:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void F2fsWriteCheckpointFtraceEvent::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}

// -------------------------------------------------------------------

// F2fsWriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsWriteEndFtraceEvent::has_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void F2fsWriteEndFtraceEvent::clear_dev() {
  dev_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsWriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.dev)
  return dev_;
}
inline void F2fsWriteEndFtraceEvent::set_dev(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  dev_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.dev)
}

// optional uint64 ino = 2;
inline bool F2fsWriteEndFtraceEvent::has_ino() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2fsWriteEndFtraceEvent::clear_ino() {
  ino_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 F2fsWriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.ino)
  return ino_;
}
inline void F2fsWriteEndFtraceEvent::set_ino(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ino_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.ino)
}

// optional int64 pos = 3;
inline bool F2fsWriteEndFtraceEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2fsWriteEndFtraceEvent::clear_pos() {
  pos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 F2fsWriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.pos)
  return pos_;
}
inline void F2fsWriteEndFtraceEvent::set_pos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.pos)
}

// optional uint32 len = 4;
inline bool F2fsWriteEndFtraceEvent::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void F2fsWriteEndFtraceEvent::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsWriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.len)
  return len_;
}
inline void F2fsWriteEndFtraceEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  len_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.len)
}

// optional uint32 copied = 5;
inline bool F2fsWriteEndFtraceEvent::has_copied() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void F2fsWriteEndFtraceEvent::clear_copied() {
  copied_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 F2fsWriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.copied)
  return copied_;
}
inline void F2fsWriteEndFtraceEvent::set_copied(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  copied_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.copied)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto
