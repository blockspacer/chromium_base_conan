// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TASK_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TASK_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class TaskRenameFtraceEvent;
class TaskNewtaskFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT TaskRenameFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kOldcommFieldNumber = 2,
    kNewcommFieldNumber = 3,
    kOomScoreAdjFieldNumber = 4,
  };

  TaskRenameFtraceEvent();
  ~TaskRenameFtraceEvent() override;
  TaskRenameFtraceEvent(TaskRenameFtraceEvent&&) noexcept;
  TaskRenameFtraceEvent& operator=(TaskRenameFtraceEvent&&);
  TaskRenameFtraceEvent(const TaskRenameFtraceEvent&);
  TaskRenameFtraceEvent& operator=(const TaskRenameFtraceEvent&);
  bool operator==(const TaskRenameFtraceEvent&) const;
  bool operator!=(const TaskRenameFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_oldcomm() const { return _has_field_[2]; }
  const std::string& oldcomm() const { return oldcomm_; }
  void set_oldcomm(const std::string& value) { oldcomm_ = value; _has_field_.set(2); }

  bool has_newcomm() const { return _has_field_[3]; }
  const std::string& newcomm() const { return newcomm_; }
  void set_newcomm(const std::string& value) { newcomm_ = value; _has_field_.set(3); }

  bool has_oom_score_adj() const { return _has_field_[4]; }
  int32_t oom_score_adj() const { return oom_score_adj_; }
  void set_oom_score_adj(int32_t value) { oom_score_adj_ = value; _has_field_.set(4); }

 private:
  int32_t pid_{};
  std::string oldcomm_{};
  std::string newcomm_{};
  int32_t oom_score_adj_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT TaskNewtaskFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kCommFieldNumber = 2,
    kCloneFlagsFieldNumber = 3,
    kOomScoreAdjFieldNumber = 4,
  };

  TaskNewtaskFtraceEvent();
  ~TaskNewtaskFtraceEvent() override;
  TaskNewtaskFtraceEvent(TaskNewtaskFtraceEvent&&) noexcept;
  TaskNewtaskFtraceEvent& operator=(TaskNewtaskFtraceEvent&&);
  TaskNewtaskFtraceEvent(const TaskNewtaskFtraceEvent&);
  TaskNewtaskFtraceEvent& operator=(const TaskNewtaskFtraceEvent&);
  bool operator==(const TaskNewtaskFtraceEvent&) const;
  bool operator!=(const TaskNewtaskFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_comm() const { return _has_field_[2]; }
  const std::string& comm() const { return comm_; }
  void set_comm(const std::string& value) { comm_ = value; _has_field_.set(2); }

  bool has_clone_flags() const { return _has_field_[3]; }
  uint64_t clone_flags() const { return clone_flags_; }
  void set_clone_flags(uint64_t value) { clone_flags_ = value; _has_field_.set(3); }

  bool has_oom_score_adj() const { return _has_field_[4]; }
  int32_t oom_score_adj() const { return oom_score_adj_; }
  void set_oom_score_adj(int32_t value) { oom_score_adj_ = value; _has_field_.set(4); }

 private:
  int32_t pid_{};
  std::string comm_{};
  uint64_t clone_flags_{};
  int32_t oom_score_adj_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TASK_PROTO_CPP_H_
