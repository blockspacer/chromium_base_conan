#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/irq.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

IrqHandlerExitFtraceEvent::IrqHandlerExitFtraceEvent() = default;
IrqHandlerExitFtraceEvent::~IrqHandlerExitFtraceEvent() = default;
IrqHandlerExitFtraceEvent::IrqHandlerExitFtraceEvent(const IrqHandlerExitFtraceEvent&) = default;
IrqHandlerExitFtraceEvent& IrqHandlerExitFtraceEvent::operator=(const IrqHandlerExitFtraceEvent&) = default;
IrqHandlerExitFtraceEvent::IrqHandlerExitFtraceEvent(IrqHandlerExitFtraceEvent&&) noexcept = default;
IrqHandlerExitFtraceEvent& IrqHandlerExitFtraceEvent::operator=(IrqHandlerExitFtraceEvent&&) = default;

bool IrqHandlerExitFtraceEvent::operator==(const IrqHandlerExitFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && irq_ == other.irq_
   && ret_ == other.ret_;
}

bool IrqHandlerExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* irq */:
        field.get(&irq_);
        break;
      case 2 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string IrqHandlerExitFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> IrqHandlerExitFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void IrqHandlerExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: irq
  if (_has_field_[1]) {
    msg->AppendVarInt(1, irq_);
  }

  // Field 2: ret
  if (_has_field_[2]) {
    msg->AppendVarInt(2, ret_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


IrqHandlerEntryFtraceEvent::IrqHandlerEntryFtraceEvent() = default;
IrqHandlerEntryFtraceEvent::~IrqHandlerEntryFtraceEvent() = default;
IrqHandlerEntryFtraceEvent::IrqHandlerEntryFtraceEvent(const IrqHandlerEntryFtraceEvent&) = default;
IrqHandlerEntryFtraceEvent& IrqHandlerEntryFtraceEvent::operator=(const IrqHandlerEntryFtraceEvent&) = default;
IrqHandlerEntryFtraceEvent::IrqHandlerEntryFtraceEvent(IrqHandlerEntryFtraceEvent&&) noexcept = default;
IrqHandlerEntryFtraceEvent& IrqHandlerEntryFtraceEvent::operator=(IrqHandlerEntryFtraceEvent&&) = default;

bool IrqHandlerEntryFtraceEvent::operator==(const IrqHandlerEntryFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && irq_ == other.irq_
   && name_ == other.name_
   && handler_ == other.handler_;
}

bool IrqHandlerEntryFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* irq */:
        field.get(&irq_);
        break;
      case 2 /* name */:
        field.get(&name_);
        break;
      case 3 /* handler */:
        field.get(&handler_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string IrqHandlerEntryFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> IrqHandlerEntryFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void IrqHandlerEntryFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: irq
  if (_has_field_[1]) {
    msg->AppendVarInt(1, irq_);
  }

  // Field 2: name
  if (_has_field_[2]) {
    msg->AppendString(2, name_);
  }

  // Field 3: handler
  if (_has_field_[3]) {
    msg->AppendVarInt(3, handler_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


SoftirqRaiseFtraceEvent::SoftirqRaiseFtraceEvent() = default;
SoftirqRaiseFtraceEvent::~SoftirqRaiseFtraceEvent() = default;
SoftirqRaiseFtraceEvent::SoftirqRaiseFtraceEvent(const SoftirqRaiseFtraceEvent&) = default;
SoftirqRaiseFtraceEvent& SoftirqRaiseFtraceEvent::operator=(const SoftirqRaiseFtraceEvent&) = default;
SoftirqRaiseFtraceEvent::SoftirqRaiseFtraceEvent(SoftirqRaiseFtraceEvent&&) noexcept = default;
SoftirqRaiseFtraceEvent& SoftirqRaiseFtraceEvent::operator=(SoftirqRaiseFtraceEvent&&) = default;

bool SoftirqRaiseFtraceEvent::operator==(const SoftirqRaiseFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && vec_ == other.vec_;
}

bool SoftirqRaiseFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* vec */:
        field.get(&vec_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SoftirqRaiseFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SoftirqRaiseFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SoftirqRaiseFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: vec
  if (_has_field_[1]) {
    msg->AppendVarInt(1, vec_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


SoftirqExitFtraceEvent::SoftirqExitFtraceEvent() = default;
SoftirqExitFtraceEvent::~SoftirqExitFtraceEvent() = default;
SoftirqExitFtraceEvent::SoftirqExitFtraceEvent(const SoftirqExitFtraceEvent&) = default;
SoftirqExitFtraceEvent& SoftirqExitFtraceEvent::operator=(const SoftirqExitFtraceEvent&) = default;
SoftirqExitFtraceEvent::SoftirqExitFtraceEvent(SoftirqExitFtraceEvent&&) noexcept = default;
SoftirqExitFtraceEvent& SoftirqExitFtraceEvent::operator=(SoftirqExitFtraceEvent&&) = default;

bool SoftirqExitFtraceEvent::operator==(const SoftirqExitFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && vec_ == other.vec_;
}

bool SoftirqExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* vec */:
        field.get(&vec_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SoftirqExitFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SoftirqExitFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SoftirqExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: vec
  if (_has_field_[1]) {
    msg->AppendVarInt(1, vec_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


SoftirqEntryFtraceEvent::SoftirqEntryFtraceEvent() = default;
SoftirqEntryFtraceEvent::~SoftirqEntryFtraceEvent() = default;
SoftirqEntryFtraceEvent::SoftirqEntryFtraceEvent(const SoftirqEntryFtraceEvent&) = default;
SoftirqEntryFtraceEvent& SoftirqEntryFtraceEvent::operator=(const SoftirqEntryFtraceEvent&) = default;
SoftirqEntryFtraceEvent::SoftirqEntryFtraceEvent(SoftirqEntryFtraceEvent&&) noexcept = default;
SoftirqEntryFtraceEvent& SoftirqEntryFtraceEvent::operator=(SoftirqEntryFtraceEvent&&) = default;

bool SoftirqEntryFtraceEvent::operator==(const SoftirqEntryFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && vec_ == other.vec_;
}

bool SoftirqEntryFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* vec */:
        field.get(&vec_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SoftirqEntryFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SoftirqEntryFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SoftirqEntryFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: vec
  if (_has_field_[1]) {
    msg->AppendVarInt(1, vec_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
