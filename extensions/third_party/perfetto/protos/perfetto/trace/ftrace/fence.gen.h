// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FENCE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FENCE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class FenceSignaledFtraceEvent;
class FenceEnableSignalFtraceEvent;
class FenceDestroyFtraceEvent;
class FenceInitFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT FenceSignaledFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  FenceSignaledFtraceEvent();
  ~FenceSignaledFtraceEvent() override;
  FenceSignaledFtraceEvent(FenceSignaledFtraceEvent&&) noexcept;
  FenceSignaledFtraceEvent& operator=(FenceSignaledFtraceEvent&&);
  FenceSignaledFtraceEvent(const FenceSignaledFtraceEvent&);
  FenceSignaledFtraceEvent& operator=(const FenceSignaledFtraceEvent&);
  bool operator==(const FenceSignaledFtraceEvent&) const;
  bool operator!=(const FenceSignaledFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT FenceEnableSignalFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  FenceEnableSignalFtraceEvent();
  ~FenceEnableSignalFtraceEvent() override;
  FenceEnableSignalFtraceEvent(FenceEnableSignalFtraceEvent&&) noexcept;
  FenceEnableSignalFtraceEvent& operator=(FenceEnableSignalFtraceEvent&&);
  FenceEnableSignalFtraceEvent(const FenceEnableSignalFtraceEvent&);
  FenceEnableSignalFtraceEvent& operator=(const FenceEnableSignalFtraceEvent&);
  bool operator==(const FenceEnableSignalFtraceEvent&) const;
  bool operator!=(const FenceEnableSignalFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT FenceDestroyFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  FenceDestroyFtraceEvent();
  ~FenceDestroyFtraceEvent() override;
  FenceDestroyFtraceEvent(FenceDestroyFtraceEvent&&) noexcept;
  FenceDestroyFtraceEvent& operator=(FenceDestroyFtraceEvent&&);
  FenceDestroyFtraceEvent(const FenceDestroyFtraceEvent&);
  FenceDestroyFtraceEvent& operator=(const FenceDestroyFtraceEvent&);
  bool operator==(const FenceDestroyFtraceEvent&) const;
  bool operator!=(const FenceDestroyFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT FenceInitFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  FenceInitFtraceEvent();
  ~FenceInitFtraceEvent() override;
  FenceInitFtraceEvent(FenceInitFtraceEvent&&) noexcept;
  FenceInitFtraceEvent& operator=(FenceInitFtraceEvent&&);
  FenceInitFtraceEvent(const FenceInitFtraceEvent&);
  FenceInitFtraceEvent& operator=(const FenceInitFtraceEvent&);
  bool operator==(const FenceInitFtraceEvent&) const;
  bool operator!=(const FenceInitFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FENCE_PROTO_CPP_H_
