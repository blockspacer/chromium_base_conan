#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/task.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

TaskRenameFtraceEvent::TaskRenameFtraceEvent() = default;
TaskRenameFtraceEvent::~TaskRenameFtraceEvent() = default;
TaskRenameFtraceEvent::TaskRenameFtraceEvent(const TaskRenameFtraceEvent&) = default;
TaskRenameFtraceEvent& TaskRenameFtraceEvent::operator=(const TaskRenameFtraceEvent&) = default;
TaskRenameFtraceEvent::TaskRenameFtraceEvent(TaskRenameFtraceEvent&&) noexcept = default;
TaskRenameFtraceEvent& TaskRenameFtraceEvent::operator=(TaskRenameFtraceEvent&&) = default;

bool TaskRenameFtraceEvent::operator==(const TaskRenameFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_
   && oldcomm_ == other.oldcomm_
   && newcomm_ == other.newcomm_
   && oom_score_adj_ == other.oom_score_adj_;
}

bool TaskRenameFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* oldcomm */:
        field.get(&oldcomm_);
        break;
      case 3 /* newcomm */:
        field.get(&newcomm_);
        break;
      case 4 /* oom_score_adj */:
        field.get(&oom_score_adj_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TaskRenameFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TaskRenameFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TaskRenameFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  // Field 2: oldcomm
  if (_has_field_[2]) {
    msg->AppendString(2, oldcomm_);
  }

  // Field 3: newcomm
  if (_has_field_[3]) {
    msg->AppendString(3, newcomm_);
  }

  // Field 4: oom_score_adj
  if (_has_field_[4]) {
    msg->AppendVarInt(4, oom_score_adj_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


TaskNewtaskFtraceEvent::TaskNewtaskFtraceEvent() = default;
TaskNewtaskFtraceEvent::~TaskNewtaskFtraceEvent() = default;
TaskNewtaskFtraceEvent::TaskNewtaskFtraceEvent(const TaskNewtaskFtraceEvent&) = default;
TaskNewtaskFtraceEvent& TaskNewtaskFtraceEvent::operator=(const TaskNewtaskFtraceEvent&) = default;
TaskNewtaskFtraceEvent::TaskNewtaskFtraceEvent(TaskNewtaskFtraceEvent&&) noexcept = default;
TaskNewtaskFtraceEvent& TaskNewtaskFtraceEvent::operator=(TaskNewtaskFtraceEvent&&) = default;

bool TaskNewtaskFtraceEvent::operator==(const TaskNewtaskFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_
   && comm_ == other.comm_
   && clone_flags_ == other.clone_flags_
   && oom_score_adj_ == other.oom_score_adj_;
}

bool TaskNewtaskFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* comm */:
        field.get(&comm_);
        break;
      case 3 /* clone_flags */:
        field.get(&clone_flags_);
        break;
      case 4 /* oom_score_adj */:
        field.get(&oom_score_adj_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TaskNewtaskFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TaskNewtaskFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TaskNewtaskFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  // Field 2: comm
  if (_has_field_[2]) {
    msg->AppendString(2, comm_);
  }

  // Field 3: clone_flags
  if (_has_field_[3]) {
    msg->AppendVarInt(3, clone_flags_);
  }

  // Field 4: oom_score_adj
  if (_has_field_[4]) {
    msg->AppendVarInt(4, oom_score_adj_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
