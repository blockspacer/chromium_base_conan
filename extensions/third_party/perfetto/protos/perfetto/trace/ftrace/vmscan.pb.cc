// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/vmscan.proto

#include "protos/perfetto/trace/ftrace/vmscan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmVmscanDirectReclaimBeginFtraceEvent> _instance;
} _MmVmscanDirectReclaimBeginFtraceEvent_default_instance_;
class MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmVmscanDirectReclaimEndFtraceEvent> _instance;
} _MmVmscanDirectReclaimEndFtraceEvent_default_instance_;
class MmVmscanKswapdWakeFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmVmscanKswapdWakeFtraceEvent> _instance;
} _MmVmscanKswapdWakeFtraceEvent_default_instance_;
class MmVmscanKswapdSleepFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MmVmscanKswapdSleepFtraceEvent> _instance;
} _MmVmscanKswapdSleepFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_MmVmscanDirectReclaimBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmVmscanDirectReclaimBeginFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanDirectReclaimBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmVmscanDirectReclaimBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto}, {}};

static void InitDefaultsscc_info_MmVmscanDirectReclaimEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmVmscanDirectReclaimEndFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanDirectReclaimEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmVmscanDirectReclaimEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto}, {}};

static void InitDefaultsscc_info_MmVmscanKswapdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmVmscanKswapdSleepFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanKswapdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmVmscanKswapdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto}, {}};

static void InitDefaultsscc_info_MmVmscanKswapdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_MmVmscanKswapdWakeFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MmVmscanKswapdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MmVmscanKswapdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void MmVmscanDirectReclaimBeginFtraceEvent::InitAsDefaultInstance() {
}
class MmVmscanDirectReclaimBeginFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanDirectReclaimBeginFtraceEvent>()._has_bits_);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_writepage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gfp_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}
MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(const MmVmscanDirectReclaimBeginFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&order_, &from.order_,
    static_cast<size_t>(reinterpret_cast<char*>(&gfp_flags_) -
    reinterpret_cast<char*>(&order_)) + sizeof(gfp_flags_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}

void MmVmscanDirectReclaimBeginFtraceEvent::SharedCtor() {
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gfp_flags_) -
      reinterpret_cast<char*>(&order_)) + sizeof(gfp_flags_));
}

MmVmscanDirectReclaimBeginFtraceEvent::~MmVmscanDirectReclaimBeginFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  SharedDtor();
}

void MmVmscanDirectReclaimBeginFtraceEvent::SharedDtor() {
}

void MmVmscanDirectReclaimBeginFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmVmscanDirectReclaimBeginFtraceEvent& MmVmscanDirectReclaimBeginFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmVmscanDirectReclaimBeginFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base);
  return *internal_default_instance();
}


void MmVmscanDirectReclaimBeginFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gfp_flags_) -
        reinterpret_cast<char*>(&order_)) + sizeof(gfp_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmVmscanDirectReclaimBeginFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 may_writepage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_may_writepage(&has_bits);
          may_writepage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gfp_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gfp_flags(&has_bits);
          gfp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmVmscanDirectReclaimBeginFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 may_writepage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_may_writepage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &may_writepage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gfp_flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_gfp_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gfp_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmVmscanDirectReclaimBeginFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // optional int32 may_writepage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->may_writepage(), output);
  }

  // optional uint32 gfp_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->gfp_flags(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}

size_t MmVmscanDirectReclaimBeginFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 may_writepage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->may_writepage());
    }

    // optional uint32 gfp_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->gfp_flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanDirectReclaimBeginFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmVmscanDirectReclaimBeginFtraceEvent*>(
      &from));
}

void MmVmscanDirectReclaimBeginFtraceEvent::MergeFrom(const MmVmscanDirectReclaimBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      order_ = from.order_;
    }
    if (cached_has_bits & 0x00000002u) {
      may_writepage_ = from.may_writepage_;
    }
    if (cached_has_bits & 0x00000004u) {
      gfp_flags_ = from.gfp_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmVmscanDirectReclaimBeginFtraceEvent::CopyFrom(const MmVmscanDirectReclaimBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanDirectReclaimBeginFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanDirectReclaimBeginFtraceEvent::InternalSwap(MmVmscanDirectReclaimBeginFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(order_, other->order_);
  swap(may_writepage_, other->may_writepage_);
  swap(gfp_flags_, other->gfp_flags_);
}

std::string MmVmscanDirectReclaimBeginFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent";
}


// ===================================================================

void MmVmscanDirectReclaimEndFtraceEvent::InitAsDefaultInstance() {
}
class MmVmscanDirectReclaimEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanDirectReclaimEndFtraceEvent>()._has_bits_);
  static void set_has_nr_reclaimed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}
MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(const MmVmscanDirectReclaimEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nr_reclaimed_ = from.nr_reclaimed_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}

void MmVmscanDirectReclaimEndFtraceEvent::SharedCtor() {
  nr_reclaimed_ = PROTOBUF_ULONGLONG(0);
}

MmVmscanDirectReclaimEndFtraceEvent::~MmVmscanDirectReclaimEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  SharedDtor();
}

void MmVmscanDirectReclaimEndFtraceEvent::SharedDtor() {
}

void MmVmscanDirectReclaimEndFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmVmscanDirectReclaimEndFtraceEvent& MmVmscanDirectReclaimEndFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmVmscanDirectReclaimEndFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base);
  return *internal_default_instance();
}


void MmVmscanDirectReclaimEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nr_reclaimed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmVmscanDirectReclaimEndFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 nr_reclaimed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nr_reclaimed(&has_bits);
          nr_reclaimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmVmscanDirectReclaimEndFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nr_reclaimed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nr_reclaimed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nr_reclaimed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmVmscanDirectReclaimEndFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 nr_reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->nr_reclaimed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}

size_t MmVmscanDirectReclaimEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 nr_reclaimed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nr_reclaimed());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanDirectReclaimEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmVmscanDirectReclaimEndFtraceEvent*>(
      &from));
}

void MmVmscanDirectReclaimEndFtraceEvent::MergeFrom(const MmVmscanDirectReclaimEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nr_reclaimed()) {
    set_nr_reclaimed(from.nr_reclaimed());
  }
}

void MmVmscanDirectReclaimEndFtraceEvent::CopyFrom(const MmVmscanDirectReclaimEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanDirectReclaimEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanDirectReclaimEndFtraceEvent::InternalSwap(MmVmscanDirectReclaimEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nr_reclaimed_, other->nr_reclaimed_);
}

std::string MmVmscanDirectReclaimEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent";
}


// ===================================================================

void MmVmscanKswapdWakeFtraceEvent::InitAsDefaultInstance() {
}
class MmVmscanKswapdWakeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanKswapdWakeFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}
MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(const MmVmscanKswapdWakeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}

void MmVmscanKswapdWakeFtraceEvent::SharedCtor() {
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(order_));
}

MmVmscanKswapdWakeFtraceEvent::~MmVmscanKswapdWakeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  SharedDtor();
}

void MmVmscanKswapdWakeFtraceEvent::SharedDtor() {
}

void MmVmscanKswapdWakeFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmVmscanKswapdWakeFtraceEvent& MmVmscanKswapdWakeFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmVmscanKswapdWakeFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base);
  return *internal_default_instance();
}


void MmVmscanKswapdWakeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&nid_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmVmscanKswapdWakeFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmVmscanKswapdWakeFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmVmscanKswapdWakeFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}

size_t MmVmscanKswapdWakeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanKswapdWakeFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmVmscanKswapdWakeFtraceEvent*>(
      &from));
}

void MmVmscanKswapdWakeFtraceEvent::MergeFrom(const MmVmscanKswapdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MmVmscanKswapdWakeFtraceEvent::CopyFrom(const MmVmscanKswapdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanKswapdWakeFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanKswapdWakeFtraceEvent::InternalSwap(MmVmscanKswapdWakeFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
  swap(order_, other->order_);
}

std::string MmVmscanKswapdWakeFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanKswapdWakeFtraceEvent";
}


// ===================================================================

void MmVmscanKswapdSleepFtraceEvent::InitAsDefaultInstance() {
}
class MmVmscanKswapdSleepFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanKswapdSleepFtraceEvent>()._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}
MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(const MmVmscanKswapdSleepFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nid_ = from.nid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}

void MmVmscanKswapdSleepFtraceEvent::SharedCtor() {
  nid_ = 0;
}

MmVmscanKswapdSleepFtraceEvent::~MmVmscanKswapdSleepFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  SharedDtor();
}

void MmVmscanKswapdSleepFtraceEvent::SharedDtor() {
}

void MmVmscanKswapdSleepFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MmVmscanKswapdSleepFtraceEvent& MmVmscanKswapdSleepFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MmVmscanKswapdSleepFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto.base);
  return *internal_default_instance();
}


void MmVmscanKswapdSleepFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MmVmscanKswapdSleepFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MmVmscanKswapdSleepFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MmVmscanKswapdSleepFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}

size_t MmVmscanKswapdSleepFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanKswapdSleepFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MmVmscanKswapdSleepFtraceEvent*>(
      &from));
}

void MmVmscanKswapdSleepFtraceEvent::MergeFrom(const MmVmscanKswapdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nid()) {
    set_nid(from.nid());
  }
}

void MmVmscanKswapdSleepFtraceEvent::CopyFrom(const MmVmscanKswapdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanKswapdSleepFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanKswapdSleepFtraceEvent::InternalSwap(MmVmscanKswapdSleepFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nid_, other->nid_);
}

std::string MmVmscanKswapdSleepFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanKswapdSleepFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
