#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/i2c.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SmbusReplyFtraceEvent::SmbusReplyFtraceEvent() = default;
SmbusReplyFtraceEvent::~SmbusReplyFtraceEvent() = default;
SmbusReplyFtraceEvent::SmbusReplyFtraceEvent(const SmbusReplyFtraceEvent&) = default;
SmbusReplyFtraceEvent& SmbusReplyFtraceEvent::operator=(const SmbusReplyFtraceEvent&) = default;
SmbusReplyFtraceEvent::SmbusReplyFtraceEvent(SmbusReplyFtraceEvent&&) noexcept = default;
SmbusReplyFtraceEvent& SmbusReplyFtraceEvent::operator=(SmbusReplyFtraceEvent&&) = default;

bool SmbusReplyFtraceEvent::operator==(const SmbusReplyFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && addr_ == other.addr_
   && flags_ == other.flags_
   && command_ == other.command_
   && len_ == other.len_
   && protocol_ == other.protocol_;
}

bool SmbusReplyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* addr */:
        field.get(&addr_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* command */:
        field.get(&command_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      case 6 /* protocol */:
        field.get(&protocol_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SmbusReplyFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SmbusReplyFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SmbusReplyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: addr
  if (_has_field_[2]) {
    msg->AppendVarInt(2, addr_);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    msg->AppendVarInt(3, flags_);
  }

  // Field 4: command
  if (_has_field_[4]) {
    msg->AppendVarInt(4, command_);
  }

  // Field 5: len
  if (_has_field_[5]) {
    msg->AppendVarInt(5, len_);
  }

  // Field 6: protocol
  if (_has_field_[6]) {
    msg->AppendVarInt(6, protocol_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


SmbusResultFtraceEvent::SmbusResultFtraceEvent() = default;
SmbusResultFtraceEvent::~SmbusResultFtraceEvent() = default;
SmbusResultFtraceEvent::SmbusResultFtraceEvent(const SmbusResultFtraceEvent&) = default;
SmbusResultFtraceEvent& SmbusResultFtraceEvent::operator=(const SmbusResultFtraceEvent&) = default;
SmbusResultFtraceEvent::SmbusResultFtraceEvent(SmbusResultFtraceEvent&&) noexcept = default;
SmbusResultFtraceEvent& SmbusResultFtraceEvent::operator=(SmbusResultFtraceEvent&&) = default;

bool SmbusResultFtraceEvent::operator==(const SmbusResultFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && addr_ == other.addr_
   && flags_ == other.flags_
   && read_write_ == other.read_write_
   && command_ == other.command_
   && res_ == other.res_
   && protocol_ == other.protocol_;
}

bool SmbusResultFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* addr */:
        field.get(&addr_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* read_write */:
        field.get(&read_write_);
        break;
      case 5 /* command */:
        field.get(&command_);
        break;
      case 6 /* res */:
        field.get(&res_);
        break;
      case 7 /* protocol */:
        field.get(&protocol_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SmbusResultFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SmbusResultFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SmbusResultFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: addr
  if (_has_field_[2]) {
    msg->AppendVarInt(2, addr_);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    msg->AppendVarInt(3, flags_);
  }

  // Field 4: read_write
  if (_has_field_[4]) {
    msg->AppendVarInt(4, read_write_);
  }

  // Field 5: command
  if (_has_field_[5]) {
    msg->AppendVarInt(5, command_);
  }

  // Field 6: res
  if (_has_field_[6]) {
    msg->AppendVarInt(6, res_);
  }

  // Field 7: protocol
  if (_has_field_[7]) {
    msg->AppendVarInt(7, protocol_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


SmbusWriteFtraceEvent::SmbusWriteFtraceEvent() = default;
SmbusWriteFtraceEvent::~SmbusWriteFtraceEvent() = default;
SmbusWriteFtraceEvent::SmbusWriteFtraceEvent(const SmbusWriteFtraceEvent&) = default;
SmbusWriteFtraceEvent& SmbusWriteFtraceEvent::operator=(const SmbusWriteFtraceEvent&) = default;
SmbusWriteFtraceEvent::SmbusWriteFtraceEvent(SmbusWriteFtraceEvent&&) noexcept = default;
SmbusWriteFtraceEvent& SmbusWriteFtraceEvent::operator=(SmbusWriteFtraceEvent&&) = default;

bool SmbusWriteFtraceEvent::operator==(const SmbusWriteFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && addr_ == other.addr_
   && flags_ == other.flags_
   && command_ == other.command_
   && len_ == other.len_
   && protocol_ == other.protocol_;
}

bool SmbusWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* addr */:
        field.get(&addr_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* command */:
        field.get(&command_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      case 6 /* protocol */:
        field.get(&protocol_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SmbusWriteFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SmbusWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SmbusWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: addr
  if (_has_field_[2]) {
    msg->AppendVarInt(2, addr_);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    msg->AppendVarInt(3, flags_);
  }

  // Field 4: command
  if (_has_field_[4]) {
    msg->AppendVarInt(4, command_);
  }

  // Field 5: len
  if (_has_field_[5]) {
    msg->AppendVarInt(5, len_);
  }

  // Field 6: protocol
  if (_has_field_[6]) {
    msg->AppendVarInt(6, protocol_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


SmbusReadFtraceEvent::SmbusReadFtraceEvent() = default;
SmbusReadFtraceEvent::~SmbusReadFtraceEvent() = default;
SmbusReadFtraceEvent::SmbusReadFtraceEvent(const SmbusReadFtraceEvent&) = default;
SmbusReadFtraceEvent& SmbusReadFtraceEvent::operator=(const SmbusReadFtraceEvent&) = default;
SmbusReadFtraceEvent::SmbusReadFtraceEvent(SmbusReadFtraceEvent&&) noexcept = default;
SmbusReadFtraceEvent& SmbusReadFtraceEvent::operator=(SmbusReadFtraceEvent&&) = default;

bool SmbusReadFtraceEvent::operator==(const SmbusReadFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && flags_ == other.flags_
   && addr_ == other.addr_
   && command_ == other.command_
   && protocol_ == other.protocol_;
}

bool SmbusReadFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* flags */:
        field.get(&flags_);
        break;
      case 3 /* addr */:
        field.get(&addr_);
        break;
      case 4 /* command */:
        field.get(&command_);
        break;
      case 5 /* protocol */:
        field.get(&protocol_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SmbusReadFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SmbusReadFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SmbusReadFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: flags
  if (_has_field_[2]) {
    msg->AppendVarInt(2, flags_);
  }

  // Field 3: addr
  if (_has_field_[3]) {
    msg->AppendVarInt(3, addr_);
  }

  // Field 4: command
  if (_has_field_[4]) {
    msg->AppendVarInt(4, command_);
  }

  // Field 5: protocol
  if (_has_field_[5]) {
    msg->AppendVarInt(5, protocol_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


I2cReplyFtraceEvent::I2cReplyFtraceEvent() = default;
I2cReplyFtraceEvent::~I2cReplyFtraceEvent() = default;
I2cReplyFtraceEvent::I2cReplyFtraceEvent(const I2cReplyFtraceEvent&) = default;
I2cReplyFtraceEvent& I2cReplyFtraceEvent::operator=(const I2cReplyFtraceEvent&) = default;
I2cReplyFtraceEvent::I2cReplyFtraceEvent(I2cReplyFtraceEvent&&) noexcept = default;
I2cReplyFtraceEvent& I2cReplyFtraceEvent::operator=(I2cReplyFtraceEvent&&) = default;

bool I2cReplyFtraceEvent::operator==(const I2cReplyFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && msg_nr_ == other.msg_nr_
   && addr_ == other.addr_
   && flags_ == other.flags_
   && len_ == other.len_
   && buf_ == other.buf_;
}

bool I2cReplyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* msg_nr */:
        field.get(&msg_nr_);
        break;
      case 3 /* addr */:
        field.get(&addr_);
        break;
      case 4 /* flags */:
        field.get(&flags_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      case 6 /* buf */:
        field.get(&buf_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string I2cReplyFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> I2cReplyFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void I2cReplyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: msg_nr
  if (_has_field_[2]) {
    msg->AppendVarInt(2, msg_nr_);
  }

  // Field 3: addr
  if (_has_field_[3]) {
    msg->AppendVarInt(3, addr_);
  }

  // Field 4: flags
  if (_has_field_[4]) {
    msg->AppendVarInt(4, flags_);
  }

  // Field 5: len
  if (_has_field_[5]) {
    msg->AppendVarInt(5, len_);
  }

  // Field 6: buf
  if (_has_field_[6]) {
    msg->AppendVarInt(6, buf_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


I2cResultFtraceEvent::I2cResultFtraceEvent() = default;
I2cResultFtraceEvent::~I2cResultFtraceEvent() = default;
I2cResultFtraceEvent::I2cResultFtraceEvent(const I2cResultFtraceEvent&) = default;
I2cResultFtraceEvent& I2cResultFtraceEvent::operator=(const I2cResultFtraceEvent&) = default;
I2cResultFtraceEvent::I2cResultFtraceEvent(I2cResultFtraceEvent&&) noexcept = default;
I2cResultFtraceEvent& I2cResultFtraceEvent::operator=(I2cResultFtraceEvent&&) = default;

bool I2cResultFtraceEvent::operator==(const I2cResultFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && nr_msgs_ == other.nr_msgs_
   && ret_ == other.ret_;
}

bool I2cResultFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* nr_msgs */:
        field.get(&nr_msgs_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string I2cResultFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> I2cResultFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void I2cResultFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: nr_msgs
  if (_has_field_[2]) {
    msg->AppendVarInt(2, nr_msgs_);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    msg->AppendVarInt(3, ret_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


I2cWriteFtraceEvent::I2cWriteFtraceEvent() = default;
I2cWriteFtraceEvent::~I2cWriteFtraceEvent() = default;
I2cWriteFtraceEvent::I2cWriteFtraceEvent(const I2cWriteFtraceEvent&) = default;
I2cWriteFtraceEvent& I2cWriteFtraceEvent::operator=(const I2cWriteFtraceEvent&) = default;
I2cWriteFtraceEvent::I2cWriteFtraceEvent(I2cWriteFtraceEvent&&) noexcept = default;
I2cWriteFtraceEvent& I2cWriteFtraceEvent::operator=(I2cWriteFtraceEvent&&) = default;

bool I2cWriteFtraceEvent::operator==(const I2cWriteFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && msg_nr_ == other.msg_nr_
   && addr_ == other.addr_
   && flags_ == other.flags_
   && len_ == other.len_
   && buf_ == other.buf_;
}

bool I2cWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* msg_nr */:
        field.get(&msg_nr_);
        break;
      case 3 /* addr */:
        field.get(&addr_);
        break;
      case 4 /* flags */:
        field.get(&flags_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      case 6 /* buf */:
        field.get(&buf_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string I2cWriteFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> I2cWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void I2cWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: msg_nr
  if (_has_field_[2]) {
    msg->AppendVarInt(2, msg_nr_);
  }

  // Field 3: addr
  if (_has_field_[3]) {
    msg->AppendVarInt(3, addr_);
  }

  // Field 4: flags
  if (_has_field_[4]) {
    msg->AppendVarInt(4, flags_);
  }

  // Field 5: len
  if (_has_field_[5]) {
    msg->AppendVarInt(5, len_);
  }

  // Field 6: buf
  if (_has_field_[6]) {
    msg->AppendVarInt(6, buf_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


I2cReadFtraceEvent::I2cReadFtraceEvent() = default;
I2cReadFtraceEvent::~I2cReadFtraceEvent() = default;
I2cReadFtraceEvent::I2cReadFtraceEvent(const I2cReadFtraceEvent&) = default;
I2cReadFtraceEvent& I2cReadFtraceEvent::operator=(const I2cReadFtraceEvent&) = default;
I2cReadFtraceEvent::I2cReadFtraceEvent(I2cReadFtraceEvent&&) noexcept = default;
I2cReadFtraceEvent& I2cReadFtraceEvent::operator=(I2cReadFtraceEvent&&) = default;

bool I2cReadFtraceEvent::operator==(const I2cReadFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && adapter_nr_ == other.adapter_nr_
   && msg_nr_ == other.msg_nr_
   && addr_ == other.addr_
   && flags_ == other.flags_
   && len_ == other.len_;
}

bool I2cReadFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* adapter_nr */:
        field.get(&adapter_nr_);
        break;
      case 2 /* msg_nr */:
        field.get(&msg_nr_);
        break;
      case 3 /* addr */:
        field.get(&addr_);
        break;
      case 4 /* flags */:
        field.get(&flags_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string I2cReadFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> I2cReadFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void I2cReadFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: adapter_nr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, adapter_nr_);
  }

  // Field 2: msg_nr
  if (_has_field_[2]) {
    msg->AppendVarInt(2, msg_nr_);
  }

  // Field 3: addr
  if (_has_field_[3]) {
    msg->AppendVarInt(3, addr_);
  }

  // Field 4: flags
  if (_has_field_[4]) {
    msg->AppendVarInt(4, flags_);
  }

  // Field 5: len
  if (_has_field_[5]) {
    msg->AppendVarInt(5, len_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
