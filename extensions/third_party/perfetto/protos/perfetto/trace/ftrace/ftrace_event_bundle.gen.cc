#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_event.gen.h"
#include "protos/perfetto/trace/ftrace/generic.gen.h"
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"
#include "protos/perfetto/trace/ftrace/thermal.gen.h"
#include "protos/perfetto/trace/ftrace/task.gen.h"
#include "protos/perfetto/trace/ftrace/systrace.gen.h"
#include "protos/perfetto/trace/ftrace/sync.gen.h"
#include "protos/perfetto/trace/ftrace/signal.gen.h"
#include "protos/perfetto/trace/ftrace/sde.gen.h"
#include "protos/perfetto/trace/ftrace/scm.gen.h"
#include "protos/perfetto/trace/ftrace/sched.gen.h"
#include "protos/perfetto/trace/ftrace/regulator.gen.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.gen.h"
#include "protos/perfetto/trace/ftrace/power.gen.h"
#include "protos/perfetto/trace/ftrace/oom.gen.h"
#include "protos/perfetto/trace/ftrace/mm_event.gen.h"
#include "protos/perfetto/trace/ftrace/mdss.gen.h"
#include "protos/perfetto/trace/ftrace/mali.gen.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.gen.h"
#include "protos/perfetto/trace/ftrace/kmem.gen.h"
#include "protos/perfetto/trace/ftrace/irq.gen.h"
#include "protos/perfetto/trace/ftrace/ipi.gen.h"
#include "protos/perfetto/trace/ftrace/ion.gen.h"
#include "protos/perfetto/trace/ftrace/i2c.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.gen.h"
#include "protos/perfetto/trace/ftrace/g2d.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"
#include "protos/perfetto/trace/ftrace/filemap.gen.h"
#include "protos/perfetto/trace/ftrace/fence.gen.h"
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"
#include "protos/perfetto/trace/ftrace/ext4.gen.h"
#include "protos/perfetto/trace/ftrace/dpu.gen.h"
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"
#include "protos/perfetto/trace/ftrace/compaction.gen.h"
#include "protos/perfetto/trace/ftrace/clk.gen.h"
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"
#include "protos/perfetto/trace/ftrace/block.gen.h"
#include "protos/perfetto/trace/ftrace/binder.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FtraceEventBundle::FtraceEventBundle() = default;
FtraceEventBundle::~FtraceEventBundle() = default;
FtraceEventBundle::FtraceEventBundle(const FtraceEventBundle&) = default;
FtraceEventBundle& FtraceEventBundle::operator=(const FtraceEventBundle&) = default;
FtraceEventBundle::FtraceEventBundle(FtraceEventBundle&&) noexcept = default;
FtraceEventBundle& FtraceEventBundle::operator=(FtraceEventBundle&&) = default;

bool FtraceEventBundle::operator==(const FtraceEventBundle& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cpu_ == other.cpu_
   && event_ == other.event_
   && lost_events_ == other.lost_events_
   && compact_sched_ == other.compact_sched_;
}

int FtraceEventBundle::event_size() const { return static_cast<int>(event_.size()); }
void FtraceEventBundle::clear_event() { event_.clear(); }
FtraceEvent* FtraceEventBundle::add_event() { event_.emplace_back(); return &event_.back(); }
bool FtraceEventBundle::ParseFromArray(const void* raw, size_t size) {
  event_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* event */:
        event_.emplace_back();
        event_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* lost_events */:
        field.get(&lost_events_);
        break;
      case 4 /* compact_sched */:
        (*compact_sched_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEventBundle::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEventBundle::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEventBundle::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cpu_);
  }

  // Field 2: event
  for (auto& it : event_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: lost_events
  if (_has_field_[3]) {
    msg->AppendTinyVarInt(3, lost_events_);
  }

  // Field 4: compact_sched
  if (_has_field_[4]) {
    (*compact_sched_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched() = default;
FtraceEventBundle_CompactSched::~FtraceEventBundle_CompactSched() = default;
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched&) = default;
FtraceEventBundle_CompactSched& FtraceEventBundle_CompactSched::operator=(const FtraceEventBundle_CompactSched&) = default;
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(FtraceEventBundle_CompactSched&&) noexcept = default;
FtraceEventBundle_CompactSched& FtraceEventBundle_CompactSched::operator=(FtraceEventBundle_CompactSched&&) = default;

bool FtraceEventBundle_CompactSched::operator==(const FtraceEventBundle_CompactSched& other) const {
  return unknown_fields_ == other.unknown_fields_
   && intern_table_ == other.intern_table_
   && switch_timestamp_ == other.switch_timestamp_
   && switch_prev_state_ == other.switch_prev_state_
   && switch_next_pid_ == other.switch_next_pid_
   && switch_next_prio_ == other.switch_next_prio_
   && switch_next_comm_index_ == other.switch_next_comm_index_
   && waking_timestamp_ == other.waking_timestamp_
   && waking_pid_ == other.waking_pid_
   && waking_target_cpu_ == other.waking_target_cpu_
   && waking_prio_ == other.waking_prio_
   && waking_comm_index_ == other.waking_comm_index_;
}

bool FtraceEventBundle_CompactSched::ParseFromArray(const void* raw, size_t size) {
  intern_table_.clear();
  switch_timestamp_.clear();
  switch_prev_state_.clear();
  switch_next_pid_.clear();
  switch_next_prio_.clear();
  switch_next_comm_index_.clear();
  waking_timestamp_.clear();
  waking_pid_.clear();
  waking_target_cpu_.clear();
  waking_prio_.clear();
  waking_comm_index_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 5 /* intern_table */:
        intern_table_.emplace_back();
        field.get(&intern_table_.back());
        break;
      case 1 /* switch_timestamp */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, uint64_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          switch_timestamp_.emplace_back(*rep);
        }
        break;
      case 2 /* switch_prev_state */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, int64_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          switch_prev_state_.emplace_back(*rep);
        }
        break;
      case 3 /* switch_next_pid */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          switch_next_pid_.emplace_back(*rep);
        }
        break;
      case 4 /* switch_next_prio */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          switch_next_prio_.emplace_back(*rep);
        }
        break;
      case 6 /* switch_next_comm_index */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          switch_next_comm_index_.emplace_back(*rep);
        }
        break;
      case 7 /* waking_timestamp */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, uint64_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          waking_timestamp_.emplace_back(*rep);
        }
        break;
      case 8 /* waking_pid */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          waking_pid_.emplace_back(*rep);
        }
        break;
      case 9 /* waking_target_cpu */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          waking_target_cpu_.emplace_back(*rep);
        }
        break;
      case 10 /* waking_prio */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          waking_prio_.emplace_back(*rep);
        }
        break;
      case 11 /* waking_comm_index */:
        for (::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t> rep(field.data(), field.size(), &packed_error); rep; ++rep) {
          waking_comm_index_.emplace_back(*rep);
        }
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEventBundle_CompactSched::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEventBundle_CompactSched::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEventBundle_CompactSched::Serialize(::protozero::Message* msg) const {
  // Field 5: intern_table
  for (auto& it : intern_table_) {
    msg->AppendString(5, it);
  }

  // Field 1: switch_timestamp
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_timestamp_)
      pack.Append(it);
    msg->AppendBytes(1, pack.data(), pack.size());
  }

  // Field 2: switch_prev_state
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_prev_state_)
      pack.Append(it);
    msg->AppendBytes(2, pack.data(), pack.size());
  }

  // Field 3: switch_next_pid
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_next_pid_)
      pack.Append(it);
    msg->AppendBytes(3, pack.data(), pack.size());
  }

  // Field 4: switch_next_prio
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_next_prio_)
      pack.Append(it);
    msg->AppendBytes(4, pack.data(), pack.size());
  }

  // Field 6: switch_next_comm_index
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_next_comm_index_)
      pack.Append(it);
    msg->AppendBytes(6, pack.data(), pack.size());
  }

  // Field 7: waking_timestamp
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_timestamp_)
      pack.Append(it);
    msg->AppendBytes(7, pack.data(), pack.size());
  }

  // Field 8: waking_pid
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_pid_)
      pack.Append(it);
    msg->AppendBytes(8, pack.data(), pack.size());
  }

  // Field 9: waking_target_cpu
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_target_cpu_)
      pack.Append(it);
    msg->AppendBytes(9, pack.data(), pack.size());
  }

  // Field 10: waking_prio
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_prio_)
      pack.Append(it);
    msg->AppendBytes(10, pack.data(), pack.size());
  }

  // Field 11: waking_comm_index
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_comm_index_)
      pack.Append(it);
    msg->AppendBytes(11, pack.data(), pack.size());
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
