#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent() = default;
WorkqueueQueueWorkFtraceEvent::~WorkqueueQueueWorkFtraceEvent() = default;
WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent(const WorkqueueQueueWorkFtraceEvent&) = default;
WorkqueueQueueWorkFtraceEvent& WorkqueueQueueWorkFtraceEvent::operator=(const WorkqueueQueueWorkFtraceEvent&) = default;
WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent(WorkqueueQueueWorkFtraceEvent&&) noexcept = default;
WorkqueueQueueWorkFtraceEvent& WorkqueueQueueWorkFtraceEvent::operator=(WorkqueueQueueWorkFtraceEvent&&) = default;

bool WorkqueueQueueWorkFtraceEvent::operator==(const WorkqueueQueueWorkFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && work_ == other.work_
   && function_ == other.function_
   && workqueue_ == other.workqueue_
   && req_cpu_ == other.req_cpu_
   && cpu_ == other.cpu_;
}

bool WorkqueueQueueWorkFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* work */:
        field.get(&work_);
        break;
      case 2 /* function */:
        field.get(&function_);
        break;
      case 3 /* workqueue */:
        field.get(&workqueue_);
        break;
      case 4 /* req_cpu */:
        field.get(&req_cpu_);
        break;
      case 5 /* cpu */:
        field.get(&cpu_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string WorkqueueQueueWorkFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> WorkqueueQueueWorkFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void WorkqueueQueueWorkFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: work
  if (_has_field_[1]) {
    msg->AppendVarInt(1, work_);
  }

  // Field 2: function
  if (_has_field_[2]) {
    msg->AppendVarInt(2, function_);
  }

  // Field 3: workqueue
  if (_has_field_[3]) {
    msg->AppendVarInt(3, workqueue_);
  }

  // Field 4: req_cpu
  if (_has_field_[4]) {
    msg->AppendVarInt(4, req_cpu_);
  }

  // Field 5: cpu
  if (_has_field_[5]) {
    msg->AppendVarInt(5, cpu_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent() = default;
WorkqueueExecuteStartFtraceEvent::~WorkqueueExecuteStartFtraceEvent() = default;
WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent(const WorkqueueExecuteStartFtraceEvent&) = default;
WorkqueueExecuteStartFtraceEvent& WorkqueueExecuteStartFtraceEvent::operator=(const WorkqueueExecuteStartFtraceEvent&) = default;
WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent(WorkqueueExecuteStartFtraceEvent&&) noexcept = default;
WorkqueueExecuteStartFtraceEvent& WorkqueueExecuteStartFtraceEvent::operator=(WorkqueueExecuteStartFtraceEvent&&) = default;

bool WorkqueueExecuteStartFtraceEvent::operator==(const WorkqueueExecuteStartFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && work_ == other.work_
   && function_ == other.function_;
}

bool WorkqueueExecuteStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* work */:
        field.get(&work_);
        break;
      case 2 /* function */:
        field.get(&function_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string WorkqueueExecuteStartFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> WorkqueueExecuteStartFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void WorkqueueExecuteStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: work
  if (_has_field_[1]) {
    msg->AppendVarInt(1, work_);
  }

  // Field 2: function
  if (_has_field_[2]) {
    msg->AppendVarInt(2, function_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent() = default;
WorkqueueExecuteEndFtraceEvent::~WorkqueueExecuteEndFtraceEvent() = default;
WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent(const WorkqueueExecuteEndFtraceEvent&) = default;
WorkqueueExecuteEndFtraceEvent& WorkqueueExecuteEndFtraceEvent::operator=(const WorkqueueExecuteEndFtraceEvent&) = default;
WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent(WorkqueueExecuteEndFtraceEvent&&) noexcept = default;
WorkqueueExecuteEndFtraceEvent& WorkqueueExecuteEndFtraceEvent::operator=(WorkqueueExecuteEndFtraceEvent&&) = default;

bool WorkqueueExecuteEndFtraceEvent::operator==(const WorkqueueExecuteEndFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && work_ == other.work_;
}

bool WorkqueueExecuteEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* work */:
        field.get(&work_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string WorkqueueExecuteEndFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> WorkqueueExecuteEndFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void WorkqueueExecuteEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: work
  if (_has_field_[1]) {
    msg->AppendVarInt(1, work_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent() = default;
WorkqueueActivateWorkFtraceEvent::~WorkqueueActivateWorkFtraceEvent() = default;
WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent(const WorkqueueActivateWorkFtraceEvent&) = default;
WorkqueueActivateWorkFtraceEvent& WorkqueueActivateWorkFtraceEvent::operator=(const WorkqueueActivateWorkFtraceEvent&) = default;
WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent(WorkqueueActivateWorkFtraceEvent&&) noexcept = default;
WorkqueueActivateWorkFtraceEvent& WorkqueueActivateWorkFtraceEvent::operator=(WorkqueueActivateWorkFtraceEvent&&) = default;

bool WorkqueueActivateWorkFtraceEvent::operator==(const WorkqueueActivateWorkFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && work_ == other.work_;
}

bool WorkqueueActivateWorkFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* work */:
        field.get(&work_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string WorkqueueActivateWorkFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> WorkqueueActivateWorkFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void WorkqueueActivateWorkFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: work
  if (_has_field_[1]) {
    msg->AppendVarInt(1, work_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
