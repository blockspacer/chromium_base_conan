// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/fence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class FenceDestroyFtraceEvent;
class FenceDestroyFtraceEventDefaultTypeInternal;
extern FenceDestroyFtraceEventDefaultTypeInternal _FenceDestroyFtraceEvent_default_instance_;
class FenceEnableSignalFtraceEvent;
class FenceEnableSignalFtraceEventDefaultTypeInternal;
extern FenceEnableSignalFtraceEventDefaultTypeInternal _FenceEnableSignalFtraceEvent_default_instance_;
class FenceInitFtraceEvent;
class FenceInitFtraceEventDefaultTypeInternal;
extern FenceInitFtraceEventDefaultTypeInternal _FenceInitFtraceEvent_default_instance_;
class FenceSignaledFtraceEvent;
class FenceSignaledFtraceEventDefaultTypeInternal;
extern FenceSignaledFtraceEventDefaultTypeInternal _FenceSignaledFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::FenceDestroyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceDestroyFtraceEvent>(Arena*);
template<> ::perfetto::protos::FenceEnableSignalFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceEnableSignalFtraceEvent>(Arena*);
template<> ::perfetto::protos::FenceInitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceInitFtraceEvent>(Arena*);
template<> ::perfetto::protos::FenceSignaledFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceSignaledFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class FenceInitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceInitFtraceEvent) */ {
 public:
  FenceInitFtraceEvent();
  virtual ~FenceInitFtraceEvent();

  FenceInitFtraceEvent(const FenceInitFtraceEvent& from);
  FenceInitFtraceEvent(FenceInitFtraceEvent&& from) noexcept
    : FenceInitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceInitFtraceEvent& operator=(const FenceInitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceInitFtraceEvent& operator=(FenceInitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FenceInitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FenceInitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceInitFtraceEvent*>(
               &_FenceInitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FenceInitFtraceEvent& a, FenceInitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceInitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FenceInitFtraceEvent* New() const final {
    return CreateMaybeMessage<FenceInitFtraceEvent>(nullptr);
  }

  FenceInitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FenceInitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FenceInitFtraceEvent& from);
  void MergeFrom(const FenceInitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FenceInitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FenceInitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);

  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline();
  const std::string& timeline() const;
  void set_timeline(const std::string& value);
  void set_timeline(std::string&& value);
  void set_timeline(const char* value);
  void set_timeline(const char* value, size_t size);
  std::string* mutable_timeline();
  std::string* release_timeline();
  void set_allocated_timeline(std::string* timeline);

  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint32 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno() const;
  void set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceInitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};
// -------------------------------------------------------------------

class FenceDestroyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceDestroyFtraceEvent) */ {
 public:
  FenceDestroyFtraceEvent();
  virtual ~FenceDestroyFtraceEvent();

  FenceDestroyFtraceEvent(const FenceDestroyFtraceEvent& from);
  FenceDestroyFtraceEvent(FenceDestroyFtraceEvent&& from) noexcept
    : FenceDestroyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceDestroyFtraceEvent& operator=(const FenceDestroyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceDestroyFtraceEvent& operator=(FenceDestroyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FenceDestroyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FenceDestroyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceDestroyFtraceEvent*>(
               &_FenceDestroyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FenceDestroyFtraceEvent& a, FenceDestroyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceDestroyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FenceDestroyFtraceEvent* New() const final {
    return CreateMaybeMessage<FenceDestroyFtraceEvent>(nullptr);
  }

  FenceDestroyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FenceDestroyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FenceDestroyFtraceEvent& from);
  void MergeFrom(const FenceDestroyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FenceDestroyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FenceDestroyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);

  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline();
  const std::string& timeline() const;
  void set_timeline(const std::string& value);
  void set_timeline(std::string&& value);
  void set_timeline(const char* value);
  void set_timeline(const char* value, size_t size);
  std::string* mutable_timeline();
  std::string* release_timeline();
  void set_allocated_timeline(std::string* timeline);

  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint32 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno() const;
  void set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceDestroyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};
// -------------------------------------------------------------------

class FenceEnableSignalFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceEnableSignalFtraceEvent) */ {
 public:
  FenceEnableSignalFtraceEvent();
  virtual ~FenceEnableSignalFtraceEvent();

  FenceEnableSignalFtraceEvent(const FenceEnableSignalFtraceEvent& from);
  FenceEnableSignalFtraceEvent(FenceEnableSignalFtraceEvent&& from) noexcept
    : FenceEnableSignalFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceEnableSignalFtraceEvent& operator=(const FenceEnableSignalFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceEnableSignalFtraceEvent& operator=(FenceEnableSignalFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FenceEnableSignalFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FenceEnableSignalFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceEnableSignalFtraceEvent*>(
               &_FenceEnableSignalFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FenceEnableSignalFtraceEvent& a, FenceEnableSignalFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceEnableSignalFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FenceEnableSignalFtraceEvent* New() const final {
    return CreateMaybeMessage<FenceEnableSignalFtraceEvent>(nullptr);
  }

  FenceEnableSignalFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FenceEnableSignalFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FenceEnableSignalFtraceEvent& from);
  void MergeFrom(const FenceEnableSignalFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FenceEnableSignalFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FenceEnableSignalFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);

  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline();
  const std::string& timeline() const;
  void set_timeline(const std::string& value);
  void set_timeline(std::string&& value);
  void set_timeline(const char* value);
  void set_timeline(const char* value, size_t size);
  std::string* mutable_timeline();
  std::string* release_timeline();
  void set_allocated_timeline(std::string* timeline);

  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint32 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno() const;
  void set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceEnableSignalFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};
// -------------------------------------------------------------------

class FenceSignaledFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceSignaledFtraceEvent) */ {
 public:
  FenceSignaledFtraceEvent();
  virtual ~FenceSignaledFtraceEvent();

  FenceSignaledFtraceEvent(const FenceSignaledFtraceEvent& from);
  FenceSignaledFtraceEvent(FenceSignaledFtraceEvent&& from) noexcept
    : FenceSignaledFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceSignaledFtraceEvent& operator=(const FenceSignaledFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceSignaledFtraceEvent& operator=(FenceSignaledFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FenceSignaledFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FenceSignaledFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceSignaledFtraceEvent*>(
               &_FenceSignaledFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FenceSignaledFtraceEvent& a, FenceSignaledFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceSignaledFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FenceSignaledFtraceEvent* New() const final {
    return CreateMaybeMessage<FenceSignaledFtraceEvent>(nullptr);
  }

  FenceSignaledFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FenceSignaledFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FenceSignaledFtraceEvent& from);
  void MergeFrom(const FenceSignaledFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FenceSignaledFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FenceSignaledFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);

  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline();
  const std::string& timeline() const;
  void set_timeline(const std::string& value);
  void set_timeline(std::string&& value);
  void set_timeline(const char* value);
  void set_timeline(const char* value, size_t size);
  std::string* mutable_timeline();
  std::string* release_timeline();
  void set_allocated_timeline(std::string* timeline);

  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint32 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno() const;
  void set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceSignaledFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqno_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FenceInitFtraceEvent

// optional uint32 context = 1;
inline bool FenceInitFtraceEvent::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FenceInitFtraceEvent::clear_context() {
  context_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceInitFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.context)
  return context_;
}
inline void FenceInitFtraceEvent::set_context(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  context_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.context)
}

// optional string driver = 2;
inline bool FenceInitFtraceEvent::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FenceInitFtraceEvent::clear_driver() {
  driver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceInitFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.driver)
  return driver_.GetNoArena();
}
inline void FenceInitFtraceEvent::set_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.driver)
}
inline void FenceInitFtraceEvent::set_driver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceInitFtraceEvent.driver)
}
inline void FenceInitFtraceEvent::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceInitFtraceEvent.driver)
}
inline void FenceInitFtraceEvent::set_driver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceInitFtraceEvent.driver)
}
inline std::string* FenceInitFtraceEvent::mutable_driver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceInitFtraceEvent.driver)
  return driver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceInitFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceInitFtraceEvent.driver)
  if (!has_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return driver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceInitFtraceEvent::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  driver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceInitFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceInitFtraceEvent::has_seqno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FenceInitFtraceEvent::clear_seqno() {
  seqno_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceInitFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.seqno)
  return seqno_;
}
inline void FenceInitFtraceEvent::set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seqno_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.seqno)
}

// optional string timeline = 4;
inline bool FenceInitFtraceEvent::has_timeline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FenceInitFtraceEvent::clear_timeline() {
  timeline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceInitFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.timeline)
  return timeline_.GetNoArena();
}
inline void FenceInitFtraceEvent::set_timeline(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.timeline)
}
inline void FenceInitFtraceEvent::set_timeline(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceInitFtraceEvent.timeline)
}
inline void FenceInitFtraceEvent::set_timeline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceInitFtraceEvent.timeline)
}
inline void FenceInitFtraceEvent::set_timeline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceInitFtraceEvent.timeline)
}
inline std::string* FenceInitFtraceEvent::mutable_timeline() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceInitFtraceEvent.timeline)
  return timeline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceInitFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceInitFtraceEvent.timeline)
  if (!has_timeline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timeline_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceInitFtraceEvent::set_allocated_timeline(std::string* timeline) {
  if (timeline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceInitFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// FenceDestroyFtraceEvent

// optional uint32 context = 1;
inline bool FenceDestroyFtraceEvent::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FenceDestroyFtraceEvent::clear_context() {
  context_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceDestroyFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.context)
  return context_;
}
inline void FenceDestroyFtraceEvent::set_context(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  context_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.context)
}

// optional string driver = 2;
inline bool FenceDestroyFtraceEvent::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FenceDestroyFtraceEvent::clear_driver() {
  driver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceDestroyFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.driver)
  return driver_.GetNoArena();
}
inline void FenceDestroyFtraceEvent::set_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.driver)
}
inline void FenceDestroyFtraceEvent::set_driver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceDestroyFtraceEvent.driver)
}
inline void FenceDestroyFtraceEvent::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceDestroyFtraceEvent.driver)
}
inline void FenceDestroyFtraceEvent::set_driver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceDestroyFtraceEvent.driver)
}
inline std::string* FenceDestroyFtraceEvent::mutable_driver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceDestroyFtraceEvent.driver)
  return driver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceDestroyFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceDestroyFtraceEvent.driver)
  if (!has_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return driver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceDestroyFtraceEvent::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  driver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceDestroyFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceDestroyFtraceEvent::has_seqno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FenceDestroyFtraceEvent::clear_seqno() {
  seqno_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceDestroyFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.seqno)
  return seqno_;
}
inline void FenceDestroyFtraceEvent::set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seqno_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.seqno)
}

// optional string timeline = 4;
inline bool FenceDestroyFtraceEvent::has_timeline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FenceDestroyFtraceEvent::clear_timeline() {
  timeline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceDestroyFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.timeline)
  return timeline_.GetNoArena();
}
inline void FenceDestroyFtraceEvent::set_timeline(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}
inline void FenceDestroyFtraceEvent::set_timeline(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}
inline void FenceDestroyFtraceEvent::set_timeline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}
inline void FenceDestroyFtraceEvent::set_timeline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}
inline std::string* FenceDestroyFtraceEvent::mutable_timeline() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceDestroyFtraceEvent.timeline)
  return timeline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceDestroyFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceDestroyFtraceEvent.timeline)
  if (!has_timeline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timeline_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceDestroyFtraceEvent::set_allocated_timeline(std::string* timeline) {
  if (timeline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// FenceEnableSignalFtraceEvent

// optional uint32 context = 1;
inline bool FenceEnableSignalFtraceEvent::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FenceEnableSignalFtraceEvent::clear_context() {
  context_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceEnableSignalFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.context)
  return context_;
}
inline void FenceEnableSignalFtraceEvent::set_context(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  context_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.context)
}

// optional string driver = 2;
inline bool FenceEnableSignalFtraceEvent::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FenceEnableSignalFtraceEvent::clear_driver() {
  driver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceEnableSignalFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
  return driver_.GetNoArena();
}
inline void FenceEnableSignalFtraceEvent::set_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}
inline void FenceEnableSignalFtraceEvent::set_driver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}
inline void FenceEnableSignalFtraceEvent::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}
inline void FenceEnableSignalFtraceEvent::set_driver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}
inline std::string* FenceEnableSignalFtraceEvent::mutable_driver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
  return driver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceEnableSignalFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
  if (!has_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return driver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceEnableSignalFtraceEvent::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  driver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceEnableSignalFtraceEvent::has_seqno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FenceEnableSignalFtraceEvent::clear_seqno() {
  seqno_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceEnableSignalFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.seqno)
  return seqno_;
}
inline void FenceEnableSignalFtraceEvent::set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seqno_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.seqno)
}

// optional string timeline = 4;
inline bool FenceEnableSignalFtraceEvent::has_timeline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FenceEnableSignalFtraceEvent::clear_timeline() {
  timeline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceEnableSignalFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
  return timeline_.GetNoArena();
}
inline void FenceEnableSignalFtraceEvent::set_timeline(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}
inline void FenceEnableSignalFtraceEvent::set_timeline(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}
inline void FenceEnableSignalFtraceEvent::set_timeline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}
inline void FenceEnableSignalFtraceEvent::set_timeline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}
inline std::string* FenceEnableSignalFtraceEvent::mutable_timeline() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
  return timeline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceEnableSignalFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
  if (!has_timeline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timeline_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceEnableSignalFtraceEvent::set_allocated_timeline(std::string* timeline) {
  if (timeline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// FenceSignaledFtraceEvent

// optional uint32 context = 1;
inline bool FenceSignaledFtraceEvent::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FenceSignaledFtraceEvent::clear_context() {
  context_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceSignaledFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.context)
  return context_;
}
inline void FenceSignaledFtraceEvent::set_context(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  context_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.context)
}

// optional string driver = 2;
inline bool FenceSignaledFtraceEvent::has_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FenceSignaledFtraceEvent::clear_driver() {
  driver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceSignaledFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.driver)
  return driver_.GetNoArena();
}
inline void FenceSignaledFtraceEvent::set_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.driver)
}
inline void FenceSignaledFtraceEvent::set_driver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceSignaledFtraceEvent.driver)
}
inline void FenceSignaledFtraceEvent::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceSignaledFtraceEvent.driver)
}
inline void FenceSignaledFtraceEvent::set_driver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  driver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceSignaledFtraceEvent.driver)
}
inline std::string* FenceSignaledFtraceEvent::mutable_driver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceSignaledFtraceEvent.driver)
  return driver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceSignaledFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceSignaledFtraceEvent.driver)
  if (!has_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return driver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceSignaledFtraceEvent::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  driver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceSignaledFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceSignaledFtraceEvent::has_seqno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FenceSignaledFtraceEvent::clear_seqno() {
  seqno_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FenceSignaledFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.seqno)
  return seqno_;
}
inline void FenceSignaledFtraceEvent::set_seqno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seqno_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.seqno)
}

// optional string timeline = 4;
inline bool FenceSignaledFtraceEvent::has_timeline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FenceSignaledFtraceEvent::clear_timeline() {
  timeline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceSignaledFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.timeline)
  return timeline_.GetNoArena();
}
inline void FenceSignaledFtraceEvent::set_timeline(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}
inline void FenceSignaledFtraceEvent::set_timeline(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}
inline void FenceSignaledFtraceEvent::set_timeline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}
inline void FenceSignaledFtraceEvent::set_timeline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timeline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}
inline std::string* FenceSignaledFtraceEvent::mutable_timeline() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceSignaledFtraceEvent.timeline)
  return timeline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FenceSignaledFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceSignaledFtraceEvent.timeline)
  if (!has_timeline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timeline_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FenceSignaledFtraceEvent::set_allocated_timeline(std::string* timeline) {
  if (timeline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto
