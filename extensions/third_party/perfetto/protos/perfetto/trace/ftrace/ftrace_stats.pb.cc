// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_stats.proto

#include "protos/perfetto/trace/ftrace/ftrace_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceCpuStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto;
namespace perfetto {
namespace protos {
class FtraceCpuStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceCpuStats> _instance;
} _FtraceCpuStats_default_instance_;
class FtraceStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceStats> _instance;
} _FtraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_FtraceCpuStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceCpuStats_default_instance_;
    new (ptr) ::perfetto::protos::FtraceCpuStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceCpuStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceCpuStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FtraceCpuStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto}, {}};

static void InitDefaultsscc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceStats_default_instance_;
    new (ptr) ::perfetto::protos::FtraceStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto}, {
      &scc_info_FtraceCpuStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto.base,}};

namespace perfetto {
namespace protos {
bool FtraceStats_Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FtraceStats_Phase_strings[3] = {};

static const char FtraceStats_Phase_names[] =
  "END_OF_TRACE"
  "START_OF_TRACE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FtraceStats_Phase_entries[] = {
  { {FtraceStats_Phase_names + 0, 12}, 2 },
  { {FtraceStats_Phase_names + 12, 14}, 1 },
  { {FtraceStats_Phase_names + 26, 11}, 0 },
};

static const int FtraceStats_Phase_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  1, // 1 -> START_OF_TRACE
  0, // 2 -> END_OF_TRACE
};

const std::string& FtraceStats_Phase_Name(
    FtraceStats_Phase value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FtraceStats_Phase_entries,
          FtraceStats_Phase_entries_by_number,
          3, FtraceStats_Phase_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FtraceStats_Phase_entries,
      FtraceStats_Phase_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FtraceStats_Phase_strings[idx].get();
}
bool FtraceStats_Phase_Parse(
    const std::string& name, FtraceStats_Phase* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FtraceStats_Phase_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<FtraceStats_Phase>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FtraceStats_Phase FtraceStats::UNSPECIFIED;
constexpr FtraceStats_Phase FtraceStats::START_OF_TRACE;
constexpr FtraceStats_Phase FtraceStats::END_OF_TRACE;
constexpr FtraceStats_Phase FtraceStats::Phase_MIN;
constexpr FtraceStats_Phase FtraceStats::Phase_MAX;
constexpr int FtraceStats::Phase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FtraceCpuStats::InitAsDefaultInstance() {
}
class FtraceCpuStats::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceCpuStats>()._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overrun(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commit_overrun(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_oldest_event_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_now_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dropped_events(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_read_events(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

FtraceCpuStats::FtraceCpuStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceCpuStats)
}
FtraceCpuStats::FtraceCpuStats(const FtraceCpuStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_events_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(read_events_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceCpuStats)
}

void FtraceCpuStats::SharedCtor() {
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_events_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(read_events_));
}

FtraceCpuStats::~FtraceCpuStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceCpuStats)
  SharedDtor();
}

void FtraceCpuStats::SharedDtor() {
}

void FtraceCpuStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceCpuStats& FtraceCpuStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceCpuStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto.base);
  return *internal_default_instance();
}


void FtraceCpuStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceCpuStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_events_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(dropped_events_));
  }
  read_events_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceCpuStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entries(&has_bits);
          entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 overrun = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_overrun(&has_bits);
          overrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 commit_overrun = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_commit_overrun(&has_bits);
          commit_overrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bytes_read = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bytes_read(&has_bits);
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double oldest_event_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_oldest_event_ts(&has_bits);
          oldest_event_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double now_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_now_ts(&has_bits);
          now_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dropped_events(&has_bits);
          dropped_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 read_events = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_read_events(&has_bits);
          read_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceCpuStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceCpuStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cpu = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_entries(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 overrun = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_overrun(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &overrun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 commit_overrun = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_commit_overrun(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_overrun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_read = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_bytes_read(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oldest_event_ts = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_oldest_event_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oldest_event_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double now_ts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          _Internal::set_has_now_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &now_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_events = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_dropped_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 read_events = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_read_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceCpuStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceCpuStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceCpuStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceCpuStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->cpu(), output);
  }

  // optional uint64 entries = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->entries(), output);
  }

  // optional uint64 overrun = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->overrun(), output);
  }

  // optional uint64 commit_overrun = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->commit_overrun(), output);
  }

  // optional uint64 bytes_read = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->bytes_read(), output);
  }

  // optional double oldest_event_ts = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->oldest_event_ts(), output);
  }

  // optional double now_ts = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->now_ts(), output);
  }

  // optional uint64 dropped_events = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->dropped_events(), output);
  }

  // optional uint64 read_events = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->read_events(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceCpuStats)
}

size_t FtraceCpuStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceCpuStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->cpu());
    }

    // optional uint64 entries = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->entries());
    }

    // optional uint64 overrun = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->overrun());
    }

    // optional uint64 commit_overrun = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->commit_overrun());
    }

    // optional uint64 bytes_read = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bytes_read());
    }

    // optional double oldest_event_ts = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double now_ts = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint64 dropped_events = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_events());
    }

  }
  // optional uint64 read_events = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->read_events());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceCpuStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceCpuStats*>(
      &from));
}

void FtraceCpuStats::MergeFrom(const FtraceCpuStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceCpuStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      entries_ = from.entries_;
    }
    if (cached_has_bits & 0x00000004u) {
      overrun_ = from.overrun_;
    }
    if (cached_has_bits & 0x00000008u) {
      commit_overrun_ = from.commit_overrun_;
    }
    if (cached_has_bits & 0x00000010u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00000020u) {
      oldest_event_ts_ = from.oldest_event_ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      now_ts_ = from.now_ts_;
    }
    if (cached_has_bits & 0x00000080u) {
      dropped_events_ = from.dropped_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_read_events(from.read_events());
  }
}

void FtraceCpuStats::CopyFrom(const FtraceCpuStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceCpuStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceCpuStats::IsInitialized() const {
  return true;
}

void FtraceCpuStats::InternalSwap(FtraceCpuStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cpu_, other->cpu_);
  swap(entries_, other->entries_);
  swap(overrun_, other->overrun_);
  swap(commit_overrun_, other->commit_overrun_);
  swap(bytes_read_, other->bytes_read_);
  swap(oldest_event_ts_, other->oldest_event_ts_);
  swap(now_ts_, other->now_ts_);
  swap(dropped_events_, other->dropped_events_);
  swap(read_events_, other->read_events_);
}

std::string FtraceCpuStats::GetTypeName() const {
  return "perfetto.protos.FtraceCpuStats";
}


// ===================================================================

void FtraceStats::InitAsDefaultInstance() {
}
class FtraceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceStats>()._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernel_symbols_parsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernel_symbols_mem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FtraceStats::FtraceStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceStats)
}
FtraceStats::FtraceStats(const FtraceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cpu_stats_(from.cpu_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&kernel_symbols_mem_kb_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(kernel_symbols_mem_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceStats)
}

void FtraceStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto.base);
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_symbols_mem_kb_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(kernel_symbols_mem_kb_));
}

FtraceStats::~FtraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceStats)
  SharedDtor();
}

void FtraceStats::SharedDtor() {
}

void FtraceStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceStats& FtraceStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceStats_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto.base);
  return *internal_default_instance();
}


void FtraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kernel_symbols_mem_kb_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(kernel_symbols_mem_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FtraceStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.FtraceStats.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceStats_Phase_IsValid(val))) {
            set_phase(static_cast<::perfetto::protos::FtraceStats_Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cpu_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_symbols_parsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kernel_symbols_parsed(&has_bits);
          kernel_symbols_parsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_symbols_mem_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_kernel_symbols_mem_kb(&has_bits);
          kernel_symbols_mem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FtraceStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.FtraceStats.Phase phase = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::FtraceStats_Phase_IsValid(value)) {
            set_phase(static_cast< ::perfetto::protos::FtraceStats_Phase >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_symbols_parsed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_kernel_symbols_parsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_symbols_parsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_symbols_mem_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_kernel_symbols_mem_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_symbols_mem_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FtraceStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.FtraceStats.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->cpu_stats(static_cast<int>(i)),
      output);
  }

  // optional uint32 kernel_symbols_parsed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->kernel_symbols_parsed(), output);
  }

  // optional uint32 kernel_symbols_mem_kb = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->kernel_symbols_mem_kb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceStats)
}

size_t FtraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.FtraceStats.Phase phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional uint32 kernel_symbols_parsed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->kernel_symbols_parsed());
    }

    // optional uint32 kernel_symbols_mem_kb = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->kernel_symbols_mem_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceStats*>(
      &from));
}

void FtraceStats::MergeFrom(const FtraceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpu_stats_.MergeFrom(from.cpu_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_symbols_parsed_ = from.kernel_symbols_parsed_;
    }
    if (cached_has_bits & 0x00000004u) {
      kernel_symbols_mem_kb_ = from.kernel_symbols_mem_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FtraceStats::CopyFrom(const FtraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceStats::IsInitialized() const {
  return true;
}

void FtraceStats::InternalSwap(FtraceStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cpu_stats_)->InternalSwap(CastToBase(&other->cpu_stats_));
  swap(phase_, other->phase_);
  swap(kernel_symbols_parsed_, other->kernel_symbols_parsed_);
  swap(kernel_symbols_mem_kb_, other->kernel_symbols_mem_kb_);
}

std::string FtraceStats::GetTypeName() const {
  return "perfetto.protos.FtraceStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceCpuStats* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceCpuStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceCpuStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceStats* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
