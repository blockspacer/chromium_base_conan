// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cpuhp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class CpuhpEnterFtraceEvent;
class CpuhpEnterFtraceEventDefaultTypeInternal;
extern CpuhpEnterFtraceEventDefaultTypeInternal _CpuhpEnterFtraceEvent_default_instance_;
class CpuhpExitFtraceEvent;
class CpuhpExitFtraceEventDefaultTypeInternal;
extern CpuhpExitFtraceEventDefaultTypeInternal _CpuhpExitFtraceEvent_default_instance_;
class CpuhpLatencyFtraceEvent;
class CpuhpLatencyFtraceEventDefaultTypeInternal;
extern CpuhpLatencyFtraceEventDefaultTypeInternal _CpuhpLatencyFtraceEvent_default_instance_;
class CpuhpMultiEnterFtraceEvent;
class CpuhpMultiEnterFtraceEventDefaultTypeInternal;
extern CpuhpMultiEnterFtraceEventDefaultTypeInternal _CpuhpMultiEnterFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CpuhpEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::CpuhpExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpExitFtraceEvent>(Arena*);
template<> ::perfetto::protos::CpuhpLatencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpLatencyFtraceEvent>(Arena*);
template<> ::perfetto::protos::CpuhpMultiEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpMultiEnterFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class CpuhpExitFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpExitFtraceEvent) */ {
 public:
  CpuhpExitFtraceEvent();
  virtual ~CpuhpExitFtraceEvent();

  CpuhpExitFtraceEvent(const CpuhpExitFtraceEvent& from);
  CpuhpExitFtraceEvent(CpuhpExitFtraceEvent&& from) noexcept
    : CpuhpExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpExitFtraceEvent& operator=(const CpuhpExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpExitFtraceEvent& operator=(CpuhpExitFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuhpExitFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuhpExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpExitFtraceEvent*>(
               &_CpuhpExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuhpExitFtraceEvent& a, CpuhpExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpExitFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuhpExitFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuhpExitFtraceEvent>(nullptr);
  }

  CpuhpExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuhpExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuhpExitFtraceEvent& from);
  void MergeFrom(const CpuhpExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuhpExitFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuhpExitFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kIdxFieldNumber = 2,
    kRetFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 idx = 2;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpExitFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};
// -------------------------------------------------------------------

class CpuhpMultiEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpMultiEnterFtraceEvent) */ {
 public:
  CpuhpMultiEnterFtraceEvent();
  virtual ~CpuhpMultiEnterFtraceEvent();

  CpuhpMultiEnterFtraceEvent(const CpuhpMultiEnterFtraceEvent& from);
  CpuhpMultiEnterFtraceEvent(CpuhpMultiEnterFtraceEvent&& from) noexcept
    : CpuhpMultiEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpMultiEnterFtraceEvent& operator=(const CpuhpMultiEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpMultiEnterFtraceEvent& operator=(CpuhpMultiEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuhpMultiEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuhpMultiEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpMultiEnterFtraceEvent*>(
               &_CpuhpMultiEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuhpMultiEnterFtraceEvent& a, CpuhpMultiEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpMultiEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuhpMultiEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuhpMultiEnterFtraceEvent>(nullptr);
  }

  CpuhpMultiEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuhpMultiEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuhpMultiEnterFtraceEvent& from);
  void MergeFrom(const CpuhpMultiEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuhpMultiEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuhpMultiEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunFieldNumber = 2,
    kCpuFieldNumber = 1,
    kIdxFieldNumber = 3,
    kTargetFieldNumber = 4,
  };
  // optional uint64 fun = 2;
  bool has_fun() const;
  void clear_fun();
  ::PROTOBUF_NAMESPACE_ID::uint64 fun() const;
  void set_fun(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 idx = 3;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 target = 4;
  bool has_target() const;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpMultiEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fun_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};
// -------------------------------------------------------------------

class CpuhpEnterFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpEnterFtraceEvent) */ {
 public:
  CpuhpEnterFtraceEvent();
  virtual ~CpuhpEnterFtraceEvent();

  CpuhpEnterFtraceEvent(const CpuhpEnterFtraceEvent& from);
  CpuhpEnterFtraceEvent(CpuhpEnterFtraceEvent&& from) noexcept
    : CpuhpEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpEnterFtraceEvent& operator=(const CpuhpEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpEnterFtraceEvent& operator=(CpuhpEnterFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuhpEnterFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuhpEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpEnterFtraceEvent*>(
               &_CpuhpEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuhpEnterFtraceEvent& a, CpuhpEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpEnterFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuhpEnterFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuhpEnterFtraceEvent>(nullptr);
  }

  CpuhpEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuhpEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuhpEnterFtraceEvent& from);
  void MergeFrom(const CpuhpEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuhpEnterFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuhpEnterFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunFieldNumber = 2,
    kCpuFieldNumber = 1,
    kIdxFieldNumber = 3,
    kTargetFieldNumber = 4,
  };
  // optional uint64 fun = 2;
  bool has_fun() const;
  void clear_fun();
  ::PROTOBUF_NAMESPACE_ID::uint64 fun() const;
  void set_fun(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 idx = 3;
  bool has_idx() const;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 target = 4;
  bool has_target() const;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpEnterFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fun_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};
// -------------------------------------------------------------------

class CpuhpLatencyFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpLatencyFtraceEvent) */ {
 public:
  CpuhpLatencyFtraceEvent();
  virtual ~CpuhpLatencyFtraceEvent();

  CpuhpLatencyFtraceEvent(const CpuhpLatencyFtraceEvent& from);
  CpuhpLatencyFtraceEvent(CpuhpLatencyFtraceEvent&& from) noexcept
    : CpuhpLatencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpLatencyFtraceEvent& operator=(const CpuhpLatencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpLatencyFtraceEvent& operator=(CpuhpLatencyFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuhpLatencyFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuhpLatencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpLatencyFtraceEvent*>(
               &_CpuhpLatencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CpuhpLatencyFtraceEvent& a, CpuhpLatencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpLatencyFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuhpLatencyFtraceEvent* New() const final {
    return CreateMaybeMessage<CpuhpLatencyFtraceEvent>(nullptr);
  }

  CpuhpLatencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuhpLatencyFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuhpLatencyFtraceEvent& from);
  void MergeFrom(const CpuhpLatencyFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuhpLatencyFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuhpLatencyFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kRetFieldNumber = 2,
    kTimeFieldNumber = 4,
    kStateFieldNumber = 3,
  };
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 time = 4;
  bool has_time() const;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 state = 3;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpLatencyFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuhpExitFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpExitFtraceEvent::has_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuhpExitFtraceEvent::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuhpExitFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.cpu)
  return cpu_;
}
inline void CpuhpExitFtraceEvent::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.cpu)
}

// optional int32 idx = 2;
inline bool CpuhpExitFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuhpExitFtraceEvent::clear_idx() {
  idx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpExitFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.idx)
  return idx_;
}
inline void CpuhpExitFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.idx)
}

// optional int32 ret = 3;
inline bool CpuhpExitFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuhpExitFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.ret)
  return ret_;
}
inline void CpuhpExitFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.ret)
}

// optional int32 state = 4;
inline bool CpuhpExitFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuhpExitFtraceEvent::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpExitFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.state)
  return state_;
}
inline void CpuhpExitFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.state)
}

// -------------------------------------------------------------------

// CpuhpMultiEnterFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpMultiEnterFtraceEvent::has_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuhpMultiEnterFtraceEvent::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuhpMultiEnterFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.cpu)
  return cpu_;
}
inline void CpuhpMultiEnterFtraceEvent::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.cpu)
}

// optional uint64 fun = 2;
inline bool CpuhpMultiEnterFtraceEvent::has_fun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuhpMultiEnterFtraceEvent::clear_fun() {
  fun_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CpuhpMultiEnterFtraceEvent::fun() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.fun)
  return fun_;
}
inline void CpuhpMultiEnterFtraceEvent::set_fun(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  fun_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.fun)
}

// optional int32 idx = 3;
inline bool CpuhpMultiEnterFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuhpMultiEnterFtraceEvent::clear_idx() {
  idx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpMultiEnterFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.idx)
  return idx_;
}
inline void CpuhpMultiEnterFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.idx)
}

// optional int32 target = 4;
inline bool CpuhpMultiEnterFtraceEvent::has_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuhpMultiEnterFtraceEvent::clear_target() {
  target_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpMultiEnterFtraceEvent::target() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.target)
  return target_;
}
inline void CpuhpMultiEnterFtraceEvent::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  target_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.target)
}

// -------------------------------------------------------------------

// CpuhpEnterFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpEnterFtraceEvent::has_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuhpEnterFtraceEvent::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuhpEnterFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.cpu)
  return cpu_;
}
inline void CpuhpEnterFtraceEvent::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.cpu)
}

// optional uint64 fun = 2;
inline bool CpuhpEnterFtraceEvent::has_fun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuhpEnterFtraceEvent::clear_fun() {
  fun_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CpuhpEnterFtraceEvent::fun() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.fun)
  return fun_;
}
inline void CpuhpEnterFtraceEvent::set_fun(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  fun_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.fun)
}

// optional int32 idx = 3;
inline bool CpuhpEnterFtraceEvent::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuhpEnterFtraceEvent::clear_idx() {
  idx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpEnterFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.idx)
  return idx_;
}
inline void CpuhpEnterFtraceEvent::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.idx)
}

// optional int32 target = 4;
inline bool CpuhpEnterFtraceEvent::has_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuhpEnterFtraceEvent::clear_target() {
  target_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpEnterFtraceEvent::target() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.target)
  return target_;
}
inline void CpuhpEnterFtraceEvent::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  target_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.target)
}

// -------------------------------------------------------------------

// CpuhpLatencyFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpLatencyFtraceEvent::has_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuhpLatencyFtraceEvent::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuhpLatencyFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.cpu)
  return cpu_;
}
inline void CpuhpLatencyFtraceEvent::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.cpu)
}

// optional int32 ret = 2;
inline bool CpuhpLatencyFtraceEvent::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuhpLatencyFtraceEvent::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuhpLatencyFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.ret)
  return ret_;
}
inline void CpuhpLatencyFtraceEvent::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.ret)
}

// optional uint32 state = 3;
inline bool CpuhpLatencyFtraceEvent::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuhpLatencyFtraceEvent::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuhpLatencyFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.state)
  return state_;
}
inline void CpuhpLatencyFtraceEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.state)
}

// optional uint64 time = 4;
inline bool CpuhpLatencyFtraceEvent::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuhpLatencyFtraceEvent::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CpuhpLatencyFtraceEvent::time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.time)
  return time_;
}
inline void CpuhpLatencyFtraceEvent::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto
