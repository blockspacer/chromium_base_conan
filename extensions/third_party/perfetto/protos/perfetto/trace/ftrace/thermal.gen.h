// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_THERMAL_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_THERMAL_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class CdevUpdateFtraceEvent;
class ThermalTemperatureFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT CdevUpdateFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTargetFieldNumber = 1,
    kTypeFieldNumber = 2,
  };

  CdevUpdateFtraceEvent();
  ~CdevUpdateFtraceEvent() override;
  CdevUpdateFtraceEvent(CdevUpdateFtraceEvent&&) noexcept;
  CdevUpdateFtraceEvent& operator=(CdevUpdateFtraceEvent&&);
  CdevUpdateFtraceEvent(const CdevUpdateFtraceEvent&);
  CdevUpdateFtraceEvent& operator=(const CdevUpdateFtraceEvent&);
  bool operator==(const CdevUpdateFtraceEvent&) const;
  bool operator!=(const CdevUpdateFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_target() const { return _has_field_[1]; }
  uint64_t target() const { return target_; }
  void set_target(uint64_t value) { target_ = value; _has_field_.set(1); }

  bool has_type() const { return _has_field_[2]; }
  const std::string& type() const { return type_; }
  void set_type(const std::string& value) { type_ = value; _has_field_.set(2); }

 private:
  uint64_t target_{};
  std::string type_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT ThermalTemperatureFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kTempFieldNumber = 2,
    kTempPrevFieldNumber = 3,
    kThermalZoneFieldNumber = 4,
  };

  ThermalTemperatureFtraceEvent();
  ~ThermalTemperatureFtraceEvent() override;
  ThermalTemperatureFtraceEvent(ThermalTemperatureFtraceEvent&&) noexcept;
  ThermalTemperatureFtraceEvent& operator=(ThermalTemperatureFtraceEvent&&);
  ThermalTemperatureFtraceEvent(const ThermalTemperatureFtraceEvent&);
  ThermalTemperatureFtraceEvent& operator=(const ThermalTemperatureFtraceEvent&);
  bool operator==(const ThermalTemperatureFtraceEvent&) const;
  bool operator!=(const ThermalTemperatureFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  int32_t id() const { return id_; }
  void set_id(int32_t value) { id_ = value; _has_field_.set(1); }

  bool has_temp() const { return _has_field_[2]; }
  int32_t temp() const { return temp_; }
  void set_temp(int32_t value) { temp_ = value; _has_field_.set(2); }

  bool has_temp_prev() const { return _has_field_[3]; }
  int32_t temp_prev() const { return temp_prev_; }
  void set_temp_prev(int32_t value) { temp_prev_ = value; _has_field_.set(3); }

  bool has_thermal_zone() const { return _has_field_[4]; }
  const std::string& thermal_zone() const { return thermal_zone_; }
  void set_thermal_zone(const std::string& value) { thermal_zone_ = value; _has_field_.set(4); }

 private:
  int32_t id_{};
  int32_t temp_{};
  int32_t temp_prev_{};
  std::string thermal_zone_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_THERMAL_PROTO_CPP_H_
