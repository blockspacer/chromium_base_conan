#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/frame_timeline_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FrameTimelineEvent::FrameTimelineEvent() = default;
FrameTimelineEvent::~FrameTimelineEvent() = default;
FrameTimelineEvent::FrameTimelineEvent(const FrameTimelineEvent&) = default;
FrameTimelineEvent& FrameTimelineEvent::operator=(const FrameTimelineEvent&) = default;
FrameTimelineEvent::FrameTimelineEvent(FrameTimelineEvent&&) noexcept = default;
FrameTimelineEvent& FrameTimelineEvent::operator=(FrameTimelineEvent&&) = default;

bool FrameTimelineEvent::operator==(const FrameTimelineEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && expected_display_frame_start_ == other.expected_display_frame_start_
   && actual_display_frame_start_ == other.actual_display_frame_start_
   && expected_surface_frame_start_ == other.expected_surface_frame_start_
   && actual_surface_frame_start_ == other.actual_surface_frame_start_
   && frame_end_ == other.frame_end_;
}

bool FrameTimelineEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* expected_display_frame_start */:
        (*expected_display_frame_start_).ParseFromArray(field.data(), field.size());
        break;
      case 2 /* actual_display_frame_start */:
        (*actual_display_frame_start_).ParseFromArray(field.data(), field.size());
        break;
      case 3 /* expected_surface_frame_start */:
        (*expected_surface_frame_start_).ParseFromArray(field.data(), field.size());
        break;
      case 4 /* actual_surface_frame_start */:
        (*actual_surface_frame_start_).ParseFromArray(field.data(), field.size());
        break;
      case 5 /* frame_end */:
        (*frame_end_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FrameTimelineEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FrameTimelineEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FrameTimelineEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: expected_display_frame_start
  if (_has_field_[1]) {
    (*expected_display_frame_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: actual_display_frame_start
  if (_has_field_[2]) {
    (*actual_display_frame_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: expected_surface_frame_start
  if (_has_field_[3]) {
    (*expected_surface_frame_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: actual_surface_frame_start
  if (_has_field_[4]) {
    (*actual_surface_frame_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 5: frame_end
  if (_has_field_[5]) {
    (*frame_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(5));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd() = default;
FrameTimelineEvent_FrameEnd::~FrameTimelineEvent_FrameEnd() = default;
FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd&) = default;
FrameTimelineEvent_FrameEnd& FrameTimelineEvent_FrameEnd::operator=(const FrameTimelineEvent_FrameEnd&) = default;
FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(FrameTimelineEvent_FrameEnd&&) noexcept = default;
FrameTimelineEvent_FrameEnd& FrameTimelineEvent_FrameEnd::operator=(FrameTimelineEvent_FrameEnd&&) = default;

bool FrameTimelineEvent_FrameEnd::operator==(const FrameTimelineEvent_FrameEnd& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cookie_ == other.cookie_;
}

bool FrameTimelineEvent_FrameEnd::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cookie */:
        field.get(&cookie_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FrameTimelineEvent_FrameEnd::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FrameTimelineEvent_FrameEnd::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FrameTimelineEvent_FrameEnd::Serialize(::protozero::Message* msg) const {
  // Field 1: cookie
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cookie_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart() = default;
FrameTimelineEvent_ActualSurfaceFrameStart::~FrameTimelineEvent_ActualSurfaceFrameStart() = default;
FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart&) = default;
FrameTimelineEvent_ActualSurfaceFrameStart& FrameTimelineEvent_ActualSurfaceFrameStart::operator=(const FrameTimelineEvent_ActualSurfaceFrameStart&) = default;
FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(FrameTimelineEvent_ActualSurfaceFrameStart&&) noexcept = default;
FrameTimelineEvent_ActualSurfaceFrameStart& FrameTimelineEvent_ActualSurfaceFrameStart::operator=(FrameTimelineEvent_ActualSurfaceFrameStart&&) = default;

bool FrameTimelineEvent_ActualSurfaceFrameStart::operator==(const FrameTimelineEvent_ActualSurfaceFrameStart& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cookie_ == other.cookie_
   && token_ == other.token_
   && display_frame_token_ == other.display_frame_token_
   && pid_ == other.pid_
   && layer_name_ == other.layer_name_
   && present_type_ == other.present_type_
   && on_time_finish_ == other.on_time_finish_
   && gpu_composition_ == other.gpu_composition_
   && jank_type_ == other.jank_type_
   && prediction_type_ == other.prediction_type_;
}

bool FrameTimelineEvent_ActualSurfaceFrameStart::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cookie */:
        field.get(&cookie_);
        break;
      case 2 /* token */:
        field.get(&token_);
        break;
      case 3 /* display_frame_token */:
        field.get(&display_frame_token_);
        break;
      case 4 /* pid */:
        field.get(&pid_);
        break;
      case 5 /* layer_name */:
        field.get(&layer_name_);
        break;
      case 6 /* present_type */:
        field.get(&present_type_);
        break;
      case 7 /* on_time_finish */:
        field.get(&on_time_finish_);
        break;
      case 8 /* gpu_composition */:
        field.get(&gpu_composition_);
        break;
      case 9 /* jank_type */:
        field.get(&jank_type_);
        break;
      case 10 /* prediction_type */:
        field.get(&prediction_type_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FrameTimelineEvent_ActualSurfaceFrameStart::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FrameTimelineEvent_ActualSurfaceFrameStart::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FrameTimelineEvent_ActualSurfaceFrameStart::Serialize(::protozero::Message* msg) const {
  // Field 1: cookie
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cookie_);
  }

  // Field 2: token
  if (_has_field_[2]) {
    msg->AppendVarInt(2, token_);
  }

  // Field 3: display_frame_token
  if (_has_field_[3]) {
    msg->AppendVarInt(3, display_frame_token_);
  }

  // Field 4: pid
  if (_has_field_[4]) {
    msg->AppendVarInt(4, pid_);
  }

  // Field 5: layer_name
  if (_has_field_[5]) {
    msg->AppendString(5, layer_name_);
  }

  // Field 6: present_type
  if (_has_field_[6]) {
    msg->AppendVarInt(6, present_type_);
  }

  // Field 7: on_time_finish
  if (_has_field_[7]) {
    msg->AppendTinyVarInt(7, on_time_finish_);
  }

  // Field 8: gpu_composition
  if (_has_field_[8]) {
    msg->AppendTinyVarInt(8, gpu_composition_);
  }

  // Field 9: jank_type
  if (_has_field_[9]) {
    msg->AppendVarInt(9, jank_type_);
  }

  // Field 10: prediction_type
  if (_has_field_[10]) {
    msg->AppendVarInt(10, prediction_type_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart() = default;
FrameTimelineEvent_ExpectedSurfaceFrameStart::~FrameTimelineEvent_ExpectedSurfaceFrameStart() = default;
FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart&) = default;
FrameTimelineEvent_ExpectedSurfaceFrameStart& FrameTimelineEvent_ExpectedSurfaceFrameStart::operator=(const FrameTimelineEvent_ExpectedSurfaceFrameStart&) = default;
FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(FrameTimelineEvent_ExpectedSurfaceFrameStart&&) noexcept = default;
FrameTimelineEvent_ExpectedSurfaceFrameStart& FrameTimelineEvent_ExpectedSurfaceFrameStart::operator=(FrameTimelineEvent_ExpectedSurfaceFrameStart&&) = default;

bool FrameTimelineEvent_ExpectedSurfaceFrameStart::operator==(const FrameTimelineEvent_ExpectedSurfaceFrameStart& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cookie_ == other.cookie_
   && token_ == other.token_
   && display_frame_token_ == other.display_frame_token_
   && pid_ == other.pid_
   && layer_name_ == other.layer_name_;
}

bool FrameTimelineEvent_ExpectedSurfaceFrameStart::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cookie */:
        field.get(&cookie_);
        break;
      case 2 /* token */:
        field.get(&token_);
        break;
      case 3 /* display_frame_token */:
        field.get(&display_frame_token_);
        break;
      case 4 /* pid */:
        field.get(&pid_);
        break;
      case 5 /* layer_name */:
        field.get(&layer_name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FrameTimelineEvent_ExpectedSurfaceFrameStart::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FrameTimelineEvent_ExpectedSurfaceFrameStart::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::Serialize(::protozero::Message* msg) const {
  // Field 1: cookie
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cookie_);
  }

  // Field 2: token
  if (_has_field_[2]) {
    msg->AppendVarInt(2, token_);
  }

  // Field 3: display_frame_token
  if (_has_field_[3]) {
    msg->AppendVarInt(3, display_frame_token_);
  }

  // Field 4: pid
  if (_has_field_[4]) {
    msg->AppendVarInt(4, pid_);
  }

  // Field 5: layer_name
  if (_has_field_[5]) {
    msg->AppendString(5, layer_name_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart() = default;
FrameTimelineEvent_ActualDisplayFrameStart::~FrameTimelineEvent_ActualDisplayFrameStart() = default;
FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart&) = default;
FrameTimelineEvent_ActualDisplayFrameStart& FrameTimelineEvent_ActualDisplayFrameStart::operator=(const FrameTimelineEvent_ActualDisplayFrameStart&) = default;
FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(FrameTimelineEvent_ActualDisplayFrameStart&&) noexcept = default;
FrameTimelineEvent_ActualDisplayFrameStart& FrameTimelineEvent_ActualDisplayFrameStart::operator=(FrameTimelineEvent_ActualDisplayFrameStart&&) = default;

bool FrameTimelineEvent_ActualDisplayFrameStart::operator==(const FrameTimelineEvent_ActualDisplayFrameStart& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cookie_ == other.cookie_
   && token_ == other.token_
   && pid_ == other.pid_
   && present_type_ == other.present_type_
   && on_time_finish_ == other.on_time_finish_
   && gpu_composition_ == other.gpu_composition_
   && jank_type_ == other.jank_type_
   && prediction_type_ == other.prediction_type_;
}

bool FrameTimelineEvent_ActualDisplayFrameStart::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cookie */:
        field.get(&cookie_);
        break;
      case 2 /* token */:
        field.get(&token_);
        break;
      case 3 /* pid */:
        field.get(&pid_);
        break;
      case 4 /* present_type */:
        field.get(&present_type_);
        break;
      case 5 /* on_time_finish */:
        field.get(&on_time_finish_);
        break;
      case 6 /* gpu_composition */:
        field.get(&gpu_composition_);
        break;
      case 7 /* jank_type */:
        field.get(&jank_type_);
        break;
      case 8 /* prediction_type */:
        field.get(&prediction_type_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FrameTimelineEvent_ActualDisplayFrameStart::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FrameTimelineEvent_ActualDisplayFrameStart::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FrameTimelineEvent_ActualDisplayFrameStart::Serialize(::protozero::Message* msg) const {
  // Field 1: cookie
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cookie_);
  }

  // Field 2: token
  if (_has_field_[2]) {
    msg->AppendVarInt(2, token_);
  }

  // Field 3: pid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, pid_);
  }

  // Field 4: present_type
  if (_has_field_[4]) {
    msg->AppendVarInt(4, present_type_);
  }

  // Field 5: on_time_finish
  if (_has_field_[5]) {
    msg->AppendTinyVarInt(5, on_time_finish_);
  }

  // Field 6: gpu_composition
  if (_has_field_[6]) {
    msg->AppendTinyVarInt(6, gpu_composition_);
  }

  // Field 7: jank_type
  if (_has_field_[7]) {
    msg->AppendVarInt(7, jank_type_);
  }

  // Field 8: prediction_type
  if (_has_field_[8]) {
    msg->AppendVarInt(8, prediction_type_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart() = default;
FrameTimelineEvent_ExpectedDisplayFrameStart::~FrameTimelineEvent_ExpectedDisplayFrameStart() = default;
FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart&) = default;
FrameTimelineEvent_ExpectedDisplayFrameStart& FrameTimelineEvent_ExpectedDisplayFrameStart::operator=(const FrameTimelineEvent_ExpectedDisplayFrameStart&) = default;
FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(FrameTimelineEvent_ExpectedDisplayFrameStart&&) noexcept = default;
FrameTimelineEvent_ExpectedDisplayFrameStart& FrameTimelineEvent_ExpectedDisplayFrameStart::operator=(FrameTimelineEvent_ExpectedDisplayFrameStart&&) = default;

bool FrameTimelineEvent_ExpectedDisplayFrameStart::operator==(const FrameTimelineEvent_ExpectedDisplayFrameStart& other) const {
  return unknown_fields_ == other.unknown_fields_
   && cookie_ == other.cookie_
   && token_ == other.token_
   && pid_ == other.pid_;
}

bool FrameTimelineEvent_ExpectedDisplayFrameStart::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cookie */:
        field.get(&cookie_);
        break;
      case 2 /* token */:
        field.get(&token_);
        break;
      case 3 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FrameTimelineEvent_ExpectedDisplayFrameStart::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FrameTimelineEvent_ExpectedDisplayFrameStart::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::Serialize(::protozero::Message* msg) const {
  // Field 1: cookie
  if (_has_field_[1]) {
    msg->AppendVarInt(1, cookie_);
  }

  // Field 2: token
  if (_has_field_[2]) {
    msg->AppendVarInt(2, token_);
  }

  // Field 3: pid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, pid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
