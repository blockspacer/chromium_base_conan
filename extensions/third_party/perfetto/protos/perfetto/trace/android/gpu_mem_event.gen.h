// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GPU_MEM_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GPU_MEM_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class GpuMemTotalEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT GpuMemTotalEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kGpuIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kSizeFieldNumber = 3,
  };

  GpuMemTotalEvent();
  ~GpuMemTotalEvent() override;
  GpuMemTotalEvent(GpuMemTotalEvent&&) noexcept;
  GpuMemTotalEvent& operator=(GpuMemTotalEvent&&);
  GpuMemTotalEvent(const GpuMemTotalEvent&);
  GpuMemTotalEvent& operator=(const GpuMemTotalEvent&);
  bool operator==(const GpuMemTotalEvent&) const;
  bool operator!=(const GpuMemTotalEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_gpu_id() const { return _has_field_[1]; }
  uint32_t gpu_id() const { return gpu_id_; }
  void set_gpu_id(uint32_t value) { gpu_id_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  uint32_t pid() const { return pid_; }
  void set_pid(uint32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_size() const { return _has_field_[3]; }
  uint64_t size() const { return size_; }
  void set_size(uint64_t value) { size_ = value; _has_field_.set(3); }

 private:
  uint32_t gpu_id_{};
  uint32_t pid_{};
  uint64_t size_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GPU_MEM_EVENT_PROTO_CPP_H_
