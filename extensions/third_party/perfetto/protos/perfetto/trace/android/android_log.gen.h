// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_LOG_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_LOG_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class AndroidLogPacket;
class AndroidLogPacket_Stats;
class AndroidLogPacket_LogEvent;
class AndroidLogPacket_LogEvent_Arg;
enum AndroidLogId : int;
enum AndroidLogPriority : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT AndroidLogPacket : public ::protozero::CppMessageObj {
 public:
  using LogEvent = AndroidLogPacket_LogEvent;
  using Stats = AndroidLogPacket_Stats;
  enum FieldNumbers {
    kEventsFieldNumber = 1,
    kStatsFieldNumber = 2,
  };

  AndroidLogPacket();
  ~AndroidLogPacket() override;
  AndroidLogPacket(AndroidLogPacket&&) noexcept;
  AndroidLogPacket& operator=(AndroidLogPacket&&);
  AndroidLogPacket(const AndroidLogPacket&);
  AndroidLogPacket& operator=(const AndroidLogPacket&);
  bool operator==(const AndroidLogPacket&) const;
  bool operator!=(const AndroidLogPacket& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<AndroidLogPacket_LogEvent>& events() const { return events_; }
  std::vector<AndroidLogPacket_LogEvent>* mutable_events() { return &events_; }
  int events_size() const;
  void clear_events();
  AndroidLogPacket_LogEvent* add_events();

  bool has_stats() const { return _has_field_[2]; }
  const AndroidLogPacket_Stats& stats() const { return *stats_; }
  AndroidLogPacket_Stats* mutable_stats() { _has_field_.set(2); return stats_.get(); }

 private:
  std::vector<AndroidLogPacket_LogEvent> events_;
  ::protozero::CopyablePtr<AndroidLogPacket_Stats> stats_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT AndroidLogPacket_Stats : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNumTotalFieldNumber = 1,
    kNumFailedFieldNumber = 2,
    kNumSkippedFieldNumber = 3,
  };

  AndroidLogPacket_Stats();
  ~AndroidLogPacket_Stats() override;
  AndroidLogPacket_Stats(AndroidLogPacket_Stats&&) noexcept;
  AndroidLogPacket_Stats& operator=(AndroidLogPacket_Stats&&);
  AndroidLogPacket_Stats(const AndroidLogPacket_Stats&);
  AndroidLogPacket_Stats& operator=(const AndroidLogPacket_Stats&);
  bool operator==(const AndroidLogPacket_Stats&) const;
  bool operator!=(const AndroidLogPacket_Stats& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_num_total() const { return _has_field_[1]; }
  uint64_t num_total() const { return num_total_; }
  void set_num_total(uint64_t value) { num_total_ = value; _has_field_.set(1); }

  bool has_num_failed() const { return _has_field_[2]; }
  uint64_t num_failed() const { return num_failed_; }
  void set_num_failed(uint64_t value) { num_failed_ = value; _has_field_.set(2); }

  bool has_num_skipped() const { return _has_field_[3]; }
  uint64_t num_skipped() const { return num_skipped_; }
  void set_num_skipped(uint64_t value) { num_skipped_ = value; _has_field_.set(3); }

 private:
  uint64_t num_total_{};
  uint64_t num_failed_{};
  uint64_t num_skipped_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT AndroidLogPacket_LogEvent : public ::protozero::CppMessageObj {
 public:
  using Arg = AndroidLogPacket_LogEvent_Arg;
  enum FieldNumbers {
    kLogIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kUidFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kTagFieldNumber = 6,
    kPrioFieldNumber = 7,
    kMessageFieldNumber = 8,
    kArgsFieldNumber = 9,
  };

  AndroidLogPacket_LogEvent();
  ~AndroidLogPacket_LogEvent() override;
  AndroidLogPacket_LogEvent(AndroidLogPacket_LogEvent&&) noexcept;
  AndroidLogPacket_LogEvent& operator=(AndroidLogPacket_LogEvent&&);
  AndroidLogPacket_LogEvent(const AndroidLogPacket_LogEvent&);
  AndroidLogPacket_LogEvent& operator=(const AndroidLogPacket_LogEvent&);
  bool operator==(const AndroidLogPacket_LogEvent&) const;
  bool operator!=(const AndroidLogPacket_LogEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_log_id() const { return _has_field_[1]; }
  AndroidLogId log_id() const { return log_id_; }
  void set_log_id(AndroidLogId value) { log_id_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_tid() const { return _has_field_[3]; }
  int32_t tid() const { return tid_; }
  void set_tid(int32_t value) { tid_ = value; _has_field_.set(3); }

  bool has_uid() const { return _has_field_[4]; }
  int32_t uid() const { return uid_; }
  void set_uid(int32_t value) { uid_ = value; _has_field_.set(4); }

  bool has_timestamp() const { return _has_field_[5]; }
  uint64_t timestamp() const { return timestamp_; }
  void set_timestamp(uint64_t value) { timestamp_ = value; _has_field_.set(5); }

  bool has_tag() const { return _has_field_[6]; }
  const std::string& tag() const { return tag_; }
  void set_tag(const std::string& value) { tag_ = value; _has_field_.set(6); }

  bool has_prio() const { return _has_field_[7]; }
  AndroidLogPriority prio() const { return prio_; }
  void set_prio(AndroidLogPriority value) { prio_ = value; _has_field_.set(7); }

  bool has_message() const { return _has_field_[8]; }
  const std::string& message() const { return message_; }
  void set_message(const std::string& value) { message_ = value; _has_field_.set(8); }

  const std::vector<AndroidLogPacket_LogEvent_Arg>& args() const { return args_; }
  std::vector<AndroidLogPacket_LogEvent_Arg>* mutable_args() { return &args_; }
  int args_size() const;
  void clear_args();
  AndroidLogPacket_LogEvent_Arg* add_args();

 private:
  AndroidLogId log_id_{};
  int32_t pid_{};
  int32_t tid_{};
  int32_t uid_{};
  uint64_t timestamp_{};
  std::string tag_{};
  AndroidLogPriority prio_{};
  std::string message_{};
  std::vector<AndroidLogPacket_LogEvent_Arg> args_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};


class PERFETTO_EXPORT AndroidLogPacket_LogEvent_Arg : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNameFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
  };

  AndroidLogPacket_LogEvent_Arg();
  ~AndroidLogPacket_LogEvent_Arg() override;
  AndroidLogPacket_LogEvent_Arg(AndroidLogPacket_LogEvent_Arg&&) noexcept;
  AndroidLogPacket_LogEvent_Arg& operator=(AndroidLogPacket_LogEvent_Arg&&);
  AndroidLogPacket_LogEvent_Arg(const AndroidLogPacket_LogEvent_Arg&);
  AndroidLogPacket_LogEvent_Arg& operator=(const AndroidLogPacket_LogEvent_Arg&);
  bool operator==(const AndroidLogPacket_LogEvent_Arg&) const;
  bool operator!=(const AndroidLogPacket_LogEvent_Arg& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_name() const { return _has_field_[1]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(1); }

  bool has_int_value() const { return _has_field_[2]; }
  int64_t int_value() const { return int_value_; }
  void set_int_value(int64_t value) { int_value_ = value; _has_field_.set(2); }

  bool has_float_value() const { return _has_field_[3]; }
  float float_value() const { return float_value_; }
  void set_float_value(float value) { float_value_ = value; _has_field_.set(3); }

  bool has_string_value() const { return _has_field_[4]; }
  const std::string& string_value() const { return string_value_; }
  void set_string_value(const std::string& value) { string_value_ = value; _has_field_.set(4); }

 private:
  std::string name_{};
  int64_t int_value_{};
  float float_value_{};
  std::string string_value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_LOG_PROTO_CPP_H_
