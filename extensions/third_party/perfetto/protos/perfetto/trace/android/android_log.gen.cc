#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/android_log.gen.h"
#include "protos/perfetto/common/android_log_constants.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

AndroidLogPacket::AndroidLogPacket() = default;
AndroidLogPacket::~AndroidLogPacket() = default;
AndroidLogPacket::AndroidLogPacket(const AndroidLogPacket&) = default;
AndroidLogPacket& AndroidLogPacket::operator=(const AndroidLogPacket&) = default;
AndroidLogPacket::AndroidLogPacket(AndroidLogPacket&&) noexcept = default;
AndroidLogPacket& AndroidLogPacket::operator=(AndroidLogPacket&&) = default;

bool AndroidLogPacket::operator==(const AndroidLogPacket& other) const {
  return unknown_fields_ == other.unknown_fields_
   && events_ == other.events_
   && stats_ == other.stats_;
}

int AndroidLogPacket::events_size() const { return static_cast<int>(events_.size()); }
void AndroidLogPacket::clear_events() { events_.clear(); }
AndroidLogPacket_LogEvent* AndroidLogPacket::add_events() { events_.emplace_back(); return &events_.back(); }
bool AndroidLogPacket::ParseFromArray(const void* raw, size_t size) {
  events_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* events */:
        events_.emplace_back();
        events_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* stats */:
        (*stats_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidLogPacket::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidLogPacket::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidLogPacket::Serialize(::protozero::Message* msg) const {
  // Field 1: events
  for (auto& it : events_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: stats
  if (_has_field_[2]) {
    (*stats_).Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


AndroidLogPacket_Stats::AndroidLogPacket_Stats() = default;
AndroidLogPacket_Stats::~AndroidLogPacket_Stats() = default;
AndroidLogPacket_Stats::AndroidLogPacket_Stats(const AndroidLogPacket_Stats&) = default;
AndroidLogPacket_Stats& AndroidLogPacket_Stats::operator=(const AndroidLogPacket_Stats&) = default;
AndroidLogPacket_Stats::AndroidLogPacket_Stats(AndroidLogPacket_Stats&&) noexcept = default;
AndroidLogPacket_Stats& AndroidLogPacket_Stats::operator=(AndroidLogPacket_Stats&&) = default;

bool AndroidLogPacket_Stats::operator==(const AndroidLogPacket_Stats& other) const {
  return unknown_fields_ == other.unknown_fields_
   && num_total_ == other.num_total_
   && num_failed_ == other.num_failed_
   && num_skipped_ == other.num_skipped_;
}

bool AndroidLogPacket_Stats::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* num_total */:
        field.get(&num_total_);
        break;
      case 2 /* num_failed */:
        field.get(&num_failed_);
        break;
      case 3 /* num_skipped */:
        field.get(&num_skipped_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidLogPacket_Stats::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidLogPacket_Stats::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidLogPacket_Stats::Serialize(::protozero::Message* msg) const {
  // Field 1: num_total
  if (_has_field_[1]) {
    msg->AppendVarInt(1, num_total_);
  }

  // Field 2: num_failed
  if (_has_field_[2]) {
    msg->AppendVarInt(2, num_failed_);
  }

  // Field 3: num_skipped
  if (_has_field_[3]) {
    msg->AppendVarInt(3, num_skipped_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


AndroidLogPacket_LogEvent::AndroidLogPacket_LogEvent() = default;
AndroidLogPacket_LogEvent::~AndroidLogPacket_LogEvent() = default;
AndroidLogPacket_LogEvent::AndroidLogPacket_LogEvent(const AndroidLogPacket_LogEvent&) = default;
AndroidLogPacket_LogEvent& AndroidLogPacket_LogEvent::operator=(const AndroidLogPacket_LogEvent&) = default;
AndroidLogPacket_LogEvent::AndroidLogPacket_LogEvent(AndroidLogPacket_LogEvent&&) noexcept = default;
AndroidLogPacket_LogEvent& AndroidLogPacket_LogEvent::operator=(AndroidLogPacket_LogEvent&&) = default;

bool AndroidLogPacket_LogEvent::operator==(const AndroidLogPacket_LogEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && log_id_ == other.log_id_
   && pid_ == other.pid_
   && tid_ == other.tid_
   && uid_ == other.uid_
   && timestamp_ == other.timestamp_
   && tag_ == other.tag_
   && prio_ == other.prio_
   && message_ == other.message_
   && args_ == other.args_;
}

int AndroidLogPacket_LogEvent::args_size() const { return static_cast<int>(args_.size()); }
void AndroidLogPacket_LogEvent::clear_args() { args_.clear(); }
AndroidLogPacket_LogEvent_Arg* AndroidLogPacket_LogEvent::add_args() { args_.emplace_back(); return &args_.back(); }
bool AndroidLogPacket_LogEvent::ParseFromArray(const void* raw, size_t size) {
  args_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* log_id */:
        field.get(&log_id_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* tid */:
        field.get(&tid_);
        break;
      case 4 /* uid */:
        field.get(&uid_);
        break;
      case 5 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 6 /* tag */:
        field.get(&tag_);
        break;
      case 7 /* prio */:
        field.get(&prio_);
        break;
      case 8 /* message */:
        field.get(&message_);
        break;
      case 9 /* args */:
        args_.emplace_back();
        args_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidLogPacket_LogEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidLogPacket_LogEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidLogPacket_LogEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: log_id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, log_id_);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, pid_);
  }

  // Field 3: tid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, tid_);
  }

  // Field 4: uid
  if (_has_field_[4]) {
    msg->AppendVarInt(4, uid_);
  }

  // Field 5: timestamp
  if (_has_field_[5]) {
    msg->AppendVarInt(5, timestamp_);
  }

  // Field 6: tag
  if (_has_field_[6]) {
    msg->AppendString(6, tag_);
  }

  // Field 7: prio
  if (_has_field_[7]) {
    msg->AppendVarInt(7, prio_);
  }

  // Field 8: message
  if (_has_field_[8]) {
    msg->AppendString(8, message_);
  }

  // Field 9: args
  for (auto& it : args_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(9));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


AndroidLogPacket_LogEvent_Arg::AndroidLogPacket_LogEvent_Arg() = default;
AndroidLogPacket_LogEvent_Arg::~AndroidLogPacket_LogEvent_Arg() = default;
AndroidLogPacket_LogEvent_Arg::AndroidLogPacket_LogEvent_Arg(const AndroidLogPacket_LogEvent_Arg&) = default;
AndroidLogPacket_LogEvent_Arg& AndroidLogPacket_LogEvent_Arg::operator=(const AndroidLogPacket_LogEvent_Arg&) = default;
AndroidLogPacket_LogEvent_Arg::AndroidLogPacket_LogEvent_Arg(AndroidLogPacket_LogEvent_Arg&&) noexcept = default;
AndroidLogPacket_LogEvent_Arg& AndroidLogPacket_LogEvent_Arg::operator=(AndroidLogPacket_LogEvent_Arg&&) = default;

bool AndroidLogPacket_LogEvent_Arg::operator==(const AndroidLogPacket_LogEvent_Arg& other) const {
  return unknown_fields_ == other.unknown_fields_
   && name_ == other.name_
   && int_value_ == other.int_value_
   && float_value_ == other.float_value_
   && string_value_ == other.string_value_;
}

bool AndroidLogPacket_LogEvent_Arg::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        field.get(&name_);
        break;
      case 2 /* int_value */:
        field.get(&int_value_);
        break;
      case 3 /* float_value */:
        field.get(&float_value_);
        break;
      case 4 /* string_value */:
        field.get(&string_value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidLogPacket_LogEvent_Arg::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidLogPacket_LogEvent_Arg::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidLogPacket_LogEvent_Arg::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    msg->AppendString(1, name_);
  }

  // Field 2: int_value
  if (_has_field_[2]) {
    msg->AppendVarInt(2, int_value_);
  }

  // Field 3: float_value
  if (_has_field_[3]) {
    msg->AppendFixed(3, float_value_);
  }

  // Field 4: string_value
  if (_has_field_[4]) {
    msg->AppendString(4, string_value_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
