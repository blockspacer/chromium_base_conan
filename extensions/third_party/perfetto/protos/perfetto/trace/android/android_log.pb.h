// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/android_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/android_log_constants.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class AndroidLogPacket;
class AndroidLogPacketDefaultTypeInternal;
extern AndroidLogPacketDefaultTypeInternal _AndroidLogPacket_default_instance_;
class AndroidLogPacket_LogEvent;
class AndroidLogPacket_LogEventDefaultTypeInternal;
extern AndroidLogPacket_LogEventDefaultTypeInternal _AndroidLogPacket_LogEvent_default_instance_;
class AndroidLogPacket_LogEvent_Arg;
class AndroidLogPacket_LogEvent_ArgDefaultTypeInternal;
extern AndroidLogPacket_LogEvent_ArgDefaultTypeInternal _AndroidLogPacket_LogEvent_Arg_default_instance_;
class AndroidLogPacket_Stats;
class AndroidLogPacket_StatsDefaultTypeInternal;
extern AndroidLogPacket_StatsDefaultTypeInternal _AndroidLogPacket_Stats_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::AndroidLogPacket* Arena::CreateMaybeMessage<::perfetto::protos::AndroidLogPacket>(Arena*);
template<> ::perfetto::protos::AndroidLogPacket_LogEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidLogPacket_LogEvent>(Arena*);
template<> ::perfetto::protos::AndroidLogPacket_LogEvent_Arg* Arena::CreateMaybeMessage<::perfetto::protos::AndroidLogPacket_LogEvent_Arg>(Arena*);
template<> ::perfetto::protos::AndroidLogPacket_Stats* Arena::CreateMaybeMessage<::perfetto::protos::AndroidLogPacket_Stats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class AndroidLogPacket_LogEvent_Arg :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidLogPacket.LogEvent.Arg) */ {
 public:
  AndroidLogPacket_LogEvent_Arg();
  virtual ~AndroidLogPacket_LogEvent_Arg();

  AndroidLogPacket_LogEvent_Arg(const AndroidLogPacket_LogEvent_Arg& from);
  AndroidLogPacket_LogEvent_Arg(AndroidLogPacket_LogEvent_Arg&& from) noexcept
    : AndroidLogPacket_LogEvent_Arg() {
    *this = ::std::move(from);
  }

  inline AndroidLogPacket_LogEvent_Arg& operator=(const AndroidLogPacket_LogEvent_Arg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidLogPacket_LogEvent_Arg& operator=(AndroidLogPacket_LogEvent_Arg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidLogPacket_LogEvent_Arg& default_instance();

  enum ValueCase {
    kIntValue = 2,
    kFloatValue = 3,
    kStringValue = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidLogPacket_LogEvent_Arg* internal_default_instance() {
    return reinterpret_cast<const AndroidLogPacket_LogEvent_Arg*>(
               &_AndroidLogPacket_LogEvent_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AndroidLogPacket_LogEvent_Arg& a, AndroidLogPacket_LogEvent_Arg& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidLogPacket_LogEvent_Arg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidLogPacket_LogEvent_Arg* New() const final {
    return CreateMaybeMessage<AndroidLogPacket_LogEvent_Arg>(nullptr);
  }

  AndroidLogPacket_LogEvent_Arg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidLogPacket_LogEvent_Arg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidLogPacket_LogEvent_Arg& from);
  void MergeFrom(const AndroidLogPacket_LogEvent_Arg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidLogPacket_LogEvent_Arg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidLogPacket.LogEvent.Arg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 int_value = 2;
  bool has_int_value() const;
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float float_value = 3;
  bool has_float_value() const;
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);

  // optional string string_value = 4;
  bool has_string_value() const;
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidLogPacket.LogEvent.Arg)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_float_value();
  void set_has_string_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto;
};
// -------------------------------------------------------------------

class AndroidLogPacket_LogEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidLogPacket.LogEvent) */ {
 public:
  AndroidLogPacket_LogEvent();
  virtual ~AndroidLogPacket_LogEvent();

  AndroidLogPacket_LogEvent(const AndroidLogPacket_LogEvent& from);
  AndroidLogPacket_LogEvent(AndroidLogPacket_LogEvent&& from) noexcept
    : AndroidLogPacket_LogEvent() {
    *this = ::std::move(from);
  }

  inline AndroidLogPacket_LogEvent& operator=(const AndroidLogPacket_LogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidLogPacket_LogEvent& operator=(AndroidLogPacket_LogEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidLogPacket_LogEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidLogPacket_LogEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidLogPacket_LogEvent*>(
               &_AndroidLogPacket_LogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidLogPacket_LogEvent& a, AndroidLogPacket_LogEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidLogPacket_LogEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidLogPacket_LogEvent* New() const final {
    return CreateMaybeMessage<AndroidLogPacket_LogEvent>(nullptr);
  }

  AndroidLogPacket_LogEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidLogPacket_LogEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidLogPacket_LogEvent& from);
  void MergeFrom(const AndroidLogPacket_LogEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidLogPacket_LogEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidLogPacket.LogEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AndroidLogPacket_LogEvent_Arg Arg;

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 9,
    kTagFieldNumber = 6,
    kMessageFieldNumber = 8,
    kLogIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kUidFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kPrioFieldNumber = 7,
  };
  // repeated .perfetto.protos.AndroidLogPacket.LogEvent.Arg args = 9;
  int args_size() const;
  void clear_args();
  ::perfetto::protos::AndroidLogPacket_LogEvent_Arg* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent_Arg >*
      mutable_args();
  const ::perfetto::protos::AndroidLogPacket_LogEvent_Arg& args(int index) const;
  ::perfetto::protos::AndroidLogPacket_LogEvent_Arg* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent_Arg >&
      args() const;

  // optional string tag = 6;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string message = 8;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional .perfetto.protos.AndroidLogId log_id = 1;
  bool has_log_id() const;
  void clear_log_id();
  ::perfetto::protos::AndroidLogId log_id() const;
  void set_log_id(::perfetto::protos::AndroidLogId value);

  // optional int32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tid = 3;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.AndroidLogPriority prio = 7;
  bool has_prio() const;
  void clear_prio();
  ::perfetto::protos::AndroidLogPriority prio() const;
  void set_prio(::perfetto::protos::AndroidLogPriority value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidLogPacket.LogEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent_Arg > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int log_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int prio_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto;
};
// -------------------------------------------------------------------

class AndroidLogPacket_Stats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidLogPacket.Stats) */ {
 public:
  AndroidLogPacket_Stats();
  virtual ~AndroidLogPacket_Stats();

  AndroidLogPacket_Stats(const AndroidLogPacket_Stats& from);
  AndroidLogPacket_Stats(AndroidLogPacket_Stats&& from) noexcept
    : AndroidLogPacket_Stats() {
    *this = ::std::move(from);
  }

  inline AndroidLogPacket_Stats& operator=(const AndroidLogPacket_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidLogPacket_Stats& operator=(AndroidLogPacket_Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidLogPacket_Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidLogPacket_Stats* internal_default_instance() {
    return reinterpret_cast<const AndroidLogPacket_Stats*>(
               &_AndroidLogPacket_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AndroidLogPacket_Stats& a, AndroidLogPacket_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidLogPacket_Stats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidLogPacket_Stats* New() const final {
    return CreateMaybeMessage<AndroidLogPacket_Stats>(nullptr);
  }

  AndroidLogPacket_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidLogPacket_Stats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidLogPacket_Stats& from);
  void MergeFrom(const AndroidLogPacket_Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidLogPacket_Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidLogPacket.Stats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumTotalFieldNumber = 1,
    kNumFailedFieldNumber = 2,
    kNumSkippedFieldNumber = 3,
  };
  // optional uint64 num_total = 1;
  bool has_num_total() const;
  void clear_num_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_total() const;
  void set_num_total(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 num_failed = 2;
  bool has_num_failed() const;
  void clear_num_failed();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_failed() const;
  void set_num_failed(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 num_skipped = 3;
  bool has_num_skipped() const;
  void clear_num_skipped();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_skipped() const;
  void set_num_skipped(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidLogPacket.Stats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_failed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_skipped_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto;
};
// -------------------------------------------------------------------

class AndroidLogPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidLogPacket) */ {
 public:
  AndroidLogPacket();
  virtual ~AndroidLogPacket();

  AndroidLogPacket(const AndroidLogPacket& from);
  AndroidLogPacket(AndroidLogPacket&& from) noexcept
    : AndroidLogPacket() {
    *this = ::std::move(from);
  }

  inline AndroidLogPacket& operator=(const AndroidLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidLogPacket& operator=(AndroidLogPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AndroidLogPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidLogPacket* internal_default_instance() {
    return reinterpret_cast<const AndroidLogPacket*>(
               &_AndroidLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AndroidLogPacket& a, AndroidLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidLogPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidLogPacket* New() const final {
    return CreateMaybeMessage<AndroidLogPacket>(nullptr);
  }

  AndroidLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidLogPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidLogPacket& from);
  void MergeFrom(const AndroidLogPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidLogPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidLogPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AndroidLogPacket_LogEvent LogEvent;
  typedef AndroidLogPacket_Stats Stats;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // repeated .perfetto.protos.AndroidLogPacket.LogEvent events = 1;
  int events_size() const;
  void clear_events();
  ::perfetto::protos::AndroidLogPacket_LogEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent >*
      mutable_events();
  const ::perfetto::protos::AndroidLogPacket_LogEvent& events(int index) const;
  ::perfetto::protos::AndroidLogPacket_LogEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent >&
      events() const;

  // optional .perfetto.protos.AndroidLogPacket.Stats stats = 2;
  bool has_stats() const;
  void clear_stats();
  const ::perfetto::protos::AndroidLogPacket_Stats& stats() const;
  ::perfetto::protos::AndroidLogPacket_Stats* release_stats();
  ::perfetto::protos::AndroidLogPacket_Stats* mutable_stats();
  void set_allocated_stats(::perfetto::protos::AndroidLogPacket_Stats* stats);

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidLogPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent > events_;
  ::perfetto::protos::AndroidLogPacket_Stats* stats_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AndroidLogPacket_LogEvent_Arg

// optional string name = 1;
inline bool AndroidLogPacket_LogEvent_Arg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidLogPacket_LogEvent_Arg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidLogPacket_LogEvent_Arg::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
  return name_.GetNoArena();
}
inline void AndroidLogPacket_LogEvent_Arg::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
}
inline void AndroidLogPacket_LogEvent_Arg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
}
inline void AndroidLogPacket_LogEvent_Arg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
}
inline void AndroidLogPacket_LogEvent_Arg::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
}
inline std::string* AndroidLogPacket_LogEvent_Arg::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidLogPacket_LogEvent_Arg::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidLogPacket_LogEvent_Arg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidLogPacket.LogEvent.Arg.name)
}

// optional int64 int_value = 2;
inline bool AndroidLogPacket_LogEvent_Arg::has_int_value() const {
  return value_case() == kIntValue;
}
inline void AndroidLogPacket_LogEvent_Arg::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void AndroidLogPacket_LogEvent_Arg::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidLogPacket_LogEvent_Arg::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.Arg.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AndroidLogPacket_LogEvent_Arg::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.Arg.int_value)
}

// optional float float_value = 3;
inline bool AndroidLogPacket_LogEvent_Arg::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void AndroidLogPacket_LogEvent_Arg::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void AndroidLogPacket_LogEvent_Arg::clear_float_value() {
  if (has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float AndroidLogPacket_LogEvent_Arg::float_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.Arg.float_value)
  if (has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void AndroidLogPacket_LogEvent_Arg::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.Arg.float_value)
}

// optional string string_value = 4;
inline bool AndroidLogPacket_LogEvent_Arg::has_string_value() const {
  return value_case() == kStringValue;
}
inline void AndroidLogPacket_LogEvent_Arg::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void AndroidLogPacket_LogEvent_Arg::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& AndroidLogPacket_LogEvent_Arg::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AndroidLogPacket_LogEvent_Arg::set_string_value(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
}
inline void AndroidLogPacket_LogEvent_Arg::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
}
inline void AndroidLogPacket_LogEvent_Arg::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
}
inline void AndroidLogPacket_LogEvent_Arg::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
}
inline std::string* AndroidLogPacket_LogEvent_Arg::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
  return value_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidLogPacket_LogEvent_Arg::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AndroidLogPacket_LogEvent_Arg::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidLogPacket.LogEvent.Arg.string_value)
}

inline bool AndroidLogPacket_LogEvent_Arg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AndroidLogPacket_LogEvent_Arg::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline AndroidLogPacket_LogEvent_Arg::ValueCase AndroidLogPacket_LogEvent_Arg::value_case() const {
  return AndroidLogPacket_LogEvent_Arg::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AndroidLogPacket_LogEvent

// optional .perfetto.protos.AndroidLogId log_id = 1;
inline bool AndroidLogPacket_LogEvent::has_log_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_log_id() {
  log_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::AndroidLogId AndroidLogPacket_LogEvent::log_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.log_id)
  return static_cast< ::perfetto::protos::AndroidLogId >(log_id_);
}
inline void AndroidLogPacket_LogEvent::set_log_id(::perfetto::protos::AndroidLogId value) {
  assert(::perfetto::protos::AndroidLogId_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  log_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.log_id)
}

// optional int32 pid = 2;
inline bool AndroidLogPacket_LogEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidLogPacket_LogEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.pid)
  return pid_;
}
inline void AndroidLogPacket_LogEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.pid)
}

// optional int32 tid = 3;
inline bool AndroidLogPacket_LogEvent::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidLogPacket_LogEvent::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.tid)
  return tid_;
}
inline void AndroidLogPacket_LogEvent::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.tid)
}

// optional int32 uid = 4;
inline bool AndroidLogPacket_LogEvent::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidLogPacket_LogEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.uid)
  return uid_;
}
inline void AndroidLogPacket_LogEvent::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.uid)
}

// optional uint64 timestamp = 5;
inline bool AndroidLogPacket_LogEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidLogPacket_LogEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.timestamp)
  return timestamp_;
}
inline void AndroidLogPacket_LogEvent::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.timestamp)
}

// optional string tag = 6;
inline bool AndroidLogPacket_LogEvent::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidLogPacket_LogEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.tag)
  return tag_.GetNoArena();
}
inline void AndroidLogPacket_LogEvent::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.tag)
}
inline void AndroidLogPacket_LogEvent::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.AndroidLogPacket.LogEvent.tag)
}
inline void AndroidLogPacket_LogEvent::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidLogPacket.LogEvent.tag)
}
inline void AndroidLogPacket_LogEvent::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidLogPacket.LogEvent.tag)
}
inline std::string* AndroidLogPacket_LogEvent::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.LogEvent.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidLogPacket_LogEvent::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidLogPacket.LogEvent.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidLogPacket_LogEvent::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidLogPacket.LogEvent.tag)
}

// optional .perfetto.protos.AndroidLogPriority prio = 7;
inline bool AndroidLogPacket_LogEvent::has_prio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_prio() {
  prio_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::perfetto::protos::AndroidLogPriority AndroidLogPacket_LogEvent::prio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.prio)
  return static_cast< ::perfetto::protos::AndroidLogPriority >(prio_);
}
inline void AndroidLogPacket_LogEvent::set_prio(::perfetto::protos::AndroidLogPriority value) {
  assert(::perfetto::protos::AndroidLogPriority_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  prio_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.prio)
}

// optional string message = 8;
inline bool AndroidLogPacket_LogEvent::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidLogPacket_LogEvent::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidLogPacket_LogEvent::message() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.message)
  return message_.GetNoArena();
}
inline void AndroidLogPacket_LogEvent::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.LogEvent.message)
}
inline void AndroidLogPacket_LogEvent::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.AndroidLogPacket.LogEvent.message)
}
inline void AndroidLogPacket_LogEvent::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidLogPacket.LogEvent.message)
}
inline void AndroidLogPacket_LogEvent::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidLogPacket.LogEvent.message)
}
inline std::string* AndroidLogPacket_LogEvent::mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.LogEvent.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidLogPacket_LogEvent::release_message() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidLogPacket.LogEvent.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidLogPacket_LogEvent::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidLogPacket.LogEvent.message)
}

// repeated .perfetto.protos.AndroidLogPacket.LogEvent.Arg args = 9;
inline int AndroidLogPacket_LogEvent::args_size() const {
  return args_.size();
}
inline void AndroidLogPacket_LogEvent::clear_args() {
  args_.Clear();
}
inline ::perfetto::protos::AndroidLogPacket_LogEvent_Arg* AndroidLogPacket_LogEvent::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.LogEvent.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent_Arg >*
AndroidLogPacket_LogEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidLogPacket.LogEvent.args)
  return &args_;
}
inline const ::perfetto::protos::AndroidLogPacket_LogEvent_Arg& AndroidLogPacket_LogEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.LogEvent.args)
  return args_.Get(index);
}
inline ::perfetto::protos::AndroidLogPacket_LogEvent_Arg* AndroidLogPacket_LogEvent::add_args() {
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidLogPacket.LogEvent.args)
  return args_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent_Arg >&
AndroidLogPacket_LogEvent::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidLogPacket.LogEvent.args)
  return args_;
}

// -------------------------------------------------------------------

// AndroidLogPacket_Stats

// optional uint64 num_total = 1;
inline bool AndroidLogPacket_Stats::has_num_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidLogPacket_Stats::clear_num_total() {
  num_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidLogPacket_Stats::num_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.Stats.num_total)
  return num_total_;
}
inline void AndroidLogPacket_Stats::set_num_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  num_total_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.Stats.num_total)
}

// optional uint64 num_failed = 2;
inline bool AndroidLogPacket_Stats::has_num_failed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidLogPacket_Stats::clear_num_failed() {
  num_failed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidLogPacket_Stats::num_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.Stats.num_failed)
  return num_failed_;
}
inline void AndroidLogPacket_Stats::set_num_failed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  num_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.Stats.num_failed)
}

// optional uint64 num_skipped = 3;
inline bool AndroidLogPacket_Stats::has_num_skipped() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AndroidLogPacket_Stats::clear_num_skipped() {
  num_skipped_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AndroidLogPacket_Stats::num_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.Stats.num_skipped)
  return num_skipped_;
}
inline void AndroidLogPacket_Stats::set_num_skipped(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  num_skipped_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidLogPacket.Stats.num_skipped)
}

// -------------------------------------------------------------------

// AndroidLogPacket

// repeated .perfetto.protos.AndroidLogPacket.LogEvent events = 1;
inline int AndroidLogPacket::events_size() const {
  return events_.size();
}
inline void AndroidLogPacket::clear_events() {
  events_.Clear();
}
inline ::perfetto::protos::AndroidLogPacket_LogEvent* AndroidLogPacket::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent >*
AndroidLogPacket::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidLogPacket.events)
  return &events_;
}
inline const ::perfetto::protos::AndroidLogPacket_LogEvent& AndroidLogPacket::events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.events)
  return events_.Get(index);
}
inline ::perfetto::protos::AndroidLogPacket_LogEvent* AndroidLogPacket::add_events() {
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidLogPacket.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidLogPacket_LogEvent >&
AndroidLogPacket::events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidLogPacket.events)
  return events_;
}

// optional .perfetto.protos.AndroidLogPacket.Stats stats = 2;
inline bool AndroidLogPacket::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidLogPacket::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::AndroidLogPacket_Stats& AndroidLogPacket::stats() const {
  const ::perfetto::protos::AndroidLogPacket_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidLogPacket.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::AndroidLogPacket_Stats*>(
      &::perfetto::protos::_AndroidLogPacket_Stats_default_instance_);
}
inline ::perfetto::protos::AndroidLogPacket_Stats* AndroidLogPacket::release_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidLogPacket.stats)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::AndroidLogPacket_Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidLogPacket_Stats* AndroidLogPacket::mutable_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidLogPacket_Stats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidLogPacket.stats)
  return stats_;
}
inline void AndroidLogPacket::set_allocated_stats(::perfetto::protos::AndroidLogPacket_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidLogPacket.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto
