// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GRAPHICS_FRAME_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GRAPHICS_FRAME_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class GraphicsFrameEvent;
class GraphicsFrameEvent_BufferEvent;
enum GraphicsFrameEvent_BufferEventType : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {
enum GraphicsFrameEvent_BufferEventType : int {
  GraphicsFrameEvent_BufferEventType_UNSPECIFIED = 0,
  GraphicsFrameEvent_BufferEventType_DEQUEUE = 1,
  GraphicsFrameEvent_BufferEventType_QUEUE = 2,
  GraphicsFrameEvent_BufferEventType_POST = 3,
  GraphicsFrameEvent_BufferEventType_ACQUIRE_FENCE = 4,
  GraphicsFrameEvent_BufferEventType_LATCH = 5,
  GraphicsFrameEvent_BufferEventType_HWC_COMPOSITION_QUEUED = 6,
  GraphicsFrameEvent_BufferEventType_FALLBACK_COMPOSITION = 7,
  GraphicsFrameEvent_BufferEventType_PRESENT_FENCE = 8,
  GraphicsFrameEvent_BufferEventType_RELEASE_FENCE = 9,
  GraphicsFrameEvent_BufferEventType_MODIFY = 10,
  GraphicsFrameEvent_BufferEventType_DETACH = 11,
  GraphicsFrameEvent_BufferEventType_ATTACH = 12,
  GraphicsFrameEvent_BufferEventType_CANCEL = 13,
};

class PERFETTO_EXPORT GraphicsFrameEvent : public ::protozero::CppMessageObj {
 public:
  using BufferEvent = GraphicsFrameEvent_BufferEvent;
  using BufferEventType = GraphicsFrameEvent_BufferEventType;
  static constexpr auto UNSPECIFIED = GraphicsFrameEvent_BufferEventType_UNSPECIFIED;
  static constexpr auto DEQUEUE = GraphicsFrameEvent_BufferEventType_DEQUEUE;
  static constexpr auto QUEUE = GraphicsFrameEvent_BufferEventType_QUEUE;
  static constexpr auto POST = GraphicsFrameEvent_BufferEventType_POST;
  static constexpr auto ACQUIRE_FENCE = GraphicsFrameEvent_BufferEventType_ACQUIRE_FENCE;
  static constexpr auto LATCH = GraphicsFrameEvent_BufferEventType_LATCH;
  static constexpr auto HWC_COMPOSITION_QUEUED = GraphicsFrameEvent_BufferEventType_HWC_COMPOSITION_QUEUED;
  static constexpr auto FALLBACK_COMPOSITION = GraphicsFrameEvent_BufferEventType_FALLBACK_COMPOSITION;
  static constexpr auto PRESENT_FENCE = GraphicsFrameEvent_BufferEventType_PRESENT_FENCE;
  static constexpr auto RELEASE_FENCE = GraphicsFrameEvent_BufferEventType_RELEASE_FENCE;
  static constexpr auto MODIFY = GraphicsFrameEvent_BufferEventType_MODIFY;
  static constexpr auto DETACH = GraphicsFrameEvent_BufferEventType_DETACH;
  static constexpr auto ATTACH = GraphicsFrameEvent_BufferEventType_ATTACH;
  static constexpr auto CANCEL = GraphicsFrameEvent_BufferEventType_CANCEL;
  static constexpr auto BufferEventType_MIN = GraphicsFrameEvent_BufferEventType_UNSPECIFIED;
  static constexpr auto BufferEventType_MAX = GraphicsFrameEvent_BufferEventType_CANCEL;
  enum FieldNumbers {
    kBufferEventFieldNumber = 1,
  };

  GraphicsFrameEvent();
  ~GraphicsFrameEvent() override;
  GraphicsFrameEvent(GraphicsFrameEvent&&) noexcept;
  GraphicsFrameEvent& operator=(GraphicsFrameEvent&&);
  GraphicsFrameEvent(const GraphicsFrameEvent&);
  GraphicsFrameEvent& operator=(const GraphicsFrameEvent&);
  bool operator==(const GraphicsFrameEvent&) const;
  bool operator!=(const GraphicsFrameEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_buffer_event() const { return _has_field_[1]; }
  const GraphicsFrameEvent_BufferEvent& buffer_event() const { return *buffer_event_; }
  GraphicsFrameEvent_BufferEvent* mutable_buffer_event() { _has_field_.set(1); return buffer_event_.get(); }

 private:
  ::protozero::CopyablePtr<GraphicsFrameEvent_BufferEvent> buffer_event_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT GraphicsFrameEvent_BufferEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kFrameNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLayerNameFieldNumber = 3,
    kDurationNsFieldNumber = 4,
    kBufferIdFieldNumber = 5,
  };

  GraphicsFrameEvent_BufferEvent();
  ~GraphicsFrameEvent_BufferEvent() override;
  GraphicsFrameEvent_BufferEvent(GraphicsFrameEvent_BufferEvent&&) noexcept;
  GraphicsFrameEvent_BufferEvent& operator=(GraphicsFrameEvent_BufferEvent&&);
  GraphicsFrameEvent_BufferEvent(const GraphicsFrameEvent_BufferEvent&);
  GraphicsFrameEvent_BufferEvent& operator=(const GraphicsFrameEvent_BufferEvent&);
  bool operator==(const GraphicsFrameEvent_BufferEvent&) const;
  bool operator!=(const GraphicsFrameEvent_BufferEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_frame_number() const { return _has_field_[1]; }
  uint32_t frame_number() const { return frame_number_; }
  void set_frame_number(uint32_t value) { frame_number_ = value; _has_field_.set(1); }

  bool has_type() const { return _has_field_[2]; }
  GraphicsFrameEvent_BufferEventType type() const { return type_; }
  void set_type(GraphicsFrameEvent_BufferEventType value) { type_ = value; _has_field_.set(2); }

  bool has_layer_name() const { return _has_field_[3]; }
  const std::string& layer_name() const { return layer_name_; }
  void set_layer_name(const std::string& value) { layer_name_ = value; _has_field_.set(3); }

  bool has_duration_ns() const { return _has_field_[4]; }
  uint64_t duration_ns() const { return duration_ns_; }
  void set_duration_ns(uint64_t value) { duration_ns_ = value; _has_field_.set(4); }

  bool has_buffer_id() const { return _has_field_[5]; }
  uint32_t buffer_id() const { return buffer_id_; }
  void set_buffer_id(uint32_t value) { buffer_id_ = value; _has_field_.set(5); }

 private:
  uint32_t frame_number_{};
  GraphicsFrameEvent_BufferEventType type_{};
  std::string layer_name_{};
  uint64_t duration_ns_{};
  uint32_t buffer_id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GRAPHICS_FRAME_EVENT_PROTO_CPP_H_
