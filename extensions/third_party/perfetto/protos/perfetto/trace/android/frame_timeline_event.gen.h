// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_FRAME_TIMELINE_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_FRAME_TIMELINE_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class FrameTimelineEvent;
class FrameTimelineEvent_FrameEnd;
class FrameTimelineEvent_ActualSurfaceFrameStart;
class FrameTimelineEvent_ExpectedSurfaceFrameStart;
class FrameTimelineEvent_ActualDisplayFrameStart;
class FrameTimelineEvent_ExpectedDisplayFrameStart;
enum FrameTimelineEvent_JankType : int;
enum FrameTimelineEvent_PresentType : int;
enum FrameTimelineEvent_PredictionType : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {
enum FrameTimelineEvent_JankType : int {
  FrameTimelineEvent_JankType_JANK_UNSPECIFIED = 0,
  FrameTimelineEvent_JankType_JANK_NONE = 1,
  FrameTimelineEvent_JankType_JANK_SF_SCHEDULING = 2,
  FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR = 4,
  FrameTimelineEvent_JankType_JANK_DISPLAY_HAL = 8,
  FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED = 16,
  FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED = 32,
  FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED = 64,
  FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING = 128,
  FrameTimelineEvent_JankType_JANK_UNKNOWN = 256,
};
enum FrameTimelineEvent_PresentType : int {
  FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED = 0,
  FrameTimelineEvent_PresentType_PRESENT_ON_TIME = 1,
  FrameTimelineEvent_PresentType_PRESENT_LATE = 2,
  FrameTimelineEvent_PresentType_PRESENT_EARLY = 3,
  FrameTimelineEvent_PresentType_PRESENT_DROPPED = 4,
  FrameTimelineEvent_PresentType_PRESENT_UNKNOWN = 5,
};
enum FrameTimelineEvent_PredictionType : int {
  FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED = 0,
  FrameTimelineEvent_PredictionType_PREDICTION_VALID = 1,
  FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED = 2,
  FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN = 3,
};

class PERFETTO_EXPORT FrameTimelineEvent : public ::protozero::CppMessageObj {
 public:
  using ExpectedSurfaceFrameStart = FrameTimelineEvent_ExpectedSurfaceFrameStart;
  using ActualSurfaceFrameStart = FrameTimelineEvent_ActualSurfaceFrameStart;
  using ExpectedDisplayFrameStart = FrameTimelineEvent_ExpectedDisplayFrameStart;
  using ActualDisplayFrameStart = FrameTimelineEvent_ActualDisplayFrameStart;
  using FrameEnd = FrameTimelineEvent_FrameEnd;
  using JankType = FrameTimelineEvent_JankType;
  static constexpr auto JANK_UNSPECIFIED = FrameTimelineEvent_JankType_JANK_UNSPECIFIED;
  static constexpr auto JANK_NONE = FrameTimelineEvent_JankType_JANK_NONE;
  static constexpr auto JANK_SF_SCHEDULING = FrameTimelineEvent_JankType_JANK_SF_SCHEDULING;
  static constexpr auto JANK_PREDICTION_ERROR = FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR;
  static constexpr auto JANK_DISPLAY_HAL = FrameTimelineEvent_JankType_JANK_DISPLAY_HAL;
  static constexpr auto JANK_SF_CPU_DEADLINE_MISSED = FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED;
  static constexpr auto JANK_SF_GPU_DEADLINE_MISSED = FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED;
  static constexpr auto JANK_APP_DEADLINE_MISSED = FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED;
  static constexpr auto JANK_BUFFER_STUFFING = FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING;
  static constexpr auto JANK_UNKNOWN = FrameTimelineEvent_JankType_JANK_UNKNOWN;
  static constexpr auto JankType_MIN = FrameTimelineEvent_JankType_JANK_UNSPECIFIED;
  static constexpr auto JankType_MAX = FrameTimelineEvent_JankType_JANK_UNKNOWN;
  using PresentType = FrameTimelineEvent_PresentType;
  static constexpr auto PRESENT_UNSPECIFIED = FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED;
  static constexpr auto PRESENT_ON_TIME = FrameTimelineEvent_PresentType_PRESENT_ON_TIME;
  static constexpr auto PRESENT_LATE = FrameTimelineEvent_PresentType_PRESENT_LATE;
  static constexpr auto PRESENT_EARLY = FrameTimelineEvent_PresentType_PRESENT_EARLY;
  static constexpr auto PRESENT_DROPPED = FrameTimelineEvent_PresentType_PRESENT_DROPPED;
  static constexpr auto PRESENT_UNKNOWN = FrameTimelineEvent_PresentType_PRESENT_UNKNOWN;
  static constexpr auto PresentType_MIN = FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED;
  static constexpr auto PresentType_MAX = FrameTimelineEvent_PresentType_PRESENT_UNKNOWN;
  using PredictionType = FrameTimelineEvent_PredictionType;
  static constexpr auto PREDICTION_UNSPECIFIED = FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED;
  static constexpr auto PREDICTION_VALID = FrameTimelineEvent_PredictionType_PREDICTION_VALID;
  static constexpr auto PREDICTION_EXPIRED = FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED;
  static constexpr auto PREDICTION_UNKNOWN = FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN;
  static constexpr auto PredictionType_MIN = FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED;
  static constexpr auto PredictionType_MAX = FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN;
  enum FieldNumbers {
    kExpectedDisplayFrameStartFieldNumber = 1,
    kActualDisplayFrameStartFieldNumber = 2,
    kExpectedSurfaceFrameStartFieldNumber = 3,
    kActualSurfaceFrameStartFieldNumber = 4,
    kFrameEndFieldNumber = 5,
  };

  FrameTimelineEvent();
  ~FrameTimelineEvent() override;
  FrameTimelineEvent(FrameTimelineEvent&&) noexcept;
  FrameTimelineEvent& operator=(FrameTimelineEvent&&);
  FrameTimelineEvent(const FrameTimelineEvent&);
  FrameTimelineEvent& operator=(const FrameTimelineEvent&);
  bool operator==(const FrameTimelineEvent&) const;
  bool operator!=(const FrameTimelineEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_expected_display_frame_start() const { return _has_field_[1]; }
  const FrameTimelineEvent_ExpectedDisplayFrameStart& expected_display_frame_start() const { return *expected_display_frame_start_; }
  FrameTimelineEvent_ExpectedDisplayFrameStart* mutable_expected_display_frame_start() { _has_field_.set(1); return expected_display_frame_start_.get(); }

  bool has_actual_display_frame_start() const { return _has_field_[2]; }
  const FrameTimelineEvent_ActualDisplayFrameStart& actual_display_frame_start() const { return *actual_display_frame_start_; }
  FrameTimelineEvent_ActualDisplayFrameStart* mutable_actual_display_frame_start() { _has_field_.set(2); return actual_display_frame_start_.get(); }

  bool has_expected_surface_frame_start() const { return _has_field_[3]; }
  const FrameTimelineEvent_ExpectedSurfaceFrameStart& expected_surface_frame_start() const { return *expected_surface_frame_start_; }
  FrameTimelineEvent_ExpectedSurfaceFrameStart* mutable_expected_surface_frame_start() { _has_field_.set(3); return expected_surface_frame_start_.get(); }

  bool has_actual_surface_frame_start() const { return _has_field_[4]; }
  const FrameTimelineEvent_ActualSurfaceFrameStart& actual_surface_frame_start() const { return *actual_surface_frame_start_; }
  FrameTimelineEvent_ActualSurfaceFrameStart* mutable_actual_surface_frame_start() { _has_field_.set(4); return actual_surface_frame_start_.get(); }

  bool has_frame_end() const { return _has_field_[5]; }
  const FrameTimelineEvent_FrameEnd& frame_end() const { return *frame_end_; }
  FrameTimelineEvent_FrameEnd* mutable_frame_end() { _has_field_.set(5); return frame_end_.get(); }

 private:
  ::protozero::CopyablePtr<FrameTimelineEvent_ExpectedDisplayFrameStart> expected_display_frame_start_;
  ::protozero::CopyablePtr<FrameTimelineEvent_ActualDisplayFrameStart> actual_display_frame_start_;
  ::protozero::CopyablePtr<FrameTimelineEvent_ExpectedSurfaceFrameStart> expected_surface_frame_start_;
  ::protozero::CopyablePtr<FrameTimelineEvent_ActualSurfaceFrameStart> actual_surface_frame_start_;
  ::protozero::CopyablePtr<FrameTimelineEvent_FrameEnd> frame_end_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT FrameTimelineEvent_FrameEnd : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCookieFieldNumber = 1,
  };

  FrameTimelineEvent_FrameEnd();
  ~FrameTimelineEvent_FrameEnd() override;
  FrameTimelineEvent_FrameEnd(FrameTimelineEvent_FrameEnd&&) noexcept;
  FrameTimelineEvent_FrameEnd& operator=(FrameTimelineEvent_FrameEnd&&);
  FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd&);
  FrameTimelineEvent_FrameEnd& operator=(const FrameTimelineEvent_FrameEnd&);
  bool operator==(const FrameTimelineEvent_FrameEnd&) const;
  bool operator!=(const FrameTimelineEvent_FrameEnd& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cookie() const { return _has_field_[1]; }
  int64_t cookie() const { return cookie_; }
  void set_cookie(int64_t value) { cookie_ = value; _has_field_.set(1); }

 private:
  int64_t cookie_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT FrameTimelineEvent_ActualSurfaceFrameStart : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDisplayFrameTokenFieldNumber = 3,
    kPidFieldNumber = 4,
    kLayerNameFieldNumber = 5,
    kPresentTypeFieldNumber = 6,
    kOnTimeFinishFieldNumber = 7,
    kGpuCompositionFieldNumber = 8,
    kJankTypeFieldNumber = 9,
    kPredictionTypeFieldNumber = 10,
  };

  FrameTimelineEvent_ActualSurfaceFrameStart();
  ~FrameTimelineEvent_ActualSurfaceFrameStart() override;
  FrameTimelineEvent_ActualSurfaceFrameStart(FrameTimelineEvent_ActualSurfaceFrameStart&&) noexcept;
  FrameTimelineEvent_ActualSurfaceFrameStart& operator=(FrameTimelineEvent_ActualSurfaceFrameStart&&);
  FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart&);
  FrameTimelineEvent_ActualSurfaceFrameStart& operator=(const FrameTimelineEvent_ActualSurfaceFrameStart&);
  bool operator==(const FrameTimelineEvent_ActualSurfaceFrameStart&) const;
  bool operator!=(const FrameTimelineEvent_ActualSurfaceFrameStart& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cookie() const { return _has_field_[1]; }
  int64_t cookie() const { return cookie_; }
  void set_cookie(int64_t value) { cookie_ = value; _has_field_.set(1); }

  bool has_token() const { return _has_field_[2]; }
  int64_t token() const { return token_; }
  void set_token(int64_t value) { token_ = value; _has_field_.set(2); }

  bool has_display_frame_token() const { return _has_field_[3]; }
  int64_t display_frame_token() const { return display_frame_token_; }
  void set_display_frame_token(int64_t value) { display_frame_token_ = value; _has_field_.set(3); }

  bool has_pid() const { return _has_field_[4]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(4); }

  bool has_layer_name() const { return _has_field_[5]; }
  const std::string& layer_name() const { return layer_name_; }
  void set_layer_name(const std::string& value) { layer_name_ = value; _has_field_.set(5); }

  bool has_present_type() const { return _has_field_[6]; }
  FrameTimelineEvent_PresentType present_type() const { return present_type_; }
  void set_present_type(FrameTimelineEvent_PresentType value) { present_type_ = value; _has_field_.set(6); }

  bool has_on_time_finish() const { return _has_field_[7]; }
  bool on_time_finish() const { return on_time_finish_; }
  void set_on_time_finish(bool value) { on_time_finish_ = value; _has_field_.set(7); }

  bool has_gpu_composition() const { return _has_field_[8]; }
  bool gpu_composition() const { return gpu_composition_; }
  void set_gpu_composition(bool value) { gpu_composition_ = value; _has_field_.set(8); }

  bool has_jank_type() const { return _has_field_[9]; }
  int32_t jank_type() const { return jank_type_; }
  void set_jank_type(int32_t value) { jank_type_ = value; _has_field_.set(9); }

  bool has_prediction_type() const { return _has_field_[10]; }
  FrameTimelineEvent_PredictionType prediction_type() const { return prediction_type_; }
  void set_prediction_type(FrameTimelineEvent_PredictionType value) { prediction_type_ = value; _has_field_.set(10); }

 private:
  int64_t cookie_{};
  int64_t token_{};
  int64_t display_frame_token_{};
  int32_t pid_{};
  std::string layer_name_{};
  FrameTimelineEvent_PresentType present_type_{};
  bool on_time_finish_{};
  bool gpu_composition_{};
  int32_t jank_type_{};
  FrameTimelineEvent_PredictionType prediction_type_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<11> _has_field_{};
};


class PERFETTO_EXPORT FrameTimelineEvent_ExpectedSurfaceFrameStart : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDisplayFrameTokenFieldNumber = 3,
    kPidFieldNumber = 4,
    kLayerNameFieldNumber = 5,
  };

  FrameTimelineEvent_ExpectedSurfaceFrameStart();
  ~FrameTimelineEvent_ExpectedSurfaceFrameStart() override;
  FrameTimelineEvent_ExpectedSurfaceFrameStart(FrameTimelineEvent_ExpectedSurfaceFrameStart&&) noexcept;
  FrameTimelineEvent_ExpectedSurfaceFrameStart& operator=(FrameTimelineEvent_ExpectedSurfaceFrameStart&&);
  FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart&);
  FrameTimelineEvent_ExpectedSurfaceFrameStart& operator=(const FrameTimelineEvent_ExpectedSurfaceFrameStart&);
  bool operator==(const FrameTimelineEvent_ExpectedSurfaceFrameStart&) const;
  bool operator!=(const FrameTimelineEvent_ExpectedSurfaceFrameStart& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cookie() const { return _has_field_[1]; }
  int64_t cookie() const { return cookie_; }
  void set_cookie(int64_t value) { cookie_ = value; _has_field_.set(1); }

  bool has_token() const { return _has_field_[2]; }
  int64_t token() const { return token_; }
  void set_token(int64_t value) { token_ = value; _has_field_.set(2); }

  bool has_display_frame_token() const { return _has_field_[3]; }
  int64_t display_frame_token() const { return display_frame_token_; }
  void set_display_frame_token(int64_t value) { display_frame_token_ = value; _has_field_.set(3); }

  bool has_pid() const { return _has_field_[4]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(4); }

  bool has_layer_name() const { return _has_field_[5]; }
  const std::string& layer_name() const { return layer_name_; }
  void set_layer_name(const std::string& value) { layer_name_ = value; _has_field_.set(5); }

 private:
  int64_t cookie_{};
  int64_t token_{};
  int64_t display_frame_token_{};
  int32_t pid_{};
  std::string layer_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT FrameTimelineEvent_ActualDisplayFrameStart : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kPidFieldNumber = 3,
    kPresentTypeFieldNumber = 4,
    kOnTimeFinishFieldNumber = 5,
    kGpuCompositionFieldNumber = 6,
    kJankTypeFieldNumber = 7,
    kPredictionTypeFieldNumber = 8,
  };

  FrameTimelineEvent_ActualDisplayFrameStart();
  ~FrameTimelineEvent_ActualDisplayFrameStart() override;
  FrameTimelineEvent_ActualDisplayFrameStart(FrameTimelineEvent_ActualDisplayFrameStart&&) noexcept;
  FrameTimelineEvent_ActualDisplayFrameStart& operator=(FrameTimelineEvent_ActualDisplayFrameStart&&);
  FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart&);
  FrameTimelineEvent_ActualDisplayFrameStart& operator=(const FrameTimelineEvent_ActualDisplayFrameStart&);
  bool operator==(const FrameTimelineEvent_ActualDisplayFrameStart&) const;
  bool operator!=(const FrameTimelineEvent_ActualDisplayFrameStart& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cookie() const { return _has_field_[1]; }
  int64_t cookie() const { return cookie_; }
  void set_cookie(int64_t value) { cookie_ = value; _has_field_.set(1); }

  bool has_token() const { return _has_field_[2]; }
  int64_t token() const { return token_; }
  void set_token(int64_t value) { token_ = value; _has_field_.set(2); }

  bool has_pid() const { return _has_field_[3]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(3); }

  bool has_present_type() const { return _has_field_[4]; }
  FrameTimelineEvent_PresentType present_type() const { return present_type_; }
  void set_present_type(FrameTimelineEvent_PresentType value) { present_type_ = value; _has_field_.set(4); }

  bool has_on_time_finish() const { return _has_field_[5]; }
  bool on_time_finish() const { return on_time_finish_; }
  void set_on_time_finish(bool value) { on_time_finish_ = value; _has_field_.set(5); }

  bool has_gpu_composition() const { return _has_field_[6]; }
  bool gpu_composition() const { return gpu_composition_; }
  void set_gpu_composition(bool value) { gpu_composition_ = value; _has_field_.set(6); }

  bool has_jank_type() const { return _has_field_[7]; }
  int32_t jank_type() const { return jank_type_; }
  void set_jank_type(int32_t value) { jank_type_ = value; _has_field_.set(7); }

  bool has_prediction_type() const { return _has_field_[8]; }
  FrameTimelineEvent_PredictionType prediction_type() const { return prediction_type_; }
  void set_prediction_type(FrameTimelineEvent_PredictionType value) { prediction_type_ = value; _has_field_.set(8); }

 private:
  int64_t cookie_{};
  int64_t token_{};
  int32_t pid_{};
  FrameTimelineEvent_PresentType present_type_{};
  bool on_time_finish_{};
  bool gpu_composition_{};
  int32_t jank_type_{};
  FrameTimelineEvent_PredictionType prediction_type_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<9> _has_field_{};
};


class PERFETTO_EXPORT FrameTimelineEvent_ExpectedDisplayFrameStart : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kPidFieldNumber = 3,
  };

  FrameTimelineEvent_ExpectedDisplayFrameStart();
  ~FrameTimelineEvent_ExpectedDisplayFrameStart() override;
  FrameTimelineEvent_ExpectedDisplayFrameStart(FrameTimelineEvent_ExpectedDisplayFrameStart&&) noexcept;
  FrameTimelineEvent_ExpectedDisplayFrameStart& operator=(FrameTimelineEvent_ExpectedDisplayFrameStart&&);
  FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart&);
  FrameTimelineEvent_ExpectedDisplayFrameStart& operator=(const FrameTimelineEvent_ExpectedDisplayFrameStart&);
  bool operator==(const FrameTimelineEvent_ExpectedDisplayFrameStart&) const;
  bool operator!=(const FrameTimelineEvent_ExpectedDisplayFrameStart& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cookie() const { return _has_field_[1]; }
  int64_t cookie() const { return cookie_; }
  void set_cookie(int64_t value) { cookie_ = value; _has_field_.set(1); }

  bool has_token() const { return _has_field_[2]; }
  int64_t token() const { return token_; }
  void set_token(int64_t value) { token_ = value; _has_field_.set(2); }

  bool has_pid() const { return _has_field_[3]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(3); }

 private:
  int64_t cookie_{};
  int64_t token_{};
  int32_t pid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_FRAME_TIMELINE_EVENT_PROTO_CPP_H_
