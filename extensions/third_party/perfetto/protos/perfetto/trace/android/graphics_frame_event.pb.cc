// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/graphics_frame_event.proto

#include "protos/perfetto/trace/android/graphics_frame_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto;
namespace perfetto {
namespace protos {
class GraphicsFrameEvent_BufferEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphicsFrameEvent_BufferEvent> _instance;
} _GraphicsFrameEvent_BufferEvent_default_instance_;
class GraphicsFrameEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphicsFrameEvent> _instance;
} _GraphicsFrameEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GraphicsFrameEvent_default_instance_;
    new (ptr) ::perfetto::protos::GraphicsFrameEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GraphicsFrameEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto}, {
      &scc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GraphicsFrameEvent_BufferEvent_default_instance_;
    new (ptr) ::perfetto::protos::GraphicsFrameEvent_BufferEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto}, {}};

namespace perfetto {
namespace protos {
bool GraphicsFrameEvent_BufferEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GraphicsFrameEvent_BufferEventType_strings[14] = {};

static const char GraphicsFrameEvent_BufferEventType_names[] =
  "ACQUIRE_FENCE"
  "ATTACH"
  "CANCEL"
  "DEQUEUE"
  "DETACH"
  "FALLBACK_COMPOSITION"
  "HWC_COMPOSITION_QUEUED"
  "LATCH"
  "MODIFY"
  "POST"
  "PRESENT_FENCE"
  "QUEUE"
  "RELEASE_FENCE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GraphicsFrameEvent_BufferEventType_entries[] = {
  { {GraphicsFrameEvent_BufferEventType_names + 0, 13}, 4 },
  { {GraphicsFrameEvent_BufferEventType_names + 13, 6}, 12 },
  { {GraphicsFrameEvent_BufferEventType_names + 19, 6}, 13 },
  { {GraphicsFrameEvent_BufferEventType_names + 25, 7}, 1 },
  { {GraphicsFrameEvent_BufferEventType_names + 32, 6}, 11 },
  { {GraphicsFrameEvent_BufferEventType_names + 38, 20}, 7 },
  { {GraphicsFrameEvent_BufferEventType_names + 58, 22}, 6 },
  { {GraphicsFrameEvent_BufferEventType_names + 80, 5}, 5 },
  { {GraphicsFrameEvent_BufferEventType_names + 85, 6}, 10 },
  { {GraphicsFrameEvent_BufferEventType_names + 91, 4}, 3 },
  { {GraphicsFrameEvent_BufferEventType_names + 95, 13}, 8 },
  { {GraphicsFrameEvent_BufferEventType_names + 108, 5}, 2 },
  { {GraphicsFrameEvent_BufferEventType_names + 113, 13}, 9 },
  { {GraphicsFrameEvent_BufferEventType_names + 126, 11}, 0 },
};

static const int GraphicsFrameEvent_BufferEventType_entries_by_number[] = {
  13, // 0 -> UNSPECIFIED
  3, // 1 -> DEQUEUE
  11, // 2 -> QUEUE
  9, // 3 -> POST
  0, // 4 -> ACQUIRE_FENCE
  7, // 5 -> LATCH
  6, // 6 -> HWC_COMPOSITION_QUEUED
  5, // 7 -> FALLBACK_COMPOSITION
  10, // 8 -> PRESENT_FENCE
  12, // 9 -> RELEASE_FENCE
  8, // 10 -> MODIFY
  4, // 11 -> DETACH
  1, // 12 -> ATTACH
  2, // 13 -> CANCEL
};

const std::string& GraphicsFrameEvent_BufferEventType_Name(
    GraphicsFrameEvent_BufferEventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GraphicsFrameEvent_BufferEventType_entries,
          GraphicsFrameEvent_BufferEventType_entries_by_number,
          14, GraphicsFrameEvent_BufferEventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GraphicsFrameEvent_BufferEventType_entries,
      GraphicsFrameEvent_BufferEventType_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GraphicsFrameEvent_BufferEventType_strings[idx].get();
}
bool GraphicsFrameEvent_BufferEventType_Parse(
    const std::string& name, GraphicsFrameEvent_BufferEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GraphicsFrameEvent_BufferEventType_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<GraphicsFrameEvent_BufferEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::UNSPECIFIED;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::DEQUEUE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::QUEUE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::POST;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::ACQUIRE_FENCE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::LATCH;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::HWC_COMPOSITION_QUEUED;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::FALLBACK_COMPOSITION;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::PRESENT_FENCE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::RELEASE_FENCE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::MODIFY;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::DETACH;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::ATTACH;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::CANCEL;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::BufferEventType_MIN;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::BufferEventType_MAX;
constexpr int GraphicsFrameEvent::BufferEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GraphicsFrameEvent_BufferEvent::InitAsDefaultInstance() {
}
class GraphicsFrameEvent_BufferEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphicsFrameEvent_BufferEvent>()._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GraphicsFrameEvent.BufferEvent)
}
GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent(const GraphicsFrameEvent_BufferEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  ::memcpy(&frame_number_, &from.frame_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_id_) -
    reinterpret_cast<char*>(&frame_number_)) + sizeof(buffer_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GraphicsFrameEvent.BufferEvent)
}

void GraphicsFrameEvent_BufferEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_id_) -
      reinterpret_cast<char*>(&frame_number_)) + sizeof(buffer_id_));
}

GraphicsFrameEvent_BufferEvent::~GraphicsFrameEvent_BufferEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  SharedDtor();
}

void GraphicsFrameEvent_BufferEvent::SharedDtor() {
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphicsFrameEvent_BufferEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphicsFrameEvent_BufferEvent& GraphicsFrameEvent_BufferEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphicsFrameEvent_BufferEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GraphicsFrameEvent_BufferEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    layer_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&frame_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buffer_id_) -
        reinterpret_cast<char*>(&frame_number_)) + sizeof(buffer_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphicsFrameEvent_BufferEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GraphicsFrameEvent_BufferEventType_IsValid(val))) {
            set_type(static_cast<::perfetto::protos::GraphicsFrameEvent_BufferEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string layer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_layer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 duration_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration_ns(&has_bits);
          duration_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 buffer_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_buffer_id(&has_bits);
          buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphicsFrameEvent_BufferEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frame_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_frame_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GraphicsFrameEvent_BufferEventType_IsValid(value)) {
            set_type(static_cast< ::perfetto::protos::GraphicsFrameEvent_BufferEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 duration_ns = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_duration_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buffer_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_buffer_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphicsFrameEvent_BufferEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->frame_number(), output);
  }

  // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string layer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->layer_name(), output);
  }

  // optional uint64 duration_ns = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->duration_ns(), output);
  }

  // optional uint32 buffer_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->buffer_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GraphicsFrameEvent.BufferEvent)
}

size_t GraphicsFrameEvent_BufferEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string layer_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->layer_name());
    }

    // optional uint32 frame_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->frame_number());
    }

    // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 duration_ns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->duration_ns());
    }

    // optional uint32 buffer_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->buffer_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphicsFrameEvent_BufferEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphicsFrameEvent_BufferEvent*>(
      &from));
}

void GraphicsFrameEvent_BufferEvent::MergeFrom(const GraphicsFrameEvent_BufferEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      frame_number_ = from.frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ns_ = from.duration_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      buffer_id_ = from.buffer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GraphicsFrameEvent_BufferEvent::CopyFrom(const GraphicsFrameEvent_BufferEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsFrameEvent_BufferEvent::IsInitialized() const {
  return true;
}

void GraphicsFrameEvent_BufferEvent::InternalSwap(GraphicsFrameEvent_BufferEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_number_, other->frame_number_);
  swap(type_, other->type_);
  swap(duration_ns_, other->duration_ns_);
  swap(buffer_id_, other->buffer_id_);
}

std::string GraphicsFrameEvent_BufferEvent::GetTypeName() const {
  return "perfetto.protos.GraphicsFrameEvent.BufferEvent";
}


// ===================================================================

void GraphicsFrameEvent::InitAsDefaultInstance() {
  ::perfetto::protos::_GraphicsFrameEvent_default_instance_._instance.get_mutable()->buffer_event_ = const_cast< ::perfetto::protos::GraphicsFrameEvent_BufferEvent*>(
      ::perfetto::protos::GraphicsFrameEvent_BufferEvent::internal_default_instance());
}
class GraphicsFrameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphicsFrameEvent>()._has_bits_);
  static const ::perfetto::protos::GraphicsFrameEvent_BufferEvent& buffer_event(const GraphicsFrameEvent* msg);
  static void set_has_buffer_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::GraphicsFrameEvent_BufferEvent&
GraphicsFrameEvent::_Internal::buffer_event(const GraphicsFrameEvent* msg) {
  return *msg->buffer_event_;
}
GraphicsFrameEvent::GraphicsFrameEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GraphicsFrameEvent)
}
GraphicsFrameEvent::GraphicsFrameEvent(const GraphicsFrameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buffer_event()) {
    buffer_event_ = new ::perfetto::protos::GraphicsFrameEvent_BufferEvent(*from.buffer_event_);
  } else {
    buffer_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GraphicsFrameEvent)
}

void GraphicsFrameEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto.base);
  buffer_event_ = nullptr;
}

GraphicsFrameEvent::~GraphicsFrameEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GraphicsFrameEvent)
  SharedDtor();
}

void GraphicsFrameEvent::SharedDtor() {
  if (this != internal_default_instance()) delete buffer_event_;
}

void GraphicsFrameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphicsFrameEvent& GraphicsFrameEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphicsFrameEvent_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GraphicsFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GraphicsFrameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(buffer_event_ != nullptr);
    buffer_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphicsFrameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_buffer_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphicsFrameEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GraphicsFrameEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buffer_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GraphicsFrameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GraphicsFrameEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphicsFrameEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GraphicsFrameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::buffer_event(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GraphicsFrameEvent)
}

size_t GraphicsFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GraphicsFrameEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buffer_event_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphicsFrameEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphicsFrameEvent*>(
      &from));
}

void GraphicsFrameEvent::MergeFrom(const GraphicsFrameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GraphicsFrameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_buffer_event()) {
    mutable_buffer_event()->::perfetto::protos::GraphicsFrameEvent_BufferEvent::MergeFrom(from.buffer_event());
  }
}

void GraphicsFrameEvent::CopyFrom(const GraphicsFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GraphicsFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsFrameEvent::IsInitialized() const {
  return true;
}

void GraphicsFrameEvent::InternalSwap(GraphicsFrameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buffer_event_, other->buffer_event_);
}

std::string GraphicsFrameEvent::GetTypeName() const {
  return "perfetto.protos.GraphicsFrameEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GraphicsFrameEvent_BufferEvent* Arena::CreateMaybeMessage< ::perfetto::protos::GraphicsFrameEvent_BufferEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GraphicsFrameEvent_BufferEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GraphicsFrameEvent* Arena::CreateMaybeMessage< ::perfetto::protos::GraphicsFrameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GraphicsFrameEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
