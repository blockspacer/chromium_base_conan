// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/frame_timeline_event.proto

#include "protos/perfetto/trace/android/frame_timeline_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ActualDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ExpectedDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_FrameEnd_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
namespace perfetto {
namespace protos {
class FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimelineEvent_ExpectedSurfaceFrameStart> _instance;
} _FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_;
class FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimelineEvent_ActualSurfaceFrameStart> _instance;
} _FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_;
class FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimelineEvent_ExpectedDisplayFrameStart> _instance;
} _FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_;
class FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimelineEvent_ActualDisplayFrameStart> _instance;
} _FrameTimelineEvent_ActualDisplayFrameStart_default_instance_;
class FrameTimelineEvent_FrameEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimelineEvent_FrameEnd> _instance;
} _FrameTimelineEvent_FrameEnd_default_instance_;
class FrameTimelineEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimelineEvent> _instance;
  const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start_;
  const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start_;
  const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start_;
  const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start_;
  const ::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end_;
} _FrameTimelineEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FrameTimelineEvent_default_instance_;
    new (ptr) ::perfetto::protos::FrameTimelineEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FrameTimelineEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto}, {
      &scc_info_FrameTimelineEvent_ExpectedDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base,
      &scc_info_FrameTimelineEvent_ActualDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base,
      &scc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base,
      &scc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base,
      &scc_info_FrameTimelineEvent_FrameEnd_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_FrameTimelineEvent_ActualDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FrameTimelineEvent_ActualDisplayFrameStart_default_instance_;
    new (ptr) ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ActualDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameTimelineEvent_ActualDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_;
    new (ptr) ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FrameTimelineEvent_ExpectedDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_;
    new (ptr) ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ExpectedDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameTimelineEvent_ExpectedDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_;
    new (ptr) ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_FrameTimelineEvent_FrameEnd_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FrameTimelineEvent_FrameEnd_default_instance_;
    new (ptr) ::perfetto::protos::FrameTimelineEvent_FrameEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FrameTimelineEvent_FrameEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimelineEvent_FrameEnd_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameTimelineEvent_FrameEnd_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto}, {}};

namespace perfetto {
namespace protos {
bool FrameTimelineEvent_JankType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_JankType_strings[10] = {};

static const char FrameTimelineEvent_JankType_names[] =
  "JANK_APP_DEADLINE_MISSED"
  "JANK_BUFFER_STUFFING"
  "JANK_DISPLAY_HAL"
  "JANK_NONE"
  "JANK_PREDICTION_ERROR"
  "JANK_SF_CPU_DEADLINE_MISSED"
  "JANK_SF_GPU_DEADLINE_MISSED"
  "JANK_SF_SCHEDULING"
  "JANK_UNKNOWN"
  "JANK_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_JankType_entries[] = {
  { {FrameTimelineEvent_JankType_names + 0, 24}, 64 },
  { {FrameTimelineEvent_JankType_names + 24, 20}, 128 },
  { {FrameTimelineEvent_JankType_names + 44, 16}, 8 },
  { {FrameTimelineEvent_JankType_names + 60, 9}, 1 },
  { {FrameTimelineEvent_JankType_names + 69, 21}, 4 },
  { {FrameTimelineEvent_JankType_names + 90, 27}, 16 },
  { {FrameTimelineEvent_JankType_names + 117, 27}, 32 },
  { {FrameTimelineEvent_JankType_names + 144, 18}, 2 },
  { {FrameTimelineEvent_JankType_names + 162, 12}, 256 },
  { {FrameTimelineEvent_JankType_names + 174, 16}, 0 },
};

static const int FrameTimelineEvent_JankType_entries_by_number[] = {
  9, // 0 -> JANK_UNSPECIFIED
  3, // 1 -> JANK_NONE
  7, // 2 -> JANK_SF_SCHEDULING
  4, // 4 -> JANK_PREDICTION_ERROR
  2, // 8 -> JANK_DISPLAY_HAL
  5, // 16 -> JANK_SF_CPU_DEADLINE_MISSED
  6, // 32 -> JANK_SF_GPU_DEADLINE_MISSED
  0, // 64 -> JANK_APP_DEADLINE_MISSED
  1, // 128 -> JANK_BUFFER_STUFFING
  8, // 256 -> JANK_UNKNOWN
};

const std::string& FrameTimelineEvent_JankType_Name(
    FrameTimelineEvent_JankType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_JankType_entries,
          FrameTimelineEvent_JankType_entries_by_number,
          10, FrameTimelineEvent_JankType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_JankType_entries,
      FrameTimelineEvent_JankType_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_JankType_strings[idx].get();
}
bool FrameTimelineEvent_JankType_Parse(
    const std::string& name, FrameTimelineEvent_JankType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_JankType_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_JankType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_UNSPECIFIED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_NONE;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_SCHEDULING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_PREDICTION_ERROR;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_DISPLAY_HAL;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_CPU_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_GPU_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_APP_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_BUFFER_STUFFING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_UNKNOWN;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JankType_MIN;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JankType_MAX;
constexpr int FrameTimelineEvent::JankType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool FrameTimelineEvent_PresentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_PresentType_strings[6] = {};

static const char FrameTimelineEvent_PresentType_names[] =
  "PRESENT_DROPPED"
  "PRESENT_EARLY"
  "PRESENT_LATE"
  "PRESENT_ON_TIME"
  "PRESENT_UNKNOWN"
  "PRESENT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_PresentType_entries[] = {
  { {FrameTimelineEvent_PresentType_names + 0, 15}, 4 },
  { {FrameTimelineEvent_PresentType_names + 15, 13}, 3 },
  { {FrameTimelineEvent_PresentType_names + 28, 12}, 2 },
  { {FrameTimelineEvent_PresentType_names + 40, 15}, 1 },
  { {FrameTimelineEvent_PresentType_names + 55, 15}, 5 },
  { {FrameTimelineEvent_PresentType_names + 70, 19}, 0 },
};

static const int FrameTimelineEvent_PresentType_entries_by_number[] = {
  5, // 0 -> PRESENT_UNSPECIFIED
  3, // 1 -> PRESENT_ON_TIME
  2, // 2 -> PRESENT_LATE
  1, // 3 -> PRESENT_EARLY
  0, // 4 -> PRESENT_DROPPED
  4, // 5 -> PRESENT_UNKNOWN
};

const std::string& FrameTimelineEvent_PresentType_Name(
    FrameTimelineEvent_PresentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_PresentType_entries,
          FrameTimelineEvent_PresentType_entries_by_number,
          6, FrameTimelineEvent_PresentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_PresentType_entries,
      FrameTimelineEvent_PresentType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_PresentType_strings[idx].get();
}
bool FrameTimelineEvent_PresentType_Parse(
    const std::string& name, FrameTimelineEvent_PresentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_PresentType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_PresentType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_UNSPECIFIED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_ON_TIME;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_LATE;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_EARLY;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_DROPPED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_UNKNOWN;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PresentType_MIN;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PresentType_MAX;
constexpr int FrameTimelineEvent::PresentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool FrameTimelineEvent_PredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_PredictionType_strings[4] = {};

static const char FrameTimelineEvent_PredictionType_names[] =
  "PREDICTION_EXPIRED"
  "PREDICTION_UNKNOWN"
  "PREDICTION_UNSPECIFIED"
  "PREDICTION_VALID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_PredictionType_entries[] = {
  { {FrameTimelineEvent_PredictionType_names + 0, 18}, 2 },
  { {FrameTimelineEvent_PredictionType_names + 18, 18}, 3 },
  { {FrameTimelineEvent_PredictionType_names + 36, 22}, 0 },
  { {FrameTimelineEvent_PredictionType_names + 58, 16}, 1 },
};

static const int FrameTimelineEvent_PredictionType_entries_by_number[] = {
  2, // 0 -> PREDICTION_UNSPECIFIED
  3, // 1 -> PREDICTION_VALID
  0, // 2 -> PREDICTION_EXPIRED
  1, // 3 -> PREDICTION_UNKNOWN
};

const std::string& FrameTimelineEvent_PredictionType_Name(
    FrameTimelineEvent_PredictionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_PredictionType_entries,
          FrameTimelineEvent_PredictionType_entries_by_number,
          4, FrameTimelineEvent_PredictionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_PredictionType_entries,
      FrameTimelineEvent_PredictionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_PredictionType_strings[idx].get();
}
bool FrameTimelineEvent_PredictionType_Parse(
    const std::string& name, FrameTimelineEvent_PredictionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_PredictionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_PredictionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_UNSPECIFIED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_VALID;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_EXPIRED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_UNKNOWN;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PredictionType_MIN;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PredictionType_MAX;
constexpr int FrameTimelineEvent::PredictionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FrameTimelineEvent_ExpectedSurfaceFrameStart::InitAsDefaultInstance() {
}
class FrameTimelineEvent_ExpectedSurfaceFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ExpectedSurfaceFrameStart>()._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_frame_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}
FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  ::memcpy(&cookie_, &from.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&cookie_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cookie_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&cookie_)) + sizeof(pid_));
}

FrameTimelineEvent_ExpectedSurfaceFrameStart::~FrameTimelineEvent_ExpectedSurfaceFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  SharedDtor();
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::SharedDtor() {
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimelineEvent_ExpectedSurfaceFrameStart& FrameTimelineEvent_ExpectedSurfaceFrameStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimelineEvent_ExpectedSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FrameTimelineEvent_ExpectedSurfaceFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    layer_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&cookie_)) + sizeof(pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimelineEvent_ExpectedSurfaceFrameStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 display_frame_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_display_frame_token(&has_bits);
          display_frame_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string layer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_layer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimelineEvent_ExpectedSurfaceFrameStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cookie = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cookie(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 display_frame_token = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_display_frame_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &display_frame_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimelineEvent_ExpectedSurfaceFrameStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->cookie(), output);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->token(), output);
  }

  // optional int64 display_frame_token = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->display_frame_token(), output);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pid(), output);
  }

  // optional string layer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->layer_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}

size_t FrameTimelineEvent_ExpectedSurfaceFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string layer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->layer_name());
    }

    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->token());
    }

    // optional int64 display_frame_token = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->display_frame_token());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimelineEvent_ExpectedSurfaceFrameStart*>(
      &from));
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_ = from.cookie_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_frame_token_ = from.display_frame_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::CopyFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ExpectedSurfaceFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::InternalSwap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cookie_, other->cookie_);
  swap(token_, other->token_);
  swap(display_frame_token_, other->display_frame_token_);
  swap(pid_, other->pid_);
}

std::string FrameTimelineEvent_ExpectedSurfaceFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart";
}


// ===================================================================

void FrameTimelineEvent_ActualSurfaceFrameStart::InitAsDefaultInstance() {
}
class FrameTimelineEvent_ActualSurfaceFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ActualSurfaceFrameStart>()._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_frame_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_present_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_on_time_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gpu_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jank_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prediction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}
FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  ::memcpy(&cookie_, &from.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&prediction_type_) -
    reinterpret_cast<char*>(&cookie_)) + sizeof(prediction_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}

void FrameTimelineEvent_ActualSurfaceFrameStart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cookie_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prediction_type_) -
      reinterpret_cast<char*>(&cookie_)) + sizeof(prediction_type_));
}

FrameTimelineEvent_ActualSurfaceFrameStart::~FrameTimelineEvent_ActualSurfaceFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  SharedDtor();
}

void FrameTimelineEvent_ActualSurfaceFrameStart::SharedDtor() {
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameTimelineEvent_ActualSurfaceFrameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimelineEvent_ActualSurfaceFrameStart& FrameTimelineEvent_ActualSurfaceFrameStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimelineEvent_ActualSurfaceFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FrameTimelineEvent_ActualSurfaceFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    layer_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpu_composition_) -
        reinterpret_cast<char*>(&cookie_)) + sizeof(gpu_composition_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&jank_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prediction_type_) -
        reinterpret_cast<char*>(&jank_type_)) + sizeof(prediction_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimelineEvent_ActualSurfaceFrameStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 display_frame_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_display_frame_token(&has_bits);
          display_frame_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string layer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_layer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(val))) {
            set_present_type(static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool on_time_finish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_on_time_finish(&has_bits);
          on_time_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gpu_composition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gpu_composition(&has_bits);
          gpu_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 jank_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_jank_type(&has_bits);
          jank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(val))) {
            set_prediction_type(static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimelineEvent_ActualSurfaceFrameStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cookie = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cookie(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 display_frame_token = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_display_frame_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &display_frame_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(value)) {
            set_present_type(static_cast< ::perfetto::protos::FrameTimelineEvent_PresentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool on_time_finish = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_on_time_finish(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_time_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gpu_composition = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_gpu_composition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpu_composition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jank_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_jank_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &jank_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(value)) {
            set_prediction_type(static_cast< ::perfetto::protos::FrameTimelineEvent_PredictionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimelineEvent_ActualSurfaceFrameStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->cookie(), output);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->token(), output);
  }

  // optional int64 display_frame_token = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->display_frame_token(), output);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pid(), output);
  }

  // optional string layer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->layer_name(), output);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->present_type(), output);
  }

  // optional bool on_time_finish = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->on_time_finish(), output);
  }

  // optional bool gpu_composition = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->gpu_composition(), output);
  }

  // optional int32 jank_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->jank_type(), output);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->prediction_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}

size_t FrameTimelineEvent_ActualSurfaceFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string layer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->layer_name());
    }

    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->token());
    }

    // optional int64 display_frame_token = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->display_frame_token());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->present_type());
    }

    // optional bool on_time_finish = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool gpu_composition = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 jank_type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->jank_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->prediction_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ActualSurfaceFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimelineEvent_ActualSurfaceFrameStart*>(
      &from));
}

void FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_ = from.cookie_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_frame_token_ = from.display_frame_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000020u) {
      present_type_ = from.present_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      on_time_finish_ = from.on_time_finish_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpu_composition_ = from.gpu_composition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      jank_type_ = from.jank_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      prediction_type_ = from.prediction_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameTimelineEvent_ActualSurfaceFrameStart::CopyFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ActualSurfaceFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ActualSurfaceFrameStart::InternalSwap(FrameTimelineEvent_ActualSurfaceFrameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cookie_, other->cookie_);
  swap(token_, other->token_);
  swap(display_frame_token_, other->display_frame_token_);
  swap(pid_, other->pid_);
  swap(present_type_, other->present_type_);
  swap(on_time_finish_, other->on_time_finish_);
  swap(gpu_composition_, other->gpu_composition_);
  swap(jank_type_, other->jank_type_);
  swap(prediction_type_, other->prediction_type_);
}

std::string FrameTimelineEvent_ActualSurfaceFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart";
}


// ===================================================================

void FrameTimelineEvent_ExpectedDisplayFrameStart::InitAsDefaultInstance() {
}
class FrameTimelineEvent_ExpectedDisplayFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ExpectedDisplayFrameStart>()._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}
FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cookie_, &from.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&cookie_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::SharedCtor() {
  ::memset(&cookie_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&cookie_)) + sizeof(pid_));
}

FrameTimelineEvent_ExpectedDisplayFrameStart::~FrameTimelineEvent_ExpectedDisplayFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  SharedDtor();
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::SharedDtor() {
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimelineEvent_ExpectedDisplayFrameStart& FrameTimelineEvent_ExpectedDisplayFrameStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimelineEvent_ExpectedDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FrameTimelineEvent_ExpectedDisplayFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&cookie_)) + sizeof(pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimelineEvent_ExpectedDisplayFrameStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimelineEvent_ExpectedDisplayFrameStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cookie = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cookie(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimelineEvent_ExpectedDisplayFrameStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->cookie(), output);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->token(), output);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}

size_t FrameTimelineEvent_ExpectedDisplayFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->token());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimelineEvent_ExpectedDisplayFrameStart*>(
      &from));
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cookie_ = from.cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::CopyFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ExpectedDisplayFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::InternalSwap(FrameTimelineEvent_ExpectedDisplayFrameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cookie_, other->cookie_);
  swap(token_, other->token_);
  swap(pid_, other->pid_);
}

std::string FrameTimelineEvent_ExpectedDisplayFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart";
}


// ===================================================================

void FrameTimelineEvent_ActualDisplayFrameStart::InitAsDefaultInstance() {
}
class FrameTimelineEvent_ActualDisplayFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ActualDisplayFrameStart>()._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_present_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_on_time_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpu_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jank_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prediction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}
FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cookie_, &from.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&prediction_type_) -
    reinterpret_cast<char*>(&cookie_)) + sizeof(prediction_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}

void FrameTimelineEvent_ActualDisplayFrameStart::SharedCtor() {
  ::memset(&cookie_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prediction_type_) -
      reinterpret_cast<char*>(&cookie_)) + sizeof(prediction_type_));
}

FrameTimelineEvent_ActualDisplayFrameStart::~FrameTimelineEvent_ActualDisplayFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  SharedDtor();
}

void FrameTimelineEvent_ActualDisplayFrameStart::SharedDtor() {
}

void FrameTimelineEvent_ActualDisplayFrameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimelineEvent_ActualDisplayFrameStart& FrameTimelineEvent_ActualDisplayFrameStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimelineEvent_ActualDisplayFrameStart_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FrameTimelineEvent_ActualDisplayFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prediction_type_) -
        reinterpret_cast<char*>(&cookie_)) + sizeof(prediction_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimelineEvent_ActualDisplayFrameStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(val))) {
            set_present_type(static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool on_time_finish = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_on_time_finish(&has_bits);
          on_time_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gpu_composition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gpu_composition(&has_bits);
          gpu_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 jank_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_jank_type(&has_bits);
          jank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(val))) {
            set_prediction_type(static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimelineEvent_ActualDisplayFrameStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cookie = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cookie(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(value)) {
            set_present_type(static_cast< ::perfetto::protos::FrameTimelineEvent_PresentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool on_time_finish = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_on_time_finish(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_time_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gpu_composition = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_gpu_composition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpu_composition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jank_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_jank_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &jank_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(value)) {
            set_prediction_type(static_cast< ::perfetto::protos::FrameTimelineEvent_PredictionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimelineEvent_ActualDisplayFrameStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->cookie(), output);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->token(), output);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->present_type(), output);
  }

  // optional bool on_time_finish = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->on_time_finish(), output);
  }

  // optional bool gpu_composition = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->gpu_composition(), output);
  }

  // optional int32 jank_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->jank_type(), output);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->prediction_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}

size_t FrameTimelineEvent_ActualDisplayFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->token());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->present_type());
    }

    // optional bool on_time_finish = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool gpu_composition = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 jank_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->jank_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->prediction_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ActualDisplayFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimelineEvent_ActualDisplayFrameStart*>(
      &from));
}

void FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cookie_ = from.cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      present_type_ = from.present_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      on_time_finish_ = from.on_time_finish_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpu_composition_ = from.gpu_composition_;
    }
    if (cached_has_bits & 0x00000040u) {
      jank_type_ = from.jank_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      prediction_type_ = from.prediction_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameTimelineEvent_ActualDisplayFrameStart::CopyFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ActualDisplayFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ActualDisplayFrameStart::InternalSwap(FrameTimelineEvent_ActualDisplayFrameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cookie_, other->cookie_);
  swap(token_, other->token_);
  swap(pid_, other->pid_);
  swap(present_type_, other->present_type_);
  swap(on_time_finish_, other->on_time_finish_);
  swap(gpu_composition_, other->gpu_composition_);
  swap(jank_type_, other->jank_type_);
  swap(prediction_type_, other->prediction_type_);
}

std::string FrameTimelineEvent_ActualDisplayFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart";
}


// ===================================================================

void FrameTimelineEvent_FrameEnd::InitAsDefaultInstance() {
}
class FrameTimelineEvent_FrameEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_FrameEnd>()._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
}
FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cookie_ = from.cookie_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
}

void FrameTimelineEvent_FrameEnd::SharedCtor() {
  cookie_ = PROTOBUF_LONGLONG(0);
}

FrameTimelineEvent_FrameEnd::~FrameTimelineEvent_FrameEnd() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
  SharedDtor();
}

void FrameTimelineEvent_FrameEnd::SharedDtor() {
}

void FrameTimelineEvent_FrameEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimelineEvent_FrameEnd& FrameTimelineEvent_FrameEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimelineEvent_FrameEnd_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FrameTimelineEvent_FrameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookie_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimelineEvent_FrameEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimelineEvent_FrameEnd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cookie = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cookie(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FrameTimelineEvent.FrameEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FrameTimelineEvent.FrameEnd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimelineEvent_FrameEnd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->cookie(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FrameTimelineEvent.FrameEnd)
}

size_t FrameTimelineEvent_FrameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 cookie = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->cookie());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_FrameEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimelineEvent_FrameEnd*>(
      &from));
}

void FrameTimelineEvent_FrameEnd::MergeFrom(const FrameTimelineEvent_FrameEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cookie()) {
    set_cookie(from.cookie());
  }
}

void FrameTimelineEvent_FrameEnd::CopyFrom(const FrameTimelineEvent_FrameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_FrameEnd::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_FrameEnd::InternalSwap(FrameTimelineEvent_FrameEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cookie_, other->cookie_);
}

std::string FrameTimelineEvent_FrameEnd::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.FrameEnd";
}


// ===================================================================

void FrameTimelineEvent::InitAsDefaultInstance() {
}
class FrameTimelineEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent>()._has_bits_);
  static const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& expected_display_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& actual_display_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& expected_surface_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& actual_surface_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_FrameEnd& frame_end(const FrameTimelineEvent* msg);
};

const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart&
FrameTimelineEvent::_Internal::expected_display_frame_start(const FrameTimelineEvent* msg) {
  return *msg->event_.expected_display_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart&
FrameTimelineEvent::_Internal::actual_display_frame_start(const FrameTimelineEvent* msg) {
  return *msg->event_.actual_display_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart&
FrameTimelineEvent::_Internal::expected_surface_frame_start(const FrameTimelineEvent* msg) {
  return *msg->event_.expected_surface_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart&
FrameTimelineEvent::_Internal::actual_surface_frame_start(const FrameTimelineEvent* msg) {
  return *msg->event_.actual_surface_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_FrameEnd&
FrameTimelineEvent::_Internal::frame_end(const FrameTimelineEvent* msg) {
  return *msg->event_.frame_end_;
}
void FrameTimelineEvent::set_allocated_expected_display_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (expected_display_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expected_display_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_display_frame_start, submessage_arena);
    }
    set_has_expected_display_frame_start();
    event_.expected_display_frame_start_ = expected_display_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
}
void FrameTimelineEvent::set_allocated_actual_display_frame_start(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (actual_display_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actual_display_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_display_frame_start, submessage_arena);
    }
    set_has_actual_display_frame_start();
    event_.actual_display_frame_start_ = actual_display_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
}
void FrameTimelineEvent::set_allocated_expected_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (expected_surface_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expected_surface_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_surface_frame_start, submessage_arena);
    }
    set_has_expected_surface_frame_start();
    event_.expected_surface_frame_start_ = expected_surface_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
}
void FrameTimelineEvent::set_allocated_actual_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (actual_surface_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actual_surface_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_surface_frame_start, submessage_arena);
    }
    set_has_actual_surface_frame_start();
    event_.actual_surface_frame_start_ = actual_surface_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
}
void FrameTimelineEvent::set_allocated_frame_end(::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (frame_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_end, submessage_arena);
    }
    set_has_frame_end();
    event_.frame_end_ = frame_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.frame_end)
}
FrameTimelineEvent::FrameTimelineEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FrameTimelineEvent)
}
FrameTimelineEvent::FrameTimelineEvent(const FrameTimelineEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kExpectedDisplayFrameStart: {
      mutable_expected_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(from.expected_display_frame_start());
      break;
    }
    case kActualDisplayFrameStart: {
      mutable_actual_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(from.actual_display_frame_start());
      break;
    }
    case kExpectedSurfaceFrameStart: {
      mutable_expected_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(from.expected_surface_frame_start());
      break;
    }
    case kActualSurfaceFrameStart: {
      mutable_actual_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(from.actual_surface_frame_start());
      break;
    }
    case kFrameEnd: {
      mutable_frame_end()->::perfetto::protos::FrameTimelineEvent_FrameEnd::MergeFrom(from.frame_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent)
}

void FrameTimelineEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  clear_has_event();
}

FrameTimelineEvent::~FrameTimelineEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent)
  SharedDtor();
}

void FrameTimelineEvent::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void FrameTimelineEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimelineEvent& FrameTimelineEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimelineEvent_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto.base);
  return *internal_default_instance();
}


void FrameTimelineEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FrameTimelineEvent)
  switch (event_case()) {
    case kExpectedDisplayFrameStart: {
      delete event_.expected_display_frame_start_;
      break;
    }
    case kActualDisplayFrameStart: {
      delete event_.actual_display_frame_start_;
      break;
    }
    case kExpectedSurfaceFrameStart: {
      delete event_.expected_surface_frame_start_;
      break;
    }
    case kActualSurfaceFrameStart: {
      delete event_.actual_surface_frame_start_;
      break;
    }
    case kFrameEnd: {
      delete event_.frame_end_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void FrameTimelineEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimelineEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_expected_display_frame_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_actual_display_frame_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_expected_surface_frame_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_actual_surface_frame_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_frame_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimelineEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FrameTimelineEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expected_display_frame_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_actual_display_frame_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expected_surface_frame_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_actual_surface_frame_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FrameTimelineEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FrameTimelineEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimelineEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FrameTimelineEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kExpectedDisplayFrameStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        1, _Internal::expected_display_frame_start(this), output);
      break;
    case kActualDisplayFrameStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::actual_display_frame_start(this), output);
      break;
    case kExpectedSurfaceFrameStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::expected_surface_frame_start(this), output);
      break;
    case kActualSurfaceFrameStart:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::actual_surface_frame_start(this), output);
      break;
    case kFrameEnd:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::frame_end(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FrameTimelineEvent)
}

size_t FrameTimelineEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // optional .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
    case kExpectedDisplayFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.expected_display_frame_start_);
      break;
    }
    // optional .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
    case kActualDisplayFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.actual_display_frame_start_);
      break;
    }
    // optional .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
    case kExpectedSurfaceFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.expected_surface_frame_start_);
      break;
    }
    // optional .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
    case kActualSurfaceFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.actual_surface_frame_start_);
      break;
    }
    // optional .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
    case kFrameEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.frame_end_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimelineEvent*>(
      &from));
}

void FrameTimelineEvent::MergeFrom(const FrameTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kExpectedDisplayFrameStart: {
      mutable_expected_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(from.expected_display_frame_start());
      break;
    }
    case kActualDisplayFrameStart: {
      mutable_actual_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(from.actual_display_frame_start());
      break;
    }
    case kExpectedSurfaceFrameStart: {
      mutable_expected_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(from.expected_surface_frame_start());
      break;
    }
    case kActualSurfaceFrameStart: {
      mutable_actual_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(from.actual_surface_frame_start());
      break;
    }
    case kFrameEnd: {
      mutable_frame_end()->::perfetto::protos::FrameTimelineEvent_FrameEnd::MergeFrom(from.frame_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void FrameTimelineEvent::CopyFrom(const FrameTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent::IsInitialized() const {
  return true;
}

void FrameTimelineEvent::InternalSwap(FrameTimelineEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FrameTimelineEvent::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_FrameEnd* Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent* Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FrameTimelineEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
