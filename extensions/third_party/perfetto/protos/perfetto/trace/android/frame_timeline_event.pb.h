// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/frame_timeline_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class FrameTimelineEvent;
class FrameTimelineEventDefaultTypeInternal;
extern FrameTimelineEventDefaultTypeInternal _FrameTimelineEvent_default_instance_;
class FrameTimelineEvent_ActualDisplayFrameStart;
class FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualDisplayFrameStart_default_instance_;
class FrameTimelineEvent_ActualSurfaceFrameStart;
class FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_;
class FrameTimelineEvent_ExpectedDisplayFrameStart;
class FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_;
class FrameTimelineEvent_ExpectedSurfaceFrameStart;
class FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_;
class FrameTimelineEvent_FrameEnd;
class FrameTimelineEvent_FrameEndDefaultTypeInternal;
extern FrameTimelineEvent_FrameEndDefaultTypeInternal _FrameTimelineEvent_FrameEnd_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::FrameTimelineEvent* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent>(Arena*);
template<> ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart>(Arena*);
template<> ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart>(Arena*);
template<> ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart>(Arena*);
template<> ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart>(Arena*);
template<> ::perfetto::protos::FrameTimelineEvent_FrameEnd* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_FrameEnd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum FrameTimelineEvent_JankType : int {
  FrameTimelineEvent_JankType_JANK_UNSPECIFIED = 0,
  FrameTimelineEvent_JankType_JANK_NONE = 1,
  FrameTimelineEvent_JankType_JANK_SF_SCHEDULING = 2,
  FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR = 4,
  FrameTimelineEvent_JankType_JANK_DISPLAY_HAL = 8,
  FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED = 16,
  FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED = 32,
  FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED = 64,
  FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING = 128,
  FrameTimelineEvent_JankType_JANK_UNKNOWN = 256
};
bool FrameTimelineEvent_JankType_IsValid(int value);
constexpr FrameTimelineEvent_JankType FrameTimelineEvent_JankType_JankType_MIN = FrameTimelineEvent_JankType_JANK_UNSPECIFIED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent_JankType_JankType_MAX = FrameTimelineEvent_JankType_JANK_UNKNOWN;
constexpr int FrameTimelineEvent_JankType_JankType_ARRAYSIZE = FrameTimelineEvent_JankType_JankType_MAX + 1;

const std::string& FrameTimelineEvent_JankType_Name(FrameTimelineEvent_JankType value);
template<typename T>
inline const std::string& FrameTimelineEvent_JankType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameTimelineEvent_JankType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameTimelineEvent_JankType_Name.");
  return FrameTimelineEvent_JankType_Name(static_cast<FrameTimelineEvent_JankType>(enum_t_value));
}
bool FrameTimelineEvent_JankType_Parse(
    const std::string& name, FrameTimelineEvent_JankType* value);
enum FrameTimelineEvent_PresentType : int {
  FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED = 0,
  FrameTimelineEvent_PresentType_PRESENT_ON_TIME = 1,
  FrameTimelineEvent_PresentType_PRESENT_LATE = 2,
  FrameTimelineEvent_PresentType_PRESENT_EARLY = 3,
  FrameTimelineEvent_PresentType_PRESENT_DROPPED = 4,
  FrameTimelineEvent_PresentType_PRESENT_UNKNOWN = 5
};
bool FrameTimelineEvent_PresentType_IsValid(int value);
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent_PresentType_PresentType_MIN = FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent_PresentType_PresentType_MAX = FrameTimelineEvent_PresentType_PRESENT_UNKNOWN;
constexpr int FrameTimelineEvent_PresentType_PresentType_ARRAYSIZE = FrameTimelineEvent_PresentType_PresentType_MAX + 1;

const std::string& FrameTimelineEvent_PresentType_Name(FrameTimelineEvent_PresentType value);
template<typename T>
inline const std::string& FrameTimelineEvent_PresentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameTimelineEvent_PresentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameTimelineEvent_PresentType_Name.");
  return FrameTimelineEvent_PresentType_Name(static_cast<FrameTimelineEvent_PresentType>(enum_t_value));
}
bool FrameTimelineEvent_PresentType_Parse(
    const std::string& name, FrameTimelineEvent_PresentType* value);
enum FrameTimelineEvent_PredictionType : int {
  FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED = 0,
  FrameTimelineEvent_PredictionType_PREDICTION_VALID = 1,
  FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED = 2,
  FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN = 3
};
bool FrameTimelineEvent_PredictionType_IsValid(int value);
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent_PredictionType_PredictionType_MIN = FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent_PredictionType_PredictionType_MAX = FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN;
constexpr int FrameTimelineEvent_PredictionType_PredictionType_ARRAYSIZE = FrameTimelineEvent_PredictionType_PredictionType_MAX + 1;

const std::string& FrameTimelineEvent_PredictionType_Name(FrameTimelineEvent_PredictionType value);
template<typename T>
inline const std::string& FrameTimelineEvent_PredictionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameTimelineEvent_PredictionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameTimelineEvent_PredictionType_Name.");
  return FrameTimelineEvent_PredictionType_Name(static_cast<FrameTimelineEvent_PredictionType>(enum_t_value));
}
bool FrameTimelineEvent_PredictionType_Parse(
    const std::string& name, FrameTimelineEvent_PredictionType* value);
// ===================================================================

class FrameTimelineEvent_ExpectedSurfaceFrameStart :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart) */ {
 public:
  FrameTimelineEvent_ExpectedSurfaceFrameStart();
  virtual ~FrameTimelineEvent_ExpectedSurfaceFrameStart();

  FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from);
  FrameTimelineEvent_ExpectedSurfaceFrameStart(FrameTimelineEvent_ExpectedSurfaceFrameStart&& from) noexcept
    : FrameTimelineEvent_ExpectedSurfaceFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ExpectedSurfaceFrameStart& operator=(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ExpectedSurfaceFrameStart& operator=(FrameTimelineEvent_ExpectedSurfaceFrameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimelineEvent_ExpectedSurfaceFrameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimelineEvent_ExpectedSurfaceFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ExpectedSurfaceFrameStart*>(
               &_FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameTimelineEvent_ExpectedSurfaceFrameStart& a, FrameTimelineEvent_ExpectedSurfaceFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimelineEvent_ExpectedSurfaceFrameStart* New() const final {
    return CreateMaybeMessage<FrameTimelineEvent_ExpectedSurfaceFrameStart>(nullptr);
  }

  FrameTimelineEvent_ExpectedSurfaceFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ExpectedSurfaceFrameStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from);
  void MergeFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 5,
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDisplayFrameTokenFieldNumber = 3,
    kPidFieldNumber = 4,
  };
  // optional string layer_name = 5;
  bool has_layer_name() const;
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);

  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int64 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 token = 2;
  bool has_token() const;
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 display_frame_token = 3;
  bool has_display_frame_token() const;
  void clear_display_frame_token();
  ::PROTOBUF_NAMESPACE_ID::int64 display_frame_token() const;
  void set_display_frame_token(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 pid = 4;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 cookie_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int64 display_frame_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FrameTimelineEvent_ActualSurfaceFrameStart :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart) */ {
 public:
  FrameTimelineEvent_ActualSurfaceFrameStart();
  virtual ~FrameTimelineEvent_ActualSurfaceFrameStart();

  FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart& from);
  FrameTimelineEvent_ActualSurfaceFrameStart(FrameTimelineEvent_ActualSurfaceFrameStart&& from) noexcept
    : FrameTimelineEvent_ActualSurfaceFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ActualSurfaceFrameStart& operator=(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ActualSurfaceFrameStart& operator=(FrameTimelineEvent_ActualSurfaceFrameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimelineEvent_ActualSurfaceFrameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimelineEvent_ActualSurfaceFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ActualSurfaceFrameStart*>(
               &_FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameTimelineEvent_ActualSurfaceFrameStart& a, FrameTimelineEvent_ActualSurfaceFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ActualSurfaceFrameStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimelineEvent_ActualSurfaceFrameStart* New() const final {
    return CreateMaybeMessage<FrameTimelineEvent_ActualSurfaceFrameStart>(nullptr);
  }

  FrameTimelineEvent_ActualSurfaceFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ActualSurfaceFrameStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from);
  void MergeFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimelineEvent_ActualSurfaceFrameStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 5,
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDisplayFrameTokenFieldNumber = 3,
    kPidFieldNumber = 4,
    kPresentTypeFieldNumber = 6,
    kOnTimeFinishFieldNumber = 7,
    kGpuCompositionFieldNumber = 8,
    kJankTypeFieldNumber = 9,
    kPredictionTypeFieldNumber = 10,
  };
  // optional string layer_name = 5;
  bool has_layer_name() const;
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);

  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int64 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 token = 2;
  bool has_token() const;
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 display_frame_token = 3;
  bool has_display_frame_token() const;
  void clear_display_frame_token();
  ::PROTOBUF_NAMESPACE_ID::int64 display_frame_token() const;
  void set_display_frame_token(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 pid = 4;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
  bool has_present_type() const;
  void clear_present_type();
  ::perfetto::protos::FrameTimelineEvent_PresentType present_type() const;
  void set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value);

  // optional bool on_time_finish = 7;
  bool has_on_time_finish() const;
  void clear_on_time_finish();
  bool on_time_finish() const;
  void set_on_time_finish(bool value);

  // optional bool gpu_composition = 8;
  bool has_gpu_composition() const;
  void clear_gpu_composition();
  bool gpu_composition() const;
  void set_gpu_composition(bool value);

  // optional int32 jank_type = 9;
  bool has_jank_type() const;
  void clear_jank_type();
  ::PROTOBUF_NAMESPACE_ID::int32 jank_type() const;
  void set_jank_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
  bool has_prediction_type() const;
  void clear_prediction_type();
  ::perfetto::protos::FrameTimelineEvent_PredictionType prediction_type() const;
  void set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 cookie_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int64 display_frame_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  int present_type_;
  bool on_time_finish_;
  bool gpu_composition_;
  ::PROTOBUF_NAMESPACE_ID::int32 jank_type_;
  int prediction_type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FrameTimelineEvent_ExpectedDisplayFrameStart :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart) */ {
 public:
  FrameTimelineEvent_ExpectedDisplayFrameStart();
  virtual ~FrameTimelineEvent_ExpectedDisplayFrameStart();

  FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart& from);
  FrameTimelineEvent_ExpectedDisplayFrameStart(FrameTimelineEvent_ExpectedDisplayFrameStart&& from) noexcept
    : FrameTimelineEvent_ExpectedDisplayFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ExpectedDisplayFrameStart& operator=(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ExpectedDisplayFrameStart& operator=(FrameTimelineEvent_ExpectedDisplayFrameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimelineEvent_ExpectedDisplayFrameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimelineEvent_ExpectedDisplayFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ExpectedDisplayFrameStart*>(
               &_FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameTimelineEvent_ExpectedDisplayFrameStart& a, FrameTimelineEvent_ExpectedDisplayFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ExpectedDisplayFrameStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimelineEvent_ExpectedDisplayFrameStart* New() const final {
    return CreateMaybeMessage<FrameTimelineEvent_ExpectedDisplayFrameStart>(nullptr);
  }

  FrameTimelineEvent_ExpectedDisplayFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ExpectedDisplayFrameStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from);
  void MergeFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimelineEvent_ExpectedDisplayFrameStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int64 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 token = 2;
  bool has_token() const;
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cookie_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FrameTimelineEvent_ActualDisplayFrameStart :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart) */ {
 public:
  FrameTimelineEvent_ActualDisplayFrameStart();
  virtual ~FrameTimelineEvent_ActualDisplayFrameStart();

  FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart& from);
  FrameTimelineEvent_ActualDisplayFrameStart(FrameTimelineEvent_ActualDisplayFrameStart&& from) noexcept
    : FrameTimelineEvent_ActualDisplayFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ActualDisplayFrameStart& operator=(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ActualDisplayFrameStart& operator=(FrameTimelineEvent_ActualDisplayFrameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimelineEvent_ActualDisplayFrameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimelineEvent_ActualDisplayFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ActualDisplayFrameStart*>(
               &_FrameTimelineEvent_ActualDisplayFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameTimelineEvent_ActualDisplayFrameStart& a, FrameTimelineEvent_ActualDisplayFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ActualDisplayFrameStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimelineEvent_ActualDisplayFrameStart* New() const final {
    return CreateMaybeMessage<FrameTimelineEvent_ActualDisplayFrameStart>(nullptr);
  }

  FrameTimelineEvent_ActualDisplayFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ActualDisplayFrameStart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from);
  void MergeFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimelineEvent_ActualDisplayFrameStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kPidFieldNumber = 3,
    kPresentTypeFieldNumber = 4,
    kOnTimeFinishFieldNumber = 5,
    kGpuCompositionFieldNumber = 6,
    kJankTypeFieldNumber = 7,
    kPredictionTypeFieldNumber = 8,
  };
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int64 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 token = 2;
  bool has_token() const;
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::int64 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
  bool has_present_type() const;
  void clear_present_type();
  ::perfetto::protos::FrameTimelineEvent_PresentType present_type() const;
  void set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value);

  // optional bool on_time_finish = 5;
  bool has_on_time_finish() const;
  void clear_on_time_finish();
  bool on_time_finish() const;
  void set_on_time_finish(bool value);

  // optional bool gpu_composition = 6;
  bool has_gpu_composition() const;
  void clear_gpu_composition();
  bool gpu_composition() const;
  void set_gpu_composition(bool value);

  // optional int32 jank_type = 7;
  bool has_jank_type() const;
  void clear_jank_type();
  ::PROTOBUF_NAMESPACE_ID::int32 jank_type() const;
  void set_jank_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
  bool has_prediction_type() const;
  void clear_prediction_type();
  ::perfetto::protos::FrameTimelineEvent_PredictionType prediction_type() const;
  void set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cookie_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  int present_type_;
  bool on_time_finish_;
  bool gpu_composition_;
  ::PROTOBUF_NAMESPACE_ID::int32 jank_type_;
  int prediction_type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FrameTimelineEvent_FrameEnd :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.FrameEnd) */ {
 public:
  FrameTimelineEvent_FrameEnd();
  virtual ~FrameTimelineEvent_FrameEnd();

  FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd& from);
  FrameTimelineEvent_FrameEnd(FrameTimelineEvent_FrameEnd&& from) noexcept
    : FrameTimelineEvent_FrameEnd() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_FrameEnd& operator=(const FrameTimelineEvent_FrameEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_FrameEnd& operator=(FrameTimelineEvent_FrameEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimelineEvent_FrameEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimelineEvent_FrameEnd* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_FrameEnd*>(
               &_FrameTimelineEvent_FrameEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrameTimelineEvent_FrameEnd& a, FrameTimelineEvent_FrameEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_FrameEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimelineEvent_FrameEnd* New() const final {
    return CreateMaybeMessage<FrameTimelineEvent_FrameEnd>(nullptr);
  }

  FrameTimelineEvent_FrameEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimelineEvent_FrameEnd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimelineEvent_FrameEnd& from);
  void MergeFrom(const FrameTimelineEvent_FrameEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimelineEvent_FrameEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.FrameEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
  };
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int64 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.FrameEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cookie_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FrameTimelineEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent) */ {
 public:
  FrameTimelineEvent();
  virtual ~FrameTimelineEvent();

  FrameTimelineEvent(const FrameTimelineEvent& from);
  FrameTimelineEvent(FrameTimelineEvent&& from) noexcept
    : FrameTimelineEvent() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent& operator=(const FrameTimelineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent& operator=(FrameTimelineEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimelineEvent& default_instance();

  enum EventCase {
    kExpectedDisplayFrameStart = 1,
    kActualDisplayFrameStart = 2,
    kExpectedSurfaceFrameStart = 3,
    kActualSurfaceFrameStart = 4,
    kFrameEnd = 5,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimelineEvent* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent*>(
               &_FrameTimelineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FrameTimelineEvent& a, FrameTimelineEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimelineEvent* New() const final {
    return CreateMaybeMessage<FrameTimelineEvent>(nullptr);
  }

  FrameTimelineEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimelineEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimelineEvent& from);
  void MergeFrom(const FrameTimelineEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimelineEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FrameTimelineEvent_ExpectedSurfaceFrameStart ExpectedSurfaceFrameStart;
  typedef FrameTimelineEvent_ActualSurfaceFrameStart ActualSurfaceFrameStart;
  typedef FrameTimelineEvent_ExpectedDisplayFrameStart ExpectedDisplayFrameStart;
  typedef FrameTimelineEvent_ActualDisplayFrameStart ActualDisplayFrameStart;
  typedef FrameTimelineEvent_FrameEnd FrameEnd;

  typedef FrameTimelineEvent_JankType JankType;
  static constexpr JankType JANK_UNSPECIFIED =
    FrameTimelineEvent_JankType_JANK_UNSPECIFIED;
  static constexpr JankType JANK_NONE =
    FrameTimelineEvent_JankType_JANK_NONE;
  static constexpr JankType JANK_SF_SCHEDULING =
    FrameTimelineEvent_JankType_JANK_SF_SCHEDULING;
  static constexpr JankType JANK_PREDICTION_ERROR =
    FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR;
  static constexpr JankType JANK_DISPLAY_HAL =
    FrameTimelineEvent_JankType_JANK_DISPLAY_HAL;
  static constexpr JankType JANK_SF_CPU_DEADLINE_MISSED =
    FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED;
  static constexpr JankType JANK_SF_GPU_DEADLINE_MISSED =
    FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED;
  static constexpr JankType JANK_APP_DEADLINE_MISSED =
    FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED;
  static constexpr JankType JANK_BUFFER_STUFFING =
    FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING;
  static constexpr JankType JANK_UNKNOWN =
    FrameTimelineEvent_JankType_JANK_UNKNOWN;
  static inline bool JankType_IsValid(int value) {
    return FrameTimelineEvent_JankType_IsValid(value);
  }
  static constexpr JankType JankType_MIN =
    FrameTimelineEvent_JankType_JankType_MIN;
  static constexpr JankType JankType_MAX =
    FrameTimelineEvent_JankType_JankType_MAX;
  static constexpr int JankType_ARRAYSIZE =
    FrameTimelineEvent_JankType_JankType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& JankType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JankType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JankType_Name.");
    return FrameTimelineEvent_JankType_Name(enum_t_value);
  }
  static inline bool JankType_Parse(const std::string& name,
      JankType* value) {
    return FrameTimelineEvent_JankType_Parse(name, value);
  }

  typedef FrameTimelineEvent_PresentType PresentType;
  static constexpr PresentType PRESENT_UNSPECIFIED =
    FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED;
  static constexpr PresentType PRESENT_ON_TIME =
    FrameTimelineEvent_PresentType_PRESENT_ON_TIME;
  static constexpr PresentType PRESENT_LATE =
    FrameTimelineEvent_PresentType_PRESENT_LATE;
  static constexpr PresentType PRESENT_EARLY =
    FrameTimelineEvent_PresentType_PRESENT_EARLY;
  static constexpr PresentType PRESENT_DROPPED =
    FrameTimelineEvent_PresentType_PRESENT_DROPPED;
  static constexpr PresentType PRESENT_UNKNOWN =
    FrameTimelineEvent_PresentType_PRESENT_UNKNOWN;
  static inline bool PresentType_IsValid(int value) {
    return FrameTimelineEvent_PresentType_IsValid(value);
  }
  static constexpr PresentType PresentType_MIN =
    FrameTimelineEvent_PresentType_PresentType_MIN;
  static constexpr PresentType PresentType_MAX =
    FrameTimelineEvent_PresentType_PresentType_MAX;
  static constexpr int PresentType_ARRAYSIZE =
    FrameTimelineEvent_PresentType_PresentType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PresentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PresentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PresentType_Name.");
    return FrameTimelineEvent_PresentType_Name(enum_t_value);
  }
  static inline bool PresentType_Parse(const std::string& name,
      PresentType* value) {
    return FrameTimelineEvent_PresentType_Parse(name, value);
  }

  typedef FrameTimelineEvent_PredictionType PredictionType;
  static constexpr PredictionType PREDICTION_UNSPECIFIED =
    FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED;
  static constexpr PredictionType PREDICTION_VALID =
    FrameTimelineEvent_PredictionType_PREDICTION_VALID;
  static constexpr PredictionType PREDICTION_EXPIRED =
    FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED;
  static constexpr PredictionType PREDICTION_UNKNOWN =
    FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN;
  static inline bool PredictionType_IsValid(int value) {
    return FrameTimelineEvent_PredictionType_IsValid(value);
  }
  static constexpr PredictionType PredictionType_MIN =
    FrameTimelineEvent_PredictionType_PredictionType_MIN;
  static constexpr PredictionType PredictionType_MAX =
    FrameTimelineEvent_PredictionType_PredictionType_MAX;
  static constexpr int PredictionType_ARRAYSIZE =
    FrameTimelineEvent_PredictionType_PredictionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PredictionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PredictionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PredictionType_Name.");
    return FrameTimelineEvent_PredictionType_Name(enum_t_value);
  }
  static inline bool PredictionType_Parse(const std::string& name,
      PredictionType* value) {
    return FrameTimelineEvent_PredictionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExpectedDisplayFrameStartFieldNumber = 1,
    kActualDisplayFrameStartFieldNumber = 2,
    kExpectedSurfaceFrameStartFieldNumber = 3,
    kActualSurfaceFrameStartFieldNumber = 4,
    kFrameEndFieldNumber = 5,
  };
  // optional .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
  bool has_expected_display_frame_start() const;
  void clear_expected_display_frame_start();
  const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& expected_display_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* release_expected_display_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* mutable_expected_display_frame_start();
  void set_allocated_expected_display_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start);

  // optional .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
  bool has_actual_display_frame_start() const;
  void clear_actual_display_frame_start();
  const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& actual_display_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* release_actual_display_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* mutable_actual_display_frame_start();
  void set_allocated_actual_display_frame_start(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start);

  // optional .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
  bool has_expected_surface_frame_start() const;
  void clear_expected_surface_frame_start();
  const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& expected_surface_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* release_expected_surface_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* mutable_expected_surface_frame_start();
  void set_allocated_expected_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start);

  // optional .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
  bool has_actual_surface_frame_start() const;
  void clear_actual_surface_frame_start();
  const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& actual_surface_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* release_actual_surface_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* mutable_actual_surface_frame_start();
  void set_allocated_actual_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start);

  // optional .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
  bool has_frame_end() const;
  void clear_frame_end();
  const ::perfetto::protos::FrameTimelineEvent_FrameEnd& frame_end() const;
  ::perfetto::protos::FrameTimelineEvent_FrameEnd* release_frame_end();
  ::perfetto::protos::FrameTimelineEvent_FrameEnd* mutable_frame_end();
  void set_allocated_frame_end(::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent)
 private:
  class _Internal;
  void set_has_expected_display_frame_start();
  void set_has_actual_display_frame_start();
  void set_has_expected_surface_frame_start();
  void set_has_actual_surface_frame_start();
  void set_has_frame_end();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union EventUnion {
    EventUnion() {}
    ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start_;
    ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start_;
    ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start_;
    ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start_;
    ::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameTimelineEvent_ExpectedSurfaceFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_cookie() {
  cookie_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ExpectedSurfaceFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.cookie)
  return cookie_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.cookie)
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ExpectedSurfaceFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.token)
  return token_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  token_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.token)
}

// optional int64 display_frame_token = 3;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_display_frame_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_display_frame_token() {
  display_frame_token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ExpectedSurfaceFrameStart::display_frame_token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.display_frame_token)
  return display_frame_token_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_display_frame_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  display_frame_token_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.display_frame_token)
}

// optional int32 pid = 4;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimelineEvent_ExpectedSurfaceFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.pid)
  return pid_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.pid)
}

// optional string layer_name = 5;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_layer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_layer_name() {
  layer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameTimelineEvent_ExpectedSurfaceFrameStart::layer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
  return layer_name_.GetNoArena();
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_layer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_layer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_layer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}
inline std::string* FrameTimelineEvent_ExpectedSurfaceFrameStart::mutable_layer_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
  return layer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FrameTimelineEvent_ExpectedSurfaceFrameStart::release_layer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
  if (!has_layer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return layer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}

// -------------------------------------------------------------------

// FrameTimelineEvent_ActualSurfaceFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_cookie() {
  cookie_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ActualSurfaceFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.cookie)
  return cookie_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.cookie)
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ActualSurfaceFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.token)
  return token_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  token_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.token)
}

// optional int64 display_frame_token = 3;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_display_frame_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_display_frame_token() {
  display_frame_token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ActualSurfaceFrameStart::display_frame_token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.display_frame_token)
  return display_frame_token_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_display_frame_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  display_frame_token_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.display_frame_token)
}

// optional int32 pid = 4;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimelineEvent_ActualSurfaceFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.pid)
  return pid_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.pid)
}

// optional string layer_name = 5;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_layer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_layer_name() {
  layer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameTimelineEvent_ActualSurfaceFrameStart::layer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
  return layer_name_.GetNoArena();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_layer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_layer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_layer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}
inline std::string* FrameTimelineEvent_ActualSurfaceFrameStart::mutable_layer_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
  return layer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FrameTimelineEvent_ActualSurfaceFrameStart::release_layer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
  if (!has_layer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return layer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}

// optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_present_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_present_type() {
  present_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::perfetto::protos::FrameTimelineEvent_PresentType FrameTimelineEvent_ActualSurfaceFrameStart::present_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.present_type)
  return static_cast< ::perfetto::protos::FrameTimelineEvent_PresentType >(present_type_);
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  present_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.present_type)
}

// optional bool on_time_finish = 7;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_on_time_finish() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_on_time_finish() {
  on_time_finish_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::on_time_finish() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.on_time_finish)
  return on_time_finish_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_on_time_finish(bool value) {
  _has_bits_[0] |= 0x00000040u;
  on_time_finish_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.on_time_finish)
}

// optional bool gpu_composition = 8;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_gpu_composition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_gpu_composition() {
  gpu_composition_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::gpu_composition() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.gpu_composition)
  return gpu_composition_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_gpu_composition(bool value) {
  _has_bits_[0] |= 0x00000080u;
  gpu_composition_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.gpu_composition)
}

// optional int32 jank_type = 9;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_jank_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_jank_type() {
  jank_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimelineEvent_ActualSurfaceFrameStart::jank_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.jank_type)
  return jank_type_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_jank_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  jank_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.jank_type)
}

// optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_prediction_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_prediction_type() {
  prediction_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::perfetto::protos::FrameTimelineEvent_PredictionType FrameTimelineEvent_ActualSurfaceFrameStart::prediction_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.prediction_type)
  return static_cast< ::perfetto::protos::FrameTimelineEvent_PredictionType >(prediction_type_);
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  prediction_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.prediction_type)
}

// -------------------------------------------------------------------

// FrameTimelineEvent_ExpectedDisplayFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ExpectedDisplayFrameStart::has_cookie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::clear_cookie() {
  cookie_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ExpectedDisplayFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.cookie)
  return cookie_;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  cookie_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.cookie)
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ExpectedDisplayFrameStart::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ExpectedDisplayFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.token)
  return token_;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  token_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.token)
}

// optional int32 pid = 3;
inline bool FrameTimelineEvent_ExpectedDisplayFrameStart::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimelineEvent_ExpectedDisplayFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.pid)
  return pid_;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.pid)
}

// -------------------------------------------------------------------

// FrameTimelineEvent_ActualDisplayFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_cookie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_cookie() {
  cookie_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ActualDisplayFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.cookie)
  return cookie_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  cookie_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.cookie)
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_token() {
  token_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_ActualDisplayFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.token)
  return token_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  token_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.token)
}

// optional int32 pid = 3;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimelineEvent_ActualDisplayFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.pid)
  return pid_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.pid)
}

// optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_present_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_present_type() {
  present_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::FrameTimelineEvent_PresentType FrameTimelineEvent_ActualDisplayFrameStart::present_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.present_type)
  return static_cast< ::perfetto::protos::FrameTimelineEvent_PresentType >(present_type_);
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  present_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.present_type)
}

// optional bool on_time_finish = 5;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_on_time_finish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_on_time_finish() {
  on_time_finish_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FrameTimelineEvent_ActualDisplayFrameStart::on_time_finish() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.on_time_finish)
  return on_time_finish_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_on_time_finish(bool value) {
  _has_bits_[0] |= 0x00000010u;
  on_time_finish_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.on_time_finish)
}

// optional bool gpu_composition = 6;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_gpu_composition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_gpu_composition() {
  gpu_composition_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FrameTimelineEvent_ActualDisplayFrameStart::gpu_composition() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.gpu_composition)
  return gpu_composition_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_gpu_composition(bool value) {
  _has_bits_[0] |= 0x00000020u;
  gpu_composition_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.gpu_composition)
}

// optional int32 jank_type = 7;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_jank_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_jank_type() {
  jank_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimelineEvent_ActualDisplayFrameStart::jank_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.jank_type)
  return jank_type_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_jank_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  jank_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.jank_type)
}

// optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_prediction_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_prediction_type() {
  prediction_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::perfetto::protos::FrameTimelineEvent_PredictionType FrameTimelineEvent_ActualDisplayFrameStart::prediction_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.prediction_type)
  return static_cast< ::perfetto::protos::FrameTimelineEvent_PredictionType >(prediction_type_);
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  prediction_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.prediction_type)
}

// -------------------------------------------------------------------

// FrameTimelineEvent_FrameEnd

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_FrameEnd::has_cookie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameTimelineEvent_FrameEnd::clear_cookie() {
  cookie_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimelineEvent_FrameEnd::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.FrameEnd.cookie)
  return cookie_;
}
inline void FrameTimelineEvent_FrameEnd::set_cookie(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  cookie_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.FrameEnd.cookie)
}

// -------------------------------------------------------------------

// FrameTimelineEvent

// optional .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
inline bool FrameTimelineEvent::has_expected_display_frame_start() const {
  return event_case() == kExpectedDisplayFrameStart;
}
inline void FrameTimelineEvent::set_has_expected_display_frame_start() {
  _oneof_case_[0] = kExpectedDisplayFrameStart;
}
inline void FrameTimelineEvent::clear_expected_display_frame_start() {
  if (has_expected_display_frame_start()) {
    delete event_.expected_display_frame_start_;
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* FrameTimelineEvent::release_expected_display_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  if (has_expected_display_frame_start()) {
    clear_has_event();
      ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* temp = event_.expected_display_frame_start_;
    event_.expected_display_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& FrameTimelineEvent::expected_display_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  return has_expected_display_frame_start()
      ? *event_.expected_display_frame_start_
      : *reinterpret_cast< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart*>(&::perfetto::protos::_FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_);
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* FrameTimelineEvent::mutable_expected_display_frame_start() {
  if (!has_expected_display_frame_start()) {
    clear_event();
    set_has_expected_display_frame_start();
    event_.expected_display_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  return event_.expected_display_frame_start_;
}

// optional .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
inline bool FrameTimelineEvent::has_actual_display_frame_start() const {
  return event_case() == kActualDisplayFrameStart;
}
inline void FrameTimelineEvent::set_has_actual_display_frame_start() {
  _oneof_case_[0] = kActualDisplayFrameStart;
}
inline void FrameTimelineEvent::clear_actual_display_frame_start() {
  if (has_actual_display_frame_start()) {
    delete event_.actual_display_frame_start_;
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* FrameTimelineEvent::release_actual_display_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  if (has_actual_display_frame_start()) {
    clear_has_event();
      ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* temp = event_.actual_display_frame_start_;
    event_.actual_display_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& FrameTimelineEvent::actual_display_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  return has_actual_display_frame_start()
      ? *event_.actual_display_frame_start_
      : *reinterpret_cast< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart*>(&::perfetto::protos::_FrameTimelineEvent_ActualDisplayFrameStart_default_instance_);
}
inline ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* FrameTimelineEvent::mutable_actual_display_frame_start() {
  if (!has_actual_display_frame_start()) {
    clear_event();
    set_has_actual_display_frame_start();
    event_.actual_display_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  return event_.actual_display_frame_start_;
}

// optional .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
inline bool FrameTimelineEvent::has_expected_surface_frame_start() const {
  return event_case() == kExpectedSurfaceFrameStart;
}
inline void FrameTimelineEvent::set_has_expected_surface_frame_start() {
  _oneof_case_[0] = kExpectedSurfaceFrameStart;
}
inline void FrameTimelineEvent::clear_expected_surface_frame_start() {
  if (has_expected_surface_frame_start()) {
    delete event_.expected_surface_frame_start_;
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* FrameTimelineEvent::release_expected_surface_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  if (has_expected_surface_frame_start()) {
    clear_has_event();
      ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* temp = event_.expected_surface_frame_start_;
    event_.expected_surface_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& FrameTimelineEvent::expected_surface_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  return has_expected_surface_frame_start()
      ? *event_.expected_surface_frame_start_
      : *reinterpret_cast< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart*>(&::perfetto::protos::_FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_);
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* FrameTimelineEvent::mutable_expected_surface_frame_start() {
  if (!has_expected_surface_frame_start()) {
    clear_event();
    set_has_expected_surface_frame_start();
    event_.expected_surface_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  return event_.expected_surface_frame_start_;
}

// optional .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
inline bool FrameTimelineEvent::has_actual_surface_frame_start() const {
  return event_case() == kActualSurfaceFrameStart;
}
inline void FrameTimelineEvent::set_has_actual_surface_frame_start() {
  _oneof_case_[0] = kActualSurfaceFrameStart;
}
inline void FrameTimelineEvent::clear_actual_surface_frame_start() {
  if (has_actual_surface_frame_start()) {
    delete event_.actual_surface_frame_start_;
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* FrameTimelineEvent::release_actual_surface_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  if (has_actual_surface_frame_start()) {
    clear_has_event();
      ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* temp = event_.actual_surface_frame_start_;
    event_.actual_surface_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& FrameTimelineEvent::actual_surface_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  return has_actual_surface_frame_start()
      ? *event_.actual_surface_frame_start_
      : *reinterpret_cast< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart*>(&::perfetto::protos::_FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_);
}
inline ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* FrameTimelineEvent::mutable_actual_surface_frame_start() {
  if (!has_actual_surface_frame_start()) {
    clear_event();
    set_has_actual_surface_frame_start();
    event_.actual_surface_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  return event_.actual_surface_frame_start_;
}

// optional .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
inline bool FrameTimelineEvent::has_frame_end() const {
  return event_case() == kFrameEnd;
}
inline void FrameTimelineEvent::set_has_frame_end() {
  _oneof_case_[0] = kFrameEnd;
}
inline void FrameTimelineEvent::clear_frame_end() {
  if (has_frame_end()) {
    delete event_.frame_end_;
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_FrameEnd* FrameTimelineEvent::release_frame_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.frame_end)
  if (has_frame_end()) {
    clear_has_event();
      ::perfetto::protos::FrameTimelineEvent_FrameEnd* temp = event_.frame_end_;
    event_.frame_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_FrameEnd& FrameTimelineEvent::frame_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.frame_end)
  return has_frame_end()
      ? *event_.frame_end_
      : *reinterpret_cast< ::perfetto::protos::FrameTimelineEvent_FrameEnd*>(&::perfetto::protos::_FrameTimelineEvent_FrameEnd_default_instance_);
}
inline ::perfetto::protos::FrameTimelineEvent_FrameEnd* FrameTimelineEvent::mutable_frame_end() {
  if (!has_frame_end()) {
    clear_event();
    set_has_frame_end();
    event_.frame_end_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.frame_end)
  return event_.frame_end_;
}

inline bool FrameTimelineEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void FrameTimelineEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline FrameTimelineEvent::EventCase FrameTimelineEvent::event_case() const {
  return FrameTimelineEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::FrameTimelineEvent_JankType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::FrameTimelineEvent_PresentType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::FrameTimelineEvent_PredictionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto
