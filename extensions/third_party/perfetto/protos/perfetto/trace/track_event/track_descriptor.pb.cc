// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_descriptor.proto

#include "protos/perfetto/trace/track_event/track_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto;
namespace perfetto {
namespace protos {
class TrackDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackDescriptor> _instance;
} _TrackDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::TrackDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto}, {
      &scc_info_ProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto.base,
      &scc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto.base,
      &scc_info_ThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto.base,
      &scc_info_ChromeThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto.base,
      &scc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto.base,}};

namespace perfetto {
namespace protos {

// ===================================================================

void TrackDescriptor::InitAsDefaultInstance() {
  ::perfetto::protos::_TrackDescriptor_default_instance_._instance.get_mutable()->process_ = const_cast< ::perfetto::protos::ProcessDescriptor*>(
      ::perfetto::protos::ProcessDescriptor::internal_default_instance());
  ::perfetto::protos::_TrackDescriptor_default_instance_._instance.get_mutable()->chrome_process_ = const_cast< ::perfetto::protos::ChromeProcessDescriptor*>(
      ::perfetto::protos::ChromeProcessDescriptor::internal_default_instance());
  ::perfetto::protos::_TrackDescriptor_default_instance_._instance.get_mutable()->thread_ = const_cast< ::perfetto::protos::ThreadDescriptor*>(
      ::perfetto::protos::ThreadDescriptor::internal_default_instance());
  ::perfetto::protos::_TrackDescriptor_default_instance_._instance.get_mutable()->chrome_thread_ = const_cast< ::perfetto::protos::ChromeThreadDescriptor*>(
      ::perfetto::protos::ChromeThreadDescriptor::internal_default_instance());
  ::perfetto::protos::_TrackDescriptor_default_instance_._instance.get_mutable()->counter_ = const_cast< ::perfetto::protos::CounterDescriptor*>(
      ::perfetto::protos::CounterDescriptor::internal_default_instance());
}
class TrackDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackDescriptor>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_parent_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ProcessDescriptor& process(const TrackDescriptor* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::ChromeProcessDescriptor& chrome_process(const TrackDescriptor* msg);
  static void set_has_chrome_process(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ThreadDescriptor& thread(const TrackDescriptor* msg);
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::ChromeThreadDescriptor& chrome_thread(const TrackDescriptor* msg);
  static void set_has_chrome_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::CounterDescriptor& counter(const TrackDescriptor* msg);
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::perfetto::protos::ProcessDescriptor&
TrackDescriptor::_Internal::process(const TrackDescriptor* msg) {
  return *msg->process_;
}
const ::perfetto::protos::ChromeProcessDescriptor&
TrackDescriptor::_Internal::chrome_process(const TrackDescriptor* msg) {
  return *msg->chrome_process_;
}
const ::perfetto::protos::ThreadDescriptor&
TrackDescriptor::_Internal::thread(const TrackDescriptor* msg) {
  return *msg->thread_;
}
const ::perfetto::protos::ChromeThreadDescriptor&
TrackDescriptor::_Internal::chrome_thread(const TrackDescriptor* msg) {
  return *msg->chrome_thread_;
}
const ::perfetto::protos::CounterDescriptor&
TrackDescriptor::_Internal::counter(const TrackDescriptor* msg) {
  return *msg->counter_;
}
void TrackDescriptor::clear_process() {
  if (process_ != nullptr) process_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrackDescriptor::clear_chrome_process() {
  if (chrome_process_ != nullptr) chrome_process_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TrackDescriptor::clear_thread() {
  if (thread_ != nullptr) thread_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TrackDescriptor::clear_chrome_thread() {
  if (chrome_thread_ != nullptr) chrome_thread_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TrackDescriptor::clear_counter() {
  if (counter_ != nullptr) counter_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
TrackDescriptor::TrackDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackDescriptor)
}
TrackDescriptor::TrackDescriptor(const TrackDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_process()) {
    process_ = new ::perfetto::protos::ProcessDescriptor(*from.process_);
  } else {
    process_ = nullptr;
  }
  if (from.has_thread()) {
    thread_ = new ::perfetto::protos::ThreadDescriptor(*from.thread_);
  } else {
    thread_ = nullptr;
  }
  if (from.has_chrome_process()) {
    chrome_process_ = new ::perfetto::protos::ChromeProcessDescriptor(*from.chrome_process_);
  } else {
    chrome_process_ = nullptr;
  }
  if (from.has_chrome_thread()) {
    chrome_thread_ = new ::perfetto::protos::ChromeThreadDescriptor(*from.chrome_thread_);
  } else {
    chrome_thread_ = nullptr;
  }
  if (from.has_counter()) {
    counter_ = new ::perfetto::protos::CounterDescriptor(*from.counter_);
  } else {
    counter_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_uuid_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(parent_uuid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackDescriptor)
}

void TrackDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&process_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_uuid_) -
      reinterpret_cast<char*>(&process_)) + sizeof(parent_uuid_));
}

TrackDescriptor::~TrackDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackDescriptor)
  SharedDtor();
}

void TrackDescriptor::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete process_;
  if (this != internal_default_instance()) delete thread_;
  if (this != internal_default_instance()) delete chrome_process_;
  if (this != internal_default_instance()) delete chrome_thread_;
  if (this != internal_default_instance()) delete counter_;
}

void TrackDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackDescriptor& TrackDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void TrackDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(thread_ != nullptr);
      thread_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chrome_process_ != nullptr);
      chrome_process_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(chrome_thread_ != nullptr);
      chrome_thread_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(counter_ != nullptr);
      counter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_uuid_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(parent_uuid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProcessDescriptor process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ThreadDescriptor thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_thread(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 parent_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_parent_uuid(&has_bits);
          parent_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_chrome_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_chrome_thread(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CounterDescriptor counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uuid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProcessDescriptor process = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ThreadDescriptor thread = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 parent_uuid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_parent_uuid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_thread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CounterDescriptor counter = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_counter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uuid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .perfetto.protos.ProcessDescriptor process = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::process(this), output);
  }

  // optional .perfetto.protos.ThreadDescriptor thread = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::thread(this), output);
  }

  // optional uint64 parent_uuid = 5;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->parent_uuid(), output);
  }

  // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::chrome_process(this), output);
  }

  // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::chrome_thread(this), output);
  }

  // optional .perfetto.protos.CounterDescriptor counter = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::counter(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackDescriptor)
}

size_t TrackDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .perfetto.protos.ProcessDescriptor process = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

    // optional .perfetto.protos.ThreadDescriptor thread = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thread_);
    }

    // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_process_);
    }

    // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_thread_);
    }

    // optional .perfetto.protos.CounterDescriptor counter = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *counter_);
    }

    // optional uint64 uuid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 parent_uuid = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->parent_uuid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackDescriptor*>(
      &from));
}

void TrackDescriptor::MergeFrom(const TrackDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_process()->::perfetto::protos::ProcessDescriptor::MergeFrom(from.process());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_thread()->::perfetto::protos::ThreadDescriptor::MergeFrom(from.thread());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_chrome_process()->::perfetto::protos::ChromeProcessDescriptor::MergeFrom(from.chrome_process());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_chrome_thread()->::perfetto::protos::ChromeThreadDescriptor::MergeFrom(from.chrome_thread());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_counter()->::perfetto::protos::CounterDescriptor::MergeFrom(from.counter());
    }
    if (cached_has_bits & 0x00000040u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000080u) {
      parent_uuid_ = from.parent_uuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackDescriptor::CopyFrom(const TrackDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDescriptor::IsInitialized() const {
  return true;
}

void TrackDescriptor::InternalSwap(TrackDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(process_, other->process_);
  swap(thread_, other->thread_);
  swap(chrome_process_, other->chrome_process_);
  swap(chrome_thread_, other->chrome_thread_);
  swap(counter_, other->counter_);
  swap(uuid_, other->uuid_);
  swap(parent_uuid_, other->parent_uuid_);
}

std::string TrackDescriptor::GetTypeName() const {
  return "perfetto.protos.TrackDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::TrackDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
