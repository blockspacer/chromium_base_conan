// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_thread_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ChromeThreadDescriptor;
class ChromeThreadDescriptorDefaultTypeInternal;
extern ChromeThreadDescriptorDefaultTypeInternal _ChromeThreadDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ChromeThreadDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::ChromeThreadDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ChromeThreadDescriptor_ThreadType : int {
  ChromeThreadDescriptor_ThreadType_THREAD_UNSPECIFIED = 0,
  ChromeThreadDescriptor_ThreadType_THREAD_MAIN = 1,
  ChromeThreadDescriptor_ThreadType_THREAD_IO = 2,
  ChromeThreadDescriptor_ThreadType_THREAD_NETWORK_SERVICE = 12,
  ChromeThreadDescriptor_ThreadType_THREAD_POOL_BG_WORKER = 3,
  ChromeThreadDescriptor_ThreadType_THREAD_POOL_FG_WORKER = 4,
  ChromeThreadDescriptor_ThreadType_THREAD_POOL_BG_BLOCKING = 6,
  ChromeThreadDescriptor_ThreadType_THREAD_POOL_FG_BLOCKING = 5,
  ChromeThreadDescriptor_ThreadType_THREAD_POOL_SERVICE = 7,
  ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR = 8,
  ChromeThreadDescriptor_ThreadType_THREAD_VIZ_COMPOSITOR = 9,
  ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR_WORKER = 10,
  ChromeThreadDescriptor_ThreadType_THREAD_SERVICE_WORKER = 11,
  ChromeThreadDescriptor_ThreadType_THREAD_MEMORY_INFRA = 50,
  ChromeThreadDescriptor_ThreadType_THREAD_SAMPLING_PROFILER = 51
};
bool ChromeThreadDescriptor_ThreadType_IsValid(int value);
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor_ThreadType_ThreadType_MIN = ChromeThreadDescriptor_ThreadType_THREAD_UNSPECIFIED;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor_ThreadType_ThreadType_MAX = ChromeThreadDescriptor_ThreadType_THREAD_SAMPLING_PROFILER;
constexpr int ChromeThreadDescriptor_ThreadType_ThreadType_ARRAYSIZE = ChromeThreadDescriptor_ThreadType_ThreadType_MAX + 1;

const std::string& ChromeThreadDescriptor_ThreadType_Name(ChromeThreadDescriptor_ThreadType value);
template<typename T>
inline const std::string& ChromeThreadDescriptor_ThreadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeThreadDescriptor_ThreadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeThreadDescriptor_ThreadType_Name.");
  return ChromeThreadDescriptor_ThreadType_Name(static_cast<ChromeThreadDescriptor_ThreadType>(enum_t_value));
}
bool ChromeThreadDescriptor_ThreadType_Parse(
    const std::string& name, ChromeThreadDescriptor_ThreadType* value);
// ===================================================================

class ChromeThreadDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeThreadDescriptor) */ {
 public:
  ChromeThreadDescriptor();
  virtual ~ChromeThreadDescriptor();

  ChromeThreadDescriptor(const ChromeThreadDescriptor& from);
  ChromeThreadDescriptor(ChromeThreadDescriptor&& from) noexcept
    : ChromeThreadDescriptor() {
    *this = ::std::move(from);
  }

  inline ChromeThreadDescriptor& operator=(const ChromeThreadDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeThreadDescriptor& operator=(ChromeThreadDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeThreadDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeThreadDescriptor* internal_default_instance() {
    return reinterpret_cast<const ChromeThreadDescriptor*>(
               &_ChromeThreadDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeThreadDescriptor& a, ChromeThreadDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeThreadDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeThreadDescriptor* New() const final {
    return CreateMaybeMessage<ChromeThreadDescriptor>(nullptr);
  }

  ChromeThreadDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeThreadDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeThreadDescriptor& from);
  void MergeFrom(const ChromeThreadDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeThreadDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeThreadDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeThreadDescriptor_ThreadType ThreadType;
  static constexpr ThreadType THREAD_UNSPECIFIED =
    ChromeThreadDescriptor_ThreadType_THREAD_UNSPECIFIED;
  static constexpr ThreadType THREAD_MAIN =
    ChromeThreadDescriptor_ThreadType_THREAD_MAIN;
  static constexpr ThreadType THREAD_IO =
    ChromeThreadDescriptor_ThreadType_THREAD_IO;
  static constexpr ThreadType THREAD_NETWORK_SERVICE =
    ChromeThreadDescriptor_ThreadType_THREAD_NETWORK_SERVICE;
  static constexpr ThreadType THREAD_POOL_BG_WORKER =
    ChromeThreadDescriptor_ThreadType_THREAD_POOL_BG_WORKER;
  static constexpr ThreadType THREAD_POOL_FG_WORKER =
    ChromeThreadDescriptor_ThreadType_THREAD_POOL_FG_WORKER;
  static constexpr ThreadType THREAD_POOL_BG_BLOCKING =
    ChromeThreadDescriptor_ThreadType_THREAD_POOL_BG_BLOCKING;
  static constexpr ThreadType THREAD_POOL_FG_BLOCKING =
    ChromeThreadDescriptor_ThreadType_THREAD_POOL_FG_BLOCKING;
  static constexpr ThreadType THREAD_POOL_SERVICE =
    ChromeThreadDescriptor_ThreadType_THREAD_POOL_SERVICE;
  static constexpr ThreadType THREAD_COMPOSITOR =
    ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR;
  static constexpr ThreadType THREAD_VIZ_COMPOSITOR =
    ChromeThreadDescriptor_ThreadType_THREAD_VIZ_COMPOSITOR;
  static constexpr ThreadType THREAD_COMPOSITOR_WORKER =
    ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR_WORKER;
  static constexpr ThreadType THREAD_SERVICE_WORKER =
    ChromeThreadDescriptor_ThreadType_THREAD_SERVICE_WORKER;
  static constexpr ThreadType THREAD_MEMORY_INFRA =
    ChromeThreadDescriptor_ThreadType_THREAD_MEMORY_INFRA;
  static constexpr ThreadType THREAD_SAMPLING_PROFILER =
    ChromeThreadDescriptor_ThreadType_THREAD_SAMPLING_PROFILER;
  static inline bool ThreadType_IsValid(int value) {
    return ChromeThreadDescriptor_ThreadType_IsValid(value);
  }
  static constexpr ThreadType ThreadType_MIN =
    ChromeThreadDescriptor_ThreadType_ThreadType_MIN;
  static constexpr ThreadType ThreadType_MAX =
    ChromeThreadDescriptor_ThreadType_ThreadType_MAX;
  static constexpr int ThreadType_ARRAYSIZE =
    ChromeThreadDescriptor_ThreadType_ThreadType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ThreadType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThreadType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThreadType_Name.");
    return ChromeThreadDescriptor_ThreadType_Name(enum_t_value);
  }
  static inline bool ThreadType_Parse(const std::string& name,
      ThreadType* value) {
    return ChromeThreadDescriptor_ThreadType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThreadTypeFieldNumber = 1,
    kLegacySortIndexFieldNumber = 2,
  };
  // optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;
  bool has_thread_type() const;
  void clear_thread_type();
  ::perfetto::protos::ChromeThreadDescriptor_ThreadType thread_type() const;
  void set_thread_type(::perfetto::protos::ChromeThreadDescriptor_ThreadType value);

  // optional int32 legacy_sort_index = 2;
  bool has_legacy_sort_index() const;
  void clear_legacy_sort_index();
  ::PROTOBUF_NAMESPACE_ID::int32 legacy_sort_index() const;
  void set_legacy_sort_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeThreadDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int thread_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 legacy_sort_index_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeThreadDescriptor

// optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;
inline bool ChromeThreadDescriptor::has_thread_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeThreadDescriptor::clear_thread_type() {
  thread_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::thread_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeThreadDescriptor.thread_type)
  return static_cast< ::perfetto::protos::ChromeThreadDescriptor_ThreadType >(thread_type_);
}
inline void ChromeThreadDescriptor::set_thread_type(::perfetto::protos::ChromeThreadDescriptor_ThreadType value) {
  assert(::perfetto::protos::ChromeThreadDescriptor_ThreadType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeThreadDescriptor.thread_type)
}

// optional int32 legacy_sort_index = 2;
inline bool ChromeThreadDescriptor::has_legacy_sort_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeThreadDescriptor::clear_legacy_sort_index() {
  legacy_sort_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChromeThreadDescriptor::legacy_sort_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeThreadDescriptor.legacy_sort_index)
  return legacy_sort_index_;
}
inline void ChromeThreadDescriptor::set_legacy_sort_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  legacy_sort_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeThreadDescriptor.legacy_sort_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ChromeThreadDescriptor_ThreadType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto
