// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/debug_annotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class DebugAnnotation;
class DebugAnnotationDefaultTypeInternal;
extern DebugAnnotationDefaultTypeInternal _DebugAnnotation_default_instance_;
class DebugAnnotationName;
class DebugAnnotationNameDefaultTypeInternal;
extern DebugAnnotationNameDefaultTypeInternal _DebugAnnotationName_default_instance_;
class DebugAnnotation_NestedValue;
class DebugAnnotation_NestedValueDefaultTypeInternal;
extern DebugAnnotation_NestedValueDefaultTypeInternal _DebugAnnotation_NestedValue_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::DebugAnnotation* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotation>(Arena*);
template<> ::perfetto::protos::DebugAnnotationName* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotationName>(Arena*);
template<> ::perfetto::protos::DebugAnnotation_NestedValue* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotation_NestedValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum DebugAnnotation_NestedValue_NestedType : int {
  DebugAnnotation_NestedValue_NestedType_UNSPECIFIED = 0,
  DebugAnnotation_NestedValue_NestedType_DICT = 1,
  DebugAnnotation_NestedValue_NestedType_ARRAY = 2
};
bool DebugAnnotation_NestedValue_NestedType_IsValid(int value);
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue_NestedType_NestedType_MIN = DebugAnnotation_NestedValue_NestedType_UNSPECIFIED;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue_NestedType_NestedType_MAX = DebugAnnotation_NestedValue_NestedType_ARRAY;
constexpr int DebugAnnotation_NestedValue_NestedType_NestedType_ARRAYSIZE = DebugAnnotation_NestedValue_NestedType_NestedType_MAX + 1;

const std::string& DebugAnnotation_NestedValue_NestedType_Name(DebugAnnotation_NestedValue_NestedType value);
template<typename T>
inline const std::string& DebugAnnotation_NestedValue_NestedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugAnnotation_NestedValue_NestedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugAnnotation_NestedValue_NestedType_Name.");
  return DebugAnnotation_NestedValue_NestedType_Name(static_cast<DebugAnnotation_NestedValue_NestedType>(enum_t_value));
}
bool DebugAnnotation_NestedValue_NestedType_Parse(
    const std::string& name, DebugAnnotation_NestedValue_NestedType* value);
// ===================================================================

class DebugAnnotation_NestedValue :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotation.NestedValue) */ {
 public:
  DebugAnnotation_NestedValue();
  virtual ~DebugAnnotation_NestedValue();

  DebugAnnotation_NestedValue(const DebugAnnotation_NestedValue& from);
  DebugAnnotation_NestedValue(DebugAnnotation_NestedValue&& from) noexcept
    : DebugAnnotation_NestedValue() {
    *this = ::std::move(from);
  }

  inline DebugAnnotation_NestedValue& operator=(const DebugAnnotation_NestedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotation_NestedValue& operator=(DebugAnnotation_NestedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DebugAnnotation_NestedValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugAnnotation_NestedValue* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotation_NestedValue*>(
               &_DebugAnnotation_NestedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DebugAnnotation_NestedValue& a, DebugAnnotation_NestedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotation_NestedValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugAnnotation_NestedValue* New() const final {
    return CreateMaybeMessage<DebugAnnotation_NestedValue>(nullptr);
  }

  DebugAnnotation_NestedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugAnnotation_NestedValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DebugAnnotation_NestedValue& from);
  void MergeFrom(const DebugAnnotation_NestedValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugAnnotation_NestedValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DebugAnnotation.NestedValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DebugAnnotation_NestedValue_NestedType NestedType;
  static constexpr NestedType UNSPECIFIED =
    DebugAnnotation_NestedValue_NestedType_UNSPECIFIED;
  static constexpr NestedType DICT =
    DebugAnnotation_NestedValue_NestedType_DICT;
  static constexpr NestedType ARRAY =
    DebugAnnotation_NestedValue_NestedType_ARRAY;
  static inline bool NestedType_IsValid(int value) {
    return DebugAnnotation_NestedValue_NestedType_IsValid(value);
  }
  static constexpr NestedType NestedType_MIN =
    DebugAnnotation_NestedValue_NestedType_NestedType_MIN;
  static constexpr NestedType NestedType_MAX =
    DebugAnnotation_NestedValue_NestedType_NestedType_MAX;
  static constexpr int NestedType_ARRAYSIZE =
    DebugAnnotation_NestedValue_NestedType_NestedType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NestedType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NestedType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NestedType_Name.");
    return DebugAnnotation_NestedValue_NestedType_Name(enum_t_value);
  }
  static inline bool NestedType_Parse(const std::string& name,
      NestedType* value) {
    return DebugAnnotation_NestedValue_NestedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDictKeysFieldNumber = 2,
    kDictValuesFieldNumber = 3,
    kArrayValuesFieldNumber = 4,
    kStringValueFieldNumber = 8,
    kNestedTypeFieldNumber = 1,
    kBoolValueFieldNumber = 7,
    kIntValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
  };
  // repeated string dict_keys = 2;
  int dict_keys_size() const;
  void clear_dict_keys();
  const std::string& dict_keys(int index) const;
  std::string* mutable_dict_keys(int index);
  void set_dict_keys(int index, const std::string& value);
  void set_dict_keys(int index, std::string&& value);
  void set_dict_keys(int index, const char* value);
  void set_dict_keys(int index, const char* value, size_t size);
  std::string* add_dict_keys();
  void add_dict_keys(const std::string& value);
  void add_dict_keys(std::string&& value);
  void add_dict_keys(const char* value);
  void add_dict_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dict_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dict_keys();

  // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
  int dict_values_size() const;
  void clear_dict_values();
  ::perfetto::protos::DebugAnnotation_NestedValue* mutable_dict_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
      mutable_dict_values();
  const ::perfetto::protos::DebugAnnotation_NestedValue& dict_values(int index) const;
  ::perfetto::protos::DebugAnnotation_NestedValue* add_dict_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
      dict_values() const;

  // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
  int array_values_size() const;
  void clear_array_values();
  ::perfetto::protos::DebugAnnotation_NestedValue* mutable_array_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
      mutable_array_values();
  const ::perfetto::protos::DebugAnnotation_NestedValue& array_values(int index) const;
  ::perfetto::protos::DebugAnnotation_NestedValue* add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
      array_values() const;

  // optional string string_value = 8;
  bool has_string_value() const;
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);

  // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
  bool has_nested_type() const;
  void clear_nested_type();
  ::perfetto::protos::DebugAnnotation_NestedValue_NestedType nested_type() const;
  void set_nested_type(::perfetto::protos::DebugAnnotation_NestedValue_NestedType value);

  // optional bool bool_value = 7;
  bool has_bool_value() const;
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional int64 int_value = 5;
  bool has_int_value() const;
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double double_value = 6;
  bool has_double_value() const;
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotation.NestedValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dict_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue > dict_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue > array_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  int nested_type_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
  double double_value_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class DebugAnnotation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotation) */ {
 public:
  DebugAnnotation();
  virtual ~DebugAnnotation();

  DebugAnnotation(const DebugAnnotation& from);
  DebugAnnotation(DebugAnnotation&& from) noexcept
    : DebugAnnotation() {
    *this = ::std::move(from);
  }

  inline DebugAnnotation& operator=(const DebugAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotation& operator=(DebugAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DebugAnnotation& default_instance();

  enum NameFieldCase {
    kNameIid = 1,
    kName = 10,
    NAME_FIELD_NOT_SET = 0,
  };

  enum ValueCase {
    kBoolValue = 2,
    kUintValue = 3,
    kIntValue = 4,
    kDoubleValue = 5,
    kStringValue = 6,
    kPointerValue = 7,
    kNestedValue = 8,
    kLegacyJsonValue = 9,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugAnnotation* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotation*>(
               &_DebugAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DebugAnnotation& a, DebugAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugAnnotation* New() const final {
    return CreateMaybeMessage<DebugAnnotation>(nullptr);
  }

  DebugAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugAnnotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DebugAnnotation& from);
  void MergeFrom(const DebugAnnotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugAnnotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DebugAnnotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DebugAnnotation_NestedValue NestedValue;

  // accessors -------------------------------------------------------

  enum : int {
    kNameIidFieldNumber = 1,
    kNameFieldNumber = 10,
    kBoolValueFieldNumber = 2,
    kUintValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kPointerValueFieldNumber = 7,
    kNestedValueFieldNumber = 8,
    kLegacyJsonValueFieldNumber = 9,
  };
  // optional uint64 name_iid = 1;
  bool has_name_iid() const;
  void clear_name_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_iid() const;
  void set_name_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional uint64 uint_value = 3;
  bool has_uint_value() const;
  void clear_uint_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_value() const;
  void set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double double_value = 5;
  bool has_double_value() const;
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);

  // optional string string_value = 6;
  bool has_string_value() const;
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);

  // optional uint64 pointer_value = 7;
  bool has_pointer_value() const;
  void clear_pointer_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 pointer_value() const;
  void set_pointer_value(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
  bool has_nested_value() const;
  void clear_nested_value();
  const ::perfetto::protos::DebugAnnotation_NestedValue& nested_value() const;
  ::perfetto::protos::DebugAnnotation_NestedValue* release_nested_value();
  ::perfetto::protos::DebugAnnotation_NestedValue* mutable_nested_value();
  void set_allocated_nested_value(::perfetto::protos::DebugAnnotation_NestedValue* nested_value);

  // optional string legacy_json_value = 9;
  bool has_legacy_json_value() const;
  void clear_legacy_json_value();
  const std::string& legacy_json_value() const;
  void set_legacy_json_value(const std::string& value);
  void set_legacy_json_value(std::string&& value);
  void set_legacy_json_value(const char* value);
  void set_legacy_json_value(const char* value, size_t size);
  std::string* mutable_legacy_json_value();
  std::string* release_legacy_json_value();
  void set_allocated_legacy_json_value(std::string* legacy_json_value);

  void clear_name_field();
  NameFieldCase name_field_case() const;
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotation)
 private:
  class _Internal;
  void set_has_name_iid();
  void set_has_name();
  void set_has_bool_value();
  void set_has_uint_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_pointer_value();
  void set_has_nested_value();
  void set_has_legacy_json_value();

  inline bool has_name_field() const;
  inline void clear_has_name_field();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union NameFieldUnion {
    NameFieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 name_iid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } name_field_;
  union ValueUnion {
    ValueUnion() {}
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 pointer_value_;
    ::perfetto::protos::DebugAnnotation_NestedValue* nested_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_json_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class DebugAnnotationName :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotationName) */ {
 public:
  DebugAnnotationName();
  virtual ~DebugAnnotationName();

  DebugAnnotationName(const DebugAnnotationName& from);
  DebugAnnotationName(DebugAnnotationName&& from) noexcept
    : DebugAnnotationName() {
    *this = ::std::move(from);
  }

  inline DebugAnnotationName& operator=(const DebugAnnotationName& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotationName& operator=(DebugAnnotationName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DebugAnnotationName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugAnnotationName* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotationName*>(
               &_DebugAnnotationName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DebugAnnotationName& a, DebugAnnotationName& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotationName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugAnnotationName* New() const final {
    return CreateMaybeMessage<DebugAnnotationName>(nullptr);
  }

  DebugAnnotationName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugAnnotationName>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DebugAnnotationName& from);
  void MergeFrom(const DebugAnnotationName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugAnnotationName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DebugAnnotationName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotationName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DebugAnnotation_NestedValue

// optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
inline bool DebugAnnotation_NestedValue::has_nested_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugAnnotation_NestedValue::clear_nested_type() {
  nested_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::nested_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.nested_type)
  return static_cast< ::perfetto::protos::DebugAnnotation_NestedValue_NestedType >(nested_type_);
}
inline void DebugAnnotation_NestedValue::set_nested_type(::perfetto::protos::DebugAnnotation_NestedValue_NestedType value) {
  assert(::perfetto::protos::DebugAnnotation_NestedValue_NestedType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  nested_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.nested_type)
}

// repeated string dict_keys = 2;
inline int DebugAnnotation_NestedValue::dict_keys_size() const {
  return dict_keys_.size();
}
inline void DebugAnnotation_NestedValue::clear_dict_keys() {
  dict_keys_.Clear();
}
inline const std::string& DebugAnnotation_NestedValue::dict_keys(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return dict_keys_.Get(index);
}
inline std::string* DebugAnnotation_NestedValue::mutable_dict_keys(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return dict_keys_.Mutable(index);
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  dict_keys_.Mutable(index)->assign(value);
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  dict_keys_.Mutable(index)->assign(std::move(value));
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dict_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, const char* value, size_t size) {
  dict_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline std::string* DebugAnnotation_NestedValue::add_dict_keys() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return dict_keys_.Add();
}
inline void DebugAnnotation_NestedValue::add_dict_keys(const std::string& value) {
  dict_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(std::string&& value) {
  dict_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dict_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(const char* value, size_t size) {
  dict_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugAnnotation_NestedValue::dict_keys() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return dict_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugAnnotation_NestedValue::mutable_dict_keys() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return &dict_keys_;
}

// repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
inline int DebugAnnotation_NestedValue::dict_values_size() const {
  return dict_values_.size();
}
inline void DebugAnnotation_NestedValue::clear_dict_values() {
  dict_values_.Clear();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::mutable_dict_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return dict_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
DebugAnnotation_NestedValue::mutable_dict_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return &dict_values_;
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation_NestedValue::dict_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return dict_values_.Get(index);
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::add_dict_values() {
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return dict_values_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
DebugAnnotation_NestedValue::dict_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return dict_values_;
}

// repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
inline int DebugAnnotation_NestedValue::array_values_size() const {
  return array_values_.size();
}
inline void DebugAnnotation_NestedValue::clear_array_values() {
  array_values_.Clear();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return array_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
DebugAnnotation_NestedValue::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return &array_values_;
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation_NestedValue::array_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return array_values_.Get(index);
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::add_array_values() {
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return array_values_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
DebugAnnotation_NestedValue::array_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return array_values_;
}

// optional int64 int_value = 5;
inline bool DebugAnnotation_NestedValue::has_int_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DebugAnnotation_NestedValue::clear_int_value() {
  int_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugAnnotation_NestedValue::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.int_value)
  return int_value_;
}
inline void DebugAnnotation_NestedValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.int_value)
}

// optional double double_value = 6;
inline bool DebugAnnotation_NestedValue::has_double_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DebugAnnotation_NestedValue::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DebugAnnotation_NestedValue::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.double_value)
  return double_value_;
}
inline void DebugAnnotation_NestedValue::set_double_value(double value) {
  _has_bits_[0] |= 0x00000010u;
  double_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.double_value)
}

// optional bool bool_value = 7;
inline bool DebugAnnotation_NestedValue::has_bool_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugAnnotation_NestedValue::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DebugAnnotation_NestedValue::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.bool_value)
  return bool_value_;
}
inline void DebugAnnotation_NestedValue::set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.bool_value)
}

// optional string string_value = 8;
inline bool DebugAnnotation_NestedValue::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugAnnotation_NestedValue::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugAnnotation_NestedValue::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.string_value)
  return string_value_.GetNoArena();
}
inline void DebugAnnotation_NestedValue::set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}
inline void DebugAnnotation_NestedValue::set_string_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}
inline void DebugAnnotation_NestedValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}
inline void DebugAnnotation_NestedValue::set_string_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}
inline std::string* DebugAnnotation_NestedValue::mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.string_value)
  return string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugAnnotation_NestedValue::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.NestedValue.string_value)
  if (!has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugAnnotation_NestedValue::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}

// -------------------------------------------------------------------

// DebugAnnotation

// optional uint64 name_iid = 1;
inline bool DebugAnnotation::has_name_iid() const {
  return name_field_case() == kNameIid;
}
inline void DebugAnnotation::set_has_name_iid() {
  _oneof_case_[0] = kNameIid;
}
inline void DebugAnnotation::clear_name_iid() {
  if (has_name_iid()) {
    name_field_.name_iid_ = PROTOBUF_ULONGLONG(0);
    clear_has_name_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DebugAnnotation::name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.name_iid)
  if (has_name_iid()) {
    return name_field_.name_iid_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void DebugAnnotation::set_name_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_name_iid()) {
    clear_name_field();
    set_has_name_iid();
  }
  name_field_.name_iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.name_iid)
}

// optional string name = 10;
inline bool DebugAnnotation::has_name() const {
  return name_field_case() == kName;
}
inline void DebugAnnotation::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void DebugAnnotation::clear_name() {
  if (has_name()) {
    name_field_.name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_name_field();
  }
}
inline const std::string& DebugAnnotation::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.name)
  if (has_name()) {
    return name_field_.name_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DebugAnnotation::set_name(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.name)
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.name)
}
inline void DebugAnnotation::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.name)
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DebugAnnotation.name)
}
inline void DebugAnnotation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotation.name)
}
inline void DebugAnnotation::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotation.name)
}
inline std::string* DebugAnnotation::mutable_name() {
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.name)
  return name_field_.name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugAnnotation::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.name)
  if (has_name()) {
    clear_has_name_field();
    return name_field_.name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DebugAnnotation::set_allocated_name(std::string* name) {
  if (has_name_field()) {
    clear_name_field();
  }
  if (name != nullptr) {
    set_has_name();
    name_field_.name_.UnsafeSetDefault(name);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.name)
}

// optional bool bool_value = 2;
inline bool DebugAnnotation::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void DebugAnnotation::set_has_bool_value() {
  _oneof_case_[1] = kBoolValue;
}
inline void DebugAnnotation::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool DebugAnnotation::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void DebugAnnotation::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.bool_value)
}

// optional uint64 uint_value = 3;
inline bool DebugAnnotation::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void DebugAnnotation::set_has_uint_value() {
  _oneof_case_[1] = kUintValue;
}
inline void DebugAnnotation::clear_uint_value() {
  if (has_uint_value()) {
    value_.uint_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DebugAnnotation::uint_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.uint_value)
  if (has_uint_value()) {
    return value_.uint_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void DebugAnnotation::set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.uint_value)
}

// optional int64 int_value = 4;
inline bool DebugAnnotation::has_int_value() const {
  return value_case() == kIntValue;
}
inline void DebugAnnotation::set_has_int_value() {
  _oneof_case_[1] = kIntValue;
}
inline void DebugAnnotation::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugAnnotation::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void DebugAnnotation::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.int_value)
}

// optional double double_value = 5;
inline bool DebugAnnotation::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void DebugAnnotation::set_has_double_value() {
  _oneof_case_[1] = kDoubleValue;
}
inline void DebugAnnotation::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double DebugAnnotation::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void DebugAnnotation::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.double_value)
}

// optional string string_value = 6;
inline bool DebugAnnotation::has_string_value() const {
  return value_case() == kStringValue;
}
inline void DebugAnnotation::set_has_string_value() {
  _oneof_case_[1] = kStringValue;
}
inline void DebugAnnotation::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& DebugAnnotation::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DebugAnnotation::set_string_value(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.string_value)
}
inline void DebugAnnotation::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DebugAnnotation.string_value)
}
inline void DebugAnnotation::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotation.string_value)
}
inline void DebugAnnotation::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotation.string_value)
}
inline std::string* DebugAnnotation::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.string_value)
  return value_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugAnnotation::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DebugAnnotation::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.string_value)
}

// optional uint64 pointer_value = 7;
inline bool DebugAnnotation::has_pointer_value() const {
  return value_case() == kPointerValue;
}
inline void DebugAnnotation::set_has_pointer_value() {
  _oneof_case_[1] = kPointerValue;
}
inline void DebugAnnotation::clear_pointer_value() {
  if (has_pointer_value()) {
    value_.pointer_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DebugAnnotation::pointer_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.pointer_value)
  if (has_pointer_value()) {
    return value_.pointer_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void DebugAnnotation::set_pointer_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_pointer_value()) {
    clear_value();
    set_has_pointer_value();
  }
  value_.pointer_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.pointer_value)
}

// optional .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
inline bool DebugAnnotation::has_nested_value() const {
  return value_case() == kNestedValue;
}
inline void DebugAnnotation::set_has_nested_value() {
  _oneof_case_[1] = kNestedValue;
}
inline void DebugAnnotation::clear_nested_value() {
  if (has_nested_value()) {
    delete value_.nested_value_;
    clear_has_value();
  }
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation::release_nested_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.nested_value)
  if (has_nested_value()) {
    clear_has_value();
      ::perfetto::protos::DebugAnnotation_NestedValue* temp = value_.nested_value_;
    value_.nested_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation::nested_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.nested_value)
  return has_nested_value()
      ? *value_.nested_value_
      : *reinterpret_cast< ::perfetto::protos::DebugAnnotation_NestedValue*>(&::perfetto::protos::_DebugAnnotation_NestedValue_default_instance_);
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation::mutable_nested_value() {
  if (!has_nested_value()) {
    clear_value();
    set_has_nested_value();
    value_.nested_value_ = CreateMaybeMessage< ::perfetto::protos::DebugAnnotation_NestedValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.nested_value)
  return value_.nested_value_;
}

// optional string legacy_json_value = 9;
inline bool DebugAnnotation::has_legacy_json_value() const {
  return value_case() == kLegacyJsonValue;
}
inline void DebugAnnotation::set_has_legacy_json_value() {
  _oneof_case_[1] = kLegacyJsonValue;
}
inline void DebugAnnotation::clear_legacy_json_value() {
  if (has_legacy_json_value()) {
    value_.legacy_json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& DebugAnnotation::legacy_json_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.legacy_json_value)
  if (has_legacy_json_value()) {
    return value_.legacy_json_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DebugAnnotation::set_legacy_json_value(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.legacy_json_value)
  if (!has_legacy_json_value()) {
    clear_value();
    set_has_legacy_json_value();
    value_.legacy_json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.legacy_json_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.legacy_json_value)
}
inline void DebugAnnotation::set_legacy_json_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.legacy_json_value)
  if (!has_legacy_json_value()) {
    clear_value();
    set_has_legacy_json_value();
    value_.legacy_json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.legacy_json_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DebugAnnotation.legacy_json_value)
}
inline void DebugAnnotation::set_legacy_json_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_legacy_json_value()) {
    clear_value();
    set_has_legacy_json_value();
    value_.legacy_json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.legacy_json_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotation.legacy_json_value)
}
inline void DebugAnnotation::set_legacy_json_value(const char* value, size_t size) {
  if (!has_legacy_json_value()) {
    clear_value();
    set_has_legacy_json_value();
    value_.legacy_json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.legacy_json_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotation.legacy_json_value)
}
inline std::string* DebugAnnotation::mutable_legacy_json_value() {
  if (!has_legacy_json_value()) {
    clear_value();
    set_has_legacy_json_value();
    value_.legacy_json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.legacy_json_value)
  return value_.legacy_json_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugAnnotation::release_legacy_json_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.legacy_json_value)
  if (has_legacy_json_value()) {
    clear_has_value();
    return value_.legacy_json_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DebugAnnotation::set_allocated_legacy_json_value(std::string* legacy_json_value) {
  if (has_value()) {
    clear_value();
  }
  if (legacy_json_value != nullptr) {
    set_has_legacy_json_value();
    value_.legacy_json_value_.UnsafeSetDefault(legacy_json_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.legacy_json_value)
}

inline bool DebugAnnotation::has_name_field() const {
  return name_field_case() != NAME_FIELD_NOT_SET;
}
inline void DebugAnnotation::clear_has_name_field() {
  _oneof_case_[0] = NAME_FIELD_NOT_SET;
}
inline bool DebugAnnotation::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DebugAnnotation::clear_has_value() {
  _oneof_case_[1] = VALUE_NOT_SET;
}
inline DebugAnnotation::NameFieldCase DebugAnnotation::name_field_case() const {
  return DebugAnnotation::NameFieldCase(_oneof_case_[0]);
}
inline DebugAnnotation::ValueCase DebugAnnotation::value_case() const {
  return DebugAnnotation::ValueCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// DebugAnnotationName

// optional uint64 iid = 1;
inline bool DebugAnnotationName::has_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugAnnotationName::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DebugAnnotationName::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotationName.iid)
  return iid_;
}
inline void DebugAnnotationName::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotationName.iid)
}

// optional string name = 2;
inline bool DebugAnnotationName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugAnnotationName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugAnnotationName::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotationName.name)
  return name_.GetNoArena();
}
inline void DebugAnnotationName::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotationName.name)
}
inline void DebugAnnotationName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.DebugAnnotationName.name)
}
inline void DebugAnnotationName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotationName.name)
}
inline void DebugAnnotationName::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotationName.name)
}
inline std::string* DebugAnnotationName::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotationName.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugAnnotationName::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotationName.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugAnnotationName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotationName.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::DebugAnnotation_NestedValue_NestedType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto
