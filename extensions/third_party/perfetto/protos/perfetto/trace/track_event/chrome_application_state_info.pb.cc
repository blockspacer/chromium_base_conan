// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_application_state_info.proto

#include "protos/perfetto/trace/track_event/chrome_application_state_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class ChromeApplicationStateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeApplicationStateInfo> _instance;
} _ChromeApplicationStateInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeApplicationStateInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeApplicationStateInfo_default_instance_;
    new (ptr) ::perfetto::protos::ChromeApplicationStateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeApplicationStateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeApplicationStateInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeApplicationStateInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ChromeApplicationStateInfo_ChromeApplicationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeApplicationStateInfo_ChromeApplicationState_strings[5] = {};

static const char ChromeApplicationStateInfo_ChromeApplicationState_names[] =
  "APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES"
  "APPLICATION_STATE_HAS_PAUSED_ACTIVITIES"
  "APPLICATION_STATE_HAS_RUNNING_ACTIVITIES"
  "APPLICATION_STATE_HAS_STOPPED_ACTIVITIES"
  "APPLICATION_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeApplicationStateInfo_ChromeApplicationState_entries[] = {
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 0, 42}, 4 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 42, 39}, 2 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 81, 40}, 1 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 121, 40}, 3 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 161, 25}, 0 },
};

static const int ChromeApplicationStateInfo_ChromeApplicationState_entries_by_number[] = {
  4, // 0 -> APPLICATION_STATE_UNKNOWN
  2, // 1 -> APPLICATION_STATE_HAS_RUNNING_ACTIVITIES
  1, // 2 -> APPLICATION_STATE_HAS_PAUSED_ACTIVITIES
  3, // 3 -> APPLICATION_STATE_HAS_STOPPED_ACTIVITIES
  0, // 4 -> APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES
};

const std::string& ChromeApplicationStateInfo_ChromeApplicationState_Name(
    ChromeApplicationStateInfo_ChromeApplicationState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeApplicationStateInfo_ChromeApplicationState_entries,
          ChromeApplicationStateInfo_ChromeApplicationState_entries_by_number,
          5, ChromeApplicationStateInfo_ChromeApplicationState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeApplicationStateInfo_ChromeApplicationState_entries,
      ChromeApplicationStateInfo_ChromeApplicationState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeApplicationStateInfo_ChromeApplicationState_strings[idx].get();
}
bool ChromeApplicationStateInfo_ChromeApplicationState_Parse(
    const std::string& name, ChromeApplicationStateInfo_ChromeApplicationState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeApplicationStateInfo_ChromeApplicationState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeApplicationStateInfo_ChromeApplicationState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_UNKNOWN;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_RUNNING_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_PAUSED_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_STOPPED_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::ChromeApplicationState_MIN;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::ChromeApplicationState_MAX;
constexpr int ChromeApplicationStateInfo::ChromeApplicationState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChromeApplicationStateInfo::InitAsDefaultInstance() {
}
class ChromeApplicationStateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeApplicationStateInfo>()._has_bits_);
  static void set_has_application_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeApplicationStateInfo::ChromeApplicationStateInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeApplicationStateInfo)
}
ChromeApplicationStateInfo::ChromeApplicationStateInfo(const ChromeApplicationStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  application_state_ = from.application_state_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeApplicationStateInfo)
}

void ChromeApplicationStateInfo::SharedCtor() {
  application_state_ = 0;
}

ChromeApplicationStateInfo::~ChromeApplicationStateInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeApplicationStateInfo)
  SharedDtor();
}

void ChromeApplicationStateInfo::SharedDtor() {
}

void ChromeApplicationStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeApplicationStateInfo& ChromeApplicationStateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeApplicationStateInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ChromeApplicationStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeApplicationStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeApplicationStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState_IsValid(val))) {
            set_application_state(static_cast<::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeApplicationStateInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeApplicationStateInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState_IsValid(value)) {
            set_application_state(static_cast< ::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeApplicationStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeApplicationStateInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeApplicationStateInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeApplicationStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->application_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeApplicationStateInfo)
}

size_t ChromeApplicationStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeApplicationStateInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->application_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeApplicationStateInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeApplicationStateInfo*>(
      &from));
}

void ChromeApplicationStateInfo::MergeFrom(const ChromeApplicationStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeApplicationStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_application_state()) {
    set_application_state(from.application_state());
  }
}

void ChromeApplicationStateInfo::CopyFrom(const ChromeApplicationStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeApplicationStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeApplicationStateInfo::IsInitialized() const {
  return true;
}

void ChromeApplicationStateInfo::InternalSwap(ChromeApplicationStateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(application_state_, other->application_state_);
}

std::string ChromeApplicationStateInfo::GetTypeName() const {
  return "perfetto.protos.ChromeApplicationStateInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeApplicationStateInfo* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeApplicationStateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeApplicationStateInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
