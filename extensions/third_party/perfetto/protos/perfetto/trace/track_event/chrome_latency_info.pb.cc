// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_latency_info.proto

#include "protos/perfetto/trace/track_event/chrome_latency_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeLatencyInfo_ComponentInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
namespace perfetto {
namespace protos {
class ChromeLatencyInfo_ComponentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeLatencyInfo_ComponentInfo> _instance;
} _ChromeLatencyInfo_ComponentInfo_default_instance_;
class ChromeLatencyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeLatencyInfo> _instance;
} _ChromeLatencyInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeLatencyInfo_default_instance_;
    new (ptr) ::perfetto::protos::ChromeLatencyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeLatencyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto}, {
      &scc_info_ChromeLatencyInfo_ComponentInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_ChromeLatencyInfo_ComponentInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeLatencyInfo_ComponentInfo_default_instance_;
    new (ptr) ::perfetto::protos::ChromeLatencyInfo_ComponentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeLatencyInfo_ComponentInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeLatencyInfo_ComponentInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ChromeLatencyInfo_Step_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeLatencyInfo_Step_strings[12] = {};

static const char ChromeLatencyInfo_Step_names[] =
  "STEP_DID_HANDLE_INPUT_AND_OVERSCROLL"
  "STEP_DRAW_AND_SWAP"
  "STEP_FINISHED_SWAP_BUFFERS"
  "STEP_HANDLED_INPUT_EVENT_IMPL"
  "STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL"
  "STEP_HANDLE_INPUT_EVENT_IMPL"
  "STEP_HANDLE_INPUT_EVENT_MAIN"
  "STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT"
  "STEP_MAIN_THREAD_SCROLL_UPDATE"
  "STEP_SEND_INPUT_EVENT_UI"
  "STEP_SWAP_BUFFERS"
  "STEP_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeLatencyInfo_Step_entries[] = {
  { {ChromeLatencyInfo_Step_names + 0, 36}, 8 },
  { {ChromeLatencyInfo_Step_names + 36, 18}, 7 },
  { {ChromeLatencyInfo_Step_names + 54, 26}, 11 },
  { {ChromeLatencyInfo_Step_names + 80, 29}, 10 },
  { {ChromeLatencyInfo_Step_names + 109, 37}, 9 },
  { {ChromeLatencyInfo_Step_names + 146, 28}, 5 },
  { {ChromeLatencyInfo_Step_names + 174, 28}, 4 },
  { {ChromeLatencyInfo_Step_names + 202, 35}, 1 },
  { {ChromeLatencyInfo_Step_names + 237, 30}, 2 },
  { {ChromeLatencyInfo_Step_names + 267, 24}, 3 },
  { {ChromeLatencyInfo_Step_names + 291, 17}, 6 },
  { {ChromeLatencyInfo_Step_names + 308, 16}, 0 },
};

static const int ChromeLatencyInfo_Step_entries_by_number[] = {
  11, // 0 -> STEP_UNSPECIFIED
  7, // 1 -> STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT
  8, // 2 -> STEP_MAIN_THREAD_SCROLL_UPDATE
  9, // 3 -> STEP_SEND_INPUT_EVENT_UI
  6, // 4 -> STEP_HANDLE_INPUT_EVENT_MAIN
  5, // 5 -> STEP_HANDLE_INPUT_EVENT_IMPL
  10, // 6 -> STEP_SWAP_BUFFERS
  1, // 7 -> STEP_DRAW_AND_SWAP
  0, // 8 -> STEP_DID_HANDLE_INPUT_AND_OVERSCROLL
  4, // 9 -> STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL
  3, // 10 -> STEP_HANDLED_INPUT_EVENT_IMPL
  2, // 11 -> STEP_FINISHED_SWAP_BUFFERS
};

const std::string& ChromeLatencyInfo_Step_Name(
    ChromeLatencyInfo_Step value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeLatencyInfo_Step_entries,
          ChromeLatencyInfo_Step_entries_by_number,
          12, ChromeLatencyInfo_Step_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeLatencyInfo_Step_entries,
      ChromeLatencyInfo_Step_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeLatencyInfo_Step_strings[idx].get();
}
bool ChromeLatencyInfo_Step_Parse(
    const std::string& name, ChromeLatencyInfo_Step* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeLatencyInfo_Step_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<ChromeLatencyInfo_Step>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_UNSPECIFIED;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_SEND_INPUT_EVENT_UI;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_DID_HANDLE_INPUT_AND_OVERSCROLL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_MAIN;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_MAIN_THREAD_SCROLL_UPDATE;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLED_INPUT_EVENT_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_SWAP_BUFFERS;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_DRAW_AND_SWAP;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_FINISHED_SWAP_BUFFERS;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::Step_MIN;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::Step_MAX;
constexpr int ChromeLatencyInfo::Step_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeLatencyInfo_LatencyComponentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeLatencyInfo_LatencyComponentType_strings[15] = {};

static const char ChromeLatencyInfo_LatencyComponentType_names[] =
  "COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME"
  "COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER"
  "COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH"
  "COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH"
  "COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL"
  "COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP"
  "COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN"
  "COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT"
  "COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL"
  "COMPONENT_INPUT_EVENT_LATENCY_UI"
  "COMPONENT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeLatencyInfo_LatencyComponentType_entries[] = {
  { {ChromeLatencyInfo_LatencyComponentType_names + 0, 43}, 12 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 43, 37}, 13 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 80, 37}, 10 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 117, 39}, 1 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 156, 58}, 3 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 214, 40}, 14 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 254, 38}, 4 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 292, 43}, 6 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 335, 43}, 11 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 378, 54}, 8 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 432, 54}, 7 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 486, 54}, 9 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 540, 52}, 2 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 592, 32}, 5 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 624, 21}, 0 },
};

static const int ChromeLatencyInfo_LatencyComponentType_entries_by_number[] = {
  14, // 0 -> COMPONENT_UNSPECIFIED
  3, // 1 -> COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH
  12, // 2 -> COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL
  4, // 3 -> COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL
  6, // 4 -> COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL
  13, // 5 -> COMPONENT_INPUT_EVENT_LATENCY_UI
  7, // 6 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN
  10, // 7 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN
  9, // 8 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL
  11, // 9 -> COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT
  2, // 10 -> COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH
  8, // 11 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP
  0, // 12 -> COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME
  1, // 13 -> COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER
  5, // 14 -> COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP
};

const std::string& ChromeLatencyInfo_LatencyComponentType_Name(
    ChromeLatencyInfo_LatencyComponentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeLatencyInfo_LatencyComponentType_entries,
          ChromeLatencyInfo_LatencyComponentType_entries_by_number,
          15, ChromeLatencyInfo_LatencyComponentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeLatencyInfo_LatencyComponentType_entries,
      ChromeLatencyInfo_LatencyComponentType_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeLatencyInfo_LatencyComponentType_strings[idx].get();
}
bool ChromeLatencyInfo_LatencyComponentType_Parse(
    const std::string& name, ChromeLatencyInfo_LatencyComponentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeLatencyInfo_LatencyComponentType_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<ChromeLatencyInfo_LatencyComponentType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_UNSPECIFIED;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_UI;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::LatencyComponentType_MIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::LatencyComponentType_MAX;
constexpr int ChromeLatencyInfo::LatencyComponentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChromeLatencyInfo_ComponentInfo::InitAsDefaultInstance() {
}
class ChromeLatencyInfo_ComponentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLatencyInfo_ComponentInfo>()._has_bits_);
  static void set_has_component_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}
ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(const ChromeLatencyInfo_ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_us_, &from.time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&component_type_) -
    reinterpret_cast<char*>(&time_us_)) + sizeof(component_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}

void ChromeLatencyInfo_ComponentInfo::SharedCtor() {
  ::memset(&time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&component_type_) -
      reinterpret_cast<char*>(&time_us_)) + sizeof(component_type_));
}

ChromeLatencyInfo_ComponentInfo::~ChromeLatencyInfo_ComponentInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  SharedDtor();
}

void ChromeLatencyInfo_ComponentInfo::SharedDtor() {
}

void ChromeLatencyInfo_ComponentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeLatencyInfo_ComponentInfo& ChromeLatencyInfo_ComponentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeLatencyInfo_ComponentInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ChromeLatencyInfo_ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&component_type_) -
        reinterpret_cast<char*>(&time_us_)) + sizeof(component_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeLatencyInfo_ComponentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_IsValid(val))) {
            set_component_type(static_cast<::perfetto::protos::ChromeLatencyInfo_LatencyComponentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 time_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_us(&has_bits);
          time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeLatencyInfo_ComponentInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_IsValid(value)) {
            set_component_type(static_cast< ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_us = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeLatencyInfo_ComponentInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->component_type(), output);
  }

  // optional uint64 time_us = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->time_us(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}

size_t ChromeLatencyInfo_ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 time_us = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->time_us());
    }

    // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->component_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeLatencyInfo_ComponentInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeLatencyInfo_ComponentInfo*>(
      &from));
}

void ChromeLatencyInfo_ComponentInfo::MergeFrom(const ChromeLatencyInfo_ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_us_ = from.time_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      component_type_ = from.component_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeLatencyInfo_ComponentInfo::CopyFrom(const ChromeLatencyInfo_ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLatencyInfo_ComponentInfo::IsInitialized() const {
  return true;
}

void ChromeLatencyInfo_ComponentInfo::InternalSwap(ChromeLatencyInfo_ComponentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_us_, other->time_us_);
  swap(component_type_, other->component_type_);
}

std::string ChromeLatencyInfo_ComponentInfo::GetTypeName() const {
  return "perfetto.protos.ChromeLatencyInfo.ComponentInfo";
}


// ===================================================================

void ChromeLatencyInfo::InitAsDefaultInstance() {
}
class ChromeLatencyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLatencyInfo>()._has_bits_);
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_tree_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_coalesced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gesture_scroll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeLatencyInfo::ChromeLatencyInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeLatencyInfo)
}
ChromeLatencyInfo::ChromeLatencyInfo(const ChromeLatencyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      component_info_(from.component_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_coalesced_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(is_coalesced_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLatencyInfo)
}

void ChromeLatencyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto.base);
  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_coalesced_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(is_coalesced_));
}

ChromeLatencyInfo::~ChromeLatencyInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLatencyInfo)
  SharedDtor();
}

void ChromeLatencyInfo::SharedDtor() {
}

void ChromeLatencyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeLatencyInfo& ChromeLatencyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ChromeLatencyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLatencyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_coalesced_) -
        reinterpret_cast<char*>(&trace_id_)) + sizeof(is_coalesced_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeLatencyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trace_id(&has_bits);
          trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLatencyInfo_Step_IsValid(val))) {
            set_step(static_cast<::perfetto::protos::ChromeLatencyInfo_Step>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 frame_tree_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frame_tree_node_id(&has_bits);
          frame_tree_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_component_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional bool is_coalesced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_coalesced(&has_bits);
          is_coalesced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gesture_scroll_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gesture_scroll_id(&has_bits);
          gesture_scroll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeLatencyInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeLatencyInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 trace_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_trace_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeLatencyInfo_Step_IsValid(value)) {
            set_step(static_cast< ::perfetto::protos::ChromeLatencyInfo_Step >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_tree_node_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_frame_tree_node_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_tree_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_component_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coalesced = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_coalesced(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coalesced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gesture_scroll_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_gesture_scroll_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gesture_scroll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeLatencyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeLatencyInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeLatencyInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeLatencyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 trace_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->trace_id(), output);
  }

  // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->step(), output);
  }

  // optional int32 frame_tree_node_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->frame_tree_node_id(), output);
  }

  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->component_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->component_info(static_cast<int>(i)),
      output);
  }

  // optional bool is_coalesced = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_coalesced(), output);
  }

  // optional int64 gesture_scroll_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->gesture_scroll_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeLatencyInfo)
}

size_t ChromeLatencyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLatencyInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->component_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->component_info(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 trace_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional int32 frame_tree_node_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->frame_tree_node_id());
    }

    // optional int64 gesture_scroll_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gesture_scroll_id());
    }

    // optional bool is_coalesced = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeLatencyInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeLatencyInfo*>(
      &from));
}

void ChromeLatencyInfo::MergeFrom(const ChromeLatencyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLatencyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  component_info_.MergeFrom(from.component_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_tree_node_id_ = from.frame_tree_node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gesture_scroll_id_ = from.gesture_scroll_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_coalesced_ = from.is_coalesced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeLatencyInfo::CopyFrom(const ChromeLatencyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLatencyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLatencyInfo::IsInitialized() const {
  return true;
}

void ChromeLatencyInfo::InternalSwap(ChromeLatencyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&component_info_)->InternalSwap(CastToBase(&other->component_info_));
  swap(trace_id_, other->trace_id_);
  swap(step_, other->step_);
  swap(frame_tree_node_id_, other->frame_tree_node_id_);
  swap(gesture_scroll_id_, other->gesture_scroll_id_);
  swap(is_coalesced_, other->is_coalesced_);
}

std::string ChromeLatencyInfo::GetTypeName() const {
  return "perfetto.protos.ChromeLatencyInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLatencyInfo* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLatencyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeLatencyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
