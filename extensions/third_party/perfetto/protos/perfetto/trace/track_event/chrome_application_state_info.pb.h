// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_application_state_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ChromeApplicationStateInfo;
class ChromeApplicationStateInfoDefaultTypeInternal;
extern ChromeApplicationStateInfoDefaultTypeInternal _ChromeApplicationStateInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ChromeApplicationStateInfo* Arena::CreateMaybeMessage<::perfetto::protos::ChromeApplicationStateInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ChromeApplicationStateInfo_ChromeApplicationState : int {
  ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_UNKNOWN = 0,
  ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_RUNNING_ACTIVITIES = 1,
  ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_PAUSED_ACTIVITIES = 2,
  ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_STOPPED_ACTIVITIES = 3,
  ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES = 4
};
bool ChromeApplicationStateInfo_ChromeApplicationState_IsValid(int value);
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_MIN = ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_UNKNOWN;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_MAX = ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES;
constexpr int ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_ARRAYSIZE = ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_MAX + 1;

const std::string& ChromeApplicationStateInfo_ChromeApplicationState_Name(ChromeApplicationStateInfo_ChromeApplicationState value);
template<typename T>
inline const std::string& ChromeApplicationStateInfo_ChromeApplicationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeApplicationStateInfo_ChromeApplicationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeApplicationStateInfo_ChromeApplicationState_Name.");
  return ChromeApplicationStateInfo_ChromeApplicationState_Name(static_cast<ChromeApplicationStateInfo_ChromeApplicationState>(enum_t_value));
}
bool ChromeApplicationStateInfo_ChromeApplicationState_Parse(
    const std::string& name, ChromeApplicationStateInfo_ChromeApplicationState* value);
// ===================================================================

class ChromeApplicationStateInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeApplicationStateInfo) */ {
 public:
  ChromeApplicationStateInfo();
  virtual ~ChromeApplicationStateInfo();

  ChromeApplicationStateInfo(const ChromeApplicationStateInfo& from);
  ChromeApplicationStateInfo(ChromeApplicationStateInfo&& from) noexcept
    : ChromeApplicationStateInfo() {
    *this = ::std::move(from);
  }

  inline ChromeApplicationStateInfo& operator=(const ChromeApplicationStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeApplicationStateInfo& operator=(ChromeApplicationStateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeApplicationStateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeApplicationStateInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeApplicationStateInfo*>(
               &_ChromeApplicationStateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeApplicationStateInfo& a, ChromeApplicationStateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeApplicationStateInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeApplicationStateInfo* New() const final {
    return CreateMaybeMessage<ChromeApplicationStateInfo>(nullptr);
  }

  ChromeApplicationStateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeApplicationStateInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeApplicationStateInfo& from);
  void MergeFrom(const ChromeApplicationStateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeApplicationStateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeApplicationStateInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationState;
  static constexpr ChromeApplicationState APPLICATION_STATE_UNKNOWN =
    ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_UNKNOWN;
  static constexpr ChromeApplicationState APPLICATION_STATE_HAS_RUNNING_ACTIVITIES =
    ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_RUNNING_ACTIVITIES;
  static constexpr ChromeApplicationState APPLICATION_STATE_HAS_PAUSED_ACTIVITIES =
    ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_PAUSED_ACTIVITIES;
  static constexpr ChromeApplicationState APPLICATION_STATE_HAS_STOPPED_ACTIVITIES =
    ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_STOPPED_ACTIVITIES;
  static constexpr ChromeApplicationState APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES =
    ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES;
  static inline bool ChromeApplicationState_IsValid(int value) {
    return ChromeApplicationStateInfo_ChromeApplicationState_IsValid(value);
  }
  static constexpr ChromeApplicationState ChromeApplicationState_MIN =
    ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_MIN;
  static constexpr ChromeApplicationState ChromeApplicationState_MAX =
    ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_MAX;
  static constexpr int ChromeApplicationState_ARRAYSIZE =
    ChromeApplicationStateInfo_ChromeApplicationState_ChromeApplicationState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChromeApplicationState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChromeApplicationState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChromeApplicationState_Name.");
    return ChromeApplicationStateInfo_ChromeApplicationState_Name(enum_t_value);
  }
  static inline bool ChromeApplicationState_Parse(const std::string& name,
      ChromeApplicationState* value) {
    return ChromeApplicationStateInfo_ChromeApplicationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationStateFieldNumber = 1,
  };
  // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
  bool has_application_state() const;
  void clear_application_state();
  ::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState application_state() const;
  void set_application_state(::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeApplicationStateInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int application_state_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeApplicationStateInfo

// optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
inline bool ChromeApplicationStateInfo::has_application_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeApplicationStateInfo::clear_application_state() {
  application_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::application_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeApplicationStateInfo.application_state)
  return static_cast< ::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState >(application_state_);
}
inline void ChromeApplicationStateInfo::set_application_state(::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState value) {
  assert(::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  application_state_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeApplicationStateInfo.application_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto
