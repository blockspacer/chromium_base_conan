// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.proto

#include "protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeginImplFrameArgs_TimestampsInUs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeCompositorStateMachine_MajorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeCompositorStateMachine_MinorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompositorTimingHistory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceLocation_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto;
namespace perfetto {
namespace protos {
class ChromeCompositorSchedulerStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeCompositorSchedulerState> _instance;
} _ChromeCompositorSchedulerState_default_instance_;
class ChromeCompositorStateMachine_MajorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeCompositorStateMachine_MajorState> _instance;
} _ChromeCompositorStateMachine_MajorState_default_instance_;
class ChromeCompositorStateMachine_MinorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeCompositorStateMachine_MinorState> _instance;
} _ChromeCompositorStateMachine_MinorState_default_instance_;
class ChromeCompositorStateMachineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeCompositorStateMachine> _instance;
} _ChromeCompositorStateMachine_default_instance_;
class BeginFrameArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginFrameArgs> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_location_iid_;
  const ::perfetto::protos::SourceLocation* source_location_;
} _BeginFrameArgs_default_instance_;
class BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginImplFrameArgs_TimestampsInUs> _instance;
} _BeginImplFrameArgs_TimestampsInUs_default_instance_;
class BeginImplFrameArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginImplFrameArgs> _instance;
  const ::perfetto::protos::BeginFrameArgs* current_args_;
  const ::perfetto::protos::BeginFrameArgs* last_args_;
} _BeginImplFrameArgs_default_instance_;
class BeginFrameObserverStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginFrameObserverState> _instance;
} _BeginFrameObserverState_default_instance_;
class BeginFrameSourceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginFrameSourceState> _instance;
} _BeginFrameSourceState_default_instance_;
class CompositorTimingHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompositorTimingHistory> _instance;
} _CompositorTimingHistory_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BeginFrameArgs_default_instance_;
    new (ptr) ::perfetto::protos::BeginFrameArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::BeginFrameArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {
      &scc_info_SourceLocation_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto.base,}};

static void InitDefaultsscc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BeginFrameObserverState_default_instance_;
    new (ptr) ::perfetto::protos::BeginFrameObserverState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::BeginFrameObserverState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {
      &scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BeginFrameSourceState_default_instance_;
    new (ptr) ::perfetto::protos::BeginFrameSourceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::BeginFrameSourceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {
      &scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BeginImplFrameArgs_default_instance_;
    new (ptr) ::perfetto::protos::BeginImplFrameArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::BeginImplFrameArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {
      &scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_BeginImplFrameArgs_TimestampsInUs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_BeginImplFrameArgs_TimestampsInUs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BeginImplFrameArgs_TimestampsInUs_default_instance_;
    new (ptr) ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeginImplFrameArgs_TimestampsInUs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BeginImplFrameArgs_TimestampsInUs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_;
    new (ptr) ::perfetto::protos::ChromeCompositorSchedulerState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeCompositorSchedulerState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {
      &scc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_CompositorTimingHistory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeCompositorStateMachine_default_instance_;
    new (ptr) ::perfetto::protos::ChromeCompositorStateMachine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeCompositorStateMachine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {
      &scc_info_ChromeCompositorStateMachine_MajorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_ChromeCompositorStateMachine_MinorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_ChromeCompositorStateMachine_MajorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeCompositorStateMachine_MajorState_default_instance_;
    new (ptr) ::perfetto::protos::ChromeCompositorStateMachine_MajorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeCompositorStateMachine_MajorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeCompositorStateMachine_MajorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_ChromeCompositorStateMachine_MinorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeCompositorStateMachine_MinorState_default_instance_;
    new (ptr) ::perfetto::protos::ChromeCompositorStateMachine_MinorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeCompositorStateMachine_MinorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeCompositorStateMachine_MinorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_CompositorTimingHistory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_CompositorTimingHistory_default_instance_;
    new (ptr) ::perfetto::protos::CompositorTimingHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::CompositorTimingHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompositorTimingHistory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompositorTimingHistory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_strings[6] = {};

static const char ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names[] =
  "DEADLINE_MODE_BLOCKED"
  "DEADLINE_MODE_IMMEDIATE"
  "DEADLINE_MODE_LATE"
  "DEADLINE_MODE_NONE"
  "DEADLINE_MODE_REGULAR"
  "DEADLINE_MODE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries[] = {
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 0, 21}, 5 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 21, 23}, 2 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 44, 18}, 4 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 62, 18}, 1 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 80, 21}, 3 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 101, 25}, 0 },
};

static const int ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries_by_number[] = {
  5, // 0 -> DEADLINE_MODE_UNSPECIFIED
  3, // 1 -> DEADLINE_MODE_NONE
  1, // 2 -> DEADLINE_MODE_IMMEDIATE
  4, // 3 -> DEADLINE_MODE_REGULAR
  2, // 4 -> DEADLINE_MODE_LATE
  0, // 5 -> DEADLINE_MODE_BLOCKED
};

const std::string& ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Name(
    ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries,
          ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries_by_number,
          6, ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries,
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_strings[idx].get();
}
bool ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Parse(
    const std::string& name, ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_UNSPECIFIED;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_NONE;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_IMMEDIATE;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_REGULAR;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_LATE;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_BLOCKED;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::BeginImplFrameDeadlineMode_MIN;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::BeginImplFrameDeadlineMode_MAX;
constexpr int ChromeCompositorSchedulerState::BeginImplFrameDeadlineMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_BeginImplFrameState_strings[4] = {};

static const char ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names[] =
  "BEGIN_IMPL_FRAME_IDLE"
  "BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME"
  "BEGIN_IMPL_FRAME_INSIDE_DEADLINE"
  "BEGIN_IMPL_FRAME_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 0, 21}, 1 },
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 21, 35}, 2 },
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 56, 32}, 3 },
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 88, 28}, 0 },
};

static const int ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries_by_number[] = {
  3, // 0 -> BEGIN_IMPL_FRAME_UNSPECIFIED
  0, // 1 -> BEGIN_IMPL_FRAME_IDLE
  1, // 2 -> BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME
  2, // 3 -> BEGIN_IMPL_FRAME_INSIDE_DEADLINE
};

const std::string& ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Name(
    ChromeCompositorStateMachine_MajorState_BeginImplFrameState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries,
          ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries_by_number,
          4, ChromeCompositorStateMachine_MajorState_BeginImplFrameState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries,
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_BeginImplFrameState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Parse(
    const std::string& name, ChromeCompositorStateMachine_MajorState_BeginImplFrameState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_IDLE;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_INSIDE_DEADLINE;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BeginImplFrameState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BeginImplFrameState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::BeginImplFrameState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_BeginMainFrameState_strings[4] = {};

static const char ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names[] =
  "BEGIN_MAIN_FRAME_IDLE"
  "BEGIN_MAIN_FRAME_READY_TO_COMMIT"
  "BEGIN_MAIN_FRAME_SENT"
  "BEGIN_MAIN_FRAME_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 0, 21}, 1 },
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 21, 32}, 3 },
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 53, 21}, 2 },
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 74, 28}, 0 },
};

static const int ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries_by_number[] = {
  3, // 0 -> BEGIN_MAIN_FRAME_UNSPECIFIED
  0, // 1 -> BEGIN_MAIN_FRAME_IDLE
  2, // 2 -> BEGIN_MAIN_FRAME_SENT
  1, // 3 -> BEGIN_MAIN_FRAME_READY_TO_COMMIT
};

const std::string& ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Name(
    ChromeCompositorStateMachine_MajorState_BeginMainFrameState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries,
          ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries_by_number,
          4, ChromeCompositorStateMachine_MajorState_BeginMainFrameState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries,
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_BeginMainFrameState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Parse(
    const std::string& name, ChromeCompositorStateMachine_MajorState_BeginMainFrameState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_IDLE;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_SENT;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_READY_TO_COMMIT;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BeginMainFrameState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BeginMainFrameState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::BeginMainFrameState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_strings[6] = {};

static const char ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names[] =
  "LAYER_TREE_FRAME_ACTIVE"
  "LAYER_TREE_FRAME_CREATING"
  "LAYER_TREE_FRAME_NONE"
  "LAYER_TREE_FRAME_UNSPECIFIED"
  "LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION"
  "LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 0, 23}, 2 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 23, 25}, 3 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 48, 21}, 1 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 69, 28}, 0 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 97, 45}, 5 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 142, 41}, 4 },
};

static const int ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries_by_number[] = {
  3, // 0 -> LAYER_TREE_FRAME_UNSPECIFIED
  2, // 1 -> LAYER_TREE_FRAME_NONE
  0, // 2 -> LAYER_TREE_FRAME_ACTIVE
  1, // 3 -> LAYER_TREE_FRAME_CREATING
  5, // 4 -> LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT
  4, // 5 -> LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION
};

const std::string& ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Name(
    ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries,
          ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries_by_number,
          6, ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries,
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Parse(
    const std::string& name, ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_NONE;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_ACTIVE;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_CREATING;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LayerTreeFrameSinkState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LayerTreeFrameSinkState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::LayerTreeFrameSinkState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_strings[5] = {};

static const char ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names[] =
  "FORCED_REDRAW_IDLE"
  "FORCED_REDRAW_UNSPECIFIED"
  "FORCED_REDRAW_WAITING_FOR_ACTIVATION"
  "FORCED_REDRAW_WAITING_FOR_COMMIT"
  "FORCED_REDRAW_WAITING_FOR_DRAW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 0, 18}, 1 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 18, 25}, 0 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 43, 36}, 3 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 79, 32}, 2 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 111, 30}, 4 },
};

static const int ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries_by_number[] = {
  1, // 0 -> FORCED_REDRAW_UNSPECIFIED
  0, // 1 -> FORCED_REDRAW_IDLE
  3, // 2 -> FORCED_REDRAW_WAITING_FOR_COMMIT
  2, // 3 -> FORCED_REDRAW_WAITING_FOR_ACTIVATION
  4, // 4 -> FORCED_REDRAW_WAITING_FOR_DRAW
};

const std::string& ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Name(
    ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries,
          ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries_by_number,
          5, ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries,
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Parse(
    const std::string& name, ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_IDLE;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_WAITING_FOR_COMMIT;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_WAITING_FOR_ACTIVATION;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_WAITING_FOR_DRAW;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::ForcedRedrawOnTimeoutState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::ForcedRedrawOnTimeoutState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::ForcedRedrawOnTimeoutState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MinorState_TreePriority_strings[4] = {};

static const char ChromeCompositorStateMachine_MinorState_TreePriority_names[] =
  "TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY"
  "TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES"
  "TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY"
  "TREE_PRIORITY_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MinorState_TreePriority_entries[] = {
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 0, 40}, 3 },
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 40, 42}, 1 },
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 82, 39}, 2 },
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 121, 25}, 0 },
};

static const int ChromeCompositorStateMachine_MinorState_TreePriority_entries_by_number[] = {
  3, // 0 -> TREE_PRIORITY_UNSPECIFIED
  1, // 1 -> TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES
  2, // 2 -> TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY
  0, // 3 -> TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY
};

const std::string& ChromeCompositorStateMachine_MinorState_TreePriority_Name(
    ChromeCompositorStateMachine_MinorState_TreePriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MinorState_TreePriority_entries,
          ChromeCompositorStateMachine_MinorState_TreePriority_entries_by_number,
          4, ChromeCompositorStateMachine_MinorState_TreePriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MinorState_TreePriority_entries,
      ChromeCompositorStateMachine_MinorState_TreePriority_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MinorState_TreePriority_strings[idx].get();
}
bool ChromeCompositorStateMachine_MinorState_TreePriority_Parse(
    const std::string& name, ChromeCompositorStateMachine_MinorState_TreePriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MinorState_TreePriority_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MinorState_TreePriority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TreePriority_MIN;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TreePriority_MAX;
constexpr int ChromeCompositorStateMachine_MinorState::TreePriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MinorState_ScrollHandlerState_strings[3] = {};

static const char ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names[] =
  "SCROLL_AFFECTS_SCROLL_HANDLER"
  "SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER"
  "SCROLL_HANDLER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries[] = {
  { {ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names + 0, 29}, 1 },
  { {ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names + 29, 37}, 2 },
  { {ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names + 66, 26}, 0 },
};

static const int ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries_by_number[] = {
  2, // 0 -> SCROLL_HANDLER_UNSPECIFIED
  0, // 1 -> SCROLL_AFFECTS_SCROLL_HANDLER
  1, // 2 -> SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER
};

const std::string& ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Name(
    ChromeCompositorStateMachine_MinorState_ScrollHandlerState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries,
          ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries_by_number,
          3, ChromeCompositorStateMachine_MinorState_ScrollHandlerState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries,
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MinorState_ScrollHandlerState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Parse(
    const std::string& name, ChromeCompositorStateMachine_MinorState_ScrollHandlerState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::SCROLL_HANDLER_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::SCROLL_AFFECTS_SCROLL_HANDLER;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::ScrollHandlerState_MIN;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::ScrollHandlerState_MAX;
constexpr int ChromeCompositorStateMachine_MinorState::ScrollHandlerState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BeginFrameArgs_BeginFrameArgsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BeginFrameArgs_BeginFrameArgsType_strings[4] = {};

static const char BeginFrameArgs_BeginFrameArgsType_names[] =
  "BEGIN_FRAME_ARGS_TYPE_INVALID"
  "BEGIN_FRAME_ARGS_TYPE_MISSED"
  "BEGIN_FRAME_ARGS_TYPE_NORMAL"
  "BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BeginFrameArgs_BeginFrameArgsType_entries[] = {
  { {BeginFrameArgs_BeginFrameArgsType_names + 0, 29}, 1 },
  { {BeginFrameArgs_BeginFrameArgsType_names + 29, 28}, 3 },
  { {BeginFrameArgs_BeginFrameArgsType_names + 57, 28}, 2 },
  { {BeginFrameArgs_BeginFrameArgsType_names + 85, 33}, 0 },
};

static const int BeginFrameArgs_BeginFrameArgsType_entries_by_number[] = {
  3, // 0 -> BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED
  0, // 1 -> BEGIN_FRAME_ARGS_TYPE_INVALID
  2, // 2 -> BEGIN_FRAME_ARGS_TYPE_NORMAL
  1, // 3 -> BEGIN_FRAME_ARGS_TYPE_MISSED
};

const std::string& BeginFrameArgs_BeginFrameArgsType_Name(
    BeginFrameArgs_BeginFrameArgsType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BeginFrameArgs_BeginFrameArgsType_entries,
          BeginFrameArgs_BeginFrameArgsType_entries_by_number,
          4, BeginFrameArgs_BeginFrameArgsType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BeginFrameArgs_BeginFrameArgsType_entries,
      BeginFrameArgs_BeginFrameArgsType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BeginFrameArgs_BeginFrameArgsType_strings[idx].get();
}
bool BeginFrameArgs_BeginFrameArgsType_Parse(
    const std::string& name, BeginFrameArgs_BeginFrameArgsType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BeginFrameArgs_BeginFrameArgsType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BeginFrameArgs_BeginFrameArgsType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_INVALID;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_NORMAL;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_MISSED;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BeginFrameArgsType_MIN;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BeginFrameArgsType_MAX;
constexpr int BeginFrameArgs::BeginFrameArgsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BeginImplFrameArgs_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BeginImplFrameArgs_State_strings[2] = {};

static const char BeginImplFrameArgs_State_names[] =
  "BEGIN_FRAME_FINISHED"
  "BEGIN_FRAME_USING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BeginImplFrameArgs_State_entries[] = {
  { {BeginImplFrameArgs_State_names + 0, 20}, 0 },
  { {BeginImplFrameArgs_State_names + 20, 17}, 1 },
};

static const int BeginImplFrameArgs_State_entries_by_number[] = {
  0, // 0 -> BEGIN_FRAME_FINISHED
  1, // 1 -> BEGIN_FRAME_USING
};

const std::string& BeginImplFrameArgs_State_Name(
    BeginImplFrameArgs_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BeginImplFrameArgs_State_entries,
          BeginImplFrameArgs_State_entries_by_number,
          2, BeginImplFrameArgs_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BeginImplFrameArgs_State_entries,
      BeginImplFrameArgs_State_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BeginImplFrameArgs_State_strings[idx].get();
}
bool BeginImplFrameArgs_State_Parse(
    const std::string& name, BeginImplFrameArgs_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BeginImplFrameArgs_State_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<BeginImplFrameArgs_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::BEGIN_FRAME_FINISHED;
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::BEGIN_FRAME_USING;
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::State_MIN;
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::State_MAX;
constexpr int BeginImplFrameArgs::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeCompositorSchedulerAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorSchedulerAction_strings[14] = {};

static const char ChromeCompositorSchedulerAction_names[] =
  "CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE"
  "CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION"
  "CC_SCHEDULER_ACTION_COMMIT"
  "CC_SCHEDULER_ACTION_DRAW_ABORT"
  "CC_SCHEDULER_ACTION_DRAW_FORCED"
  "CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE"
  "CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK"
  "CC_SCHEDULER_ACTION_NONE"
  "CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON"
  "CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL"
  "CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION"
  "CC_SCHEDULER_ACTION_PREPARE_TILES"
  "CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME"
  "CC_SCHEDULER_ACTION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorSchedulerAction_entries[] = {
  { {ChromeCompositorSchedulerAction_names + 0, 38}, 4 },
  { {ChromeCompositorSchedulerAction_names + 38, 56}, 8 },
  { {ChromeCompositorSchedulerAction_names + 94, 26}, 3 },
  { {ChromeCompositorSchedulerAction_names + 120, 30}, 7 },
  { {ChromeCompositorSchedulerAction_names + 150, 31}, 6 },
  { {ChromeCompositorSchedulerAction_names + 181, 36}, 5 },
  { {ChromeCompositorSchedulerAction_names + 217, 52}, 10 },
  { {ChromeCompositorSchedulerAction_names + 269, 24}, 1 },
  { {ChromeCompositorSchedulerAction_names + 293, 61}, 13 },
  { {ChromeCompositorSchedulerAction_names + 354, 62}, 12 },
  { {ChromeCompositorSchedulerAction_names + 416, 50}, 11 },
  { {ChromeCompositorSchedulerAction_names + 466, 33}, 9 },
  { {ChromeCompositorSchedulerAction_names + 499, 41}, 2 },
  { {ChromeCompositorSchedulerAction_names + 540, 31}, 0 },
};

static const int ChromeCompositorSchedulerAction_entries_by_number[] = {
  13, // 0 -> CC_SCHEDULER_ACTION_UNSPECIFIED
  7, // 1 -> CC_SCHEDULER_ACTION_NONE
  12, // 2 -> CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME
  2, // 3 -> CC_SCHEDULER_ACTION_COMMIT
  0, // 4 -> CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE
  5, // 5 -> CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE
  4, // 6 -> CC_SCHEDULER_ACTION_DRAW_FORCED
  3, // 7 -> CC_SCHEDULER_ACTION_DRAW_ABORT
  1, // 8 -> CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION
  11, // 9 -> CC_SCHEDULER_ACTION_PREPARE_TILES
  6, // 10 -> CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK
  10, // 11 -> CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION
  9, // 12 -> CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL
  8, // 13 -> CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON
};

const std::string& ChromeCompositorSchedulerAction_Name(
    ChromeCompositorSchedulerAction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorSchedulerAction_entries,
          ChromeCompositorSchedulerAction_entries_by_number,
          14, ChromeCompositorSchedulerAction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorSchedulerAction_entries,
      ChromeCompositorSchedulerAction_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorSchedulerAction_strings[idx].get();
}
bool ChromeCompositorSchedulerAction_Parse(
    const std::string& name, ChromeCompositorSchedulerAction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorSchedulerAction_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorSchedulerAction>(int_value);
  }
  return success;
}

// ===================================================================

void ChromeCompositorSchedulerState::InitAsDefaultInstance() {
  ::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_._instance.get_mutable()->state_machine_ = const_cast< ::perfetto::protos::ChromeCompositorStateMachine*>(
      ::perfetto::protos::ChromeCompositorStateMachine::internal_default_instance());
  ::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_._instance.get_mutable()->begin_impl_frame_args_ = const_cast< ::perfetto::protos::BeginImplFrameArgs*>(
      ::perfetto::protos::BeginImplFrameArgs::internal_default_instance());
  ::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_._instance.get_mutable()->begin_frame_observer_state_ = const_cast< ::perfetto::protos::BeginFrameObserverState*>(
      ::perfetto::protos::BeginFrameObserverState::internal_default_instance());
  ::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_._instance.get_mutable()->begin_frame_source_state_ = const_cast< ::perfetto::protos::BeginFrameSourceState*>(
      ::perfetto::protos::BeginFrameSourceState::internal_default_instance());
  ::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_._instance.get_mutable()->compositor_timing_history_ = const_cast< ::perfetto::protos::CompositorTimingHistory*>(
      ::perfetto::protos::CompositorTimingHistory::internal_default_instance());
}
class ChromeCompositorSchedulerState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorSchedulerState>()._has_bits_);
  static const ::perfetto::protos::ChromeCompositorStateMachine& state_machine(const ChromeCompositorSchedulerState* msg);
  static void set_has_state_machine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_observing_begin_frame_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_begin_impl_frame_deadline_task(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pending_begin_frame_task(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skipped_last_frame_missed_exceeded_deadline(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_skipped_last_frame_to_reduce_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_inside_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deadline_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_deadline_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_deadline_scheduled_at_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_now_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_now_to_deadline_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_now_to_deadline_scheduled_at_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::perfetto::protos::BeginImplFrameArgs& begin_impl_frame_args(const ChromeCompositorSchedulerState* msg);
  static void set_has_begin_impl_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::BeginFrameObserverState& begin_frame_observer_state(const ChromeCompositorSchedulerState* msg);
  static void set_has_begin_frame_observer_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::BeginFrameSourceState& begin_frame_source_state(const ChromeCompositorSchedulerState* msg);
  static void set_has_begin_frame_source_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::CompositorTimingHistory& compositor_timing_history(const ChromeCompositorSchedulerState* msg);
  static void set_has_compositor_timing_history(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::perfetto::protos::ChromeCompositorStateMachine&
ChromeCompositorSchedulerState::_Internal::state_machine(const ChromeCompositorSchedulerState* msg) {
  return *msg->state_machine_;
}
const ::perfetto::protos::BeginImplFrameArgs&
ChromeCompositorSchedulerState::_Internal::begin_impl_frame_args(const ChromeCompositorSchedulerState* msg) {
  return *msg->begin_impl_frame_args_;
}
const ::perfetto::protos::BeginFrameObserverState&
ChromeCompositorSchedulerState::_Internal::begin_frame_observer_state(const ChromeCompositorSchedulerState* msg) {
  return *msg->begin_frame_observer_state_;
}
const ::perfetto::protos::BeginFrameSourceState&
ChromeCompositorSchedulerState::_Internal::begin_frame_source_state(const ChromeCompositorSchedulerState* msg) {
  return *msg->begin_frame_source_state_;
}
const ::perfetto::protos::CompositorTimingHistory&
ChromeCompositorSchedulerState::_Internal::compositor_timing_history(const ChromeCompositorSchedulerState* msg) {
  return *msg->compositor_timing_history_;
}
ChromeCompositorSchedulerState::ChromeCompositorSchedulerState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeCompositorSchedulerState)
}
ChromeCompositorSchedulerState::ChromeCompositorSchedulerState(const ChromeCompositorSchedulerState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state_machine()) {
    state_machine_ = new ::perfetto::protos::ChromeCompositorStateMachine(*from.state_machine_);
  } else {
    state_machine_ = nullptr;
  }
  if (from.has_begin_impl_frame_args()) {
    begin_impl_frame_args_ = new ::perfetto::protos::BeginImplFrameArgs(*from.begin_impl_frame_args_);
  } else {
    begin_impl_frame_args_ = nullptr;
  }
  if (from.has_begin_frame_observer_state()) {
    begin_frame_observer_state_ = new ::perfetto::protos::BeginFrameObserverState(*from.begin_frame_observer_state_);
  } else {
    begin_frame_observer_state_ = nullptr;
  }
  if (from.has_begin_frame_source_state()) {
    begin_frame_source_state_ = new ::perfetto::protos::BeginFrameSourceState(*from.begin_frame_source_state_);
  } else {
    begin_frame_source_state_ = nullptr;
  }
  if (from.has_compositor_timing_history()) {
    compositor_timing_history_ = new ::perfetto::protos::CompositorTimingHistory(*from.compositor_timing_history_);
  } else {
    compositor_timing_history_ = nullptr;
  }
  ::memcpy(&observing_begin_frame_source_, &from.observing_begin_frame_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&now_to_deadline_scheduled_at_delta_us_) -
    reinterpret_cast<char*>(&observing_begin_frame_source_)) + sizeof(now_to_deadline_scheduled_at_delta_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorSchedulerState)
}

void ChromeCompositorSchedulerState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  ::memset(&state_machine_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&now_to_deadline_scheduled_at_delta_us_) -
      reinterpret_cast<char*>(&state_machine_)) + sizeof(now_to_deadline_scheduled_at_delta_us_));
}

ChromeCompositorSchedulerState::~ChromeCompositorSchedulerState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorSchedulerState)
  SharedDtor();
}

void ChromeCompositorSchedulerState::SharedDtor() {
  if (this != internal_default_instance()) delete state_machine_;
  if (this != internal_default_instance()) delete begin_impl_frame_args_;
  if (this != internal_default_instance()) delete begin_frame_observer_state_;
  if (this != internal_default_instance()) delete begin_frame_source_state_;
  if (this != internal_default_instance()) delete compositor_timing_history_;
}

void ChromeCompositorSchedulerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeCompositorSchedulerState& ChromeCompositorSchedulerState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ChromeCompositorSchedulerState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorSchedulerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_machine_ != nullptr);
      state_machine_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(begin_impl_frame_args_ != nullptr);
      begin_impl_frame_args_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(begin_frame_observer_state_ != nullptr);
      begin_frame_observer_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(begin_frame_source_state_ != nullptr);
      begin_frame_source_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(compositor_timing_history_ != nullptr);
      compositor_timing_history_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&observing_begin_frame_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_begin_frame_task_) -
        reinterpret_cast<char*>(&observing_begin_frame_source_)) + sizeof(pending_begin_frame_task_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&skipped_last_frame_missed_exceeded_deadline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&now_to_deadline_delta_us_) -
        reinterpret_cast<char*>(&skipped_last_frame_missed_exceeded_deadline_)) + sizeof(now_to_deadline_delta_us_));
  }
  now_to_deadline_scheduled_at_delta_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeCompositorSchedulerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_state_machine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool observing_begin_frame_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_observing_begin_frame_source(&has_bits);
          observing_begin_frame_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool begin_impl_frame_deadline_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_begin_impl_frame_deadline_task(&has_bits);
          begin_impl_frame_deadline_task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pending_begin_frame_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pending_begin_frame_task(&has_bits);
          pending_begin_frame_task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_skipped_last_frame_missed_exceeded_deadline(&has_bits);
          skipped_last_frame_missed_exceeded_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skipped_last_frame_to_reduce_latency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_skipped_last_frame_to_reduce_latency(&has_bits);
          skipped_last_frame_to_reduce_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(val))) {
            set_inside_action(static_cast<::perfetto::protos::ChromeCompositorSchedulerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(val))) {
            set_deadline_mode(static_cast<::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 deadline_us = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_deadline_us(&has_bits);
          deadline_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deadline_scheduled_at_us = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_deadline_scheduled_at_us(&has_bits);
          deadline_scheduled_at_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_now_us(&has_bits);
          now_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now_to_deadline_delta_us = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_now_to_deadline_delta_us(&has_bits);
          now_to_deadline_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_now_to_deadline_scheduled_at_delta_us(&has_bits);
          now_to_deadline_scheduled_at_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_begin_impl_frame_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_begin_frame_observer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_begin_frame_source_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_compositor_timing_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeCompositorSchedulerState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeCompositorSchedulerState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_state_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool observing_begin_frame_source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_observing_begin_frame_source(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &observing_begin_frame_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool begin_impl_frame_deadline_task = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_begin_impl_frame_deadline_task(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &begin_impl_frame_deadline_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pending_begin_frame_task = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pending_begin_frame_task(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_begin_frame_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_skipped_last_frame_missed_exceeded_deadline(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipped_last_frame_missed_exceeded_deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skipped_last_frame_to_reduce_latency = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_skipped_last_frame_to_reduce_latency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipped_last_frame_to_reduce_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(value)) {
            set_inside_action(static_cast< ::perfetto::protos::ChromeCompositorSchedulerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(value)) {
            set_deadline_mode(static_cast< ::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadline_us = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_deadline_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadline_scheduled_at_us = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_deadline_scheduled_at_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_scheduled_at_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now_us = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_now_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now_to_deadline_delta_us = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_now_to_deadline_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_to_deadline_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_now_to_deadline_scheduled_at_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_to_deadline_scheduled_at_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_impl_frame_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_frame_observer_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_frame_source_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compositor_timing_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeCompositorSchedulerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeCompositorSchedulerState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeCompositorSchedulerState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeCompositorSchedulerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::state_machine(this), output);
  }

  // optional bool observing_begin_frame_source = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->observing_begin_frame_source(), output);
  }

  // optional bool begin_impl_frame_deadline_task = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->begin_impl_frame_deadline_task(), output);
  }

  // optional bool pending_begin_frame_task = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->pending_begin_frame_task(), output);
  }

  // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->skipped_last_frame_missed_exceeded_deadline(), output);
  }

  // optional bool skipped_last_frame_to_reduce_latency = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->skipped_last_frame_to_reduce_latency(), output);
  }

  // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->inside_action(), output);
  }

  // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->deadline_mode(), output);
  }

  // optional int64 deadline_us = 9;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->deadline_us(), output);
  }

  // optional int64 deadline_scheduled_at_us = 10;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->deadline_scheduled_at_us(), output);
  }

  // optional int64 now_us = 11;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->now_us(), output);
  }

  // optional int64 now_to_deadline_delta_us = 12;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->now_to_deadline_delta_us(), output);
  }

  // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->now_to_deadline_scheduled_at_delta_us(), output);
  }

  // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::begin_impl_frame_args(this), output);
  }

  // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::begin_frame_observer_state(this), output);
  }

  // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::begin_frame_source_state(this), output);
  }

  // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::compositor_timing_history(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeCompositorSchedulerState)
}

size_t ChromeCompositorSchedulerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorSchedulerState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_machine_);
    }

    // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *begin_impl_frame_args_);
    }

    // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *begin_frame_observer_state_);
    }

    // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *begin_frame_source_state_);
    }

    // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compositor_timing_history_);
    }

    // optional bool observing_begin_frame_source = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool begin_impl_frame_deadline_task = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pending_begin_frame_task = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool skipped_last_frame_to_reduce_latency = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->inside_action());
    }

    // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->deadline_mode());
    }

    // optional int64 deadline_us = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deadline_us());
    }

    // optional int64 deadline_scheduled_at_us = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deadline_scheduled_at_us());
    }

    // optional int64 now_us = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now_us());
    }

    // optional int64 now_to_deadline_delta_us = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now_to_deadline_delta_us());
    }

  }
  // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->now_to_deadline_scheduled_at_delta_us());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorSchedulerState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeCompositorSchedulerState*>(
      &from));
}

void ChromeCompositorSchedulerState::MergeFrom(const ChromeCompositorSchedulerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorSchedulerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state_machine()->::perfetto::protos::ChromeCompositorStateMachine::MergeFrom(from.state_machine());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_begin_impl_frame_args()->::perfetto::protos::BeginImplFrameArgs::MergeFrom(from.begin_impl_frame_args());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_begin_frame_observer_state()->::perfetto::protos::BeginFrameObserverState::MergeFrom(from.begin_frame_observer_state());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_begin_frame_source_state()->::perfetto::protos::BeginFrameSourceState::MergeFrom(from.begin_frame_source_state());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_compositor_timing_history()->::perfetto::protos::CompositorTimingHistory::MergeFrom(from.compositor_timing_history());
    }
    if (cached_has_bits & 0x00000020u) {
      observing_begin_frame_source_ = from.observing_begin_frame_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      begin_impl_frame_deadline_task_ = from.begin_impl_frame_deadline_task_;
    }
    if (cached_has_bits & 0x00000080u) {
      pending_begin_frame_task_ = from.pending_begin_frame_task_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      skipped_last_frame_missed_exceeded_deadline_ = from.skipped_last_frame_missed_exceeded_deadline_;
    }
    if (cached_has_bits & 0x00000200u) {
      skipped_last_frame_to_reduce_latency_ = from.skipped_last_frame_to_reduce_latency_;
    }
    if (cached_has_bits & 0x00000400u) {
      inside_action_ = from.inside_action_;
    }
    if (cached_has_bits & 0x00000800u) {
      deadline_mode_ = from.deadline_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      deadline_us_ = from.deadline_us_;
    }
    if (cached_has_bits & 0x00002000u) {
      deadline_scheduled_at_us_ = from.deadline_scheduled_at_us_;
    }
    if (cached_has_bits & 0x00004000u) {
      now_us_ = from.now_us_;
    }
    if (cached_has_bits & 0x00008000u) {
      now_to_deadline_delta_us_ = from.now_to_deadline_delta_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_now_to_deadline_scheduled_at_delta_us(from.now_to_deadline_scheduled_at_delta_us());
  }
}

void ChromeCompositorSchedulerState::CopyFrom(const ChromeCompositorSchedulerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorSchedulerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorSchedulerState::IsInitialized() const {
  return true;
}

void ChromeCompositorSchedulerState::InternalSwap(ChromeCompositorSchedulerState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_machine_, other->state_machine_);
  swap(begin_impl_frame_args_, other->begin_impl_frame_args_);
  swap(begin_frame_observer_state_, other->begin_frame_observer_state_);
  swap(begin_frame_source_state_, other->begin_frame_source_state_);
  swap(compositor_timing_history_, other->compositor_timing_history_);
  swap(observing_begin_frame_source_, other->observing_begin_frame_source_);
  swap(begin_impl_frame_deadline_task_, other->begin_impl_frame_deadline_task_);
  swap(pending_begin_frame_task_, other->pending_begin_frame_task_);
  swap(skipped_last_frame_missed_exceeded_deadline_, other->skipped_last_frame_missed_exceeded_deadline_);
  swap(skipped_last_frame_to_reduce_latency_, other->skipped_last_frame_to_reduce_latency_);
  swap(inside_action_, other->inside_action_);
  swap(deadline_mode_, other->deadline_mode_);
  swap(deadline_us_, other->deadline_us_);
  swap(deadline_scheduled_at_us_, other->deadline_scheduled_at_us_);
  swap(now_us_, other->now_us_);
  swap(now_to_deadline_delta_us_, other->now_to_deadline_delta_us_);
  swap(now_to_deadline_scheduled_at_delta_us_, other->now_to_deadline_scheduled_at_delta_us_);
}

std::string ChromeCompositorSchedulerState::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorSchedulerState";
}


// ===================================================================

void ChromeCompositorStateMachine_MajorState::InitAsDefaultInstance() {
}
class ChromeCompositorStateMachine_MajorState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorStateMachine_MajorState>()._has_bits_);
  static void set_has_next_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_impl_frame_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_main_frame_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_layer_tree_frame_sink_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_forced_redraw_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChromeCompositorStateMachine_MajorState::ChromeCompositorStateMachine_MajorState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeCompositorStateMachine.MajorState)
}
ChromeCompositorStateMachine_MajorState::ChromeCompositorStateMachine_MajorState(const ChromeCompositorStateMachine_MajorState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&next_action_, &from.next_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&forced_redraw_state_) -
    reinterpret_cast<char*>(&next_action_)) + sizeof(forced_redraw_state_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorStateMachine.MajorState)
}

void ChromeCompositorStateMachine_MajorState::SharedCtor() {
  ::memset(&next_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forced_redraw_state_) -
      reinterpret_cast<char*>(&next_action_)) + sizeof(forced_redraw_state_));
}

ChromeCompositorStateMachine_MajorState::~ChromeCompositorStateMachine_MajorState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  SharedDtor();
}

void ChromeCompositorStateMachine_MajorState::SharedDtor() {
}

void ChromeCompositorStateMachine_MajorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeCompositorStateMachine_MajorState& ChromeCompositorStateMachine_MajorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeCompositorStateMachine_MajorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ChromeCompositorStateMachine_MajorState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&next_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&forced_redraw_state_) -
        reinterpret_cast<char*>(&next_action_)) + sizeof(forced_redraw_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeCompositorStateMachine_MajorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(val))) {
            set_next_action(static_cast<::perfetto::protos::ChromeCompositorSchedulerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(val))) {
            set_begin_impl_frame_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(val))) {
            set_begin_main_frame_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(val))) {
            set_layer_tree_frame_sink_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(val))) {
            set_forced_redraw_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeCompositorStateMachine_MajorState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(value)) {
            set_next_action(static_cast< ::perfetto::protos::ChromeCompositorSchedulerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(value)) {
            set_begin_impl_frame_state(static_cast< ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(value)) {
            set_begin_main_frame_state(static_cast< ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(value)) {
            set_layer_tree_frame_sink_state(static_cast< ::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(value)) {
            set_forced_redraw_state(static_cast< ::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeCompositorStateMachine_MajorState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->next_action(), output);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->begin_impl_frame_state(), output);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->begin_main_frame_state(), output);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->layer_tree_frame_sink_state(), output);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->forced_redraw_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeCompositorStateMachine.MajorState)
}

size_t ChromeCompositorStateMachine_MajorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->next_action());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->begin_impl_frame_state());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->begin_main_frame_state());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->layer_tree_frame_sink_state());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->forced_redraw_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorStateMachine_MajorState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeCompositorStateMachine_MajorState*>(
      &from));
}

void ChromeCompositorStateMachine_MajorState::MergeFrom(const ChromeCompositorStateMachine_MajorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      next_action_ = from.next_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_impl_frame_state_ = from.begin_impl_frame_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      begin_main_frame_state_ = from.begin_main_frame_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      layer_tree_frame_sink_state_ = from.layer_tree_frame_sink_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      forced_redraw_state_ = from.forced_redraw_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeCompositorStateMachine_MajorState::CopyFrom(const ChromeCompositorStateMachine_MajorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorStateMachine_MajorState::IsInitialized() const {
  return true;
}

void ChromeCompositorStateMachine_MajorState::InternalSwap(ChromeCompositorStateMachine_MajorState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(next_action_, other->next_action_);
  swap(begin_impl_frame_state_, other->begin_impl_frame_state_);
  swap(begin_main_frame_state_, other->begin_main_frame_state_);
  swap(layer_tree_frame_sink_state_, other->layer_tree_frame_sink_state_);
  swap(forced_redraw_state_, other->forced_redraw_state_);
}

std::string ChromeCompositorStateMachine_MajorState::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorStateMachine.MajorState";
}


// ===================================================================

void ChromeCompositorStateMachine_MinorState::InitAsDefaultInstance() {
}
class ChromeCompositorStateMachine_MinorState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorStateMachine_MinorState>()._has_bits_);
  static void set_has_commit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_frame_number_submit_performed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_frame_number_draw_performed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_frame_number_begin_main_frame_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_did_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_did_send_begin_main_frame_for_current_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_did_notify_begin_main_frame_not_expected_until(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_did_notify_begin_main_frame_not_expected_soon(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wants_begin_main_frame_not_expected(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_did_commit_during_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_did_invalidate_layer_tree_frame_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_did_perform_impl_side_invalidaion(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_did_prepare_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_consecutive_checkerboard_animations(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pending_submit_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_submit_frames_with_current_layer_tree_frame_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_needs_redraw(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_needs_prepare_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_needs_begin_main_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_needs_one_begin_impl_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_begin_frame_source_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_can_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_resourceless_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_has_pending_tree(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pending_tree_is_ready_for_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_active_tree_needs_first_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_active_tree_is_ready_to_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_did_create_and_initialize_first_layer_tree_frame_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tree_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_scroll_handler_state(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_critical_begin_main_frame_to_activate_is_fast(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_main_thread_missed_last_deadline(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_skip_next_begin_main_frame_to_reduce_latency(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_video_needs_begin_frames(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_defer_begin_main_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_last_commit_had_no_updates(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_did_draw_in_last_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_did_submit_in_last_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_needs_impl_side_invalidation(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_current_pending_tree_is_impl_side(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_previous_pending_tree_was_impl_side(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_processing_animation_worklets_for_active_tree(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_processing_animation_worklets_for_pending_tree(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_processing_paint_worklets_for_pending_tree(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
};

ChromeCompositorStateMachine_MinorState::ChromeCompositorStateMachine_MinorState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeCompositorStateMachine.MinorState)
}
ChromeCompositorStateMachine_MinorState::ChromeCompositorStateMachine_MinorState(const ChromeCompositorStateMachine_MinorState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&commit_count_, &from.commit_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&processing_paint_worklets_for_pending_tree_) -
    reinterpret_cast<char*>(&commit_count_)) + sizeof(processing_paint_worklets_for_pending_tree_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorStateMachine.MinorState)
}

void ChromeCompositorStateMachine_MinorState::SharedCtor() {
  ::memset(&commit_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processing_paint_worklets_for_pending_tree_) -
      reinterpret_cast<char*>(&commit_count_)) + sizeof(processing_paint_worklets_for_pending_tree_));
}

ChromeCompositorStateMachine_MinorState::~ChromeCompositorStateMachine_MinorState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  SharedDtor();
}

void ChromeCompositorStateMachine_MinorState::SharedDtor() {
}

void ChromeCompositorStateMachine_MinorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeCompositorStateMachine_MinorState& ChromeCompositorStateMachine_MinorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeCompositorStateMachine_MinorState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ChromeCompositorStateMachine_MinorState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&commit_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&did_notify_begin_main_frame_not_expected_until_) -
        reinterpret_cast<char*>(&commit_count_)) + sizeof(did_notify_begin_main_frame_not_expected_until_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&did_notify_begin_main_frame_not_expected_soon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&submit_frames_with_current_layer_tree_frame_sink_) -
        reinterpret_cast<char*>(&did_notify_begin_main_frame_not_expected_soon_)) + sizeof(submit_frames_with_current_layer_tree_frame_sink_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&did_prepare_tiles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_draw_) -
        reinterpret_cast<char*>(&did_prepare_tiles_)) + sizeof(can_draw_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&resourceless_draw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&critical_begin_main_frame_to_activate_is_fast_) -
        reinterpret_cast<char*>(&resourceless_draw_)) + sizeof(critical_begin_main_frame_to_activate_is_fast_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&main_thread_missed_last_deadline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&did_submit_in_last_frame_) -
        reinterpret_cast<char*>(&main_thread_missed_last_deadline_)) + sizeof(did_submit_in_last_frame_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&needs_impl_side_invalidation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&processing_paint_worklets_for_pending_tree_) -
        reinterpret_cast<char*>(&needs_impl_side_invalidation_)) + sizeof(processing_paint_worklets_for_pending_tree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeCompositorStateMachine_MinorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 commit_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_commit_count(&_has_bits_);
          commit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current_frame_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_current_frame_number(&_has_bits_);
          current_frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_frame_number_submit_performed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_frame_number_submit_performed(&_has_bits_);
          last_frame_number_submit_performed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_frame_number_draw_performed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_frame_number_draw_performed(&_has_bits_);
          last_frame_number_draw_performed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_frame_number_begin_main_frame_sent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_frame_number_begin_main_frame_sent(&_has_bits_);
          last_frame_number_begin_main_frame_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_draw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_did_draw(&_has_bits_);
          did_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_send_begin_main_frame_for_current_frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_did_send_begin_main_frame_for_current_frame(&_has_bits_);
          did_send_begin_main_frame_for_current_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_notify_begin_main_frame_not_expected_until = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_did_notify_begin_main_frame_not_expected_until(&_has_bits_);
          did_notify_begin_main_frame_not_expected_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_did_notify_begin_main_frame_not_expected_soon(&_has_bits_);
          did_notify_begin_main_frame_not_expected_soon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wants_begin_main_frame_not_expected = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_wants_begin_main_frame_not_expected(&_has_bits_);
          wants_begin_main_frame_not_expected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_commit_during_frame = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_did_commit_during_frame(&_has_bits_);
          did_commit_during_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_invalidate_layer_tree_frame_sink = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_did_invalidate_layer_tree_frame_sink(&_has_bits_);
          did_invalidate_layer_tree_frame_sink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_perform_impl_side_invalidaion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_did_perform_impl_side_invalidaion(&_has_bits_);
          did_perform_impl_side_invalidaion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_prepare_tiles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_did_prepare_tiles(&_has_bits_);
          did_prepare_tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 consecutive_checkerboard_animations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_consecutive_checkerboard_animations(&_has_bits_);
          consecutive_checkerboard_animations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pending_submit_frames = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pending_submit_frames(&_has_bits_);
          pending_submit_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_submit_frames_with_current_layer_tree_frame_sink(&_has_bits_);
          submit_frames_with_current_layer_tree_frame_sink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_redraw = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_needs_redraw(&_has_bits_);
          needs_redraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_prepare_tiles = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_needs_prepare_tiles(&_has_bits_);
          needs_prepare_tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_begin_main_frame = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_needs_begin_main_frame(&_has_bits_);
          needs_begin_main_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_one_begin_impl_frame = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_needs_one_begin_impl_frame(&_has_bits_);
          needs_one_begin_impl_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_visible(&_has_bits_);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool begin_frame_source_paused = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_begin_frame_source_paused(&_has_bits_);
          begin_frame_source_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_draw = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_can_draw(&_has_bits_);
          can_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool resourceless_draw = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_resourceless_draw(&_has_bits_);
          resourceless_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_pending_tree = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_has_pending_tree(&_has_bits_);
          has_pending_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pending_tree_is_ready_for_activation = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_pending_tree_is_ready_for_activation(&_has_bits_);
          pending_tree_is_ready_for_activation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active_tree_needs_first_draw = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_active_tree_needs_first_draw(&_has_bits_);
          active_tree_needs_first_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active_tree_is_ready_to_draw = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_active_tree_is_ready_to_draw(&_has_bits_);
          active_tree_is_ready_to_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_did_create_and_initialize_first_layer_tree_frame_sink(&_has_bits_);
          did_create_and_initialize_first_layer_tree_frame_sink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(val))) {
            set_tree_priority(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(val))) {
            set_scroll_handler_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_critical_begin_main_frame_to_activate_is_fast(&_has_bits_);
          critical_begin_main_frame_to_activate_is_fast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool main_thread_missed_last_deadline = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_main_thread_missed_last_deadline(&_has_bits_);
          main_thread_missed_last_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_next_begin_main_frame_to_reduce_latency = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skip_next_begin_main_frame_to_reduce_latency(&_has_bits_);
          skip_next_begin_main_frame_to_reduce_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool video_needs_begin_frames = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_video_needs_begin_frames(&_has_bits_);
          video_needs_begin_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool defer_begin_main_frame = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_defer_begin_main_frame(&_has_bits_);
          defer_begin_main_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_commit_had_no_updates = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_last_commit_had_no_updates(&_has_bits_);
          last_commit_had_no_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_draw_in_last_frame = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_did_draw_in_last_frame(&_has_bits_);
          did_draw_in_last_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_submit_in_last_frame = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_did_submit_in_last_frame(&_has_bits_);
          did_submit_in_last_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_impl_side_invalidation = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_needs_impl_side_invalidation(&_has_bits_);
          needs_impl_side_invalidation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool current_pending_tree_is_impl_side = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_current_pending_tree_is_impl_side(&_has_bits_);
          current_pending_tree_is_impl_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool previous_pending_tree_was_impl_side = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_previous_pending_tree_was_impl_side(&_has_bits_);
          previous_pending_tree_was_impl_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool processing_animation_worklets_for_active_tree = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_processing_animation_worklets_for_active_tree(&_has_bits_);
          processing_animation_worklets_for_active_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool processing_animation_worklets_for_pending_tree = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_processing_animation_worklets_for_pending_tree(&_has_bits_);
          processing_animation_worklets_for_pending_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool processing_paint_worklets_for_pending_tree = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_processing_paint_worklets_for_pending_tree(&_has_bits_);
          processing_paint_worklets_for_pending_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeCompositorStateMachine_MinorState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 commit_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_commit_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &commit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_frame_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_current_frame_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_frame_number_submit_performed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_frame_number_submit_performed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_frame_number_submit_performed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_frame_number_draw_performed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_frame_number_draw_performed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_frame_number_draw_performed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_frame_number_begin_main_frame_sent = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_frame_number_begin_main_frame_sent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_frame_number_begin_main_frame_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_draw = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_did_draw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_send_begin_main_frame_for_current_frame = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_did_send_begin_main_frame_for_current_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_send_begin_main_frame_for_current_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_notify_begin_main_frame_not_expected_until = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_did_notify_begin_main_frame_not_expected_until(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_notify_begin_main_frame_not_expected_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_did_notify_begin_main_frame_not_expected_soon(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_notify_begin_main_frame_not_expected_soon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wants_begin_main_frame_not_expected = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_wants_begin_main_frame_not_expected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_begin_main_frame_not_expected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_commit_during_frame = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_did_commit_during_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_commit_during_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_invalidate_layer_tree_frame_sink = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_did_invalidate_layer_tree_frame_sink(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_invalidate_layer_tree_frame_sink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_perform_impl_side_invalidaion = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_did_perform_impl_side_invalidaion(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_perform_impl_side_invalidaion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_prepare_tiles = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_did_prepare_tiles(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_prepare_tiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 consecutive_checkerboard_animations = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_consecutive_checkerboard_animations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &consecutive_checkerboard_animations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pending_submit_frames = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_pending_submit_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pending_submit_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_submit_frames_with_current_layer_tree_frame_sink(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &submit_frames_with_current_layer_tree_frame_sink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_redraw = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_needs_redraw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_redraw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_prepare_tiles = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_needs_prepare_tiles(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_prepare_tiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_begin_main_frame = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_needs_begin_main_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_begin_main_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_one_begin_impl_frame = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_needs_one_begin_impl_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_one_begin_impl_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_visible(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool begin_frame_source_paused = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_begin_frame_source_paused(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &begin_frame_source_paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_draw = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_can_draw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool resourceless_draw = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_resourceless_draw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resourceless_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_pending_tree = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_has_pending_tree(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pending_tree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pending_tree_is_ready_for_activation = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_pending_tree_is_ready_for_activation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_tree_is_ready_for_activation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active_tree_needs_first_draw = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_active_tree_needs_first_draw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_tree_needs_first_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active_tree_is_ready_to_draw = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_active_tree_is_ready_to_draw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_tree_is_ready_to_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_did_create_and_initialize_first_layer_tree_frame_sink(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_create_and_initialize_first_layer_tree_frame_sink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(value)) {
            set_tree_priority(static_cast< ::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(248u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(value)) {
            set_scroll_handler_state(static_cast< ::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(256u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_critical_begin_main_frame_to_activate_is_fast(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_begin_main_frame_to_activate_is_fast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool main_thread_missed_last_deadline = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_main_thread_missed_last_deadline(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_thread_missed_last_deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_next_begin_main_frame_to_reduce_latency = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          _Internal::set_has_skip_next_begin_main_frame_to_reduce_latency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_next_begin_main_frame_to_reduce_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool video_needs_begin_frames = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          _Internal::set_has_video_needs_begin_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &video_needs_begin_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool defer_begin_main_frame = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          _Internal::set_has_defer_begin_main_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defer_begin_main_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool last_commit_had_no_updates = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_last_commit_had_no_updates(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_commit_had_no_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_draw_in_last_frame = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          _Internal::set_has_did_draw_in_last_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_draw_in_last_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_submit_in_last_frame = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          _Internal::set_has_did_submit_in_last_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_submit_in_last_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_impl_side_invalidation = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {
          _Internal::set_has_needs_impl_side_invalidation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_impl_side_invalidation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool current_pending_tree_is_impl_side = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_current_pending_tree_is_impl_side(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_pending_tree_is_impl_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool previous_pending_tree_was_impl_side = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {
          _Internal::set_has_previous_pending_tree_was_impl_side(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &previous_pending_tree_was_impl_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool processing_animation_worklets_for_active_tree = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (352 & 0xFF)) {
          _Internal::set_has_processing_animation_worklets_for_active_tree(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processing_animation_worklets_for_active_tree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool processing_animation_worklets_for_pending_tree = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          _Internal::set_has_processing_animation_worklets_for_pending_tree(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processing_animation_worklets_for_pending_tree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool processing_paint_worklets_for_pending_tree = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (368 & 0xFF)) {
          _Internal::set_has_processing_paint_worklets_for_pending_tree(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processing_paint_worklets_for_pending_tree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeCompositorStateMachine_MinorState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 commit_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->commit_count(), output);
  }

  // optional int32 current_frame_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->current_frame_number(), output);
  }

  // optional int32 last_frame_number_submit_performed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->last_frame_number_submit_performed(), output);
  }

  // optional int32 last_frame_number_draw_performed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->last_frame_number_draw_performed(), output);
  }

  // optional int32 last_frame_number_begin_main_frame_sent = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->last_frame_number_begin_main_frame_sent(), output);
  }

  // optional bool did_draw = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->did_draw(), output);
  }

  // optional bool did_send_begin_main_frame_for_current_frame = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->did_send_begin_main_frame_for_current_frame(), output);
  }

  // optional bool did_notify_begin_main_frame_not_expected_until = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->did_notify_begin_main_frame_not_expected_until(), output);
  }

  // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->did_notify_begin_main_frame_not_expected_soon(), output);
  }

  // optional bool wants_begin_main_frame_not_expected = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->wants_begin_main_frame_not_expected(), output);
  }

  // optional bool did_commit_during_frame = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->did_commit_during_frame(), output);
  }

  // optional bool did_invalidate_layer_tree_frame_sink = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->did_invalidate_layer_tree_frame_sink(), output);
  }

  // optional bool did_perform_impl_side_invalidaion = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->did_perform_impl_side_invalidaion(), output);
  }

  // optional bool did_prepare_tiles = 14;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->did_prepare_tiles(), output);
  }

  // optional int32 consecutive_checkerboard_animations = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->consecutive_checkerboard_animations(), output);
  }

  // optional int32 pending_submit_frames = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->pending_submit_frames(), output);
  }

  // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->submit_frames_with_current_layer_tree_frame_sink(), output);
  }

  // optional bool needs_redraw = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->needs_redraw(), output);
  }

  // optional bool needs_prepare_tiles = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->needs_prepare_tiles(), output);
  }

  // optional bool needs_begin_main_frame = 20;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->needs_begin_main_frame(), output);
  }

  // optional bool needs_one_begin_impl_frame = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->needs_one_begin_impl_frame(), output);
  }

  // optional bool visible = 22;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->visible(), output);
  }

  // optional bool begin_frame_source_paused = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->begin_frame_source_paused(), output);
  }

  // optional bool can_draw = 24;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->can_draw(), output);
  }

  // optional bool resourceless_draw = 25;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->resourceless_draw(), output);
  }

  // optional bool has_pending_tree = 26;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->has_pending_tree(), output);
  }

  // optional bool pending_tree_is_ready_for_activation = 27;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->pending_tree_is_ready_for_activation(), output);
  }

  // optional bool active_tree_needs_first_draw = 28;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(28, this->active_tree_needs_first_draw(), output);
  }

  // optional bool active_tree_is_ready_to_draw = 29;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(29, this->active_tree_is_ready_to_draw(), output);
  }

  // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->did_create_and_initialize_first_layer_tree_frame_sink(), output);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->tree_priority(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      32, this->scroll_handler_state(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(33, this->critical_begin_main_frame_to_activate_is_fast(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool main_thread_missed_last_deadline = 34;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->main_thread_missed_last_deadline(), output);
  }

  // optional bool skip_next_begin_main_frame_to_reduce_latency = 35;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->skip_next_begin_main_frame_to_reduce_latency(), output);
  }

  // optional bool video_needs_begin_frames = 36;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->video_needs_begin_frames(), output);
  }

  // optional bool defer_begin_main_frame = 37;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(37, this->defer_begin_main_frame(), output);
  }

  // optional bool last_commit_had_no_updates = 38;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(38, this->last_commit_had_no_updates(), output);
  }

  // optional bool did_draw_in_last_frame = 39;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(39, this->did_draw_in_last_frame(), output);
  }

  // optional bool did_submit_in_last_frame = 40;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(40, this->did_submit_in_last_frame(), output);
  }

  // optional bool needs_impl_side_invalidation = 41;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(41, this->needs_impl_side_invalidation(), output);
  }

  // optional bool current_pending_tree_is_impl_side = 42;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(42, this->current_pending_tree_is_impl_side(), output);
  }

  // optional bool previous_pending_tree_was_impl_side = 43;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(43, this->previous_pending_tree_was_impl_side(), output);
  }

  // optional bool processing_animation_worklets_for_active_tree = 44;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(44, this->processing_animation_worklets_for_active_tree(), output);
  }

  // optional bool processing_animation_worklets_for_pending_tree = 45;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(45, this->processing_animation_worklets_for_pending_tree(), output);
  }

  // optional bool processing_paint_worklets_for_pending_tree = 46;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(46, this->processing_paint_worklets_for_pending_tree(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeCompositorStateMachine.MinorState)
}

size_t ChromeCompositorStateMachine_MinorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 commit_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->commit_count());
    }

    // optional int32 current_frame_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->current_frame_number());
    }

    // optional int32 last_frame_number_submit_performed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_frame_number_submit_performed());
    }

    // optional int32 last_frame_number_draw_performed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_frame_number_draw_performed());
    }

    // optional int32 last_frame_number_begin_main_frame_sent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_frame_number_begin_main_frame_sent());
    }

    // optional bool did_draw = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool did_send_begin_main_frame_for_current_frame = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool did_notify_begin_main_frame_not_expected_until = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool wants_begin_main_frame_not_expected = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool did_commit_during_frame = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool did_invalidate_layer_tree_frame_sink = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool did_perform_impl_side_invalidaion = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 consecutive_checkerboard_animations = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->consecutive_checkerboard_animations());
    }

    // optional int32 pending_submit_frames = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pending_submit_frames());
    }

    // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->submit_frames_with_current_layer_tree_frame_sink());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool did_prepare_tiles = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool needs_redraw = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_prepare_tiles = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_begin_main_frame = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_one_begin_impl_frame = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool visible = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool begin_frame_source_paused = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool can_draw = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool resourceless_draw = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool has_pending_tree = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool pending_tree_is_ready_for_activation = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool active_tree_needs_first_draw = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tree_priority());
    }

    // optional bool active_tree_is_ready_to_draw = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool main_thread_missed_last_deadline = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->scroll_handler_state());
    }

    // optional bool skip_next_begin_main_frame_to_reduce_latency = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool video_needs_begin_frames = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool defer_begin_main_frame = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool last_commit_had_no_updates = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool did_draw_in_last_frame = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool did_submit_in_last_frame = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool needs_impl_side_invalidation = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool current_pending_tree_is_impl_side = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool previous_pending_tree_was_impl_side = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool processing_animation_worklets_for_active_tree = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool processing_animation_worklets_for_pending_tree = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool processing_paint_worklets_for_pending_tree = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorStateMachine_MinorState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeCompositorStateMachine_MinorState*>(
      &from));
}

void ChromeCompositorStateMachine_MinorState::MergeFrom(const ChromeCompositorStateMachine_MinorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      commit_count_ = from.commit_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_frame_number_ = from.current_frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_frame_number_submit_performed_ = from.last_frame_number_submit_performed_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_frame_number_draw_performed_ = from.last_frame_number_draw_performed_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_frame_number_begin_main_frame_sent_ = from.last_frame_number_begin_main_frame_sent_;
    }
    if (cached_has_bits & 0x00000020u) {
      did_draw_ = from.did_draw_;
    }
    if (cached_has_bits & 0x00000040u) {
      did_send_begin_main_frame_for_current_frame_ = from.did_send_begin_main_frame_for_current_frame_;
    }
    if (cached_has_bits & 0x00000080u) {
      did_notify_begin_main_frame_not_expected_until_ = from.did_notify_begin_main_frame_not_expected_until_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      did_notify_begin_main_frame_not_expected_soon_ = from.did_notify_begin_main_frame_not_expected_soon_;
    }
    if (cached_has_bits & 0x00000200u) {
      wants_begin_main_frame_not_expected_ = from.wants_begin_main_frame_not_expected_;
    }
    if (cached_has_bits & 0x00000400u) {
      did_commit_during_frame_ = from.did_commit_during_frame_;
    }
    if (cached_has_bits & 0x00000800u) {
      did_invalidate_layer_tree_frame_sink_ = from.did_invalidate_layer_tree_frame_sink_;
    }
    if (cached_has_bits & 0x00001000u) {
      did_perform_impl_side_invalidaion_ = from.did_perform_impl_side_invalidaion_;
    }
    if (cached_has_bits & 0x00002000u) {
      consecutive_checkerboard_animations_ = from.consecutive_checkerboard_animations_;
    }
    if (cached_has_bits & 0x00004000u) {
      pending_submit_frames_ = from.pending_submit_frames_;
    }
    if (cached_has_bits & 0x00008000u) {
      submit_frames_with_current_layer_tree_frame_sink_ = from.submit_frames_with_current_layer_tree_frame_sink_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      did_prepare_tiles_ = from.did_prepare_tiles_;
    }
    if (cached_has_bits & 0x00020000u) {
      needs_redraw_ = from.needs_redraw_;
    }
    if (cached_has_bits & 0x00040000u) {
      needs_prepare_tiles_ = from.needs_prepare_tiles_;
    }
    if (cached_has_bits & 0x00080000u) {
      needs_begin_main_frame_ = from.needs_begin_main_frame_;
    }
    if (cached_has_bits & 0x00100000u) {
      needs_one_begin_impl_frame_ = from.needs_one_begin_impl_frame_;
    }
    if (cached_has_bits & 0x00200000u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00400000u) {
      begin_frame_source_paused_ = from.begin_frame_source_paused_;
    }
    if (cached_has_bits & 0x00800000u) {
      can_draw_ = from.can_draw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      resourceless_draw_ = from.resourceless_draw_;
    }
    if (cached_has_bits & 0x02000000u) {
      has_pending_tree_ = from.has_pending_tree_;
    }
    if (cached_has_bits & 0x04000000u) {
      pending_tree_is_ready_for_activation_ = from.pending_tree_is_ready_for_activation_;
    }
    if (cached_has_bits & 0x08000000u) {
      active_tree_needs_first_draw_ = from.active_tree_needs_first_draw_;
    }
    if (cached_has_bits & 0x10000000u) {
      tree_priority_ = from.tree_priority_;
    }
    if (cached_has_bits & 0x20000000u) {
      active_tree_is_ready_to_draw_ = from.active_tree_is_ready_to_draw_;
    }
    if (cached_has_bits & 0x40000000u) {
      did_create_and_initialize_first_layer_tree_frame_sink_ = from.did_create_and_initialize_first_layer_tree_frame_sink_;
    }
    if (cached_has_bits & 0x80000000u) {
      critical_begin_main_frame_to_activate_is_fast_ = from.critical_begin_main_frame_to_activate_is_fast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      main_thread_missed_last_deadline_ = from.main_thread_missed_last_deadline_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_handler_state_ = from.scroll_handler_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      skip_next_begin_main_frame_to_reduce_latency_ = from.skip_next_begin_main_frame_to_reduce_latency_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_needs_begin_frames_ = from.video_needs_begin_frames_;
    }
    if (cached_has_bits & 0x00000010u) {
      defer_begin_main_frame_ = from.defer_begin_main_frame_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_commit_had_no_updates_ = from.last_commit_had_no_updates_;
    }
    if (cached_has_bits & 0x00000040u) {
      did_draw_in_last_frame_ = from.did_draw_in_last_frame_;
    }
    if (cached_has_bits & 0x00000080u) {
      did_submit_in_last_frame_ = from.did_submit_in_last_frame_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      needs_impl_side_invalidation_ = from.needs_impl_side_invalidation_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_pending_tree_is_impl_side_ = from.current_pending_tree_is_impl_side_;
    }
    if (cached_has_bits & 0x00000400u) {
      previous_pending_tree_was_impl_side_ = from.previous_pending_tree_was_impl_side_;
    }
    if (cached_has_bits & 0x00000800u) {
      processing_animation_worklets_for_active_tree_ = from.processing_animation_worklets_for_active_tree_;
    }
    if (cached_has_bits & 0x00001000u) {
      processing_animation_worklets_for_pending_tree_ = from.processing_animation_worklets_for_pending_tree_;
    }
    if (cached_has_bits & 0x00002000u) {
      processing_paint_worklets_for_pending_tree_ = from.processing_paint_worklets_for_pending_tree_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ChromeCompositorStateMachine_MinorState::CopyFrom(const ChromeCompositorStateMachine_MinorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorStateMachine_MinorState::IsInitialized() const {
  return true;
}

void ChromeCompositorStateMachine_MinorState::InternalSwap(ChromeCompositorStateMachine_MinorState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(commit_count_, other->commit_count_);
  swap(current_frame_number_, other->current_frame_number_);
  swap(last_frame_number_submit_performed_, other->last_frame_number_submit_performed_);
  swap(last_frame_number_draw_performed_, other->last_frame_number_draw_performed_);
  swap(last_frame_number_begin_main_frame_sent_, other->last_frame_number_begin_main_frame_sent_);
  swap(did_draw_, other->did_draw_);
  swap(did_send_begin_main_frame_for_current_frame_, other->did_send_begin_main_frame_for_current_frame_);
  swap(did_notify_begin_main_frame_not_expected_until_, other->did_notify_begin_main_frame_not_expected_until_);
  swap(did_notify_begin_main_frame_not_expected_soon_, other->did_notify_begin_main_frame_not_expected_soon_);
  swap(wants_begin_main_frame_not_expected_, other->wants_begin_main_frame_not_expected_);
  swap(did_commit_during_frame_, other->did_commit_during_frame_);
  swap(did_invalidate_layer_tree_frame_sink_, other->did_invalidate_layer_tree_frame_sink_);
  swap(did_perform_impl_side_invalidaion_, other->did_perform_impl_side_invalidaion_);
  swap(consecutive_checkerboard_animations_, other->consecutive_checkerboard_animations_);
  swap(pending_submit_frames_, other->pending_submit_frames_);
  swap(submit_frames_with_current_layer_tree_frame_sink_, other->submit_frames_with_current_layer_tree_frame_sink_);
  swap(did_prepare_tiles_, other->did_prepare_tiles_);
  swap(needs_redraw_, other->needs_redraw_);
  swap(needs_prepare_tiles_, other->needs_prepare_tiles_);
  swap(needs_begin_main_frame_, other->needs_begin_main_frame_);
  swap(needs_one_begin_impl_frame_, other->needs_one_begin_impl_frame_);
  swap(visible_, other->visible_);
  swap(begin_frame_source_paused_, other->begin_frame_source_paused_);
  swap(can_draw_, other->can_draw_);
  swap(resourceless_draw_, other->resourceless_draw_);
  swap(has_pending_tree_, other->has_pending_tree_);
  swap(pending_tree_is_ready_for_activation_, other->pending_tree_is_ready_for_activation_);
  swap(active_tree_needs_first_draw_, other->active_tree_needs_first_draw_);
  swap(tree_priority_, other->tree_priority_);
  swap(active_tree_is_ready_to_draw_, other->active_tree_is_ready_to_draw_);
  swap(did_create_and_initialize_first_layer_tree_frame_sink_, other->did_create_and_initialize_first_layer_tree_frame_sink_);
  swap(critical_begin_main_frame_to_activate_is_fast_, other->critical_begin_main_frame_to_activate_is_fast_);
  swap(main_thread_missed_last_deadline_, other->main_thread_missed_last_deadline_);
  swap(scroll_handler_state_, other->scroll_handler_state_);
  swap(skip_next_begin_main_frame_to_reduce_latency_, other->skip_next_begin_main_frame_to_reduce_latency_);
  swap(video_needs_begin_frames_, other->video_needs_begin_frames_);
  swap(defer_begin_main_frame_, other->defer_begin_main_frame_);
  swap(last_commit_had_no_updates_, other->last_commit_had_no_updates_);
  swap(did_draw_in_last_frame_, other->did_draw_in_last_frame_);
  swap(did_submit_in_last_frame_, other->did_submit_in_last_frame_);
  swap(needs_impl_side_invalidation_, other->needs_impl_side_invalidation_);
  swap(current_pending_tree_is_impl_side_, other->current_pending_tree_is_impl_side_);
  swap(previous_pending_tree_was_impl_side_, other->previous_pending_tree_was_impl_side_);
  swap(processing_animation_worklets_for_active_tree_, other->processing_animation_worklets_for_active_tree_);
  swap(processing_animation_worklets_for_pending_tree_, other->processing_animation_worklets_for_pending_tree_);
  swap(processing_paint_worklets_for_pending_tree_, other->processing_paint_worklets_for_pending_tree_);
}

std::string ChromeCompositorStateMachine_MinorState::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorStateMachine.MinorState";
}


// ===================================================================

void ChromeCompositorStateMachine::InitAsDefaultInstance() {
  ::perfetto::protos::_ChromeCompositorStateMachine_default_instance_._instance.get_mutable()->major_state_ = const_cast< ::perfetto::protos::ChromeCompositorStateMachine_MajorState*>(
      ::perfetto::protos::ChromeCompositorStateMachine_MajorState::internal_default_instance());
  ::perfetto::protos::_ChromeCompositorStateMachine_default_instance_._instance.get_mutable()->minor_state_ = const_cast< ::perfetto::protos::ChromeCompositorStateMachine_MinorState*>(
      ::perfetto::protos::ChromeCompositorStateMachine_MinorState::internal_default_instance());
}
class ChromeCompositorStateMachine::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorStateMachine>()._has_bits_);
  static const ::perfetto::protos::ChromeCompositorStateMachine_MajorState& major_state(const ChromeCompositorStateMachine* msg);
  static void set_has_major_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ChromeCompositorStateMachine_MinorState& minor_state(const ChromeCompositorStateMachine* msg);
  static void set_has_minor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ChromeCompositorStateMachine_MajorState&
ChromeCompositorStateMachine::_Internal::major_state(const ChromeCompositorStateMachine* msg) {
  return *msg->major_state_;
}
const ::perfetto::protos::ChromeCompositorStateMachine_MinorState&
ChromeCompositorStateMachine::_Internal::minor_state(const ChromeCompositorStateMachine* msg) {
  return *msg->minor_state_;
}
ChromeCompositorStateMachine::ChromeCompositorStateMachine()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeCompositorStateMachine)
}
ChromeCompositorStateMachine::ChromeCompositorStateMachine(const ChromeCompositorStateMachine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_major_state()) {
    major_state_ = new ::perfetto::protos::ChromeCompositorStateMachine_MajorState(*from.major_state_);
  } else {
    major_state_ = nullptr;
  }
  if (from.has_minor_state()) {
    minor_state_ = new ::perfetto::protos::ChromeCompositorStateMachine_MinorState(*from.minor_state_);
  } else {
    minor_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorStateMachine)
}

void ChromeCompositorStateMachine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  ::memset(&major_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_state_) -
      reinterpret_cast<char*>(&major_state_)) + sizeof(minor_state_));
}

ChromeCompositorStateMachine::~ChromeCompositorStateMachine() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorStateMachine)
  SharedDtor();
}

void ChromeCompositorStateMachine::SharedDtor() {
  if (this != internal_default_instance()) delete major_state_;
  if (this != internal_default_instance()) delete minor_state_;
}

void ChromeCompositorStateMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeCompositorStateMachine& ChromeCompositorStateMachine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeCompositorStateMachine_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ChromeCompositorStateMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorStateMachine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(major_state_ != nullptr);
      major_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(minor_state_ != nullptr);
      minor_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeCompositorStateMachine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_major_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_minor_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeCompositorStateMachine::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeCompositorStateMachine)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_major_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_minor_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeCompositorStateMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeCompositorStateMachine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeCompositorStateMachine::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeCompositorStateMachine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::major_state(this), output);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::minor_state(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeCompositorStateMachine)
}

size_t ChromeCompositorStateMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorStateMachine)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *major_state_);
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minor_state_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorStateMachine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeCompositorStateMachine*>(
      &from));
}

void ChromeCompositorStateMachine::MergeFrom(const ChromeCompositorStateMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorStateMachine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_major_state()->::perfetto::protos::ChromeCompositorStateMachine_MajorState::MergeFrom(from.major_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_minor_state()->::perfetto::protos::ChromeCompositorStateMachine_MinorState::MergeFrom(from.minor_state());
    }
  }
}

void ChromeCompositorStateMachine::CopyFrom(const ChromeCompositorStateMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorStateMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorStateMachine::IsInitialized() const {
  return true;
}

void ChromeCompositorStateMachine::InternalSwap(ChromeCompositorStateMachine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(major_state_, other->major_state_);
  swap(minor_state_, other->minor_state_);
}

std::string ChromeCompositorStateMachine::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorStateMachine";
}


// ===================================================================

void BeginFrameArgs::InitAsDefaultInstance() {
}
class BeginFrameArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginFrameArgs>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deadline_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_interval_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_on_critical_path(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_animate_only(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::SourceLocation& source_location(const BeginFrameArgs* msg);
};

const ::perfetto::protos::SourceLocation&
BeginFrameArgs::_Internal::source_location(const BeginFrameArgs* msg) {
  return *msg->created_from_.source_location_;
}
void BeginFrameArgs::set_allocated_source_location(::perfetto::protos::SourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_created_from();
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    set_has_source_location();
    created_from_.source_location_ = source_location;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginFrameArgs.source_location)
}
void BeginFrameArgs::clear_source_location() {
  if (has_source_location()) {
    delete created_from_.source_location_;
    clear_has_created_from();
  }
}
BeginFrameArgs::BeginFrameArgs()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.BeginFrameArgs)
}
BeginFrameArgs::BeginFrameArgs(const BeginFrameArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_delta_us_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(interval_delta_us_));
  clear_has_created_from();
  switch (from.created_from_case()) {
    case kSourceLocationIid: {
      set_source_location_iid(from.source_location_iid());
      break;
    }
    case kSourceLocation: {
      mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(from.source_location());
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginFrameArgs)
}

void BeginFrameArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_delta_us_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(interval_delta_us_));
  clear_has_created_from();
}

BeginFrameArgs::~BeginFrameArgs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginFrameArgs)
  SharedDtor();
}

void BeginFrameArgs::SharedDtor() {
  if (has_created_from()) {
    clear_created_from();
  }
}

void BeginFrameArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginFrameArgs& BeginFrameArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BeginFrameArgs::clear_created_from() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.BeginFrameArgs)
  switch (created_from_case()) {
    case kSourceLocationIid: {
      // No need to clear
      break;
    }
    case kSourceLocation: {
      delete created_from_.source_location_;
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CREATED_FROM_NOT_SET;
}


void BeginFrameArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginFrameArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interval_delta_us_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(interval_delta_us_));
  }
  clear_created_from();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginFrameArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType_IsValid(val))) {
            set_type(static_cast<::perfetto::protos::BeginFrameArgs_BeginFrameArgsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_time_us(&has_bits);
          frame_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deadline_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_deadline_us(&has_bits);
          deadline_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 interval_delta_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_interval_delta_us(&has_bits);
          interval_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool on_critical_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_on_critical_path(&has_bits);
          on_critical_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool animate_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_animate_only(&has_bits);
          animate_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_location_iid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          set_source_location_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SourceLocation source_location = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_source_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginFrameArgs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.BeginFrameArgs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::BeginFrameArgs_BeginFrameArgsType_IsValid(value)) {
            set_type(static_cast< ::perfetto::protos::BeginFrameArgs_BeginFrameArgsType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_source_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sequence_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_time_us = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_frame_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadline_us = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_deadline_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 interval_delta_us = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_interval_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool on_critical_path = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_on_critical_path(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_critical_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool animate_only = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_animate_only(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animate_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_location_iid = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          clear_created_from();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_from_.source_location_iid_)));
          set_has_source_location_iid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SourceLocation source_location = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.BeginFrameArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.BeginFrameArgs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginFrameArgs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.BeginFrameArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 source_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->source_id(), output);
  }

  // optional uint64 sequence_number = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->sequence_number(), output);
  }

  // optional int64 frame_time_us = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->frame_time_us(), output);
  }

  // optional int64 deadline_us = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->deadline_us(), output);
  }

  // optional int64 interval_delta_us = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->interval_delta_us(), output);
  }

  // optional bool on_critical_path = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->on_critical_path(), output);
  }

  // optional bool animate_only = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->animate_only(), output);
  }

  switch (created_from_case()) {
    case kSourceLocationIid:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->source_location_iid(), output);
      break;
    case kSourceLocation:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        10, _Internal::source_location(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.BeginFrameArgs)
}

size_t BeginFrameArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginFrameArgs)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 source_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->source_id());
    }

    // optional uint64 sequence_number = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // optional int64 frame_time_us = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_time_us());
    }

    // optional int64 deadline_us = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deadline_us());
    }

    // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool on_critical_path = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool animate_only = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int64 interval_delta_us = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->interval_delta_us());
    }

  }
  switch (created_from_case()) {
    // optional uint64 source_location_iid = 9;
    case kSourceLocationIid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->source_location_iid());
      break;
    }
    // optional .perfetto.protos.SourceLocation source_location = 10;
    case kSourceLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *created_from_.source_location_);
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginFrameArgs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BeginFrameArgs*>(
      &from));
}

void BeginFrameArgs::MergeFrom(const BeginFrameArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginFrameArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_time_us_ = from.frame_time_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      deadline_us_ = from.deadline_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      on_critical_path_ = from.on_critical_path_;
    }
    if (cached_has_bits & 0x00000040u) {
      animate_only_ = from.animate_only_;
    }
    if (cached_has_bits & 0x00000080u) {
      interval_delta_us_ = from.interval_delta_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.created_from_case()) {
    case kSourceLocationIid: {
      set_source_location_iid(from.source_location_iid());
      break;
    }
    case kSourceLocation: {
      mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(from.source_location());
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
}

void BeginFrameArgs::CopyFrom(const BeginFrameArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginFrameArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFrameArgs::IsInitialized() const {
  return true;
}

void BeginFrameArgs::InternalSwap(BeginFrameArgs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_id_, other->source_id_);
  swap(sequence_number_, other->sequence_number_);
  swap(frame_time_us_, other->frame_time_us_);
  swap(deadline_us_, other->deadline_us_);
  swap(type_, other->type_);
  swap(on_critical_path_, other->on_critical_path_);
  swap(animate_only_, other->animate_only_);
  swap(interval_delta_us_, other->interval_delta_us_);
  swap(created_from_, other->created_from_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string BeginFrameArgs::GetTypeName() const {
  return "perfetto.protos.BeginFrameArgs";
}


// ===================================================================

void BeginImplFrameArgs_TimestampsInUs::InitAsDefaultInstance() {
}
class BeginImplFrameArgs_TimestampsInUs::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginImplFrameArgs_TimestampsInUs>()._has_bits_);
  static void set_has_interval_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_now_to_deadline_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_time_to_now_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_time_to_deadline_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_now(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deadline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BeginImplFrameArgs_TimestampsInUs::BeginImplFrameArgs_TimestampsInUs()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
}
BeginImplFrameArgs_TimestampsInUs::BeginImplFrameArgs_TimestampsInUs(const BeginImplFrameArgs_TimestampsInUs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interval_delta_, &from.interval_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&deadline_) -
    reinterpret_cast<char*>(&interval_delta_)) + sizeof(deadline_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
}

void BeginImplFrameArgs_TimestampsInUs::SharedCtor() {
  ::memset(&interval_delta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_) -
      reinterpret_cast<char*>(&interval_delta_)) + sizeof(deadline_));
}

BeginImplFrameArgs_TimestampsInUs::~BeginImplFrameArgs_TimestampsInUs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  SharedDtor();
}

void BeginImplFrameArgs_TimestampsInUs::SharedDtor() {
}

void BeginImplFrameArgs_TimestampsInUs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginImplFrameArgs_TimestampsInUs& BeginImplFrameArgs_TimestampsInUs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginImplFrameArgs_TimestampsInUs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BeginImplFrameArgs_TimestampsInUs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&interval_delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deadline_) -
        reinterpret_cast<char*>(&interval_delta_)) + sizeof(deadline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginImplFrameArgs_TimestampsInUs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 interval_delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_interval_delta(&has_bits);
          interval_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now_to_deadline_delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_now_to_deadline_delta(&has_bits);
          now_to_deadline_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_time_to_now_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frame_time_to_now_delta(&has_bits);
          frame_time_to_now_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_time_to_deadline_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_time_to_deadline_delta(&has_bits);
          frame_time_to_deadline_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 now = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_now(&has_bits);
          now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_frame_time(&has_bits);
          frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deadline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deadline(&has_bits);
          deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginImplFrameArgs_TimestampsInUs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 interval_delta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_interval_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now_to_deadline_delta = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_now_to_deadline_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_to_deadline_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_time_to_now_delta = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_frame_time_to_now_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_time_to_now_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_time_to_deadline_delta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_frame_time_to_deadline_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_time_to_deadline_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 now = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_now(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_frame_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadline = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_deadline(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginImplFrameArgs_TimestampsInUs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 interval_delta = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->interval_delta(), output);
  }

  // optional int64 now_to_deadline_delta = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->now_to_deadline_delta(), output);
  }

  // optional int64 frame_time_to_now_delta = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->frame_time_to_now_delta(), output);
  }

  // optional int64 frame_time_to_deadline_delta = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->frame_time_to_deadline_delta(), output);
  }

  // optional int64 now = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->now(), output);
  }

  // optional int64 frame_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->frame_time(), output);
  }

  // optional int64 deadline = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->deadline(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
}

size_t BeginImplFrameArgs_TimestampsInUs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 interval_delta = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->interval_delta());
    }

    // optional int64 now_to_deadline_delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now_to_deadline_delta());
    }

    // optional int64 frame_time_to_now_delta = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_time_to_now_delta());
    }

    // optional int64 frame_time_to_deadline_delta = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_time_to_deadline_delta());
    }

    // optional int64 now = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->now());
    }

    // optional int64 frame_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_time());
    }

    // optional int64 deadline = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deadline());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginImplFrameArgs_TimestampsInUs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BeginImplFrameArgs_TimestampsInUs*>(
      &from));
}

void BeginImplFrameArgs_TimestampsInUs::MergeFrom(const BeginImplFrameArgs_TimestampsInUs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      interval_delta_ = from.interval_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      now_to_deadline_delta_ = from.now_to_deadline_delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_time_to_now_delta_ = from.frame_time_to_now_delta_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_time_to_deadline_delta_ = from.frame_time_to_deadline_delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      now_ = from.now_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_time_ = from.frame_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      deadline_ = from.deadline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeginImplFrameArgs_TimestampsInUs::CopyFrom(const BeginImplFrameArgs_TimestampsInUs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginImplFrameArgs_TimestampsInUs::IsInitialized() const {
  return true;
}

void BeginImplFrameArgs_TimestampsInUs::InternalSwap(BeginImplFrameArgs_TimestampsInUs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interval_delta_, other->interval_delta_);
  swap(now_to_deadline_delta_, other->now_to_deadline_delta_);
  swap(frame_time_to_now_delta_, other->frame_time_to_now_delta_);
  swap(frame_time_to_deadline_delta_, other->frame_time_to_deadline_delta_);
  swap(now_, other->now_);
  swap(frame_time_, other->frame_time_);
  swap(deadline_, other->deadline_);
}

std::string BeginImplFrameArgs_TimestampsInUs::GetTypeName() const {
  return "perfetto.protos.BeginImplFrameArgs.TimestampsInUs";
}


// ===================================================================

void BeginImplFrameArgs::InitAsDefaultInstance() {
  ::perfetto::protos::_BeginImplFrameArgs_default_instance_._instance.get_mutable()->timestamps_in_us_ = const_cast< ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs*>(
      ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs::internal_default_instance());
}
class BeginImplFrameArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginImplFrameArgs>()._has_bits_);
  static void set_has_updated_at_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finished_at_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::BeginFrameArgs& current_args(const BeginImplFrameArgs* msg);
  static const ::perfetto::protos::BeginFrameArgs& last_args(const BeginImplFrameArgs* msg);
  static const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs& timestamps_in_us(const BeginImplFrameArgs* msg);
  static void set_has_timestamps_in_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BeginFrameArgs&
BeginImplFrameArgs::_Internal::current_args(const BeginImplFrameArgs* msg) {
  return *msg->args_.current_args_;
}
const ::perfetto::protos::BeginFrameArgs&
BeginImplFrameArgs::_Internal::last_args(const BeginImplFrameArgs* msg) {
  return *msg->args_.last_args_;
}
const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs&
BeginImplFrameArgs::_Internal::timestamps_in_us(const BeginImplFrameArgs* msg) {
  return *msg->timestamps_in_us_;
}
void BeginImplFrameArgs::set_allocated_current_args(::perfetto::protos::BeginFrameArgs* current_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_args();
  if (current_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_args, submessage_arena);
    }
    set_has_current_args();
    args_.current_args_ = current_args;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginImplFrameArgs.current_args)
}
void BeginImplFrameArgs::set_allocated_last_args(::perfetto::protos::BeginFrameArgs* last_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_args();
  if (last_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_args, submessage_arena);
    }
    set_has_last_args();
    args_.last_args_ = last_args;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginImplFrameArgs.last_args)
}
BeginImplFrameArgs::BeginImplFrameArgs()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.BeginImplFrameArgs)
}
BeginImplFrameArgs::BeginImplFrameArgs(const BeginImplFrameArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamps_in_us()) {
    timestamps_in_us_ = new ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs(*from.timestamps_in_us_);
  } else {
    timestamps_in_us_ = nullptr;
  }
  ::memcpy(&updated_at_us_, &from.updated_at_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&updated_at_us_)) + sizeof(state_));
  clear_has_args();
  switch (from.args_case()) {
    case kCurrentArgs: {
      mutable_current_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(from.current_args());
      break;
    }
    case kLastArgs: {
      mutable_last_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(from.last_args());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginImplFrameArgs)
}

void BeginImplFrameArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  ::memset(&timestamps_in_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&timestamps_in_us_)) + sizeof(state_));
  clear_has_args();
}

BeginImplFrameArgs::~BeginImplFrameArgs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginImplFrameArgs)
  SharedDtor();
}

void BeginImplFrameArgs::SharedDtor() {
  if (this != internal_default_instance()) delete timestamps_in_us_;
  if (has_args()) {
    clear_args();
  }
}

void BeginImplFrameArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginImplFrameArgs& BeginImplFrameArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginImplFrameArgs_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BeginImplFrameArgs::clear_args() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.BeginImplFrameArgs)
  switch (args_case()) {
    case kCurrentArgs: {
      delete args_.current_args_;
      break;
    }
    case kLastArgs: {
      delete args_.last_args_;
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGS_NOT_SET;
}


void BeginImplFrameArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginImplFrameArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamps_in_us_ != nullptr);
    timestamps_in_us_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&updated_at_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&updated_at_us_)) + sizeof(state_));
  }
  clear_args();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginImplFrameArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 updated_at_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_updated_at_us(&has_bits);
          updated_at_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 finished_at_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_finished_at_us(&has_bits);
          finished_at_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BeginImplFrameArgs_State_IsValid(val))) {
            set_state(static_cast<::perfetto::protos::BeginImplFrameArgs_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameArgs current_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_current_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameArgs last_args = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_last_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_timestamps_in_us(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginImplFrameArgs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.BeginImplFrameArgs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 updated_at_us = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_updated_at_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 finished_at_us = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_finished_at_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &finished_at_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::BeginImplFrameArgs_State_IsValid(value)) {
            set_state(static_cast< ::perfetto::protos::BeginImplFrameArgs_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginFrameArgs current_args = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginFrameArgs last_args = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamps_in_us()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.BeginImplFrameArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.BeginImplFrameArgs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginImplFrameArgs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.BeginImplFrameArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 updated_at_us = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->updated_at_us(), output);
  }

  // optional int64 finished_at_us = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->finished_at_us(), output);
  }

  // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  switch (args_case()) {
    case kCurrentArgs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::current_args(this), output);
      break;
    case kLastArgs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::last_args(this), output);
      break;
    default: ;
  }
  // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::timestamps_in_us(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.BeginImplFrameArgs)
}

size_t BeginImplFrameArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginImplFrameArgs)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamps_in_us_);
    }

    // optional int64 updated_at_us = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->updated_at_us());
    }

    // optional int64 finished_at_us = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->finished_at_us());
    }

    // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  switch (args_case()) {
    // optional .perfetto.protos.BeginFrameArgs current_args = 4;
    case kCurrentArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *args_.current_args_);
      break;
    }
    // optional .perfetto.protos.BeginFrameArgs last_args = 5;
    case kLastArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *args_.last_args_);
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginImplFrameArgs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BeginImplFrameArgs*>(
      &from));
}

void BeginImplFrameArgs::MergeFrom(const BeginImplFrameArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginImplFrameArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamps_in_us()->::perfetto::protos::BeginImplFrameArgs_TimestampsInUs::MergeFrom(from.timestamps_in_us());
    }
    if (cached_has_bits & 0x00000002u) {
      updated_at_us_ = from.updated_at_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      finished_at_us_ = from.finished_at_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.args_case()) {
    case kCurrentArgs: {
      mutable_current_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(from.current_args());
      break;
    }
    case kLastArgs: {
      mutable_last_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(from.last_args());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
}

void BeginImplFrameArgs::CopyFrom(const BeginImplFrameArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginImplFrameArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginImplFrameArgs::IsInitialized() const {
  return true;
}

void BeginImplFrameArgs::InternalSwap(BeginImplFrameArgs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamps_in_us_, other->timestamps_in_us_);
  swap(updated_at_us_, other->updated_at_us_);
  swap(finished_at_us_, other->finished_at_us_);
  swap(state_, other->state_);
  swap(args_, other->args_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string BeginImplFrameArgs::GetTypeName() const {
  return "perfetto.protos.BeginImplFrameArgs";
}


// ===================================================================

void BeginFrameObserverState::InitAsDefaultInstance() {
  ::perfetto::protos::_BeginFrameObserverState_default_instance_._instance.get_mutable()->last_begin_frame_args_ = const_cast< ::perfetto::protos::BeginFrameArgs*>(
      ::perfetto::protos::BeginFrameArgs::internal_default_instance());
}
class BeginFrameObserverState::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginFrameObserverState>()._has_bits_);
  static void set_has_dropped_begin_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::BeginFrameArgs& last_begin_frame_args(const BeginFrameObserverState* msg);
  static void set_has_last_begin_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BeginFrameArgs&
BeginFrameObserverState::_Internal::last_begin_frame_args(const BeginFrameObserverState* msg) {
  return *msg->last_begin_frame_args_;
}
BeginFrameObserverState::BeginFrameObserverState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.BeginFrameObserverState)
}
BeginFrameObserverState::BeginFrameObserverState(const BeginFrameObserverState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_begin_frame_args()) {
    last_begin_frame_args_ = new ::perfetto::protos::BeginFrameArgs(*from.last_begin_frame_args_);
  } else {
    last_begin_frame_args_ = nullptr;
  }
  dropped_begin_frame_args_ = from.dropped_begin_frame_args_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginFrameObserverState)
}

void BeginFrameObserverState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  ::memset(&last_begin_frame_args_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_begin_frame_args_) -
      reinterpret_cast<char*>(&last_begin_frame_args_)) + sizeof(dropped_begin_frame_args_));
}

BeginFrameObserverState::~BeginFrameObserverState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginFrameObserverState)
  SharedDtor();
}

void BeginFrameObserverState::SharedDtor() {
  if (this != internal_default_instance()) delete last_begin_frame_args_;
}

void BeginFrameObserverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginFrameObserverState& BeginFrameObserverState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginFrameObserverState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BeginFrameObserverState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginFrameObserverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(last_begin_frame_args_ != nullptr);
    last_begin_frame_args_->Clear();
  }
  dropped_begin_frame_args_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginFrameObserverState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 dropped_begin_frame_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dropped_begin_frame_args(&has_bits);
          dropped_begin_frame_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_last_begin_frame_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginFrameObserverState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.BeginFrameObserverState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dropped_begin_frame_args = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_dropped_begin_frame_args(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropped_begin_frame_args_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_begin_frame_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.BeginFrameObserverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.BeginFrameObserverState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginFrameObserverState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.BeginFrameObserverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 dropped_begin_frame_args = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->dropped_begin_frame_args(), output);
  }

  // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::last_begin_frame_args(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.BeginFrameObserverState)
}

size_t BeginFrameObserverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginFrameObserverState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_begin_frame_args_);
    }

    // optional int64 dropped_begin_frame_args = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->dropped_begin_frame_args());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginFrameObserverState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BeginFrameObserverState*>(
      &from));
}

void BeginFrameObserverState::MergeFrom(const BeginFrameObserverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginFrameObserverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_last_begin_frame_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(from.last_begin_frame_args());
    }
    if (cached_has_bits & 0x00000002u) {
      dropped_begin_frame_args_ = from.dropped_begin_frame_args_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeginFrameObserverState::CopyFrom(const BeginFrameObserverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginFrameObserverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFrameObserverState::IsInitialized() const {
  return true;
}

void BeginFrameObserverState::InternalSwap(BeginFrameObserverState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_begin_frame_args_, other->last_begin_frame_args_);
  swap(dropped_begin_frame_args_, other->dropped_begin_frame_args_);
}

std::string BeginFrameObserverState::GetTypeName() const {
  return "perfetto.protos.BeginFrameObserverState";
}


// ===================================================================

void BeginFrameSourceState::InitAsDefaultInstance() {
  ::perfetto::protos::_BeginFrameSourceState_default_instance_._instance.get_mutable()->last_begin_frame_args_ = const_cast< ::perfetto::protos::BeginFrameArgs*>(
      ::perfetto::protos::BeginFrameArgs::internal_default_instance());
}
class BeginFrameSourceState::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginFrameSourceState>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_observers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::BeginFrameArgs& last_begin_frame_args(const BeginFrameSourceState* msg);
  static void set_has_last_begin_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BeginFrameArgs&
BeginFrameSourceState::_Internal::last_begin_frame_args(const BeginFrameSourceState* msg) {
  return *msg->last_begin_frame_args_;
}
BeginFrameSourceState::BeginFrameSourceState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.BeginFrameSourceState)
}
BeginFrameSourceState::BeginFrameSourceState(const BeginFrameSourceState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_begin_frame_args()) {
    last_begin_frame_args_ = new ::perfetto::protos::BeginFrameArgs(*from.last_begin_frame_args_);
  } else {
    last_begin_frame_args_ = nullptr;
  }
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_observers_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(num_observers_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginFrameSourceState)
}

void BeginFrameSourceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  ::memset(&last_begin_frame_args_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_observers_) -
      reinterpret_cast<char*>(&last_begin_frame_args_)) + sizeof(num_observers_));
}

BeginFrameSourceState::~BeginFrameSourceState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginFrameSourceState)
  SharedDtor();
}

void BeginFrameSourceState::SharedDtor() {
  if (this != internal_default_instance()) delete last_begin_frame_args_;
}

void BeginFrameSourceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginFrameSourceState& BeginFrameSourceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginFrameSourceState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BeginFrameSourceState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginFrameSourceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(last_begin_frame_args_ != nullptr);
    last_begin_frame_args_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_observers_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(num_observers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginFrameSourceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool paused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paused(&has_bits);
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_observers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_observers(&has_bits);
          num_observers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_last_begin_frame_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginFrameSourceState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.BeginFrameSourceState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_source_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool paused = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_paused(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_observers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_observers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_observers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_begin_frame_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.BeginFrameSourceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.BeginFrameSourceState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginFrameSourceState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.BeginFrameSourceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->source_id(), output);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->paused(), output);
  }

  // optional uint32 num_observers = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->num_observers(), output);
  }

  // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::last_begin_frame_args(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.BeginFrameSourceState)
}

size_t BeginFrameSourceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginFrameSourceState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_begin_frame_args_);
    }

    // optional uint32 source_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }

    // optional bool paused = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_observers = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_observers());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginFrameSourceState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BeginFrameSourceState*>(
      &from));
}

void BeginFrameSourceState::MergeFrom(const BeginFrameSourceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginFrameSourceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_last_begin_frame_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(from.last_begin_frame_args());
    }
    if (cached_has_bits & 0x00000002u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_observers_ = from.num_observers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeginFrameSourceState::CopyFrom(const BeginFrameSourceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginFrameSourceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFrameSourceState::IsInitialized() const {
  return true;
}

void BeginFrameSourceState::InternalSwap(BeginFrameSourceState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_begin_frame_args_, other->last_begin_frame_args_);
  swap(source_id_, other->source_id_);
  swap(paused_, other->paused_);
  swap(num_observers_, other->num_observers_);
}

std::string BeginFrameSourceState::GetTypeName() const {
  return "perfetto.protos.BeginFrameSourceState";
}


// ===================================================================

void CompositorTimingHistory::InitAsDefaultInstance() {
}
class CompositorTimingHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CompositorTimingHistory>()._has_bits_);
  static void set_has_begin_main_frame_queue_critical_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_main_frame_queue_not_critical_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commit_to_ready_to_activate_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepare_tiles_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_activate_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_draw_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CompositorTimingHistory::CompositorTimingHistory()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.CompositorTimingHistory)
}
CompositorTimingHistory::CompositorTimingHistory(const CompositorTimingHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_main_frame_queue_critical_estimate_delta_us_, &from.begin_main_frame_queue_critical_estimate_delta_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&draw_estimate_delta_us_) -
    reinterpret_cast<char*>(&begin_main_frame_queue_critical_estimate_delta_us_)) + sizeof(draw_estimate_delta_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CompositorTimingHistory)
}

void CompositorTimingHistory::SharedCtor() {
  ::memset(&begin_main_frame_queue_critical_estimate_delta_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draw_estimate_delta_us_) -
      reinterpret_cast<char*>(&begin_main_frame_queue_critical_estimate_delta_us_)) + sizeof(draw_estimate_delta_us_));
}

CompositorTimingHistory::~CompositorTimingHistory() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CompositorTimingHistory)
  SharedDtor();
}

void CompositorTimingHistory::SharedDtor() {
}

void CompositorTimingHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompositorTimingHistory& CompositorTimingHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompositorTimingHistory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base);
  return *internal_default_instance();
}


void CompositorTimingHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CompositorTimingHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&begin_main_frame_queue_critical_estimate_delta_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&draw_estimate_delta_us_) -
        reinterpret_cast<char*>(&begin_main_frame_queue_critical_estimate_delta_us_)) + sizeof(draw_estimate_delta_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompositorTimingHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_begin_main_frame_queue_critical_estimate_delta_us(&has_bits);
          begin_main_frame_queue_critical_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_begin_main_frame_queue_not_critical_estimate_delta_us(&has_bits);
          begin_main_frame_queue_not_critical_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(&has_bits);
          begin_main_frame_start_to_ready_to_commit_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_commit_to_ready_to_activate_estimate_delta_us(&has_bits);
          commit_to_ready_to_activate_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prepare_tiles_estimate_delta_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prepare_tiles_estimate_delta_us(&has_bits);
          prepare_tiles_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 activate_estimate_delta_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_activate_estimate_delta_us(&has_bits);
          activate_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 draw_estimate_delta_us = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_draw_estimate_delta_us(&has_bits);
          draw_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompositorTimingHistory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.CompositorTimingHistory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_begin_main_frame_queue_critical_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_main_frame_queue_critical_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_begin_main_frame_queue_not_critical_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_main_frame_queue_not_critical_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_main_frame_start_to_ready_to_commit_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_commit_to_ready_to_activate_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_to_ready_to_activate_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prepare_tiles_estimate_delta_us = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_prepare_tiles_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_tiles_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 activate_estimate_delta_us = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_activate_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &activate_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 draw_estimate_delta_us = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_draw_estimate_delta_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &draw_estimate_delta_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.CompositorTimingHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.CompositorTimingHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompositorTimingHistory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.CompositorTimingHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->begin_main_frame_queue_critical_estimate_delta_us(), output);
  }

  // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->begin_main_frame_queue_not_critical_estimate_delta_us(), output);
  }

  // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->begin_main_frame_start_to_ready_to_commit_estimate_delta_us(), output);
  }

  // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->commit_to_ready_to_activate_estimate_delta_us(), output);
  }

  // optional int64 prepare_tiles_estimate_delta_us = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->prepare_tiles_estimate_delta_us(), output);
  }

  // optional int64 activate_estimate_delta_us = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->activate_estimate_delta_us(), output);
  }

  // optional int64 draw_estimate_delta_us = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->draw_estimate_delta_us(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.CompositorTimingHistory)
}

size_t CompositorTimingHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CompositorTimingHistory)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->begin_main_frame_queue_critical_estimate_delta_us());
    }

    // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->begin_main_frame_queue_not_critical_estimate_delta_us());
    }

    // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->begin_main_frame_start_to_ready_to_commit_estimate_delta_us());
    }

    // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commit_to_ready_to_activate_estimate_delta_us());
    }

    // optional int64 prepare_tiles_estimate_delta_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prepare_tiles_estimate_delta_us());
    }

    // optional int64 activate_estimate_delta_us = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->activate_estimate_delta_us());
    }

    // optional int64 draw_estimate_delta_us = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->draw_estimate_delta_us());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompositorTimingHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CompositorTimingHistory*>(
      &from));
}

void CompositorTimingHistory::MergeFrom(const CompositorTimingHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CompositorTimingHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      begin_main_frame_queue_critical_estimate_delta_us_ = from.begin_main_frame_queue_critical_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_main_frame_queue_not_critical_estimate_delta_us_ = from.begin_main_frame_queue_not_critical_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      begin_main_frame_start_to_ready_to_commit_estimate_delta_us_ = from.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      commit_to_ready_to_activate_estimate_delta_us_ = from.commit_to_ready_to_activate_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepare_tiles_estimate_delta_us_ = from.prepare_tiles_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      activate_estimate_delta_us_ = from.activate_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      draw_estimate_delta_us_ = from.draw_estimate_delta_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CompositorTimingHistory::CopyFrom(const CompositorTimingHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CompositorTimingHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorTimingHistory::IsInitialized() const {
  return true;
}

void CompositorTimingHistory::InternalSwap(CompositorTimingHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(begin_main_frame_queue_critical_estimate_delta_us_, other->begin_main_frame_queue_critical_estimate_delta_us_);
  swap(begin_main_frame_queue_not_critical_estimate_delta_us_, other->begin_main_frame_queue_not_critical_estimate_delta_us_);
  swap(begin_main_frame_start_to_ready_to_commit_estimate_delta_us_, other->begin_main_frame_start_to_ready_to_commit_estimate_delta_us_);
  swap(commit_to_ready_to_activate_estimate_delta_us_, other->commit_to_ready_to_activate_estimate_delta_us_);
  swap(prepare_tiles_estimate_delta_us_, other->prepare_tiles_estimate_delta_us_);
  swap(activate_estimate_delta_us_, other->activate_estimate_delta_us_);
  swap(draw_estimate_delta_us_, other->draw_estimate_delta_us_);
}

std::string CompositorTimingHistory::GetTypeName() const {
  return "perfetto.protos.CompositorTimingHistory";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorSchedulerState* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorSchedulerState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeCompositorSchedulerState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorStateMachine_MajorState* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorStateMachine_MajorState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeCompositorStateMachine_MajorState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorStateMachine_MinorState* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorStateMachine_MinorState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeCompositorStateMachine_MinorState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorStateMachine* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorStateMachine >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeCompositorStateMachine >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginFrameArgs* Arena::CreateMaybeMessage< ::perfetto::protos::BeginFrameArgs >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::BeginFrameArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* Arena::CreateMaybeMessage< ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginImplFrameArgs* Arena::CreateMaybeMessage< ::perfetto::protos::BeginImplFrameArgs >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::BeginImplFrameArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginFrameObserverState* Arena::CreateMaybeMessage< ::perfetto::protos::BeginFrameObserverState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::BeginFrameObserverState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginFrameSourceState* Arena::CreateMaybeMessage< ::perfetto::protos::BeginFrameSourceState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::BeginFrameSourceState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CompositorTimingHistory* Arena::CreateMaybeMessage< ::perfetto::protos::CompositorTimingHistory >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::CompositorTimingHistory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
