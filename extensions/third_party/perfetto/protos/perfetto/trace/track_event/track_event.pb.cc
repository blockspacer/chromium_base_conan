// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_event.proto

#include "protos/perfetto/trace/track_event/track_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeApplicationStateInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcontent_5fsettings_5fevent_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeContentSettingsEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcontent_5fsettings_5fevent_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeFrameReporter_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fhistogram_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeHistogramSample_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fhistogram_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fkeyed_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeKeyedService_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fkeyed_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flegacy_5fipc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeLegacyIpc_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flegacy_5fipc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmessage_5fpump_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeMessagePump_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmessage_5fpump_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmojo_5fevent_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeMojoEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmojo_5fevent_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5frenderer_5fscheduler_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeRendererSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5frenderer_5fscheduler_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fuser_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeUserEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fuser_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeWindowHandleEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugAnnotation_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2flog_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMessage_protos_2fperfetto_2ftrace_2ftrack_5fevent_2flog_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceLocation_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftask_5fexecution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskExecution_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftask_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
namespace perfetto {
namespace protos {
class TrackEvent_LegacyEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEvent_LegacyEvent> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 unscoped_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 local_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 global_id_;
} _TrackEvent_LegacyEvent_default_instance_;
class TrackEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEvent> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 name_iid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 counter_value_;
  double double_counter_value_;
  const ::perfetto::protos::SourceLocation* source_location_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_location_iid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_delta_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_absolute_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_time_delta_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_time_absolute_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_count_delta_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_count_absolute_;
} _TrackEvent_default_instance_;
class TrackEventDefaultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEventDefaults> _instance;
} _TrackEventDefaults_default_instance_;
class EventCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventCategory> _instance;
} _EventCategory_default_instance_;
class EventNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventName> _instance;
} _EventName_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_EventCategory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_EventCategory_default_instance_;
    new (ptr) ::perfetto::protos::EventCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::EventCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventCategory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventCategory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_EventName_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_EventName_default_instance_;
    new (ptr) ::perfetto::protos::EventName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::EventName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventName_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventName_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackEvent_default_instance_;
    new (ptr) ::perfetto::protos::TrackEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, InitDefaultsscc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto}, {
      &scc_info_DebugAnnotation_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto.base,
      &scc_info_TaskExecution_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftask_5fexecution_2eproto.base,
      &scc_info_LogMessage_protos_2fperfetto_2ftrace_2ftrack_5fevent_2flog_5fmessage_2eproto.base,
      &scc_info_ChromeCompositorSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto.base,
      &scc_info_ChromeUserEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fuser_5fevent_2eproto.base,
      &scc_info_ChromeKeyedService_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fkeyed_5fservice_2eproto.base,
      &scc_info_ChromeLegacyIpc_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flegacy_5fipc_2eproto.base,
      &scc_info_ChromeHistogramSample_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fhistogram_5fsample_2eproto.base,
      &scc_info_ChromeLatencyInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto.base,
      &scc_info_ChromeFrameReporter_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto.base,
      &scc_info_ChromeApplicationStateInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto.base,
      &scc_info_ChromeRendererSchedulerState_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5frenderer_5fscheduler_5fstate_2eproto.base,
      &scc_info_ChromeWindowHandleEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto.base,
      &scc_info_ChromeContentSettingsEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcontent_5fsettings_5fevent_5finfo_2eproto.base,
      &scc_info_SourceLocation_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto.base,
      &scc_info_ChromeMessagePump_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmessage_5fpump_2eproto.base,
      &scc_info_ChromeMojoEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmojo_5fevent_5finfo_2eproto.base,
      &scc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackEvent_LegacyEvent_default_instance_;
    new (ptr) ::perfetto::protos::TrackEvent_LegacyEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackEvent_LegacyEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_TrackEventDefaults_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrackEventDefaults_default_instance_;
    new (ptr) ::perfetto::protos::TrackEventDefaults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrackEventDefaults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEventDefaults_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackEventDefaults_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto}, {}};

namespace perfetto {
namespace protos {
bool TrackEvent_LegacyEvent_FlowDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrackEvent_LegacyEvent_FlowDirection_strings[4] = {};

static const char TrackEvent_LegacyEvent_FlowDirection_names[] =
  "FLOW_IN"
  "FLOW_INOUT"
  "FLOW_OUT"
  "FLOW_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TrackEvent_LegacyEvent_FlowDirection_entries[] = {
  { {TrackEvent_LegacyEvent_FlowDirection_names + 0, 7}, 1 },
  { {TrackEvent_LegacyEvent_FlowDirection_names + 7, 10}, 3 },
  { {TrackEvent_LegacyEvent_FlowDirection_names + 17, 8}, 2 },
  { {TrackEvent_LegacyEvent_FlowDirection_names + 25, 16}, 0 },
};

static const int TrackEvent_LegacyEvent_FlowDirection_entries_by_number[] = {
  3, // 0 -> FLOW_UNSPECIFIED
  0, // 1 -> FLOW_IN
  2, // 2 -> FLOW_OUT
  1, // 3 -> FLOW_INOUT
};

const std::string& TrackEvent_LegacyEvent_FlowDirection_Name(
    TrackEvent_LegacyEvent_FlowDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TrackEvent_LegacyEvent_FlowDirection_entries,
          TrackEvent_LegacyEvent_FlowDirection_entries_by_number,
          4, TrackEvent_LegacyEvent_FlowDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TrackEvent_LegacyEvent_FlowDirection_entries,
      TrackEvent_LegacyEvent_FlowDirection_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TrackEvent_LegacyEvent_FlowDirection_strings[idx].get();
}
bool TrackEvent_LegacyEvent_FlowDirection_Parse(
    const std::string& name, TrackEvent_LegacyEvent_FlowDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TrackEvent_LegacyEvent_FlowDirection_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TrackEvent_LegacyEvent_FlowDirection>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_IN;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_OUT;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_INOUT;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FlowDirection_MIN;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FlowDirection_MAX;
constexpr int TrackEvent_LegacyEvent::FlowDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TrackEvent_LegacyEvent_InstantEventScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrackEvent_LegacyEvent_InstantEventScope_strings[4] = {};

static const char TrackEvent_LegacyEvent_InstantEventScope_names[] =
  "SCOPE_GLOBAL"
  "SCOPE_PROCESS"
  "SCOPE_THREAD"
  "SCOPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TrackEvent_LegacyEvent_InstantEventScope_entries[] = {
  { {TrackEvent_LegacyEvent_InstantEventScope_names + 0, 12}, 1 },
  { {TrackEvent_LegacyEvent_InstantEventScope_names + 12, 13}, 2 },
  { {TrackEvent_LegacyEvent_InstantEventScope_names + 25, 12}, 3 },
  { {TrackEvent_LegacyEvent_InstantEventScope_names + 37, 17}, 0 },
};

static const int TrackEvent_LegacyEvent_InstantEventScope_entries_by_number[] = {
  3, // 0 -> SCOPE_UNSPECIFIED
  0, // 1 -> SCOPE_GLOBAL
  1, // 2 -> SCOPE_PROCESS
  2, // 3 -> SCOPE_THREAD
};

const std::string& TrackEvent_LegacyEvent_InstantEventScope_Name(
    TrackEvent_LegacyEvent_InstantEventScope value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TrackEvent_LegacyEvent_InstantEventScope_entries,
          TrackEvent_LegacyEvent_InstantEventScope_entries_by_number,
          4, TrackEvent_LegacyEvent_InstantEventScope_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TrackEvent_LegacyEvent_InstantEventScope_entries,
      TrackEvent_LegacyEvent_InstantEventScope_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TrackEvent_LegacyEvent_InstantEventScope_strings[idx].get();
}
bool TrackEvent_LegacyEvent_InstantEventScope_Parse(
    const std::string& name, TrackEvent_LegacyEvent_InstantEventScope* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TrackEvent_LegacyEvent_InstantEventScope_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TrackEvent_LegacyEvent_InstantEventScope>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_GLOBAL;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_PROCESS;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_THREAD;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::InstantEventScope_MIN;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::InstantEventScope_MAX;
constexpr int TrackEvent_LegacyEvent::InstantEventScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TrackEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrackEvent_Type_strings[5] = {};

static const char TrackEvent_Type_names[] =
  "TYPE_COUNTER"
  "TYPE_INSTANT"
  "TYPE_SLICE_BEGIN"
  "TYPE_SLICE_END"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TrackEvent_Type_entries[] = {
  { {TrackEvent_Type_names + 0, 12}, 4 },
  { {TrackEvent_Type_names + 12, 12}, 3 },
  { {TrackEvent_Type_names + 24, 16}, 1 },
  { {TrackEvent_Type_names + 40, 14}, 2 },
  { {TrackEvent_Type_names + 54, 16}, 0 },
};

static const int TrackEvent_Type_entries_by_number[] = {
  4, // 0 -> TYPE_UNSPECIFIED
  2, // 1 -> TYPE_SLICE_BEGIN
  3, // 2 -> TYPE_SLICE_END
  1, // 3 -> TYPE_INSTANT
  0, // 4 -> TYPE_COUNTER
};

const std::string& TrackEvent_Type_Name(
    TrackEvent_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TrackEvent_Type_entries,
          TrackEvent_Type_entries_by_number,
          5, TrackEvent_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TrackEvent_Type_entries,
      TrackEvent_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TrackEvent_Type_strings[idx].get();
}
bool TrackEvent_Type_Parse(
    const std::string& name, TrackEvent_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TrackEvent_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<TrackEvent_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackEvent_Type TrackEvent::TYPE_UNSPECIFIED;
constexpr TrackEvent_Type TrackEvent::TYPE_SLICE_BEGIN;
constexpr TrackEvent_Type TrackEvent::TYPE_SLICE_END;
constexpr TrackEvent_Type TrackEvent::TYPE_INSTANT;
constexpr TrackEvent_Type TrackEvent::TYPE_COUNTER;
constexpr TrackEvent_Type TrackEvent::Type_MIN;
constexpr TrackEvent_Type TrackEvent::Type_MAX;
constexpr int TrackEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrackEvent_LegacyEvent::InitAsDefaultInstance() {
}
class TrackEvent_LegacyEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEvent_LegacyEvent>()._has_bits_);
  static void set_has_name_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thread_duration_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thread_instruction_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_id_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_async_tts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bind_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bind_to_enclosing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flow_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_instant_event_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pid_override(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tid_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

TrackEvent_LegacyEvent::TrackEvent_LegacyEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackEvent.LegacyEvent)
}
TrackEvent_LegacyEvent::TrackEvent_LegacyEvent(const TrackEvent_LegacyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id_scope()) {
    id_scope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_scope_);
  }
  ::memcpy(&name_iid_, &from.name_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_override_) -
    reinterpret_cast<char*>(&name_iid_)) + sizeof(tid_override_));
  clear_has_id();
  switch (from.id_case()) {
    case kUnscopedId: {
      set_unscoped_id(from.unscoped_id());
      break;
    }
    case kLocalId: {
      set_local_id(from.local_id());
      break;
    }
    case kGlobalId: {
      set_global_id(from.global_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEvent.LegacyEvent)
}

void TrackEvent_LegacyEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  id_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_override_) -
      reinterpret_cast<char*>(&name_iid_)) + sizeof(tid_override_));
  clear_has_id();
}

TrackEvent_LegacyEvent::~TrackEvent_LegacyEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEvent.LegacyEvent)
  SharedDtor();
}

void TrackEvent_LegacyEvent::SharedDtor() {
  id_scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_id()) {
    clear_id();
  }
}

void TrackEvent_LegacyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEvent_LegacyEvent& TrackEvent_LegacyEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEvent_LegacyEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  return *internal_default_instance();
}


void TrackEvent_LegacyEvent::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent.LegacyEvent)
  switch (id_case()) {
    case kUnscopedId: {
      // No need to clear
      break;
    }
    case kLocalId: {
      // No need to clear
      break;
    }
    case kGlobalId: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TrackEvent_LegacyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEvent.LegacyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_scope_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&name_iid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bind_id_) -
        reinterpret_cast<char*>(&name_iid_)) + sizeof(bind_id_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&flow_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tid_override_) -
        reinterpret_cast<char*>(&flow_direction_)) + sizeof(tid_override_));
  }
  clear_id();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackEvent_LegacyEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 name_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_name_iid(&has_bits);
          name_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_phase(&has_bits);
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_us(&has_bits);
          duration_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 thread_duration_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_thread_duration_us(&has_bits);
          thread_duration_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unscoped_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_unscoped_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id_scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id_scope(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bind_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_bind_id(&has_bits);
          bind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_async_tts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_use_async_tts(&has_bits);
          use_async_tts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 local_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          set_local_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 global_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          set_global_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bind_to_enclosing = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bind_to_enclosing(&has_bits);
          bind_to_enclosing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection_IsValid(val))) {
            set_flow_direction(static_cast<::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope_IsValid(val))) {
            set_instant_event_scope(static_cast<::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 thread_instruction_delta = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_thread_instruction_delta(&has_bits);
          thread_instruction_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid_override = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_pid_override(&has_bits);
          pid_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tid_override = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tid_override(&has_bits);
          tid_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackEvent_LegacyEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackEvent.LegacyEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 name_iid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_name_iid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phase = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_phase(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_us = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_duration_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_duration_us = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_thread_duration_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_duration_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 unscoped_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_id();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.unscoped_id_)));
          set_has_unscoped_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id_scope = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bind_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_bind_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bind_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_async_tts = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_use_async_tts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_async_tts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 local_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          clear_id();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.local_id_)));
          set_has_local_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 global_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          clear_id();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_.global_id_)));
          set_has_global_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bind_to_enclosing = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_bind_to_enclosing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_to_enclosing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection_IsValid(value)) {
            set_flow_direction(static_cast< ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection >(value));
          } else {
            unknown_fields_stream.WriteVarint32(104u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope_IsValid(value)) {
            set_instant_event_scope(static_cast< ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope >(value));
          } else {
            unknown_fields_stream.WriteVarint32(112u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_instruction_delta = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_thread_instruction_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_instruction_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid_override = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_pid_override(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid_override = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_tid_override(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackEvent.LegacyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackEvent.LegacyEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackEvent_LegacyEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackEvent.LegacyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 name_iid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->name_iid(), output);
  }

  // optional int32 phase = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->phase(), output);
  }

  // optional int64 duration_us = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->duration_us(), output);
  }

  // optional int64 thread_duration_us = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->thread_duration_us(), output);
  }

  // optional uint64 unscoped_id = 6;
  if (has_unscoped_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->unscoped_id(), output);
  }

  // optional string id_scope = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->id_scope(), output);
  }

  // optional uint64 bind_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->bind_id(), output);
  }

  // optional bool use_async_tts = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->use_async_tts(), output);
  }

  switch (id_case()) {
    case kLocalId:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->local_id(), output);
      break;
    case kGlobalId:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->global_id(), output);
      break;
    default: ;
  }
  // optional bool bind_to_enclosing = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->bind_to_enclosing(), output);
  }

  // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->flow_direction(), output);
  }

  // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->instant_event_scope(), output);
  }

  // optional int64 thread_instruction_delta = 15;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->thread_instruction_delta(), output);
  }

  // optional int32 pid_override = 18;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->pid_override(), output);
  }

  // optional int32 tid_override = 19;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->tid_override(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackEvent.LegacyEvent)
}

size_t TrackEvent_LegacyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEvent.LegacyEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id_scope = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id_scope());
    }

    // optional uint64 name_iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->name_iid());
    }

    // optional int64 duration_us = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_us());
    }

    // optional int64 thread_duration_us = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->thread_duration_us());
    }

    // optional int32 phase = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->phase());
    }

    // optional bool use_async_tts = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool bind_to_enclosing = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 bind_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bind_id());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->flow_direction());
    }

    // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->instant_event_scope());
    }

    // optional int64 thread_instruction_delta = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->thread_instruction_delta());
    }

    // optional int32 pid_override = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid_override());
    }

    // optional int32 tid_override = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tid_override());
    }

  }
  switch (id_case()) {
    // optional uint64 unscoped_id = 6;
    case kUnscopedId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->unscoped_id());
      break;
    }
    // optional uint64 local_id = 10;
    case kLocalId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->local_id());
      break;
    }
    // optional uint64 global_id = 11;
    case kGlobalId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->global_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEvent_LegacyEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackEvent_LegacyEvent*>(
      &from));
}

void TrackEvent_LegacyEvent::MergeFrom(const TrackEvent_LegacyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEvent.LegacyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_scope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_scope_);
    }
    if (cached_has_bits & 0x00000002u) {
      name_iid_ = from.name_iid_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_us_ = from.duration_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      thread_duration_us_ = from.thread_duration_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_async_tts_ = from.use_async_tts_;
    }
    if (cached_has_bits & 0x00000040u) {
      bind_to_enclosing_ = from.bind_to_enclosing_;
    }
    if (cached_has_bits & 0x00000080u) {
      bind_id_ = from.bind_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      flow_direction_ = from.flow_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      instant_event_scope_ = from.instant_event_scope_;
    }
    if (cached_has_bits & 0x00000400u) {
      thread_instruction_delta_ = from.thread_instruction_delta_;
    }
    if (cached_has_bits & 0x00000800u) {
      pid_override_ = from.pid_override_;
    }
    if (cached_has_bits & 0x00001000u) {
      tid_override_ = from.tid_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.id_case()) {
    case kUnscopedId: {
      set_unscoped_id(from.unscoped_id());
      break;
    }
    case kLocalId: {
      set_local_id(from.local_id());
      break;
    }
    case kGlobalId: {
      set_global_id(from.global_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TrackEvent_LegacyEvent::CopyFrom(const TrackEvent_LegacyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEvent.LegacyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEvent_LegacyEvent::IsInitialized() const {
  return true;
}

void TrackEvent_LegacyEvent::InternalSwap(TrackEvent_LegacyEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_scope_.Swap(&other->id_scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_iid_, other->name_iid_);
  swap(duration_us_, other->duration_us_);
  swap(thread_duration_us_, other->thread_duration_us_);
  swap(phase_, other->phase_);
  swap(use_async_tts_, other->use_async_tts_);
  swap(bind_to_enclosing_, other->bind_to_enclosing_);
  swap(bind_id_, other->bind_id_);
  swap(flow_direction_, other->flow_direction_);
  swap(instant_event_scope_, other->instant_event_scope_);
  swap(thread_instruction_delta_, other->thread_instruction_delta_);
  swap(pid_override_, other->pid_override_);
  swap(tid_override_, other->tid_override_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TrackEvent_LegacyEvent::GetTypeName() const {
  return "perfetto.protos.TrackEvent.LegacyEvent";
}


// ===================================================================

void TrackEvent::InitAsDefaultInstance() {
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->task_execution_ = const_cast< ::perfetto::protos::TaskExecution*>(
      ::perfetto::protos::TaskExecution::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->log_message_ = const_cast< ::perfetto::protos::LogMessage*>(
      ::perfetto::protos::LogMessage::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->cc_scheduler_state_ = const_cast< ::perfetto::protos::ChromeCompositorSchedulerState*>(
      ::perfetto::protos::ChromeCompositorSchedulerState::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_user_event_ = const_cast< ::perfetto::protos::ChromeUserEvent*>(
      ::perfetto::protos::ChromeUserEvent::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_keyed_service_ = const_cast< ::perfetto::protos::ChromeKeyedService*>(
      ::perfetto::protos::ChromeKeyedService::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_legacy_ipc_ = const_cast< ::perfetto::protos::ChromeLegacyIpc*>(
      ::perfetto::protos::ChromeLegacyIpc::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_histogram_sample_ = const_cast< ::perfetto::protos::ChromeHistogramSample*>(
      ::perfetto::protos::ChromeHistogramSample::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_latency_info_ = const_cast< ::perfetto::protos::ChromeLatencyInfo*>(
      ::perfetto::protos::ChromeLatencyInfo::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_frame_reporter_ = const_cast< ::perfetto::protos::ChromeFrameReporter*>(
      ::perfetto::protos::ChromeFrameReporter::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_application_state_info_ = const_cast< ::perfetto::protos::ChromeApplicationStateInfo*>(
      ::perfetto::protos::ChromeApplicationStateInfo::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_renderer_scheduler_state_ = const_cast< ::perfetto::protos::ChromeRendererSchedulerState*>(
      ::perfetto::protos::ChromeRendererSchedulerState::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_window_handle_event_info_ = const_cast< ::perfetto::protos::ChromeWindowHandleEventInfo*>(
      ::perfetto::protos::ChromeWindowHandleEventInfo::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_content_settings_event_info_ = const_cast< ::perfetto::protos::ChromeContentSettingsEventInfo*>(
      ::perfetto::protos::ChromeContentSettingsEventInfo::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_message_pump_ = const_cast< ::perfetto::protos::ChromeMessagePump*>(
      ::perfetto::protos::ChromeMessagePump::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->chrome_mojo_event_info_ = const_cast< ::perfetto::protos::ChromeMojoEventInfo*>(
      ::perfetto::protos::ChromeMojoEventInfo::internal_default_instance());
  ::perfetto::protos::_TrackEvent_default_instance_._instance.get_mutable()->legacy_event_ = const_cast< ::perfetto::protos::TrackEvent_LegacyEvent*>(
      ::perfetto::protos::TrackEvent_LegacyEvent::internal_default_instance());
}
class TrackEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEvent>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_track_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::perfetto::protos::TaskExecution& task_execution(const TrackEvent* msg);
  static void set_has_task_execution(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::LogMessage& log_message(const TrackEvent* msg);
  static void set_has_log_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::ChromeCompositorSchedulerState& cc_scheduler_state(const TrackEvent* msg);
  static void set_has_cc_scheduler_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ChromeUserEvent& chrome_user_event(const TrackEvent* msg);
  static void set_has_chrome_user_event(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::ChromeKeyedService& chrome_keyed_service(const TrackEvent* msg);
  static void set_has_chrome_keyed_service(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::ChromeLegacyIpc& chrome_legacy_ipc(const TrackEvent* msg);
  static void set_has_chrome_legacy_ipc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::ChromeHistogramSample& chrome_histogram_sample(const TrackEvent* msg);
  static void set_has_chrome_histogram_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::ChromeLatencyInfo& chrome_latency_info(const TrackEvent* msg);
  static void set_has_chrome_latency_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::ChromeFrameReporter& chrome_frame_reporter(const TrackEvent* msg);
  static void set_has_chrome_frame_reporter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::ChromeApplicationStateInfo& chrome_application_state_info(const TrackEvent* msg);
  static void set_has_chrome_application_state_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::perfetto::protos::ChromeRendererSchedulerState& chrome_renderer_scheduler_state(const TrackEvent* msg);
  static void set_has_chrome_renderer_scheduler_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::ChromeWindowHandleEventInfo& chrome_window_handle_event_info(const TrackEvent* msg);
  static void set_has_chrome_window_handle_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::ChromeContentSettingsEventInfo& chrome_content_settings_event_info(const TrackEvent* msg);
  static void set_has_chrome_content_settings_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::perfetto::protos::SourceLocation& source_location(const TrackEvent* msg);
  static const ::perfetto::protos::ChromeMessagePump& chrome_message_pump(const TrackEvent* msg);
  static void set_has_chrome_message_pump(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::ChromeMojoEventInfo& chrome_mojo_event_info(const TrackEvent* msg);
  static void set_has_chrome_mojo_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::perfetto::protos::TrackEvent_LegacyEvent& legacy_event(const TrackEvent* msg);
  static void set_has_legacy_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::TaskExecution&
TrackEvent::_Internal::task_execution(const TrackEvent* msg) {
  return *msg->task_execution_;
}
const ::perfetto::protos::LogMessage&
TrackEvent::_Internal::log_message(const TrackEvent* msg) {
  return *msg->log_message_;
}
const ::perfetto::protos::ChromeCompositorSchedulerState&
TrackEvent::_Internal::cc_scheduler_state(const TrackEvent* msg) {
  return *msg->cc_scheduler_state_;
}
const ::perfetto::protos::ChromeUserEvent&
TrackEvent::_Internal::chrome_user_event(const TrackEvent* msg) {
  return *msg->chrome_user_event_;
}
const ::perfetto::protos::ChromeKeyedService&
TrackEvent::_Internal::chrome_keyed_service(const TrackEvent* msg) {
  return *msg->chrome_keyed_service_;
}
const ::perfetto::protos::ChromeLegacyIpc&
TrackEvent::_Internal::chrome_legacy_ipc(const TrackEvent* msg) {
  return *msg->chrome_legacy_ipc_;
}
const ::perfetto::protos::ChromeHistogramSample&
TrackEvent::_Internal::chrome_histogram_sample(const TrackEvent* msg) {
  return *msg->chrome_histogram_sample_;
}
const ::perfetto::protos::ChromeLatencyInfo&
TrackEvent::_Internal::chrome_latency_info(const TrackEvent* msg) {
  return *msg->chrome_latency_info_;
}
const ::perfetto::protos::ChromeFrameReporter&
TrackEvent::_Internal::chrome_frame_reporter(const TrackEvent* msg) {
  return *msg->chrome_frame_reporter_;
}
const ::perfetto::protos::ChromeApplicationStateInfo&
TrackEvent::_Internal::chrome_application_state_info(const TrackEvent* msg) {
  return *msg->chrome_application_state_info_;
}
const ::perfetto::protos::ChromeRendererSchedulerState&
TrackEvent::_Internal::chrome_renderer_scheduler_state(const TrackEvent* msg) {
  return *msg->chrome_renderer_scheduler_state_;
}
const ::perfetto::protos::ChromeWindowHandleEventInfo&
TrackEvent::_Internal::chrome_window_handle_event_info(const TrackEvent* msg) {
  return *msg->chrome_window_handle_event_info_;
}
const ::perfetto::protos::ChromeContentSettingsEventInfo&
TrackEvent::_Internal::chrome_content_settings_event_info(const TrackEvent* msg) {
  return *msg->chrome_content_settings_event_info_;
}
const ::perfetto::protos::SourceLocation&
TrackEvent::_Internal::source_location(const TrackEvent* msg) {
  return *msg->source_location_field_.source_location_;
}
const ::perfetto::protos::ChromeMessagePump&
TrackEvent::_Internal::chrome_message_pump(const TrackEvent* msg) {
  return *msg->chrome_message_pump_;
}
const ::perfetto::protos::ChromeMojoEventInfo&
TrackEvent::_Internal::chrome_mojo_event_info(const TrackEvent* msg) {
  return *msg->chrome_mojo_event_info_;
}
const ::perfetto::protos::TrackEvent_LegacyEvent&
TrackEvent::_Internal::legacy_event(const TrackEvent* msg) {
  return *msg->legacy_event_;
}
void TrackEvent::clear_debug_annotations() {
  debug_annotations_.Clear();
}
void TrackEvent::clear_task_execution() {
  if (task_execution_ != nullptr) task_execution_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrackEvent::clear_log_message() {
  if (log_message_ != nullptr) log_message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TrackEvent::clear_cc_scheduler_state() {
  if (cc_scheduler_state_ != nullptr) cc_scheduler_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TrackEvent::clear_chrome_user_event() {
  if (chrome_user_event_ != nullptr) chrome_user_event_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TrackEvent::clear_chrome_keyed_service() {
  if (chrome_keyed_service_ != nullptr) chrome_keyed_service_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void TrackEvent::clear_chrome_legacy_ipc() {
  if (chrome_legacy_ipc_ != nullptr) chrome_legacy_ipc_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void TrackEvent::clear_chrome_histogram_sample() {
  if (chrome_histogram_sample_ != nullptr) chrome_histogram_sample_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void TrackEvent::clear_chrome_latency_info() {
  if (chrome_latency_info_ != nullptr) chrome_latency_info_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void TrackEvent::clear_chrome_frame_reporter() {
  if (chrome_frame_reporter_ != nullptr) chrome_frame_reporter_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void TrackEvent::clear_chrome_application_state_info() {
  if (chrome_application_state_info_ != nullptr) chrome_application_state_info_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void TrackEvent::clear_chrome_renderer_scheduler_state() {
  if (chrome_renderer_scheduler_state_ != nullptr) chrome_renderer_scheduler_state_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void TrackEvent::clear_chrome_window_handle_event_info() {
  if (chrome_window_handle_event_info_ != nullptr) chrome_window_handle_event_info_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void TrackEvent::clear_chrome_content_settings_event_info() {
  if (chrome_content_settings_event_info_ != nullptr) chrome_content_settings_event_info_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void TrackEvent::set_allocated_source_location(::perfetto::protos::SourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_source_location_field();
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    set_has_source_location();
    source_location_field_.source_location_ = source_location;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.source_location)
}
void TrackEvent::clear_source_location() {
  if (has_source_location()) {
    delete source_location_field_.source_location_;
    clear_has_source_location_field();
  }
}
void TrackEvent::clear_chrome_message_pump() {
  if (chrome_message_pump_ != nullptr) chrome_message_pump_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void TrackEvent::clear_chrome_mojo_event_info() {
  if (chrome_mojo_event_info_ != nullptr) chrome_mojo_event_info_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
TrackEvent::TrackEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackEvent)
}
TrackEvent::TrackEvent(const TrackEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      category_iids_(from.category_iids_),
      debug_annotations_(from.debug_annotations_),
      extra_counter_values_(from.extra_counter_values_),
      categories_(from.categories_),
      extra_counter_track_uuids_(from.extra_counter_track_uuids_),
      flow_ids_(from.flow_ids_),
      terminating_flow_ids_(from.terminating_flow_ids_),
      extra_double_counter_track_uuids_(from.extra_double_counter_track_uuids_),
      extra_double_counter_values_(from.extra_double_counter_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_task_execution()) {
    task_execution_ = new ::perfetto::protos::TaskExecution(*from.task_execution_);
  } else {
    task_execution_ = nullptr;
  }
  if (from.has_legacy_event()) {
    legacy_event_ = new ::perfetto::protos::TrackEvent_LegacyEvent(*from.legacy_event_);
  } else {
    legacy_event_ = nullptr;
  }
  if (from.has_log_message()) {
    log_message_ = new ::perfetto::protos::LogMessage(*from.log_message_);
  } else {
    log_message_ = nullptr;
  }
  if (from.has_cc_scheduler_state()) {
    cc_scheduler_state_ = new ::perfetto::protos::ChromeCompositorSchedulerState(*from.cc_scheduler_state_);
  } else {
    cc_scheduler_state_ = nullptr;
  }
  if (from.has_chrome_user_event()) {
    chrome_user_event_ = new ::perfetto::protos::ChromeUserEvent(*from.chrome_user_event_);
  } else {
    chrome_user_event_ = nullptr;
  }
  if (from.has_chrome_keyed_service()) {
    chrome_keyed_service_ = new ::perfetto::protos::ChromeKeyedService(*from.chrome_keyed_service_);
  } else {
    chrome_keyed_service_ = nullptr;
  }
  if (from.has_chrome_legacy_ipc()) {
    chrome_legacy_ipc_ = new ::perfetto::protos::ChromeLegacyIpc(*from.chrome_legacy_ipc_);
  } else {
    chrome_legacy_ipc_ = nullptr;
  }
  if (from.has_chrome_histogram_sample()) {
    chrome_histogram_sample_ = new ::perfetto::protos::ChromeHistogramSample(*from.chrome_histogram_sample_);
  } else {
    chrome_histogram_sample_ = nullptr;
  }
  if (from.has_chrome_latency_info()) {
    chrome_latency_info_ = new ::perfetto::protos::ChromeLatencyInfo(*from.chrome_latency_info_);
  } else {
    chrome_latency_info_ = nullptr;
  }
  if (from.has_chrome_frame_reporter()) {
    chrome_frame_reporter_ = new ::perfetto::protos::ChromeFrameReporter(*from.chrome_frame_reporter_);
  } else {
    chrome_frame_reporter_ = nullptr;
  }
  if (from.has_chrome_message_pump()) {
    chrome_message_pump_ = new ::perfetto::protos::ChromeMessagePump(*from.chrome_message_pump_);
  } else {
    chrome_message_pump_ = nullptr;
  }
  if (from.has_chrome_mojo_event_info()) {
    chrome_mojo_event_info_ = new ::perfetto::protos::ChromeMojoEventInfo(*from.chrome_mojo_event_info_);
  } else {
    chrome_mojo_event_info_ = nullptr;
  }
  if (from.has_chrome_application_state_info()) {
    chrome_application_state_info_ = new ::perfetto::protos::ChromeApplicationStateInfo(*from.chrome_application_state_info_);
  } else {
    chrome_application_state_info_ = nullptr;
  }
  if (from.has_chrome_renderer_scheduler_state()) {
    chrome_renderer_scheduler_state_ = new ::perfetto::protos::ChromeRendererSchedulerState(*from.chrome_renderer_scheduler_state_);
  } else {
    chrome_renderer_scheduler_state_ = nullptr;
  }
  if (from.has_chrome_window_handle_event_info()) {
    chrome_window_handle_event_info_ = new ::perfetto::protos::ChromeWindowHandleEventInfo(*from.chrome_window_handle_event_info_);
  } else {
    chrome_window_handle_event_info_ = nullptr;
  }
  if (from.has_chrome_content_settings_event_info()) {
    chrome_content_settings_event_info_ = new ::perfetto::protos::ChromeContentSettingsEventInfo(*from.chrome_content_settings_event_info_);
  } else {
    chrome_content_settings_event_info_ = nullptr;
  }
  ::memcpy(&track_uuid_, &from.track_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&track_uuid_)) + sizeof(type_));
  clear_has_name_field();
  switch (from.name_field_case()) {
    case kNameIid: {
      set_name_iid(from.name_iid());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_counter_value_field();
  switch (from.counter_value_field_case()) {
    case kCounterValue: {
      set_counter_value(from.counter_value());
      break;
    }
    case kDoubleCounterValue: {
      set_double_counter_value(from.double_counter_value());
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_source_location_field();
  switch (from.source_location_field_case()) {
    case kSourceLocation: {
      mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(from.source_location());
      break;
    }
    case kSourceLocationIid: {
      set_source_location_iid(from.source_location_iid());
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_timestamp();
  switch (from.timestamp_case()) {
    case kTimestampDeltaUs: {
      set_timestamp_delta_us(from.timestamp_delta_us());
      break;
    }
    case kTimestampAbsoluteUs: {
      set_timestamp_absolute_us(from.timestamp_absolute_us());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  clear_has_thread_time();
  switch (from.thread_time_case()) {
    case kThreadTimeDeltaUs: {
      set_thread_time_delta_us(from.thread_time_delta_us());
      break;
    }
    case kThreadTimeAbsoluteUs: {
      set_thread_time_absolute_us(from.thread_time_absolute_us());
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_thread_instruction_count();
  switch (from.thread_instruction_count_case()) {
    case kThreadInstructionCountDelta: {
      set_thread_instruction_count_delta(from.thread_instruction_count_delta());
      break;
    }
    case kThreadInstructionCountAbsolute: {
      set_thread_instruction_count_absolute(from.thread_instruction_count_absolute());
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEvent)
}

void TrackEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  ::memset(&task_execution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&task_execution_)) + sizeof(type_));
  clear_has_name_field();
  clear_has_counter_value_field();
  clear_has_source_location_field();
  clear_has_timestamp();
  clear_has_thread_time();
  clear_has_thread_instruction_count();
}

TrackEvent::~TrackEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEvent)
  SharedDtor();
}

void TrackEvent::SharedDtor() {
  if (this != internal_default_instance()) delete task_execution_;
  if (this != internal_default_instance()) delete legacy_event_;
  if (this != internal_default_instance()) delete log_message_;
  if (this != internal_default_instance()) delete cc_scheduler_state_;
  if (this != internal_default_instance()) delete chrome_user_event_;
  if (this != internal_default_instance()) delete chrome_keyed_service_;
  if (this != internal_default_instance()) delete chrome_legacy_ipc_;
  if (this != internal_default_instance()) delete chrome_histogram_sample_;
  if (this != internal_default_instance()) delete chrome_latency_info_;
  if (this != internal_default_instance()) delete chrome_frame_reporter_;
  if (this != internal_default_instance()) delete chrome_message_pump_;
  if (this != internal_default_instance()) delete chrome_mojo_event_info_;
  if (this != internal_default_instance()) delete chrome_application_state_info_;
  if (this != internal_default_instance()) delete chrome_renderer_scheduler_state_;
  if (this != internal_default_instance()) delete chrome_window_handle_event_info_;
  if (this != internal_default_instance()) delete chrome_content_settings_event_info_;
  if (has_name_field()) {
    clear_name_field();
  }
  if (has_counter_value_field()) {
    clear_counter_value_field();
  }
  if (has_source_location_field()) {
    clear_source_location_field();
  }
  if (has_timestamp()) {
    clear_timestamp();
  }
  if (has_thread_time()) {
    clear_thread_time();
  }
  if (has_thread_instruction_count()) {
    clear_thread_instruction_count();
  }
}

void TrackEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEvent& TrackEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  return *internal_default_instance();
}


void TrackEvent::clear_name_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (name_field_case()) {
    case kNameIid: {
      // No need to clear
      break;
    }
    case kName: {
      name_field_.name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NAME_FIELD_NOT_SET;
}

void TrackEvent::clear_counter_value_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (counter_value_field_case()) {
    case kCounterValue: {
      // No need to clear
      break;
    }
    case kDoubleCounterValue: {
      // No need to clear
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = COUNTER_VALUE_FIELD_NOT_SET;
}

void TrackEvent::clear_source_location_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (source_location_field_case()) {
    case kSourceLocation: {
      delete source_location_field_.source_location_;
      break;
    }
    case kSourceLocationIid: {
      // No need to clear
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = SOURCE_LOCATION_FIELD_NOT_SET;
}

void TrackEvent::clear_timestamp() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (timestamp_case()) {
    case kTimestampDeltaUs: {
      // No need to clear
      break;
    }
    case kTimestampAbsoluteUs: {
      // No need to clear
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = TIMESTAMP_NOT_SET;
}

void TrackEvent::clear_thread_time() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (thread_time_case()) {
    case kThreadTimeDeltaUs: {
      // No need to clear
      break;
    }
    case kThreadTimeAbsoluteUs: {
      // No need to clear
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = THREAD_TIME_NOT_SET;
}

void TrackEvent::clear_thread_instruction_count() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (thread_instruction_count_case()) {
    case kThreadInstructionCountDelta: {
      // No need to clear
      break;
    }
    case kThreadInstructionCountAbsolute: {
      // No need to clear
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = THREAD_INSTRUCTION_COUNT_NOT_SET;
}


void TrackEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  category_iids_.Clear();
  debug_annotations_.Clear();
  extra_counter_values_.Clear();
  categories_.Clear();
  extra_counter_track_uuids_.Clear();
  flow_ids_.Clear();
  terminating_flow_ids_.Clear();
  extra_double_counter_track_uuids_.Clear();
  extra_double_counter_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(task_execution_ != nullptr);
      task_execution_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(legacy_event_ != nullptr);
      legacy_event_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(log_message_ != nullptr);
      log_message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cc_scheduler_state_ != nullptr);
      cc_scheduler_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(chrome_user_event_ != nullptr);
      chrome_user_event_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(chrome_keyed_service_ != nullptr);
      chrome_keyed_service_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(chrome_legacy_ipc_ != nullptr);
      chrome_legacy_ipc_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(chrome_histogram_sample_ != nullptr);
      chrome_histogram_sample_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(chrome_latency_info_ != nullptr);
      chrome_latency_info_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(chrome_frame_reporter_ != nullptr);
      chrome_frame_reporter_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(chrome_message_pump_ != nullptr);
      chrome_message_pump_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(chrome_mojo_event_info_ != nullptr);
      chrome_mojo_event_info_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(chrome_application_state_info_ != nullptr);
      chrome_application_state_info_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(chrome_renderer_scheduler_state_ != nullptr);
      chrome_renderer_scheduler_state_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(chrome_window_handle_event_info_ != nullptr);
      chrome_window_handle_event_info_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(chrome_content_settings_event_info_ != nullptr);
      chrome_content_settings_event_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&track_uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&track_uuid_)) + sizeof(type_));
  }
  clear_name_field();
  clear_counter_value_field();
  clear_source_location_field();
  clear_timestamp();
  clear_thread_time();
  clear_thread_instruction_count();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_delta_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 thread_time_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_thread_time_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 category_iids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_category_iids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_category_iids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_debug_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TaskExecution task_execution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_task_execution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_legacy_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 thread_instruction_count_delta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          set_thread_instruction_count_delta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEvent.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackEvent_Type_IsValid(val))) {
            set_type(static_cast<::perfetto::protos::TrackEvent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 name_iid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          set_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 track_uuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_track_uuid(&has_bits);
          track_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 extra_counter_values = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_extra_counter_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 96);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_extra_counter_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_absolute_us = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          set_timestamp_absolute_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 thread_time_absolute_us = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          set_thread_time_absolute_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 thread_instruction_count_absolute = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          set_thread_instruction_count_absolute(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.LogMessage log_message = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_log_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string categories = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_categories(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // optional string name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_cc_scheduler_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_chrome_user_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_chrome_keyed_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_chrome_legacy_ipc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_chrome_histogram_sample(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_chrome_latency_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 counter_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          set_counter_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 extra_counter_track_uuids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 504);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_extra_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_chrome_frame_reporter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.SourceLocation source_location = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_location_iid = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_source_location_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_chrome_message_pump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 flow_ids = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_flow_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 672);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_flow_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_chrome_mojo_event_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_chrome_application_state_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_chrome_renderer_scheduler_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_chrome_window_handle_event_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 terminating_flow_ids = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_terminating_flow_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 720);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_terminating_flow_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_chrome_content_settings_event_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_counter_value = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          set_double_counter_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint64 extra_double_counter_track_uuids = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 744);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_extra_double_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double extra_double_counter_values = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_extra_double_counter_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 753);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_extra_double_counter_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag && tag < 79200u) ||
          (79200u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_delta_us = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_timestamp();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_.timestamp_delta_us_)));
          set_has_timestamp_delta_us();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_time_delta_us = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_thread_time();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_time_.thread_time_delta_us_)));
          set_has_thread_time_delta_us();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 category_iids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_category_iids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_category_iids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_debug_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TaskExecution task_execution = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_task_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_legacy_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_instruction_count_delta = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          clear_thread_instruction_count();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_instruction_count_.thread_instruction_count_delta_)));
          set_has_thread_instruction_count_delta();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TrackEvent.Type type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::TrackEvent_Type_IsValid(value)) {
            set_type(static_cast< ::perfetto::protos::TrackEvent_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 name_iid = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          clear_name_field();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_field_.name_iid_)));
          set_has_name_iid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 track_uuid = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_track_uuid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 extra_counter_values = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 96u, input, this->mutable_extra_counter_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_extra_counter_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_absolute_us = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          clear_timestamp();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_.timestamp_absolute_us_)));
          set_has_timestamp_absolute_us();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_time_absolute_us = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          clear_thread_time();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_time_.thread_time_absolute_us_)));
          set_has_thread_time_absolute_us();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_instruction_count_absolute = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          clear_thread_instruction_count();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_instruction_count_.thread_instruction_count_absolute_)));
          set_has_thread_instruction_count_absolute();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.LogMessage log_message = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_log_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string categories = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cc_scheduler_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_user_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_keyed_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_legacy_ipc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_histogram_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_latency_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 counter_value = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          clear_counter_value_field();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &counter_value_field_.counter_value_)));
          set_has_counter_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 extra_counter_track_uuids = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 248u, input, this->mutable_extra_counter_track_uuids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_extra_counter_track_uuids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_frame_reporter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.SourceLocation source_location = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_location_iid = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          clear_source_location_field();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_location_field_.source_location_iid_)));
          set_has_source_location_iid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_message_pump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 flow_ids = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 288u, input, this->mutable_flow_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_flow_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_mojo_event_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_application_state_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_renderer_scheduler_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_window_handle_event_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 terminating_flow_ids = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 336u, input, this->mutable_terminating_flow_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_terminating_flow_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_content_settings_event_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_counter_value = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (353 & 0xFF)) {
          clear_counter_value_field();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &counter_value_field_.double_counter_value_)));
          set_has_double_counter_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 extra_double_counter_track_uuids = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 360u, input, this->mutable_extra_double_counter_track_uuids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_extra_double_counter_track_uuids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double extra_double_counter_values = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (369 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 369u, input, this->mutable_extra_double_counter_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_extra_double_counter_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 79200u) ||
            (79200u <= tag && tag < 80008u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              &unknown_fields_stream));
          continue;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 timestamp_delta_us = 1;
  if (has_timestamp_delta_us()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_delta_us(), output);
  }

  // optional int64 thread_time_delta_us = 2;
  if (has_thread_time_delta_us()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->thread_time_delta_us(), output);
  }

  // repeated uint64 category_iids = 3;
  for (int i = 0, n = this->category_iids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      3, this->category_iids(i), output);
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debug_annotations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->debug_annotations(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.TaskExecution task_execution = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::task_execution(this), output);
  }

  // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::legacy_event(this), output);
  }

  // optional int64 thread_instruction_count_delta = 8;
  if (has_thread_instruction_count_delta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->thread_instruction_count_delta(), output);
  }

  // optional .perfetto.protos.TrackEvent.Type type = 9;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint64 name_iid = 10;
  if (has_name_iid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->name_iid(), output);
  }

  // optional uint64 track_uuid = 11;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->track_uuid(), output);
  }

  // repeated int64 extra_counter_values = 12;
  for (int i = 0, n = this->extra_counter_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      12, this->extra_counter_values(i), output);
  }

  // optional int64 timestamp_absolute_us = 16;
  if (has_timestamp_absolute_us()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->timestamp_absolute_us(), output);
  }

  // optional int64 thread_time_absolute_us = 17;
  if (has_thread_time_absolute_us()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->thread_time_absolute_us(), output);
  }

  // optional int64 thread_instruction_count_absolute = 20;
  if (has_thread_instruction_count_absolute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->thread_instruction_count_absolute(), output);
  }

  // optional .perfetto.protos.LogMessage log_message = 21;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::log_message(this), output);
  }

  // repeated string categories = 22;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      22, this->categories(i), output);
  }

  // optional string name = 23;
  if (has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->name(), output);
  }

  // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::cc_scheduler_state(this), output);
  }

  // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::chrome_user_event(this), output);
  }

  // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::chrome_keyed_service(this), output);
  }

  // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::chrome_legacy_ipc(this), output);
  }

  // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::chrome_histogram_sample(this), output);
  }

  // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::chrome_latency_info(this), output);
  }

  // optional int64 counter_value = 30;
  if (has_counter_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(30, this->counter_value(), output);
  }

  // repeated uint64 extra_counter_track_uuids = 31;
  for (int i = 0, n = this->extra_counter_track_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      31, this->extra_counter_track_uuids(i), output);
  }

  // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::chrome_frame_reporter(this), output);
  }

  switch (source_location_field_case()) {
    case kSourceLocation:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        33, _Internal::source_location(this), output);
      break;
    case kSourceLocationIid:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(34, this->source_location_iid(), output);
      break;
    default: ;
  }
  // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35, _Internal::chrome_message_pump(this), output);
  }

  // repeated uint64 flow_ids = 36;
  for (int i = 0, n = this->flow_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      36, this->flow_ids(i), output);
  }

  // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      38, _Internal::chrome_mojo_event_info(this), output);
  }

  // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      39, _Internal::chrome_application_state_info(this), output);
  }

  // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      40, _Internal::chrome_renderer_scheduler_state(this), output);
  }

  // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      41, _Internal::chrome_window_handle_event_info(this), output);
  }

  // repeated uint64 terminating_flow_ids = 42;
  for (int i = 0, n = this->terminating_flow_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      42, this->terminating_flow_ids(i), output);
  }

  // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::chrome_content_settings_event_info(this), output);
  }

  // optional double double_counter_value = 44;
  if (has_double_counter_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(44, this->double_counter_value(), output);
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  for (int i = 0, n = this->extra_double_counter_track_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      45, this->extra_double_counter_track_uuids(i), output);
  }

  // repeated double extra_double_counter_values = 46;
  for (int i = 0, n = this->extra_double_counter_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      46, this->extra_double_counter_values(i), output);
  }

  // Extension range [1000, 9900)
  _extensions_.SerializeWithCachedSizes(1000, 9900, output);

  // Extension range [9900, 10001)
  _extensions_.SerializeWithCachedSizes(9900, 10001, output);

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackEvent)
}

size_t TrackEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEvent)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 category_iids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->category_iids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->category_iids_size());
    total_size += data_size;
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->debug_annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->debug_annotations(static_cast<int>(i)));
    }
  }

  // repeated int64 extra_counter_values = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->extra_counter_values_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_counter_values_size());
    total_size += data_size;
  }

  // repeated string categories = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->categories_size());
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  // repeated uint64 extra_counter_track_uuids = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->extra_counter_track_uuids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_counter_track_uuids_size());
    total_size += data_size;
  }

  // repeated uint64 flow_ids = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->flow_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->flow_ids_size());
    total_size += data_size;
  }

  // repeated uint64 terminating_flow_ids = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->terminating_flow_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->terminating_flow_ids_size());
    total_size += data_size;
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->extra_double_counter_track_uuids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_double_counter_track_uuids_size());
    total_size += data_size;
  }

  // repeated double extra_double_counter_values = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_double_counter_values_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_double_counter_values_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.TaskExecution task_execution = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_execution_);
    }

    // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacy_event_);
    }

    // optional .perfetto.protos.LogMessage log_message = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *log_message_);
    }

    // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cc_scheduler_state_);
    }

    // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_user_event_);
    }

    // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_keyed_service_);
    }

    // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_legacy_ipc_);
    }

    // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_histogram_sample_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_latency_info_);
    }

    // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_frame_reporter_);
    }

    // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_message_pump_);
    }

    // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_mojo_event_info_);
    }

    // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_application_state_info_);
    }

    // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_renderer_scheduler_state_);
    }

    // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_window_handle_event_info_);
    }

    // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_content_settings_event_info_);
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint64 track_uuid = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->track_uuid());
    }

    // optional .perfetto.protos.TrackEvent.Type type = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (name_field_case()) {
    // optional uint64 name_iid = 10;
    case kNameIid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->name_iid());
      break;
    }
    // optional string name = 23;
    case kName: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (counter_value_field_case()) {
    // optional int64 counter_value = 30;
    case kCounterValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->counter_value());
      break;
    }
    // optional double double_counter_value = 44;
    case kDoubleCounterValue: {
      total_size += 2 + 8;
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  switch (source_location_field_case()) {
    // optional .perfetto.protos.SourceLocation source_location = 33;
    case kSourceLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_location_field_.source_location_);
      break;
    }
    // optional uint64 source_location_iid = 34;
    case kSourceLocationIid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->source_location_iid());
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  switch (timestamp_case()) {
    // optional int64 timestamp_delta_us = 1;
    case kTimestampDeltaUs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_delta_us());
      break;
    }
    // optional int64 timestamp_absolute_us = 16;
    case kTimestampAbsoluteUs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_absolute_us());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  switch (thread_time_case()) {
    // optional int64 thread_time_delta_us = 2;
    case kThreadTimeDeltaUs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->thread_time_delta_us());
      break;
    }
    // optional int64 thread_time_absolute_us = 17;
    case kThreadTimeAbsoluteUs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->thread_time_absolute_us());
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  switch (thread_instruction_count_case()) {
    // optional int64 thread_instruction_count_delta = 8;
    case kThreadInstructionCountDelta: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->thread_instruction_count_delta());
      break;
    }
    // optional int64 thread_instruction_count_absolute = 20;
    case kThreadInstructionCountAbsolute: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->thread_instruction_count_absolute());
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackEvent*>(
      &from));
}

void TrackEvent::MergeFrom(const TrackEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_iids_.MergeFrom(from.category_iids_);
  debug_annotations_.MergeFrom(from.debug_annotations_);
  extra_counter_values_.MergeFrom(from.extra_counter_values_);
  categories_.MergeFrom(from.categories_);
  extra_counter_track_uuids_.MergeFrom(from.extra_counter_track_uuids_);
  flow_ids_.MergeFrom(from.flow_ids_);
  terminating_flow_ids_.MergeFrom(from.terminating_flow_ids_);
  extra_double_counter_track_uuids_.MergeFrom(from.extra_double_counter_track_uuids_);
  extra_double_counter_values_.MergeFrom(from.extra_double_counter_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_task_execution()->::perfetto::protos::TaskExecution::MergeFrom(from.task_execution());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_legacy_event()->::perfetto::protos::TrackEvent_LegacyEvent::MergeFrom(from.legacy_event());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_log_message()->::perfetto::protos::LogMessage::MergeFrom(from.log_message());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cc_scheduler_state()->::perfetto::protos::ChromeCompositorSchedulerState::MergeFrom(from.cc_scheduler_state());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_chrome_user_event()->::perfetto::protos::ChromeUserEvent::MergeFrom(from.chrome_user_event());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_chrome_keyed_service()->::perfetto::protos::ChromeKeyedService::MergeFrom(from.chrome_keyed_service());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_chrome_legacy_ipc()->::perfetto::protos::ChromeLegacyIpc::MergeFrom(from.chrome_legacy_ipc());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_chrome_histogram_sample()->::perfetto::protos::ChromeHistogramSample::MergeFrom(from.chrome_histogram_sample());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_chrome_latency_info()->::perfetto::protos::ChromeLatencyInfo::MergeFrom(from.chrome_latency_info());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_chrome_frame_reporter()->::perfetto::protos::ChromeFrameReporter::MergeFrom(from.chrome_frame_reporter());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_chrome_message_pump()->::perfetto::protos::ChromeMessagePump::MergeFrom(from.chrome_message_pump());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_chrome_mojo_event_info()->::perfetto::protos::ChromeMojoEventInfo::MergeFrom(from.chrome_mojo_event_info());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_chrome_application_state_info()->::perfetto::protos::ChromeApplicationStateInfo::MergeFrom(from.chrome_application_state_info());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_chrome_renderer_scheduler_state()->::perfetto::protos::ChromeRendererSchedulerState::MergeFrom(from.chrome_renderer_scheduler_state());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_chrome_window_handle_event_info()->::perfetto::protos::ChromeWindowHandleEventInfo::MergeFrom(from.chrome_window_handle_event_info());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_chrome_content_settings_event_info()->::perfetto::protos::ChromeContentSettingsEventInfo::MergeFrom(from.chrome_content_settings_event_info());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      track_uuid_ = from.track_uuid_;
    }
    if (cached_has_bits & 0x00020000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.name_field_case()) {
    case kNameIid: {
      set_name_iid(from.name_iid());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.counter_value_field_case()) {
    case kCounterValue: {
      set_counter_value(from.counter_value());
      break;
    }
    case kDoubleCounterValue: {
      set_double_counter_value(from.double_counter_value());
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.source_location_field_case()) {
    case kSourceLocation: {
      mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(from.source_location());
      break;
    }
    case kSourceLocationIid: {
      set_source_location_iid(from.source_location_iid());
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.timestamp_case()) {
    case kTimestampDeltaUs: {
      set_timestamp_delta_us(from.timestamp_delta_us());
      break;
    }
    case kTimestampAbsoluteUs: {
      set_timestamp_absolute_us(from.timestamp_absolute_us());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  switch (from.thread_time_case()) {
    case kThreadTimeDeltaUs: {
      set_thread_time_delta_us(from.thread_time_delta_us());
      break;
    }
    case kThreadTimeAbsoluteUs: {
      set_thread_time_absolute_us(from.thread_time_absolute_us());
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.thread_instruction_count_case()) {
    case kThreadInstructionCountDelta: {
      set_thread_instruction_count_delta(from.thread_instruction_count_delta());
      break;
    }
    case kThreadInstructionCountAbsolute: {
      set_thread_instruction_count_absolute(from.thread_instruction_count_absolute());
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
}

void TrackEvent::CopyFrom(const TrackEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEvent::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TrackEvent::InternalSwap(TrackEvent* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  category_iids_.InternalSwap(&other->category_iids_);
  CastToBase(&debug_annotations_)->InternalSwap(CastToBase(&other->debug_annotations_));
  extra_counter_values_.InternalSwap(&other->extra_counter_values_);
  categories_.InternalSwap(CastToBase(&other->categories_));
  extra_counter_track_uuids_.InternalSwap(&other->extra_counter_track_uuids_);
  flow_ids_.InternalSwap(&other->flow_ids_);
  terminating_flow_ids_.InternalSwap(&other->terminating_flow_ids_);
  extra_double_counter_track_uuids_.InternalSwap(&other->extra_double_counter_track_uuids_);
  extra_double_counter_values_.InternalSwap(&other->extra_double_counter_values_);
  swap(task_execution_, other->task_execution_);
  swap(legacy_event_, other->legacy_event_);
  swap(log_message_, other->log_message_);
  swap(cc_scheduler_state_, other->cc_scheduler_state_);
  swap(chrome_user_event_, other->chrome_user_event_);
  swap(chrome_keyed_service_, other->chrome_keyed_service_);
  swap(chrome_legacy_ipc_, other->chrome_legacy_ipc_);
  swap(chrome_histogram_sample_, other->chrome_histogram_sample_);
  swap(chrome_latency_info_, other->chrome_latency_info_);
  swap(chrome_frame_reporter_, other->chrome_frame_reporter_);
  swap(chrome_message_pump_, other->chrome_message_pump_);
  swap(chrome_mojo_event_info_, other->chrome_mojo_event_info_);
  swap(chrome_application_state_info_, other->chrome_application_state_info_);
  swap(chrome_renderer_scheduler_state_, other->chrome_renderer_scheduler_state_);
  swap(chrome_window_handle_event_info_, other->chrome_window_handle_event_info_);
  swap(chrome_content_settings_event_info_, other->chrome_content_settings_event_info_);
  swap(track_uuid_, other->track_uuid_);
  swap(type_, other->type_);
  swap(name_field_, other->name_field_);
  swap(counter_value_field_, other->counter_value_field_);
  swap(source_location_field_, other->source_location_field_);
  swap(timestamp_, other->timestamp_);
  swap(thread_time_, other->thread_time_);
  swap(thread_instruction_count_, other->thread_instruction_count_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
}

std::string TrackEvent::GetTypeName() const {
  return "perfetto.protos.TrackEvent";
}


// ===================================================================

void TrackEventDefaults::InitAsDefaultInstance() {
}
class TrackEventDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEventDefaults>()._has_bits_);
  static void set_has_track_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackEventDefaults::TrackEventDefaults()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrackEventDefaults)
}
TrackEventDefaults::TrackEventDefaults(const TrackEventDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      extra_counter_track_uuids_(from.extra_counter_track_uuids_),
      extra_double_counter_track_uuids_(from.extra_double_counter_track_uuids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_uuid_ = from.track_uuid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEventDefaults)
}

void TrackEventDefaults::SharedCtor() {
  track_uuid_ = PROTOBUF_ULONGLONG(0);
}

TrackEventDefaults::~TrackEventDefaults() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEventDefaults)
  SharedDtor();
}

void TrackEventDefaults::SharedDtor() {
}

void TrackEventDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEventDefaults& TrackEventDefaults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEventDefaults_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  return *internal_default_instance();
}


void TrackEventDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEventDefaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_counter_track_uuids_.Clear();
  extra_double_counter_track_uuids_.Clear();
  track_uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackEventDefaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 track_uuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_track_uuid(&has_bits);
          track_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 extra_counter_track_uuids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 504);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_extra_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 extra_double_counter_track_uuids = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 744);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_extra_double_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackEventDefaults::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrackEventDefaults)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 track_uuid = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_track_uuid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 extra_counter_track_uuids = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 248u, input, this->mutable_extra_counter_track_uuids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_extra_counter_track_uuids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 extra_double_counter_track_uuids = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 2, 360u, input, this->mutable_extra_double_counter_track_uuids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_extra_double_counter_track_uuids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrackEventDefaults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrackEventDefaults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackEventDefaults::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrackEventDefaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 track_uuid = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->track_uuid(), output);
  }

  // repeated uint64 extra_counter_track_uuids = 31;
  for (int i = 0, n = this->extra_counter_track_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      31, this->extra_counter_track_uuids(i), output);
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  for (int i = 0, n = this->extra_double_counter_track_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      45, this->extra_double_counter_track_uuids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrackEventDefaults)
}

size_t TrackEventDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEventDefaults)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 extra_counter_track_uuids = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->extra_counter_track_uuids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_counter_track_uuids_size());
    total_size += data_size;
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->extra_double_counter_track_uuids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->extra_double_counter_track_uuids_size());
    total_size += data_size;
  }

  // optional uint64 track_uuid = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->track_uuid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEventDefaults::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackEventDefaults*>(
      &from));
}

void TrackEventDefaults::MergeFrom(const TrackEventDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEventDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_counter_track_uuids_.MergeFrom(from.extra_counter_track_uuids_);
  extra_double_counter_track_uuids_.MergeFrom(from.extra_double_counter_track_uuids_);
  if (from.has_track_uuid()) {
    set_track_uuid(from.track_uuid());
  }
}

void TrackEventDefaults::CopyFrom(const TrackEventDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEventDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEventDefaults::IsInitialized() const {
  return true;
}

void TrackEventDefaults::InternalSwap(TrackEventDefaults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_counter_track_uuids_.InternalSwap(&other->extra_counter_track_uuids_);
  extra_double_counter_track_uuids_.InternalSwap(&other->extra_double_counter_track_uuids_);
  swap(track_uuid_, other->track_uuid_);
}

std::string TrackEventDefaults::GetTypeName() const {
  return "perfetto.protos.TrackEventDefaults";
}


// ===================================================================

void EventCategory::InitAsDefaultInstance() {
}
class EventCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<EventCategory>()._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EventCategory::EventCategory()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.EventCategory)
}
EventCategory::EventCategory(const EventCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  iid_ = from.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.EventCategory)
}

void EventCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventCategory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iid_ = PROTOBUF_ULONGLONG(0);
}

EventCategory::~EventCategory() {
  // @@protoc_insertion_point(destructor:perfetto.protos.EventCategory)
  SharedDtor();
}

void EventCategory::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventCategory& EventCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventCategory_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  return *internal_default_instance();
}


void EventCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.EventCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventCategory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.EventCategory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 iid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_iid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.EventCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.EventCategory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventCategory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.EventCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->iid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.EventCategory)
}

size_t EventCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.EventCategory)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->iid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventCategory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventCategory*>(
      &from));
}

void EventCategory::MergeFrom(const EventCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.EventCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      iid_ = from.iid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventCategory::CopyFrom(const EventCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.EventCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCategory::IsInitialized() const {
  return true;
}

void EventCategory::InternalSwap(EventCategory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iid_, other->iid_);
}

std::string EventCategory::GetTypeName() const {
  return "perfetto.protos.EventCategory";
}


// ===================================================================

void EventName::InitAsDefaultInstance() {
}
class EventName::_Internal {
 public:
  using HasBits = decltype(std::declval<EventName>()._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EventName::EventName()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.EventName)
}
EventName::EventName(const EventName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  iid_ = from.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.EventName)
}

void EventName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventName_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iid_ = PROTOBUF_ULONGLONG(0);
}

EventName::~EventName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.EventName)
  SharedDtor();
}

void EventName::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventName& EventName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventName_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base);
  return *internal_default_instance();
}


void EventName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.EventName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventName::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.EventName)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 iid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_iid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.EventName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.EventName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventName::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.EventName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->iid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.EventName)
}

size_t EventName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.EventName)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->iid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventName*>(
      &from));
}

void EventName::MergeFrom(const EventName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.EventName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      iid_ = from.iid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventName::CopyFrom(const EventName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.EventName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventName::IsInitialized() const {
  return true;
}

void EventName::InternalSwap(EventName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iid_, other->iid_);
}

std::string EventName::GetTypeName() const {
  return "perfetto.protos.EventName";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEvent_LegacyEvent* Arena::CreateMaybeMessage< ::perfetto::protos::TrackEvent_LegacyEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackEvent_LegacyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEvent* Arena::CreateMaybeMessage< ::perfetto::protos::TrackEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEventDefaults* Arena::CreateMaybeMessage< ::perfetto::protos::TrackEventDefaults >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrackEventDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::EventCategory* Arena::CreateMaybeMessage< ::perfetto::protos::EventCategory >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::EventCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::EventName* Arena::CreateMaybeMessage< ::perfetto::protos::EventName >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::EventName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
