// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/track_event/debug_annotation.pb.h"
#include "protos/perfetto/trace/track_event/log_message.pb.h"
#include "protos/perfetto/trace/track_event/task_execution.pb.h"
#include "protos/perfetto/trace/track_event/chrome_application_state_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.pb.h"
#include "protos/perfetto/trace/track_event/chrome_content_settings_event_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_frame_reporter.pb.h"
#include "protos/perfetto/trace/track_event/chrome_histogram_sample.pb.h"
#include "protos/perfetto/trace/track_event/chrome_keyed_service.pb.h"
#include "protos/perfetto/trace/track_event/chrome_latency_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_legacy_ipc.pb.h"
#include "protos/perfetto/trace/track_event/chrome_message_pump.pb.h"
#include "protos/perfetto/trace/track_event/chrome_mojo_event_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_renderer_scheduler_state.pb.h"
#include "protos/perfetto/trace/track_event/chrome_user_event.pb.h"
#include "protos/perfetto/trace/track_event/chrome_window_handle_event_info.pb.h"
#include "protos/perfetto/trace/track_event/source_location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class EventCategory;
class EventCategoryDefaultTypeInternal;
extern EventCategoryDefaultTypeInternal _EventCategory_default_instance_;
class EventName;
class EventNameDefaultTypeInternal;
extern EventNameDefaultTypeInternal _EventName_default_instance_;
class TrackEvent;
class TrackEventDefaultTypeInternal;
extern TrackEventDefaultTypeInternal _TrackEvent_default_instance_;
class TrackEventDefaults;
class TrackEventDefaultsDefaultTypeInternal;
extern TrackEventDefaultsDefaultTypeInternal _TrackEventDefaults_default_instance_;
class TrackEvent_LegacyEvent;
class TrackEvent_LegacyEventDefaultTypeInternal;
extern TrackEvent_LegacyEventDefaultTypeInternal _TrackEvent_LegacyEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::EventCategory* Arena::CreateMaybeMessage<::perfetto::protos::EventCategory>(Arena*);
template<> ::perfetto::protos::EventName* Arena::CreateMaybeMessage<::perfetto::protos::EventName>(Arena*);
template<> ::perfetto::protos::TrackEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrackEvent>(Arena*);
template<> ::perfetto::protos::TrackEventDefaults* Arena::CreateMaybeMessage<::perfetto::protos::TrackEventDefaults>(Arena*);
template<> ::perfetto::protos::TrackEvent_LegacyEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrackEvent_LegacyEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum TrackEvent_LegacyEvent_FlowDirection : int {
  TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED = 0,
  TrackEvent_LegacyEvent_FlowDirection_FLOW_IN = 1,
  TrackEvent_LegacyEvent_FlowDirection_FLOW_OUT = 2,
  TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT = 3
};
bool TrackEvent_LegacyEvent_FlowDirection_IsValid(int value);
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MIN = TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MAX = TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT;
constexpr int TrackEvent_LegacyEvent_FlowDirection_FlowDirection_ARRAYSIZE = TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MAX + 1;

const std::string& TrackEvent_LegacyEvent_FlowDirection_Name(TrackEvent_LegacyEvent_FlowDirection value);
template<typename T>
inline const std::string& TrackEvent_LegacyEvent_FlowDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_LegacyEvent_FlowDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_LegacyEvent_FlowDirection_Name.");
  return TrackEvent_LegacyEvent_FlowDirection_Name(static_cast<TrackEvent_LegacyEvent_FlowDirection>(enum_t_value));
}
bool TrackEvent_LegacyEvent_FlowDirection_Parse(
    const std::string& name, TrackEvent_LegacyEvent_FlowDirection* value);
enum TrackEvent_LegacyEvent_InstantEventScope : int {
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED = 0,
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_GLOBAL = 1,
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_PROCESS = 2,
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD = 3
};
bool TrackEvent_LegacyEvent_InstantEventScope_IsValid(int value);
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MIN = TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MAX = TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD;
constexpr int TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_ARRAYSIZE = TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MAX + 1;

const std::string& TrackEvent_LegacyEvent_InstantEventScope_Name(TrackEvent_LegacyEvent_InstantEventScope value);
template<typename T>
inline const std::string& TrackEvent_LegacyEvent_InstantEventScope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_LegacyEvent_InstantEventScope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_LegacyEvent_InstantEventScope_Name.");
  return TrackEvent_LegacyEvent_InstantEventScope_Name(static_cast<TrackEvent_LegacyEvent_InstantEventScope>(enum_t_value));
}
bool TrackEvent_LegacyEvent_InstantEventScope_Parse(
    const std::string& name, TrackEvent_LegacyEvent_InstantEventScope* value);
enum TrackEvent_Type : int {
  TrackEvent_Type_TYPE_UNSPECIFIED = 0,
  TrackEvent_Type_TYPE_SLICE_BEGIN = 1,
  TrackEvent_Type_TYPE_SLICE_END = 2,
  TrackEvent_Type_TYPE_INSTANT = 3,
  TrackEvent_Type_TYPE_COUNTER = 4
};
bool TrackEvent_Type_IsValid(int value);
constexpr TrackEvent_Type TrackEvent_Type_Type_MIN = TrackEvent_Type_TYPE_UNSPECIFIED;
constexpr TrackEvent_Type TrackEvent_Type_Type_MAX = TrackEvent_Type_TYPE_COUNTER;
constexpr int TrackEvent_Type_Type_ARRAYSIZE = TrackEvent_Type_Type_MAX + 1;

const std::string& TrackEvent_Type_Name(TrackEvent_Type value);
template<typename T>
inline const std::string& TrackEvent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_Type_Name.");
  return TrackEvent_Type_Name(static_cast<TrackEvent_Type>(enum_t_value));
}
bool TrackEvent_Type_Parse(
    const std::string& name, TrackEvent_Type* value);
// ===================================================================

class TrackEvent_LegacyEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEvent.LegacyEvent) */ {
 public:
  TrackEvent_LegacyEvent();
  virtual ~TrackEvent_LegacyEvent();

  TrackEvent_LegacyEvent(const TrackEvent_LegacyEvent& from);
  TrackEvent_LegacyEvent(TrackEvent_LegacyEvent&& from) noexcept
    : TrackEvent_LegacyEvent() {
    *this = ::std::move(from);
  }

  inline TrackEvent_LegacyEvent& operator=(const TrackEvent_LegacyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEvent_LegacyEvent& operator=(TrackEvent_LegacyEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEvent_LegacyEvent& default_instance();

  enum IdCase {
    kUnscopedId = 6,
    kLocalId = 10,
    kGlobalId = 11,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEvent_LegacyEvent* internal_default_instance() {
    return reinterpret_cast<const TrackEvent_LegacyEvent*>(
               &_TrackEvent_LegacyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackEvent_LegacyEvent& a, TrackEvent_LegacyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEvent_LegacyEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEvent_LegacyEvent* New() const final {
    return CreateMaybeMessage<TrackEvent_LegacyEvent>(nullptr);
  }

  TrackEvent_LegacyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEvent_LegacyEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEvent_LegacyEvent& from);
  void MergeFrom(const TrackEvent_LegacyEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEvent_LegacyEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEvent.LegacyEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TrackEvent_LegacyEvent_FlowDirection FlowDirection;
  static constexpr FlowDirection FLOW_UNSPECIFIED =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED;
  static constexpr FlowDirection FLOW_IN =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_IN;
  static constexpr FlowDirection FLOW_OUT =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_OUT;
  static constexpr FlowDirection FLOW_INOUT =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT;
  static inline bool FlowDirection_IsValid(int value) {
    return TrackEvent_LegacyEvent_FlowDirection_IsValid(value);
  }
  static constexpr FlowDirection FlowDirection_MIN =
    TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MIN;
  static constexpr FlowDirection FlowDirection_MAX =
    TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MAX;
  static constexpr int FlowDirection_ARRAYSIZE =
    TrackEvent_LegacyEvent_FlowDirection_FlowDirection_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FlowDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FlowDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FlowDirection_Name.");
    return TrackEvent_LegacyEvent_FlowDirection_Name(enum_t_value);
  }
  static inline bool FlowDirection_Parse(const std::string& name,
      FlowDirection* value) {
    return TrackEvent_LegacyEvent_FlowDirection_Parse(name, value);
  }

  typedef TrackEvent_LegacyEvent_InstantEventScope InstantEventScope;
  static constexpr InstantEventScope SCOPE_UNSPECIFIED =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED;
  static constexpr InstantEventScope SCOPE_GLOBAL =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_GLOBAL;
  static constexpr InstantEventScope SCOPE_PROCESS =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_PROCESS;
  static constexpr InstantEventScope SCOPE_THREAD =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD;
  static inline bool InstantEventScope_IsValid(int value) {
    return TrackEvent_LegacyEvent_InstantEventScope_IsValid(value);
  }
  static constexpr InstantEventScope InstantEventScope_MIN =
    TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MIN;
  static constexpr InstantEventScope InstantEventScope_MAX =
    TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MAX;
  static constexpr int InstantEventScope_ARRAYSIZE =
    TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InstantEventScope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstantEventScope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstantEventScope_Name.");
    return TrackEvent_LegacyEvent_InstantEventScope_Name(enum_t_value);
  }
  static inline bool InstantEventScope_Parse(const std::string& name,
      InstantEventScope* value) {
    return TrackEvent_LegacyEvent_InstantEventScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdScopeFieldNumber = 7,
    kNameIidFieldNumber = 1,
    kDurationUsFieldNumber = 3,
    kThreadDurationUsFieldNumber = 4,
    kPhaseFieldNumber = 2,
    kUseAsyncTtsFieldNumber = 9,
    kBindToEnclosingFieldNumber = 12,
    kBindIdFieldNumber = 8,
    kFlowDirectionFieldNumber = 13,
    kInstantEventScopeFieldNumber = 14,
    kThreadInstructionDeltaFieldNumber = 15,
    kPidOverrideFieldNumber = 18,
    kTidOverrideFieldNumber = 19,
    kUnscopedIdFieldNumber = 6,
    kLocalIdFieldNumber = 10,
    kGlobalIdFieldNumber = 11,
  };
  // optional string id_scope = 7;
  bool has_id_scope() const;
  void clear_id_scope();
  const std::string& id_scope() const;
  void set_id_scope(const std::string& value);
  void set_id_scope(std::string&& value);
  void set_id_scope(const char* value);
  void set_id_scope(const char* value, size_t size);
  std::string* mutable_id_scope();
  std::string* release_id_scope();
  void set_allocated_id_scope(std::string* id_scope);

  // optional uint64 name_iid = 1;
  bool has_name_iid() const;
  void clear_name_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_iid() const;
  void set_name_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 duration_us = 3;
  bool has_duration_us() const;
  void clear_duration_us();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_us() const;
  void set_duration_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 thread_duration_us = 4;
  bool has_thread_duration_us() const;
  void clear_thread_duration_us();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_duration_us() const;
  void set_thread_duration_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 phase = 2;
  bool has_phase() const;
  void clear_phase();
  ::PROTOBUF_NAMESPACE_ID::int32 phase() const;
  void set_phase(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool use_async_tts = 9;
  bool has_use_async_tts() const;
  void clear_use_async_tts();
  bool use_async_tts() const;
  void set_use_async_tts(bool value);

  // optional bool bind_to_enclosing = 12;
  bool has_bind_to_enclosing() const;
  void clear_bind_to_enclosing();
  bool bind_to_enclosing() const;
  void set_bind_to_enclosing(bool value);

  // optional uint64 bind_id = 8;
  bool has_bind_id() const;
  void clear_bind_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 bind_id() const;
  void set_bind_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
  bool has_flow_direction() const;
  void clear_flow_direction();
  ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection flow_direction() const;
  void set_flow_direction(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection value);

  // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
  bool has_instant_event_scope() const;
  void clear_instant_event_scope();
  ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope instant_event_scope() const;
  void set_instant_event_scope(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope value);

  // optional int64 thread_instruction_delta = 15;
  bool has_thread_instruction_delta() const;
  void clear_thread_instruction_delta();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_delta() const;
  void set_thread_instruction_delta(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 pid_override = 18;
  bool has_pid_override() const;
  void clear_pid_override();
  ::PROTOBUF_NAMESPACE_ID::int32 pid_override() const;
  void set_pid_override(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tid_override = 19;
  bool has_tid_override() const;
  void clear_tid_override();
  ::PROTOBUF_NAMESPACE_ID::int32 tid_override() const;
  void set_tid_override(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 unscoped_id = 6;
  bool has_unscoped_id() const;
  void clear_unscoped_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 unscoped_id() const;
  void set_unscoped_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 local_id = 10;
  bool has_local_id() const;
  void clear_local_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 local_id() const;
  void set_local_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 global_id = 11;
  bool has_global_id() const;
  void clear_global_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 global_id() const;
  void set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEvent.LegacyEvent)
 private:
  class _Internal;
  void set_has_unscoped_id();
  void set_has_local_id();
  void set_has_global_id();

  inline bool has_id() const;
  inline void clear_has_id();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_scope_;
  ::PROTOBUF_NAMESPACE_ID::uint64 name_iid_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_duration_us_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_;
  bool use_async_tts_;
  bool bind_to_enclosing_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bind_id_;
  int flow_direction_;
  int instant_event_scope_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_override_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_override_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 unscoped_id_;
    ::PROTOBUF_NAMESPACE_ID::uint64 local_id_;
    ::PROTOBUF_NAMESPACE_ID::uint64 global_id_;
  } id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class TrackEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEvent) */ {
 public:
  TrackEvent();
  virtual ~TrackEvent();

  TrackEvent(const TrackEvent& from);
  TrackEvent(TrackEvent&& from) noexcept
    : TrackEvent() {
    *this = ::std::move(from);
  }

  inline TrackEvent& operator=(const TrackEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEvent& operator=(TrackEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEvent& default_instance();

  enum NameFieldCase {
    kNameIid = 10,
    kName = 23,
    NAME_FIELD_NOT_SET = 0,
  };

  enum CounterValueFieldCase {
    kCounterValue = 30,
    kDoubleCounterValue = 44,
    COUNTER_VALUE_FIELD_NOT_SET = 0,
  };

  enum SourceLocationFieldCase {
    kSourceLocation = 33,
    kSourceLocationIid = 34,
    SOURCE_LOCATION_FIELD_NOT_SET = 0,
  };

  enum TimestampCase {
    kTimestampDeltaUs = 1,
    kTimestampAbsoluteUs = 16,
    TIMESTAMP_NOT_SET = 0,
  };

  enum ThreadTimeCase {
    kThreadTimeDeltaUs = 2,
    kThreadTimeAbsoluteUs = 17,
    THREAD_TIME_NOT_SET = 0,
  };

  enum ThreadInstructionCountCase {
    kThreadInstructionCountDelta = 8,
    kThreadInstructionCountAbsolute = 20,
    THREAD_INSTRUCTION_COUNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEvent* internal_default_instance() {
    return reinterpret_cast<const TrackEvent*>(
               &_TrackEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrackEvent& a, TrackEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEvent* New() const final {
    return CreateMaybeMessage<TrackEvent>(nullptr);
  }

  TrackEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEvent& from);
  void MergeFrom(const TrackEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TrackEvent_LegacyEvent LegacyEvent;

  typedef TrackEvent_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    TrackEvent_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_SLICE_BEGIN =
    TrackEvent_Type_TYPE_SLICE_BEGIN;
  static constexpr Type TYPE_SLICE_END =
    TrackEvent_Type_TYPE_SLICE_END;
  static constexpr Type TYPE_INSTANT =
    TrackEvent_Type_TYPE_INSTANT;
  static constexpr Type TYPE_COUNTER =
    TrackEvent_Type_TYPE_COUNTER;
  static inline bool Type_IsValid(int value) {
    return TrackEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TrackEvent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TrackEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TrackEvent_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TrackEvent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return TrackEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryIidsFieldNumber = 3,
    kDebugAnnotationsFieldNumber = 4,
    kExtraCounterValuesFieldNumber = 12,
    kCategoriesFieldNumber = 22,
    kExtraCounterTrackUuidsFieldNumber = 31,
    kFlowIdsFieldNumber = 36,
    kTerminatingFlowIdsFieldNumber = 42,
    kExtraDoubleCounterTrackUuidsFieldNumber = 45,
    kExtraDoubleCounterValuesFieldNumber = 46,
    kTaskExecutionFieldNumber = 5,
    kLegacyEventFieldNumber = 6,
    kLogMessageFieldNumber = 21,
    kCcSchedulerStateFieldNumber = 24,
    kChromeUserEventFieldNumber = 25,
    kChromeKeyedServiceFieldNumber = 26,
    kChromeLegacyIpcFieldNumber = 27,
    kChromeHistogramSampleFieldNumber = 28,
    kChromeLatencyInfoFieldNumber = 29,
    kChromeFrameReporterFieldNumber = 32,
    kChromeMessagePumpFieldNumber = 35,
    kChromeMojoEventInfoFieldNumber = 38,
    kChromeApplicationStateInfoFieldNumber = 39,
    kChromeRendererSchedulerStateFieldNumber = 40,
    kChromeWindowHandleEventInfoFieldNumber = 41,
    kChromeContentSettingsEventInfoFieldNumber = 43,
    kTrackUuidFieldNumber = 11,
    kTypeFieldNumber = 9,
    kNameIidFieldNumber = 10,
    kNameFieldNumber = 23,
    kCounterValueFieldNumber = 30,
    kDoubleCounterValueFieldNumber = 44,
    kSourceLocationFieldNumber = 33,
    kSourceLocationIidFieldNumber = 34,
    kTimestampDeltaUsFieldNumber = 1,
    kTimestampAbsoluteUsFieldNumber = 16,
    kThreadTimeDeltaUsFieldNumber = 2,
    kThreadTimeAbsoluteUsFieldNumber = 17,
    kThreadInstructionCountDeltaFieldNumber = 8,
    kThreadInstructionCountAbsoluteFieldNumber = 20,
  };
  // repeated uint64 category_iids = 3;
  int category_iids_size() const;
  void clear_category_iids();
  ::PROTOBUF_NAMESPACE_ID::uint64 category_iids(int index) const;
  void set_category_iids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_category_iids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      category_iids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_category_iids();

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
  int debug_annotations_size() const;
  void clear_debug_annotations();
  ::perfetto::protos::DebugAnnotation* mutable_debug_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
      mutable_debug_annotations();
  const ::perfetto::protos::DebugAnnotation& debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* add_debug_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
      debug_annotations() const;

  // repeated int64 extra_counter_values = 12;
  int extra_counter_values_size() const;
  void clear_extra_counter_values();
  ::PROTOBUF_NAMESPACE_ID::int64 extra_counter_values(int index) const;
  void set_extra_counter_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_extra_counter_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      extra_counter_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_extra_counter_values();

  // repeated string categories = 22;
  int categories_size() const;
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();

  // repeated uint64 extra_counter_track_uuids = 31;
  int extra_counter_track_uuids_size() const;
  void clear_extra_counter_track_uuids();
  ::PROTOBUF_NAMESPACE_ID::uint64 extra_counter_track_uuids(int index) const;
  void set_extra_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      extra_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_extra_counter_track_uuids();

  // repeated uint64 flow_ids = 36;
  int flow_ids_size() const;
  void clear_flow_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 flow_ids(int index) const;
  void set_flow_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_flow_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      flow_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_flow_ids();

  // repeated uint64 terminating_flow_ids = 42;
  int terminating_flow_ids_size() const;
  void clear_terminating_flow_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 terminating_flow_ids(int index) const;
  void set_terminating_flow_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_terminating_flow_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      terminating_flow_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_terminating_flow_ids();

  // repeated uint64 extra_double_counter_track_uuids = 45;
  int extra_double_counter_track_uuids_size() const;
  void clear_extra_double_counter_track_uuids();
  ::PROTOBUF_NAMESPACE_ID::uint64 extra_double_counter_track_uuids(int index) const;
  void set_extra_double_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      extra_double_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_extra_double_counter_track_uuids();

  // repeated double extra_double_counter_values = 46;
  int extra_double_counter_values_size() const;
  void clear_extra_double_counter_values();
  double extra_double_counter_values(int index) const;
  void set_extra_double_counter_values(int index, double value);
  void add_extra_double_counter_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      extra_double_counter_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_extra_double_counter_values();

  // optional .perfetto.protos.TaskExecution task_execution = 5;
  bool has_task_execution() const;
  void clear_task_execution();
  const ::perfetto::protos::TaskExecution& task_execution() const;
  ::perfetto::protos::TaskExecution* release_task_execution();
  ::perfetto::protos::TaskExecution* mutable_task_execution();
  void set_allocated_task_execution(::perfetto::protos::TaskExecution* task_execution);

  // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
  bool has_legacy_event() const;
  void clear_legacy_event();
  const ::perfetto::protos::TrackEvent_LegacyEvent& legacy_event() const;
  ::perfetto::protos::TrackEvent_LegacyEvent* release_legacy_event();
  ::perfetto::protos::TrackEvent_LegacyEvent* mutable_legacy_event();
  void set_allocated_legacy_event(::perfetto::protos::TrackEvent_LegacyEvent* legacy_event);

  // optional .perfetto.protos.LogMessage log_message = 21;
  bool has_log_message() const;
  void clear_log_message();
  const ::perfetto::protos::LogMessage& log_message() const;
  ::perfetto::protos::LogMessage* release_log_message();
  ::perfetto::protos::LogMessage* mutable_log_message();
  void set_allocated_log_message(::perfetto::protos::LogMessage* log_message);

  // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
  bool has_cc_scheduler_state() const;
  void clear_cc_scheduler_state();
  const ::perfetto::protos::ChromeCompositorSchedulerState& cc_scheduler_state() const;
  ::perfetto::protos::ChromeCompositorSchedulerState* release_cc_scheduler_state();
  ::perfetto::protos::ChromeCompositorSchedulerState* mutable_cc_scheduler_state();
  void set_allocated_cc_scheduler_state(::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state);

  // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
  bool has_chrome_user_event() const;
  void clear_chrome_user_event();
  const ::perfetto::protos::ChromeUserEvent& chrome_user_event() const;
  ::perfetto::protos::ChromeUserEvent* release_chrome_user_event();
  ::perfetto::protos::ChromeUserEvent* mutable_chrome_user_event();
  void set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEvent* chrome_user_event);

  // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
  bool has_chrome_keyed_service() const;
  void clear_chrome_keyed_service();
  const ::perfetto::protos::ChromeKeyedService& chrome_keyed_service() const;
  ::perfetto::protos::ChromeKeyedService* release_chrome_keyed_service();
  ::perfetto::protos::ChromeKeyedService* mutable_chrome_keyed_service();
  void set_allocated_chrome_keyed_service(::perfetto::protos::ChromeKeyedService* chrome_keyed_service);

  // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
  bool has_chrome_legacy_ipc() const;
  void clear_chrome_legacy_ipc();
  const ::perfetto::protos::ChromeLegacyIpc& chrome_legacy_ipc() const;
  ::perfetto::protos::ChromeLegacyIpc* release_chrome_legacy_ipc();
  ::perfetto::protos::ChromeLegacyIpc* mutable_chrome_legacy_ipc();
  void set_allocated_chrome_legacy_ipc(::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc);

  // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
  bool has_chrome_histogram_sample() const;
  void clear_chrome_histogram_sample();
  const ::perfetto::protos::ChromeHistogramSample& chrome_histogram_sample() const;
  ::perfetto::protos::ChromeHistogramSample* release_chrome_histogram_sample();
  ::perfetto::protos::ChromeHistogramSample* mutable_chrome_histogram_sample();
  void set_allocated_chrome_histogram_sample(::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample);

  // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
  bool has_chrome_latency_info() const;
  void clear_chrome_latency_info();
  const ::perfetto::protos::ChromeLatencyInfo& chrome_latency_info() const;
  ::perfetto::protos::ChromeLatencyInfo* release_chrome_latency_info();
  ::perfetto::protos::ChromeLatencyInfo* mutable_chrome_latency_info();
  void set_allocated_chrome_latency_info(::perfetto::protos::ChromeLatencyInfo* chrome_latency_info);

  // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
  bool has_chrome_frame_reporter() const;
  void clear_chrome_frame_reporter();
  const ::perfetto::protos::ChromeFrameReporter& chrome_frame_reporter() const;
  ::perfetto::protos::ChromeFrameReporter* release_chrome_frame_reporter();
  ::perfetto::protos::ChromeFrameReporter* mutable_chrome_frame_reporter();
  void set_allocated_chrome_frame_reporter(::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter);

  // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
  bool has_chrome_message_pump() const;
  void clear_chrome_message_pump();
  const ::perfetto::protos::ChromeMessagePump& chrome_message_pump() const;
  ::perfetto::protos::ChromeMessagePump* release_chrome_message_pump();
  ::perfetto::protos::ChromeMessagePump* mutable_chrome_message_pump();
  void set_allocated_chrome_message_pump(::perfetto::protos::ChromeMessagePump* chrome_message_pump);

  // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
  bool has_chrome_mojo_event_info() const;
  void clear_chrome_mojo_event_info();
  const ::perfetto::protos::ChromeMojoEventInfo& chrome_mojo_event_info() const;
  ::perfetto::protos::ChromeMojoEventInfo* release_chrome_mojo_event_info();
  ::perfetto::protos::ChromeMojoEventInfo* mutable_chrome_mojo_event_info();
  void set_allocated_chrome_mojo_event_info(::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info);

  // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
  bool has_chrome_application_state_info() const;
  void clear_chrome_application_state_info();
  const ::perfetto::protos::ChromeApplicationStateInfo& chrome_application_state_info() const;
  ::perfetto::protos::ChromeApplicationStateInfo* release_chrome_application_state_info();
  ::perfetto::protos::ChromeApplicationStateInfo* mutable_chrome_application_state_info();
  void set_allocated_chrome_application_state_info(::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info);

  // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
  bool has_chrome_renderer_scheduler_state() const;
  void clear_chrome_renderer_scheduler_state();
  const ::perfetto::protos::ChromeRendererSchedulerState& chrome_renderer_scheduler_state() const;
  ::perfetto::protos::ChromeRendererSchedulerState* release_chrome_renderer_scheduler_state();
  ::perfetto::protos::ChromeRendererSchedulerState* mutable_chrome_renderer_scheduler_state();
  void set_allocated_chrome_renderer_scheduler_state(::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state);

  // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
  bool has_chrome_window_handle_event_info() const;
  void clear_chrome_window_handle_event_info();
  const ::perfetto::protos::ChromeWindowHandleEventInfo& chrome_window_handle_event_info() const;
  ::perfetto::protos::ChromeWindowHandleEventInfo* release_chrome_window_handle_event_info();
  ::perfetto::protos::ChromeWindowHandleEventInfo* mutable_chrome_window_handle_event_info();
  void set_allocated_chrome_window_handle_event_info(::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info);

  // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
  bool has_chrome_content_settings_event_info() const;
  void clear_chrome_content_settings_event_info();
  const ::perfetto::protos::ChromeContentSettingsEventInfo& chrome_content_settings_event_info() const;
  ::perfetto::protos::ChromeContentSettingsEventInfo* release_chrome_content_settings_event_info();
  ::perfetto::protos::ChromeContentSettingsEventInfo* mutable_chrome_content_settings_event_info();
  void set_allocated_chrome_content_settings_event_info(::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info);

  // optional uint64 track_uuid = 11;
  bool has_track_uuid() const;
  void clear_track_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 track_uuid() const;
  void set_track_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.TrackEvent.Type type = 9;
  bool has_type() const;
  void clear_type();
  ::perfetto::protos::TrackEvent_Type type() const;
  void set_type(::perfetto::protos::TrackEvent_Type value);

  // optional uint64 name_iid = 10;
  bool has_name_iid() const;
  void clear_name_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_iid() const;
  void set_name_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional string name = 23;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 counter_value = 30;
  bool has_counter_value() const;
  void clear_counter_value();
  ::PROTOBUF_NAMESPACE_ID::int64 counter_value() const;
  void set_counter_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double double_counter_value = 44;
  bool has_double_counter_value() const;
  void clear_double_counter_value();
  double double_counter_value() const;
  void set_double_counter_value(double value);

  // optional .perfetto.protos.SourceLocation source_location = 33;
  bool has_source_location() const;
  void clear_source_location();
  const ::perfetto::protos::SourceLocation& source_location() const;
  ::perfetto::protos::SourceLocation* release_source_location();
  ::perfetto::protos::SourceLocation* mutable_source_location();
  void set_allocated_source_location(::perfetto::protos::SourceLocation* source_location);

  // optional uint64 source_location_iid = 34;
  bool has_source_location_iid() const;
  void clear_source_location_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_location_iid() const;
  void set_source_location_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 timestamp_delta_us = 1;
  bool has_timestamp_delta_us() const;
  void clear_timestamp_delta_us();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_delta_us() const;
  void set_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 timestamp_absolute_us = 16;
  bool has_timestamp_absolute_us() const;
  void clear_timestamp_absolute_us();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_absolute_us() const;
  void set_timestamp_absolute_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 thread_time_delta_us = 2;
  bool has_thread_time_delta_us() const;
  void clear_thread_time_delta_us();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_time_delta_us() const;
  void set_thread_time_delta_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 thread_time_absolute_us = 17;
  bool has_thread_time_absolute_us() const;
  void clear_thread_time_absolute_us();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_time_absolute_us() const;
  void set_thread_time_absolute_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 thread_instruction_count_delta = 8;
  bool has_thread_instruction_count_delta() const;
  void clear_thread_instruction_count_delta();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_count_delta() const;
  void set_thread_instruction_count_delta(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 thread_instruction_count_absolute = 20;
  bool has_thread_instruction_count_absolute() const;
  void clear_thread_instruction_count_absolute();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_count_absolute() const;
  void set_thread_instruction_count_absolute(::PROTOBUF_NAMESPACE_ID::int64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TrackEvent)
  void clear_name_field();
  NameFieldCase name_field_case() const;
  void clear_counter_value_field();
  CounterValueFieldCase counter_value_field_case() const;
  void clear_source_location_field();
  SourceLocationFieldCase source_location_field_case() const;
  void clear_timestamp();
  TimestampCase timestamp_case() const;
  void clear_thread_time();
  ThreadTimeCase thread_time_case() const;
  void clear_thread_instruction_count();
  ThreadInstructionCountCase thread_instruction_count_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEvent)
 private:
  class _Internal;
  void set_has_name_iid();
  void set_has_name();
  void set_has_counter_value();
  void set_has_double_counter_value();
  void set_has_source_location();
  void set_has_source_location_iid();
  void set_has_timestamp_delta_us();
  void set_has_timestamp_absolute_us();
  void set_has_thread_time_delta_us();
  void set_has_thread_time_absolute_us();
  void set_has_thread_instruction_count_delta();
  void set_has_thread_instruction_count_absolute();

  inline bool has_name_field() const;
  inline void clear_has_name_field();

  inline bool has_counter_value_field() const;
  inline void clear_has_counter_value_field();

  inline bool has_source_location_field() const;
  inline void clear_has_source_location_field();

  inline bool has_timestamp() const;
  inline void clear_has_timestamp();

  inline bool has_thread_time() const;
  inline void clear_has_thread_time();

  inline bool has_thread_instruction_count() const;
  inline void clear_has_thread_instruction_count();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > category_iids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation > debug_annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > extra_counter_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > extra_counter_track_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > flow_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > terminating_flow_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > extra_double_counter_track_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > extra_double_counter_values_;
  ::perfetto::protos::TaskExecution* task_execution_;
  ::perfetto::protos::TrackEvent_LegacyEvent* legacy_event_;
  ::perfetto::protos::LogMessage* log_message_;
  ::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state_;
  ::perfetto::protos::ChromeUserEvent* chrome_user_event_;
  ::perfetto::protos::ChromeKeyedService* chrome_keyed_service_;
  ::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc_;
  ::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample_;
  ::perfetto::protos::ChromeLatencyInfo* chrome_latency_info_;
  ::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter_;
  ::perfetto::protos::ChromeMessagePump* chrome_message_pump_;
  ::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info_;
  ::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info_;
  ::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state_;
  ::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info_;
  ::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 track_uuid_;
  int type_;
  union NameFieldUnion {
    NameFieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 name_iid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } name_field_;
  union CounterValueFieldUnion {
    CounterValueFieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 counter_value_;
    double double_counter_value_;
  } counter_value_field_;
  union SourceLocationFieldUnion {
    SourceLocationFieldUnion() {}
    ::perfetto::protos::SourceLocation* source_location_;
    ::PROTOBUF_NAMESPACE_ID::uint64 source_location_iid_;
  } source_location_field_;
  union TimestampUnion {
    TimestampUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 timestamp_delta_us_;
    ::PROTOBUF_NAMESPACE_ID::int64 timestamp_absolute_us_;
  } timestamp_;
  union ThreadTimeUnion {
    ThreadTimeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 thread_time_delta_us_;
    ::PROTOBUF_NAMESPACE_ID::int64 thread_time_absolute_us_;
  } thread_time_;
  union ThreadInstructionCountUnion {
    ThreadInstructionCountUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_count_delta_;
    ::PROTOBUF_NAMESPACE_ID::int64 thread_instruction_count_absolute_;
  } thread_instruction_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[6];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class TrackEventDefaults :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEventDefaults) */ {
 public:
  TrackEventDefaults();
  virtual ~TrackEventDefaults();

  TrackEventDefaults(const TrackEventDefaults& from);
  TrackEventDefaults(TrackEventDefaults&& from) noexcept
    : TrackEventDefaults() {
    *this = ::std::move(from);
  }

  inline TrackEventDefaults& operator=(const TrackEventDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEventDefaults& operator=(TrackEventDefaults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackEventDefaults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEventDefaults* internal_default_instance() {
    return reinterpret_cast<const TrackEventDefaults*>(
               &_TrackEventDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackEventDefaults& a, TrackEventDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEventDefaults* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEventDefaults* New() const final {
    return CreateMaybeMessage<TrackEventDefaults>(nullptr);
  }

  TrackEventDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEventDefaults>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackEventDefaults& from);
  void MergeFrom(const TrackEventDefaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEventDefaults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEventDefaults";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraCounterTrackUuidsFieldNumber = 31,
    kExtraDoubleCounterTrackUuidsFieldNumber = 45,
    kTrackUuidFieldNumber = 11,
  };
  // repeated uint64 extra_counter_track_uuids = 31;
  int extra_counter_track_uuids_size() const;
  void clear_extra_counter_track_uuids();
  ::PROTOBUF_NAMESPACE_ID::uint64 extra_counter_track_uuids(int index) const;
  void set_extra_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      extra_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_extra_counter_track_uuids();

  // repeated uint64 extra_double_counter_track_uuids = 45;
  int extra_double_counter_track_uuids_size() const;
  void clear_extra_double_counter_track_uuids();
  ::PROTOBUF_NAMESPACE_ID::uint64 extra_double_counter_track_uuids(int index) const;
  void set_extra_double_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      extra_double_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_extra_double_counter_track_uuids();

  // optional uint64 track_uuid = 11;
  bool has_track_uuid() const;
  void clear_track_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 track_uuid() const;
  void set_track_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventDefaults)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > extra_counter_track_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > extra_double_counter_track_uuids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 track_uuid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class EventCategory :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.EventCategory) */ {
 public:
  EventCategory();
  virtual ~EventCategory();

  EventCategory(const EventCategory& from);
  EventCategory(EventCategory&& from) noexcept
    : EventCategory() {
    *this = ::std::move(from);
  }

  inline EventCategory& operator=(const EventCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCategory& operator=(EventCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventCategory* internal_default_instance() {
    return reinterpret_cast<const EventCategory*>(
               &_EventCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventCategory& a, EventCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(EventCategory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventCategory* New() const final {
    return CreateMaybeMessage<EventCategory>(nullptr);
  }

  EventCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventCategory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventCategory& from);
  void MergeFrom(const EventCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventCategory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.EventCategory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.EventCategory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class EventName :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.EventName) */ {
 public:
  EventName();
  virtual ~EventName();

  EventName(const EventName& from);
  EventName(EventName&& from) noexcept
    : EventName() {
    *this = ::std::move(from);
  }

  inline EventName& operator=(const EventName& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventName& operator=(EventName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventName* internal_default_instance() {
    return reinterpret_cast<const EventName*>(
               &_EventName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventName& a, EventName& b) {
    a.Swap(&b);
  }
  inline void Swap(EventName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventName* New() const final {
    return CreateMaybeMessage<EventName>(nullptr);
  }

  EventName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventName>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventName& from);
  void MergeFrom(const EventName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.EventName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::uint64 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.EventName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackEvent_LegacyEvent

// optional uint64 name_iid = 1;
inline bool TrackEvent_LegacyEvent::has_name_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_name_iid() {
  name_iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent_LegacyEvent::name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.name_iid)
  return name_iid_;
}
inline void TrackEvent_LegacyEvent::set_name_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  name_iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.name_iid)
}

// optional int32 phase = 2;
inline bool TrackEvent_LegacyEvent::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_phase() {
  phase_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackEvent_LegacyEvent::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.phase)
  return phase_;
}
inline void TrackEvent_LegacyEvent::set_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  phase_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.phase)
}

// optional int64 duration_us = 3;
inline bool TrackEvent_LegacyEvent::has_duration_us() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_duration_us() {
  duration_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent_LegacyEvent::duration_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.duration_us)
  return duration_us_;
}
inline void TrackEvent_LegacyEvent::set_duration_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.duration_us)
}

// optional int64 thread_duration_us = 4;
inline bool TrackEvent_LegacyEvent::has_thread_duration_us() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_thread_duration_us() {
  thread_duration_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent_LegacyEvent::thread_duration_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.thread_duration_us)
  return thread_duration_us_;
}
inline void TrackEvent_LegacyEvent::set_thread_duration_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  thread_duration_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.thread_duration_us)
}

// optional int64 thread_instruction_delta = 15;
inline bool TrackEvent_LegacyEvent::has_thread_instruction_delta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_thread_instruction_delta() {
  thread_instruction_delta_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent_LegacyEvent::thread_instruction_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.thread_instruction_delta)
  return thread_instruction_delta_;
}
inline void TrackEvent_LegacyEvent::set_thread_instruction_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  thread_instruction_delta_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.thread_instruction_delta)
}

// optional uint64 unscoped_id = 6;
inline bool TrackEvent_LegacyEvent::has_unscoped_id() const {
  return id_case() == kUnscopedId;
}
inline void TrackEvent_LegacyEvent::set_has_unscoped_id() {
  _oneof_case_[0] = kUnscopedId;
}
inline void TrackEvent_LegacyEvent::clear_unscoped_id() {
  if (has_unscoped_id()) {
    id_.unscoped_id_ = PROTOBUF_ULONGLONG(0);
    clear_has_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent_LegacyEvent::unscoped_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.unscoped_id)
  if (has_unscoped_id()) {
    return id_.unscoped_id_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void TrackEvent_LegacyEvent::set_unscoped_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_unscoped_id()) {
    clear_id();
    set_has_unscoped_id();
  }
  id_.unscoped_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.unscoped_id)
}

// optional uint64 local_id = 10;
inline bool TrackEvent_LegacyEvent::has_local_id() const {
  return id_case() == kLocalId;
}
inline void TrackEvent_LegacyEvent::set_has_local_id() {
  _oneof_case_[0] = kLocalId;
}
inline void TrackEvent_LegacyEvent::clear_local_id() {
  if (has_local_id()) {
    id_.local_id_ = PROTOBUF_ULONGLONG(0);
    clear_has_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent_LegacyEvent::local_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.local_id)
  if (has_local_id()) {
    return id_.local_id_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void TrackEvent_LegacyEvent::set_local_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_local_id()) {
    clear_id();
    set_has_local_id();
  }
  id_.local_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.local_id)
}

// optional uint64 global_id = 11;
inline bool TrackEvent_LegacyEvent::has_global_id() const {
  return id_case() == kGlobalId;
}
inline void TrackEvent_LegacyEvent::set_has_global_id() {
  _oneof_case_[0] = kGlobalId;
}
inline void TrackEvent_LegacyEvent::clear_global_id() {
  if (has_global_id()) {
    id_.global_id_ = PROTOBUF_ULONGLONG(0);
    clear_has_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent_LegacyEvent::global_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.global_id)
  if (has_global_id()) {
    return id_.global_id_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void TrackEvent_LegacyEvent::set_global_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_global_id()) {
    clear_id();
    set_has_global_id();
  }
  id_.global_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.global_id)
}

// optional string id_scope = 7;
inline bool TrackEvent_LegacyEvent::has_id_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_id_scope() {
  id_scope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackEvent_LegacyEvent::id_scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
  return id_scope_.GetNoArena();
}
inline void TrackEvent_LegacyEvent::set_id_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}
inline void TrackEvent_LegacyEvent::set_id_scope(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_scope_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}
inline void TrackEvent_LegacyEvent::set_id_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}
inline void TrackEvent_LegacyEvent::set_id_scope(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}
inline std::string* TrackEvent_LegacyEvent::mutable_id_scope() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
  return id_scope_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackEvent_LegacyEvent::release_id_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
  if (!has_id_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_scope_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackEvent_LegacyEvent::set_allocated_id_scope(std::string* id_scope) {
  if (id_scope != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_scope_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_scope);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}

// optional bool use_async_tts = 9;
inline bool TrackEvent_LegacyEvent::has_use_async_tts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_use_async_tts() {
  use_async_tts_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrackEvent_LegacyEvent::use_async_tts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.use_async_tts)
  return use_async_tts_;
}
inline void TrackEvent_LegacyEvent::set_use_async_tts(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_async_tts_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.use_async_tts)
}

// optional uint64 bind_id = 8;
inline bool TrackEvent_LegacyEvent::has_bind_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_bind_id() {
  bind_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent_LegacyEvent::bind_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.bind_id)
  return bind_id_;
}
inline void TrackEvent_LegacyEvent::set_bind_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  bind_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.bind_id)
}

// optional bool bind_to_enclosing = 12;
inline bool TrackEvent_LegacyEvent::has_bind_to_enclosing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_bind_to_enclosing() {
  bind_to_enclosing_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TrackEvent_LegacyEvent::bind_to_enclosing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.bind_to_enclosing)
  return bind_to_enclosing_;
}
inline void TrackEvent_LegacyEvent::set_bind_to_enclosing(bool value) {
  _has_bits_[0] |= 0x00000040u;
  bind_to_enclosing_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.bind_to_enclosing)
}

// optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
inline bool TrackEvent_LegacyEvent::has_flow_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_flow_direction() {
  flow_direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::flow_direction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.flow_direction)
  return static_cast< ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection >(flow_direction_);
}
inline void TrackEvent_LegacyEvent::set_flow_direction(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection value) {
  assert(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  flow_direction_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.flow_direction)
}

// optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
inline bool TrackEvent_LegacyEvent::has_instant_event_scope() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_instant_event_scope() {
  instant_event_scope_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::instant_event_scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.instant_event_scope)
  return static_cast< ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope >(instant_event_scope_);
}
inline void TrackEvent_LegacyEvent::set_instant_event_scope(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope value) {
  assert(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  instant_event_scope_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.instant_event_scope)
}

// optional int32 pid_override = 18;
inline bool TrackEvent_LegacyEvent::has_pid_override() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_pid_override() {
  pid_override_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackEvent_LegacyEvent::pid_override() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.pid_override)
  return pid_override_;
}
inline void TrackEvent_LegacyEvent::set_pid_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  pid_override_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.pid_override)
}

// optional int32 tid_override = 19;
inline bool TrackEvent_LegacyEvent::has_tid_override() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrackEvent_LegacyEvent::clear_tid_override() {
  tid_override_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackEvent_LegacyEvent::tid_override() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.tid_override)
  return tid_override_;
}
inline void TrackEvent_LegacyEvent::set_tid_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  tid_override_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.tid_override)
}

inline bool TrackEvent_LegacyEvent::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TrackEvent_LegacyEvent::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TrackEvent_LegacyEvent::IdCase TrackEvent_LegacyEvent::id_case() const {
  return TrackEvent_LegacyEvent::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TrackEvent

// repeated uint64 category_iids = 3;
inline int TrackEvent::category_iids_size() const {
  return category_iids_.size();
}
inline void TrackEvent::clear_category_iids() {
  category_iids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::category_iids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.category_iids)
  return category_iids_.Get(index);
}
inline void TrackEvent::set_category_iids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  category_iids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.category_iids)
}
inline void TrackEvent::add_category_iids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  category_iids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.category_iids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEvent::category_iids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.category_iids)
  return category_iids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEvent::mutable_category_iids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.category_iids)
  return &category_iids_;
}

// repeated string categories = 22;
inline int TrackEvent::categories_size() const {
  return categories_.size();
}
inline void TrackEvent::clear_categories() {
  categories_.Clear();
}
inline const std::string& TrackEvent::categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.categories)
  return categories_.Get(index);
}
inline std::string* TrackEvent::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.categories)
  return categories_.Mutable(index);
}
inline void TrackEvent::set_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.categories)
  categories_.Mutable(index)->assign(value);
}
inline void TrackEvent::set_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
inline void TrackEvent::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEvent.categories)
}
inline std::string* TrackEvent::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEvent.categories)
  return categories_.Add();
}
inline void TrackEvent::add_categories(const std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::add_categories(std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEvent.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEvent::categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.categories)
  return categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEvent::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.categories)
  return &categories_;
}

// optional uint64 name_iid = 10;
inline bool TrackEvent::has_name_iid() const {
  return name_field_case() == kNameIid;
}
inline void TrackEvent::set_has_name_iid() {
  _oneof_case_[0] = kNameIid;
}
inline void TrackEvent::clear_name_iid() {
  if (has_name_iid()) {
    name_field_.name_iid_ = PROTOBUF_ULONGLONG(0);
    clear_has_name_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.name_iid)
  if (has_name_iid()) {
    return name_field_.name_iid_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void TrackEvent::set_name_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_name_iid()) {
    clear_name_field();
    set_has_name_iid();
  }
  name_field_.name_iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.name_iid)
}

// optional string name = 23;
inline bool TrackEvent::has_name() const {
  return name_field_case() == kName;
}
inline void TrackEvent::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void TrackEvent::clear_name() {
  if (has_name()) {
    name_field_.name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_name_field();
  }
}
inline const std::string& TrackEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.name)
  if (has_name()) {
    return name_field_.name_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrackEvent::set_name(const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.name)
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.name)
}
inline void TrackEvent::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.name)
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TrackEvent.name)
}
inline void TrackEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEvent.name)
}
inline void TrackEvent::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  name_field_.name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEvent.name)
}
inline std::string* TrackEvent::mutable_name() {
  if (!has_name()) {
    clear_name_field();
    set_has_name();
    name_field_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.name)
  return name_field_.name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.name)
  if (has_name()) {
    clear_has_name_field();
    return name_field_.name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TrackEvent::set_allocated_name(std::string* name) {
  if (has_name_field()) {
    clear_name_field();
  }
  if (name != nullptr) {
    set_has_name();
    name_field_.name_.UnsafeSetDefault(name);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.name)
}

// optional .perfetto.protos.TrackEvent.Type type = 9;
inline bool TrackEvent::has_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrackEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::perfetto::protos::TrackEvent_Type TrackEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.type)
  return static_cast< ::perfetto::protos::TrackEvent_Type >(type_);
}
inline void TrackEvent::set_type(::perfetto::protos::TrackEvent_Type value) {
  assert(::perfetto::protos::TrackEvent_Type_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.type)
}

// optional uint64 track_uuid = 11;
inline bool TrackEvent::has_track_uuid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrackEvent::clear_track_uuid() {
  track_uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::track_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.track_uuid)
  return track_uuid_;
}
inline void TrackEvent::set_track_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  track_uuid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.track_uuid)
}

// optional int64 counter_value = 30;
inline bool TrackEvent::has_counter_value() const {
  return counter_value_field_case() == kCounterValue;
}
inline void TrackEvent::set_has_counter_value() {
  _oneof_case_[1] = kCounterValue;
}
inline void TrackEvent::clear_counter_value() {
  if (has_counter_value()) {
    counter_value_field_.counter_value_ = PROTOBUF_LONGLONG(0);
    clear_has_counter_value_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::counter_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.counter_value)
  if (has_counter_value()) {
    return counter_value_field_.counter_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_counter_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_counter_value()) {
    clear_counter_value_field();
    set_has_counter_value();
  }
  counter_value_field_.counter_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.counter_value)
}

// optional double double_counter_value = 44;
inline bool TrackEvent::has_double_counter_value() const {
  return counter_value_field_case() == kDoubleCounterValue;
}
inline void TrackEvent::set_has_double_counter_value() {
  _oneof_case_[1] = kDoubleCounterValue;
}
inline void TrackEvent::clear_double_counter_value() {
  if (has_double_counter_value()) {
    counter_value_field_.double_counter_value_ = 0;
    clear_has_counter_value_field();
  }
}
inline double TrackEvent::double_counter_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.double_counter_value)
  if (has_double_counter_value()) {
    return counter_value_field_.double_counter_value_;
  }
  return 0;
}
inline void TrackEvent::set_double_counter_value(double value) {
  if (!has_double_counter_value()) {
    clear_counter_value_field();
    set_has_double_counter_value();
  }
  counter_value_field_.double_counter_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.double_counter_value)
}

// repeated uint64 extra_counter_track_uuids = 31;
inline int TrackEvent::extra_counter_track_uuids_size() const {
  return extra_counter_track_uuids_.size();
}
inline void TrackEvent::clear_extra_counter_track_uuids() {
  extra_counter_track_uuids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::extra_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_counter_track_uuids)
  return extra_counter_track_uuids_.Get(index);
}
inline void TrackEvent::set_extra_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_counter_track_uuids)
}
inline void TrackEvent::add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_counter_track_uuids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEvent::extra_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_counter_track_uuids)
  return extra_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEvent::mutable_extra_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_counter_track_uuids)
  return &extra_counter_track_uuids_;
}

// repeated int64 extra_counter_values = 12;
inline int TrackEvent::extra_counter_values_size() const {
  return extra_counter_values_.size();
}
inline void TrackEvent::clear_extra_counter_values() {
  extra_counter_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::extra_counter_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_counter_values)
  return extra_counter_values_.Get(index);
}
inline void TrackEvent::set_extra_counter_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  extra_counter_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_counter_values)
}
inline void TrackEvent::add_extra_counter_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  extra_counter_values_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_counter_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TrackEvent::extra_counter_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_counter_values)
  return extra_counter_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TrackEvent::mutable_extra_counter_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_counter_values)
  return &extra_counter_values_;
}

// repeated uint64 extra_double_counter_track_uuids = 45;
inline int TrackEvent::extra_double_counter_track_uuids_size() const {
  return extra_double_counter_track_uuids_.size();
}
inline void TrackEvent::clear_extra_double_counter_track_uuids() {
  extra_double_counter_track_uuids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::extra_double_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
  return extra_double_counter_track_uuids_.Get(index);
}
inline void TrackEvent::set_extra_double_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_double_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
}
inline void TrackEvent::add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_double_counter_track_uuids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEvent::extra_double_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
  return extra_double_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEvent::mutable_extra_double_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
  return &extra_double_counter_track_uuids_;
}

// repeated double extra_double_counter_values = 46;
inline int TrackEvent::extra_double_counter_values_size() const {
  return extra_double_counter_values_.size();
}
inline void TrackEvent::clear_extra_double_counter_values() {
  extra_double_counter_values_.Clear();
}
inline double TrackEvent::extra_double_counter_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_double_counter_values)
  return extra_double_counter_values_.Get(index);
}
inline void TrackEvent::set_extra_double_counter_values(int index, double value) {
  extra_double_counter_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_double_counter_values)
}
inline void TrackEvent::add_extra_double_counter_values(double value) {
  extra_double_counter_values_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_double_counter_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TrackEvent::extra_double_counter_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_double_counter_values)
  return extra_double_counter_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TrackEvent::mutable_extra_double_counter_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_double_counter_values)
  return &extra_double_counter_values_;
}

// repeated uint64 flow_ids = 36;
inline int TrackEvent::flow_ids_size() const {
  return flow_ids_.size();
}
inline void TrackEvent::clear_flow_ids() {
  flow_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::flow_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.flow_ids)
  return flow_ids_.Get(index);
}
inline void TrackEvent::set_flow_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  flow_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.flow_ids)
}
inline void TrackEvent::add_flow_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  flow_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.flow_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEvent::flow_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.flow_ids)
  return flow_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEvent::mutable_flow_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.flow_ids)
  return &flow_ids_;
}

// repeated uint64 terminating_flow_ids = 42;
inline int TrackEvent::terminating_flow_ids_size() const {
  return terminating_flow_ids_.size();
}
inline void TrackEvent::clear_terminating_flow_ids() {
  terminating_flow_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::terminating_flow_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.terminating_flow_ids)
  return terminating_flow_ids_.Get(index);
}
inline void TrackEvent::set_terminating_flow_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  terminating_flow_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.terminating_flow_ids)
}
inline void TrackEvent::add_terminating_flow_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  terminating_flow_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.terminating_flow_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEvent::terminating_flow_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.terminating_flow_ids)
  return terminating_flow_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEvent::mutable_terminating_flow_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.terminating_flow_ids)
  return &terminating_flow_ids_;
}

// repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
inline int TrackEvent::debug_annotations_size() const {
  return debug_annotations_.size();
}
inline ::perfetto::protos::DebugAnnotation* TrackEvent::mutable_debug_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.debug_annotations)
  return debug_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
TrackEvent::mutable_debug_annotations() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.debug_annotations)
  return &debug_annotations_;
}
inline const ::perfetto::protos::DebugAnnotation& TrackEvent::debug_annotations(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.debug_annotations)
  return debug_annotations_.Get(index);
}
inline ::perfetto::protos::DebugAnnotation* TrackEvent::add_debug_annotations() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.debug_annotations)
  return debug_annotations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
TrackEvent::debug_annotations() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.debug_annotations)
  return debug_annotations_;
}

// optional .perfetto.protos.TaskExecution task_execution = 5;
inline bool TrackEvent::has_task_execution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::perfetto::protos::TaskExecution& TrackEvent::task_execution() const {
  const ::perfetto::protos::TaskExecution* p = task_execution_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.task_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TaskExecution*>(
      &::perfetto::protos::_TaskExecution_default_instance_);
}
inline ::perfetto::protos::TaskExecution* TrackEvent::release_task_execution() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.task_execution)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TaskExecution* temp = task_execution_;
  task_execution_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TaskExecution* TrackEvent::mutable_task_execution() {
  _has_bits_[0] |= 0x00000001u;
  if (task_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TaskExecution>(GetArenaNoVirtual());
    task_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.task_execution)
  return task_execution_;
}
inline void TrackEvent::set_allocated_task_execution(::perfetto::protos::TaskExecution* task_execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_execution_);
  }
  if (task_execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_execution, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_execution_ = task_execution;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.task_execution)
}

// optional .perfetto.protos.LogMessage log_message = 21;
inline bool TrackEvent::has_log_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::perfetto::protos::LogMessage& TrackEvent::log_message() const {
  const ::perfetto::protos::LogMessage* p = log_message_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.log_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::LogMessage*>(
      &::perfetto::protos::_LogMessage_default_instance_);
}
inline ::perfetto::protos::LogMessage* TrackEvent::release_log_message() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.log_message)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::LogMessage* temp = log_message_;
  log_message_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LogMessage* TrackEvent::mutable_log_message() {
  _has_bits_[0] |= 0x00000004u;
  if (log_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LogMessage>(GetArenaNoVirtual());
    log_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.log_message)
  return log_message_;
}
inline void TrackEvent::set_allocated_log_message(::perfetto::protos::LogMessage* log_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_message_);
  }
  if (log_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      log_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  log_message_ = log_message;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.log_message)
}

// optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
inline bool TrackEvent::has_cc_scheduler_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::perfetto::protos::ChromeCompositorSchedulerState& TrackEvent::cc_scheduler_state() const {
  const ::perfetto::protos::ChromeCompositorSchedulerState* p = cc_scheduler_state_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.cc_scheduler_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeCompositorSchedulerState*>(
      &::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_);
}
inline ::perfetto::protos::ChromeCompositorSchedulerState* TrackEvent::release_cc_scheduler_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.cc_scheduler_state)
  _has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeCompositorSchedulerState* temp = cc_scheduler_state_;
  cc_scheduler_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeCompositorSchedulerState* TrackEvent::mutable_cc_scheduler_state() {
  _has_bits_[0] |= 0x00000008u;
  if (cc_scheduler_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeCompositorSchedulerState>(GetArenaNoVirtual());
    cc_scheduler_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.cc_scheduler_state)
  return cc_scheduler_state_;
}
inline void TrackEvent::set_allocated_cc_scheduler_state(::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cc_scheduler_state_);
  }
  if (cc_scheduler_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cc_scheduler_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cc_scheduler_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cc_scheduler_state_ = cc_scheduler_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.cc_scheduler_state)
}

// optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
inline bool TrackEvent::has_chrome_user_event() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::perfetto::protos::ChromeUserEvent& TrackEvent::chrome_user_event() const {
  const ::perfetto::protos::ChromeUserEvent* p = chrome_user_event_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_user_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeUserEvent*>(
      &::perfetto::protos::_ChromeUserEvent_default_instance_);
}
inline ::perfetto::protos::ChromeUserEvent* TrackEvent::release_chrome_user_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_user_event)
  _has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::ChromeUserEvent* temp = chrome_user_event_;
  chrome_user_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeUserEvent* TrackEvent::mutable_chrome_user_event() {
  _has_bits_[0] |= 0x00000010u;
  if (chrome_user_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeUserEvent>(GetArenaNoVirtual());
    chrome_user_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_user_event)
  return chrome_user_event_;
}
inline void TrackEvent::set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEvent* chrome_user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_user_event_);
  }
  if (chrome_user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_user_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  chrome_user_event_ = chrome_user_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_user_event)
}

// optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
inline bool TrackEvent::has_chrome_keyed_service() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::perfetto::protos::ChromeKeyedService& TrackEvent::chrome_keyed_service() const {
  const ::perfetto::protos::ChromeKeyedService* p = chrome_keyed_service_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_keyed_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeKeyedService*>(
      &::perfetto::protos::_ChromeKeyedService_default_instance_);
}
inline ::perfetto::protos::ChromeKeyedService* TrackEvent::release_chrome_keyed_service() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_keyed_service)
  _has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ChromeKeyedService* temp = chrome_keyed_service_;
  chrome_keyed_service_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeKeyedService* TrackEvent::mutable_chrome_keyed_service() {
  _has_bits_[0] |= 0x00000020u;
  if (chrome_keyed_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeKeyedService>(GetArenaNoVirtual());
    chrome_keyed_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_keyed_service)
  return chrome_keyed_service_;
}
inline void TrackEvent::set_allocated_chrome_keyed_service(::perfetto::protos::ChromeKeyedService* chrome_keyed_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_keyed_service_);
  }
  if (chrome_keyed_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_keyed_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_keyed_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  chrome_keyed_service_ = chrome_keyed_service;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_keyed_service)
}

// optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
inline bool TrackEvent::has_chrome_legacy_ipc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::perfetto::protos::ChromeLegacyIpc& TrackEvent::chrome_legacy_ipc() const {
  const ::perfetto::protos::ChromeLegacyIpc* p = chrome_legacy_ipc_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_legacy_ipc)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeLegacyIpc*>(
      &::perfetto::protos::_ChromeLegacyIpc_default_instance_);
}
inline ::perfetto::protos::ChromeLegacyIpc* TrackEvent::release_chrome_legacy_ipc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_legacy_ipc)
  _has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::ChromeLegacyIpc* temp = chrome_legacy_ipc_;
  chrome_legacy_ipc_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeLegacyIpc* TrackEvent::mutable_chrome_legacy_ipc() {
  _has_bits_[0] |= 0x00000040u;
  if (chrome_legacy_ipc_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeLegacyIpc>(GetArenaNoVirtual());
    chrome_legacy_ipc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_legacy_ipc)
  return chrome_legacy_ipc_;
}
inline void TrackEvent::set_allocated_chrome_legacy_ipc(::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_legacy_ipc_);
  }
  if (chrome_legacy_ipc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_legacy_ipc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_legacy_ipc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  chrome_legacy_ipc_ = chrome_legacy_ipc;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_legacy_ipc)
}

// optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
inline bool TrackEvent::has_chrome_histogram_sample() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::perfetto::protos::ChromeHistogramSample& TrackEvent::chrome_histogram_sample() const {
  const ::perfetto::protos::ChromeHistogramSample* p = chrome_histogram_sample_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_histogram_sample)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeHistogramSample*>(
      &::perfetto::protos::_ChromeHistogramSample_default_instance_);
}
inline ::perfetto::protos::ChromeHistogramSample* TrackEvent::release_chrome_histogram_sample() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_histogram_sample)
  _has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::ChromeHistogramSample* temp = chrome_histogram_sample_;
  chrome_histogram_sample_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeHistogramSample* TrackEvent::mutable_chrome_histogram_sample() {
  _has_bits_[0] |= 0x00000080u;
  if (chrome_histogram_sample_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeHistogramSample>(GetArenaNoVirtual());
    chrome_histogram_sample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_histogram_sample)
  return chrome_histogram_sample_;
}
inline void TrackEvent::set_allocated_chrome_histogram_sample(::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_histogram_sample_);
  }
  if (chrome_histogram_sample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_histogram_sample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_histogram_sample, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  chrome_histogram_sample_ = chrome_histogram_sample;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_histogram_sample)
}

// optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
inline bool TrackEvent::has_chrome_latency_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::perfetto::protos::ChromeLatencyInfo& TrackEvent::chrome_latency_info() const {
  const ::perfetto::protos::ChromeLatencyInfo* p = chrome_latency_info_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_latency_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeLatencyInfo*>(
      &::perfetto::protos::_ChromeLatencyInfo_default_instance_);
}
inline ::perfetto::protos::ChromeLatencyInfo* TrackEvent::release_chrome_latency_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_latency_info)
  _has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::ChromeLatencyInfo* temp = chrome_latency_info_;
  chrome_latency_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeLatencyInfo* TrackEvent::mutable_chrome_latency_info() {
  _has_bits_[0] |= 0x00000100u;
  if (chrome_latency_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeLatencyInfo>(GetArenaNoVirtual());
    chrome_latency_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_latency_info)
  return chrome_latency_info_;
}
inline void TrackEvent::set_allocated_chrome_latency_info(::perfetto::protos::ChromeLatencyInfo* chrome_latency_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_latency_info_);
  }
  if (chrome_latency_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_latency_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_latency_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  chrome_latency_info_ = chrome_latency_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_latency_info)
}

// optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
inline bool TrackEvent::has_chrome_frame_reporter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::perfetto::protos::ChromeFrameReporter& TrackEvent::chrome_frame_reporter() const {
  const ::perfetto::protos::ChromeFrameReporter* p = chrome_frame_reporter_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_frame_reporter)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeFrameReporter*>(
      &::perfetto::protos::_ChromeFrameReporter_default_instance_);
}
inline ::perfetto::protos::ChromeFrameReporter* TrackEvent::release_chrome_frame_reporter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_frame_reporter)
  _has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::ChromeFrameReporter* temp = chrome_frame_reporter_;
  chrome_frame_reporter_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeFrameReporter* TrackEvent::mutable_chrome_frame_reporter() {
  _has_bits_[0] |= 0x00000200u;
  if (chrome_frame_reporter_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeFrameReporter>(GetArenaNoVirtual());
    chrome_frame_reporter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_frame_reporter)
  return chrome_frame_reporter_;
}
inline void TrackEvent::set_allocated_chrome_frame_reporter(::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_frame_reporter_);
  }
  if (chrome_frame_reporter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_frame_reporter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_frame_reporter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  chrome_frame_reporter_ = chrome_frame_reporter;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_frame_reporter)
}

// optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
inline bool TrackEvent::has_chrome_application_state_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::perfetto::protos::ChromeApplicationStateInfo& TrackEvent::chrome_application_state_info() const {
  const ::perfetto::protos::ChromeApplicationStateInfo* p = chrome_application_state_info_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_application_state_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeApplicationStateInfo*>(
      &::perfetto::protos::_ChromeApplicationStateInfo_default_instance_);
}
inline ::perfetto::protos::ChromeApplicationStateInfo* TrackEvent::release_chrome_application_state_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_application_state_info)
  _has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::ChromeApplicationStateInfo* temp = chrome_application_state_info_;
  chrome_application_state_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeApplicationStateInfo* TrackEvent::mutable_chrome_application_state_info() {
  _has_bits_[0] |= 0x00001000u;
  if (chrome_application_state_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeApplicationStateInfo>(GetArenaNoVirtual());
    chrome_application_state_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_application_state_info)
  return chrome_application_state_info_;
}
inline void TrackEvent::set_allocated_chrome_application_state_info(::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_application_state_info_);
  }
  if (chrome_application_state_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_application_state_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_application_state_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  chrome_application_state_info_ = chrome_application_state_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_application_state_info)
}

// optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
inline bool TrackEvent::has_chrome_renderer_scheduler_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::perfetto::protos::ChromeRendererSchedulerState& TrackEvent::chrome_renderer_scheduler_state() const {
  const ::perfetto::protos::ChromeRendererSchedulerState* p = chrome_renderer_scheduler_state_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeRendererSchedulerState*>(
      &::perfetto::protos::_ChromeRendererSchedulerState_default_instance_);
}
inline ::perfetto::protos::ChromeRendererSchedulerState* TrackEvent::release_chrome_renderer_scheduler_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
  _has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::ChromeRendererSchedulerState* temp = chrome_renderer_scheduler_state_;
  chrome_renderer_scheduler_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeRendererSchedulerState* TrackEvent::mutable_chrome_renderer_scheduler_state() {
  _has_bits_[0] |= 0x00002000u;
  if (chrome_renderer_scheduler_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeRendererSchedulerState>(GetArenaNoVirtual());
    chrome_renderer_scheduler_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
  return chrome_renderer_scheduler_state_;
}
inline void TrackEvent::set_allocated_chrome_renderer_scheduler_state(::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_renderer_scheduler_state_);
  }
  if (chrome_renderer_scheduler_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_renderer_scheduler_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_renderer_scheduler_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  chrome_renderer_scheduler_state_ = chrome_renderer_scheduler_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
}

// optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
inline bool TrackEvent::has_chrome_window_handle_event_info() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::perfetto::protos::ChromeWindowHandleEventInfo& TrackEvent::chrome_window_handle_event_info() const {
  const ::perfetto::protos::ChromeWindowHandleEventInfo* p = chrome_window_handle_event_info_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeWindowHandleEventInfo*>(
      &::perfetto::protos::_ChromeWindowHandleEventInfo_default_instance_);
}
inline ::perfetto::protos::ChromeWindowHandleEventInfo* TrackEvent::release_chrome_window_handle_event_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
  _has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::ChromeWindowHandleEventInfo* temp = chrome_window_handle_event_info_;
  chrome_window_handle_event_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeWindowHandleEventInfo* TrackEvent::mutable_chrome_window_handle_event_info() {
  _has_bits_[0] |= 0x00004000u;
  if (chrome_window_handle_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeWindowHandleEventInfo>(GetArenaNoVirtual());
    chrome_window_handle_event_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
  return chrome_window_handle_event_info_;
}
inline void TrackEvent::set_allocated_chrome_window_handle_event_info(::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_window_handle_event_info_);
  }
  if (chrome_window_handle_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_window_handle_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_window_handle_event_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  chrome_window_handle_event_info_ = chrome_window_handle_event_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
}

// optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
inline bool TrackEvent::has_chrome_content_settings_event_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::perfetto::protos::ChromeContentSettingsEventInfo& TrackEvent::chrome_content_settings_event_info() const {
  const ::perfetto::protos::ChromeContentSettingsEventInfo* p = chrome_content_settings_event_info_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeContentSettingsEventInfo*>(
      &::perfetto::protos::_ChromeContentSettingsEventInfo_default_instance_);
}
inline ::perfetto::protos::ChromeContentSettingsEventInfo* TrackEvent::release_chrome_content_settings_event_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
  _has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::ChromeContentSettingsEventInfo* temp = chrome_content_settings_event_info_;
  chrome_content_settings_event_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeContentSettingsEventInfo* TrackEvent::mutable_chrome_content_settings_event_info() {
  _has_bits_[0] |= 0x00008000u;
  if (chrome_content_settings_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeContentSettingsEventInfo>(GetArenaNoVirtual());
    chrome_content_settings_event_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
  return chrome_content_settings_event_info_;
}
inline void TrackEvent::set_allocated_chrome_content_settings_event_info(::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_content_settings_event_info_);
  }
  if (chrome_content_settings_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_content_settings_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_content_settings_event_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  chrome_content_settings_event_info_ = chrome_content_settings_event_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
}

// optional .perfetto.protos.SourceLocation source_location = 33;
inline bool TrackEvent::has_source_location() const {
  return source_location_field_case() == kSourceLocation;
}
inline void TrackEvent::set_has_source_location() {
  _oneof_case_[2] = kSourceLocation;
}
inline ::perfetto::protos::SourceLocation* TrackEvent::release_source_location() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.source_location)
  if (has_source_location()) {
    clear_has_source_location_field();
      ::perfetto::protos::SourceLocation* temp = source_location_field_.source_location_;
    source_location_field_.source_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SourceLocation& TrackEvent::source_location() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.source_location)
  return has_source_location()
      ? *source_location_field_.source_location_
      : *reinterpret_cast< ::perfetto::protos::SourceLocation*>(&::perfetto::protos::_SourceLocation_default_instance_);
}
inline ::perfetto::protos::SourceLocation* TrackEvent::mutable_source_location() {
  if (!has_source_location()) {
    clear_source_location_field();
    set_has_source_location();
    source_location_field_.source_location_ = CreateMaybeMessage< ::perfetto::protos::SourceLocation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.source_location)
  return source_location_field_.source_location_;
}

// optional uint64 source_location_iid = 34;
inline bool TrackEvent::has_source_location_iid() const {
  return source_location_field_case() == kSourceLocationIid;
}
inline void TrackEvent::set_has_source_location_iid() {
  _oneof_case_[2] = kSourceLocationIid;
}
inline void TrackEvent::clear_source_location_iid() {
  if (has_source_location_iid()) {
    source_location_field_.source_location_iid_ = PROTOBUF_ULONGLONG(0);
    clear_has_source_location_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEvent::source_location_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.source_location_iid)
  if (has_source_location_iid()) {
    return source_location_field_.source_location_iid_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void TrackEvent::set_source_location_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_source_location_iid()) {
    clear_source_location_field();
    set_has_source_location_iid();
  }
  source_location_field_.source_location_iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.source_location_iid)
}

// optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
inline bool TrackEvent::has_chrome_message_pump() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::perfetto::protos::ChromeMessagePump& TrackEvent::chrome_message_pump() const {
  const ::perfetto::protos::ChromeMessagePump* p = chrome_message_pump_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_message_pump)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeMessagePump*>(
      &::perfetto::protos::_ChromeMessagePump_default_instance_);
}
inline ::perfetto::protos::ChromeMessagePump* TrackEvent::release_chrome_message_pump() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_message_pump)
  _has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::ChromeMessagePump* temp = chrome_message_pump_;
  chrome_message_pump_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeMessagePump* TrackEvent::mutable_chrome_message_pump() {
  _has_bits_[0] |= 0x00000400u;
  if (chrome_message_pump_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeMessagePump>(GetArenaNoVirtual());
    chrome_message_pump_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_message_pump)
  return chrome_message_pump_;
}
inline void TrackEvent::set_allocated_chrome_message_pump(::perfetto::protos::ChromeMessagePump* chrome_message_pump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_message_pump_);
  }
  if (chrome_message_pump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_message_pump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_message_pump, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  chrome_message_pump_ = chrome_message_pump;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_message_pump)
}

// optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
inline bool TrackEvent::has_chrome_mojo_event_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::perfetto::protos::ChromeMojoEventInfo& TrackEvent::chrome_mojo_event_info() const {
  const ::perfetto::protos::ChromeMojoEventInfo* p = chrome_mojo_event_info_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_mojo_event_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeMojoEventInfo*>(
      &::perfetto::protos::_ChromeMojoEventInfo_default_instance_);
}
inline ::perfetto::protos::ChromeMojoEventInfo* TrackEvent::release_chrome_mojo_event_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_mojo_event_info)
  _has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::ChromeMojoEventInfo* temp = chrome_mojo_event_info_;
  chrome_mojo_event_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeMojoEventInfo* TrackEvent::mutable_chrome_mojo_event_info() {
  _has_bits_[0] |= 0x00000800u;
  if (chrome_mojo_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeMojoEventInfo>(GetArenaNoVirtual());
    chrome_mojo_event_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_mojo_event_info)
  return chrome_mojo_event_info_;
}
inline void TrackEvent::set_allocated_chrome_mojo_event_info(::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_mojo_event_info_);
  }
  if (chrome_mojo_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_mojo_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_mojo_event_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  chrome_mojo_event_info_ = chrome_mojo_event_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_mojo_event_info)
}

// optional int64 timestamp_delta_us = 1;
inline bool TrackEvent::has_timestamp_delta_us() const {
  return timestamp_case() == kTimestampDeltaUs;
}
inline void TrackEvent::set_has_timestamp_delta_us() {
  _oneof_case_[3] = kTimestampDeltaUs;
}
inline void TrackEvent::clear_timestamp_delta_us() {
  if (has_timestamp_delta_us()) {
    timestamp_.timestamp_delta_us_ = PROTOBUF_LONGLONG(0);
    clear_has_timestamp();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::timestamp_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.timestamp_delta_us)
  if (has_timestamp_delta_us()) {
    return timestamp_.timestamp_delta_us_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_timestamp_delta_us()) {
    clear_timestamp();
    set_has_timestamp_delta_us();
  }
  timestamp_.timestamp_delta_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.timestamp_delta_us)
}

// optional int64 timestamp_absolute_us = 16;
inline bool TrackEvent::has_timestamp_absolute_us() const {
  return timestamp_case() == kTimestampAbsoluteUs;
}
inline void TrackEvent::set_has_timestamp_absolute_us() {
  _oneof_case_[3] = kTimestampAbsoluteUs;
}
inline void TrackEvent::clear_timestamp_absolute_us() {
  if (has_timestamp_absolute_us()) {
    timestamp_.timestamp_absolute_us_ = PROTOBUF_LONGLONG(0);
    clear_has_timestamp();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::timestamp_absolute_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.timestamp_absolute_us)
  if (has_timestamp_absolute_us()) {
    return timestamp_.timestamp_absolute_us_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_timestamp_absolute_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_timestamp_absolute_us()) {
    clear_timestamp();
    set_has_timestamp_absolute_us();
  }
  timestamp_.timestamp_absolute_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.timestamp_absolute_us)
}

// optional int64 thread_time_delta_us = 2;
inline bool TrackEvent::has_thread_time_delta_us() const {
  return thread_time_case() == kThreadTimeDeltaUs;
}
inline void TrackEvent::set_has_thread_time_delta_us() {
  _oneof_case_[4] = kThreadTimeDeltaUs;
}
inline void TrackEvent::clear_thread_time_delta_us() {
  if (has_thread_time_delta_us()) {
    thread_time_.thread_time_delta_us_ = PROTOBUF_LONGLONG(0);
    clear_has_thread_time();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::thread_time_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_time_delta_us)
  if (has_thread_time_delta_us()) {
    return thread_time_.thread_time_delta_us_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_thread_time_delta_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_thread_time_delta_us()) {
    clear_thread_time();
    set_has_thread_time_delta_us();
  }
  thread_time_.thread_time_delta_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_time_delta_us)
}

// optional int64 thread_time_absolute_us = 17;
inline bool TrackEvent::has_thread_time_absolute_us() const {
  return thread_time_case() == kThreadTimeAbsoluteUs;
}
inline void TrackEvent::set_has_thread_time_absolute_us() {
  _oneof_case_[4] = kThreadTimeAbsoluteUs;
}
inline void TrackEvent::clear_thread_time_absolute_us() {
  if (has_thread_time_absolute_us()) {
    thread_time_.thread_time_absolute_us_ = PROTOBUF_LONGLONG(0);
    clear_has_thread_time();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::thread_time_absolute_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_time_absolute_us)
  if (has_thread_time_absolute_us()) {
    return thread_time_.thread_time_absolute_us_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_thread_time_absolute_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_thread_time_absolute_us()) {
    clear_thread_time();
    set_has_thread_time_absolute_us();
  }
  thread_time_.thread_time_absolute_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_time_absolute_us)
}

// optional int64 thread_instruction_count_delta = 8;
inline bool TrackEvent::has_thread_instruction_count_delta() const {
  return thread_instruction_count_case() == kThreadInstructionCountDelta;
}
inline void TrackEvent::set_has_thread_instruction_count_delta() {
  _oneof_case_[5] = kThreadInstructionCountDelta;
}
inline void TrackEvent::clear_thread_instruction_count_delta() {
  if (has_thread_instruction_count_delta()) {
    thread_instruction_count_.thread_instruction_count_delta_ = PROTOBUF_LONGLONG(0);
    clear_has_thread_instruction_count();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::thread_instruction_count_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_instruction_count_delta)
  if (has_thread_instruction_count_delta()) {
    return thread_instruction_count_.thread_instruction_count_delta_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_thread_instruction_count_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_thread_instruction_count_delta()) {
    clear_thread_instruction_count();
    set_has_thread_instruction_count_delta();
  }
  thread_instruction_count_.thread_instruction_count_delta_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_instruction_count_delta)
}

// optional int64 thread_instruction_count_absolute = 20;
inline bool TrackEvent::has_thread_instruction_count_absolute() const {
  return thread_instruction_count_case() == kThreadInstructionCountAbsolute;
}
inline void TrackEvent::set_has_thread_instruction_count_absolute() {
  _oneof_case_[5] = kThreadInstructionCountAbsolute;
}
inline void TrackEvent::clear_thread_instruction_count_absolute() {
  if (has_thread_instruction_count_absolute()) {
    thread_instruction_count_.thread_instruction_count_absolute_ = PROTOBUF_LONGLONG(0);
    clear_has_thread_instruction_count();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackEvent::thread_instruction_count_absolute() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_instruction_count_absolute)
  if (has_thread_instruction_count_absolute()) {
    return thread_instruction_count_.thread_instruction_count_absolute_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TrackEvent::set_thread_instruction_count_absolute(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_thread_instruction_count_absolute()) {
    clear_thread_instruction_count();
    set_has_thread_instruction_count_absolute();
  }
  thread_instruction_count_.thread_instruction_count_absolute_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_instruction_count_absolute)
}

// optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
inline bool TrackEvent::has_legacy_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackEvent::clear_legacy_event() {
  if (legacy_event_ != nullptr) legacy_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::TrackEvent_LegacyEvent& TrackEvent::legacy_event() const {
  const ::perfetto::protos::TrackEvent_LegacyEvent* p = legacy_event_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.legacy_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::TrackEvent_LegacyEvent*>(
      &::perfetto::protos::_TrackEvent_LegacyEvent_default_instance_);
}
inline ::perfetto::protos::TrackEvent_LegacyEvent* TrackEvent::release_legacy_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.legacy_event)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TrackEvent_LegacyEvent* temp = legacy_event_;
  legacy_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent* TrackEvent::mutable_legacy_event() {
  _has_bits_[0] |= 0x00000002u;
  if (legacy_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TrackEvent_LegacyEvent>(GetArenaNoVirtual());
    legacy_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.legacy_event)
  return legacy_event_;
}
inline void TrackEvent::set_allocated_legacy_event(::perfetto::protos::TrackEvent_LegacyEvent* legacy_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete legacy_event_;
  }
  if (legacy_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      legacy_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legacy_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  legacy_event_ = legacy_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.legacy_event)
}

inline bool TrackEvent::has_name_field() const {
  return name_field_case() != NAME_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_name_field() {
  _oneof_case_[0] = NAME_FIELD_NOT_SET;
}
inline bool TrackEvent::has_counter_value_field() const {
  return counter_value_field_case() != COUNTER_VALUE_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_counter_value_field() {
  _oneof_case_[1] = COUNTER_VALUE_FIELD_NOT_SET;
}
inline bool TrackEvent::has_source_location_field() const {
  return source_location_field_case() != SOURCE_LOCATION_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_source_location_field() {
  _oneof_case_[2] = SOURCE_LOCATION_FIELD_NOT_SET;
}
inline bool TrackEvent::has_timestamp() const {
  return timestamp_case() != TIMESTAMP_NOT_SET;
}
inline void TrackEvent::clear_has_timestamp() {
  _oneof_case_[3] = TIMESTAMP_NOT_SET;
}
inline bool TrackEvent::has_thread_time() const {
  return thread_time_case() != THREAD_TIME_NOT_SET;
}
inline void TrackEvent::clear_has_thread_time() {
  _oneof_case_[4] = THREAD_TIME_NOT_SET;
}
inline bool TrackEvent::has_thread_instruction_count() const {
  return thread_instruction_count_case() != THREAD_INSTRUCTION_COUNT_NOT_SET;
}
inline void TrackEvent::clear_has_thread_instruction_count() {
  _oneof_case_[5] = THREAD_INSTRUCTION_COUNT_NOT_SET;
}
inline TrackEvent::NameFieldCase TrackEvent::name_field_case() const {
  return TrackEvent::NameFieldCase(_oneof_case_[0]);
}
inline TrackEvent::CounterValueFieldCase TrackEvent::counter_value_field_case() const {
  return TrackEvent::CounterValueFieldCase(_oneof_case_[1]);
}
inline TrackEvent::SourceLocationFieldCase TrackEvent::source_location_field_case() const {
  return TrackEvent::SourceLocationFieldCase(_oneof_case_[2]);
}
inline TrackEvent::TimestampCase TrackEvent::timestamp_case() const {
  return TrackEvent::TimestampCase(_oneof_case_[3]);
}
inline TrackEvent::ThreadTimeCase TrackEvent::thread_time_case() const {
  return TrackEvent::ThreadTimeCase(_oneof_case_[4]);
}
inline TrackEvent::ThreadInstructionCountCase TrackEvent::thread_instruction_count_case() const {
  return TrackEvent::ThreadInstructionCountCase(_oneof_case_[5]);
}
// -------------------------------------------------------------------

// TrackEventDefaults

// optional uint64 track_uuid = 11;
inline bool TrackEventDefaults::has_track_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackEventDefaults::clear_track_uuid() {
  track_uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEventDefaults::track_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDefaults.track_uuid)
  return track_uuid_;
}
inline void TrackEventDefaults::set_track_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  track_uuid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventDefaults.track_uuid)
}

// repeated uint64 extra_counter_track_uuids = 31;
inline int TrackEventDefaults::extra_counter_track_uuids_size() const {
  return extra_counter_track_uuids_.size();
}
inline void TrackEventDefaults::clear_extra_counter_track_uuids() {
  extra_counter_track_uuids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEventDefaults::extra_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
  return extra_counter_track_uuids_.Get(index);
}
inline void TrackEventDefaults::set_extra_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
}
inline void TrackEventDefaults::add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_counter_track_uuids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEventDefaults::extra_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
  return extra_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEventDefaults::mutable_extra_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
  return &extra_counter_track_uuids_;
}

// repeated uint64 extra_double_counter_track_uuids = 45;
inline int TrackEventDefaults::extra_double_counter_track_uuids_size() const {
  return extra_double_counter_track_uuids_.size();
}
inline void TrackEventDefaults::clear_extra_double_counter_track_uuids() {
  extra_double_counter_track_uuids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackEventDefaults::extra_double_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
  return extra_double_counter_track_uuids_.Get(index);
}
inline void TrackEventDefaults::set_extra_double_counter_track_uuids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_double_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
}
inline void TrackEventDefaults::add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  extra_double_counter_track_uuids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TrackEventDefaults::extra_double_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
  return extra_double_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TrackEventDefaults::mutable_extra_double_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
  return &extra_double_counter_track_uuids_;
}

// -------------------------------------------------------------------

// EventCategory

// optional uint64 iid = 1;
inline bool EventCategory::has_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventCategory::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EventCategory::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventCategory.iid)
  return iid_;
}
inline void EventCategory::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.EventCategory.iid)
}

// optional string name = 2;
inline bool EventCategory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventCategory::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventCategory::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventCategory.name)
  return name_.GetNoArena();
}
inline void EventCategory::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EventCategory.name)
}
inline void EventCategory::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.EventCategory.name)
}
inline void EventCategory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.EventCategory.name)
}
inline void EventCategory::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.EventCategory.name)
}
inline std::string* EventCategory::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EventCategory.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventCategory::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EventCategory.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventCategory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.EventCategory.name)
}

// -------------------------------------------------------------------

// EventName

// optional uint64 iid = 1;
inline bool EventName::has_iid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventName::clear_iid() {
  iid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EventName::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventName.iid)
  return iid_;
}
inline void EventName::set_iid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  iid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.EventName.iid)
}

// optional string name = 2;
inline bool EventName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventName::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventName.name)
  return name_.GetNoArena();
}
inline void EventName::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EventName.name)
}
inline void EventName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.EventName.name)
}
inline void EventName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.EventName.name)
}
inline void EventName::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.EventName.name)
}
inline std::string* EventName::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EventName.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventName::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EventName.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.EventName.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TrackEvent_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto
