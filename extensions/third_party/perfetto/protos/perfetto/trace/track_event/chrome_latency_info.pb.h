// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_latency_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ChromeLatencyInfo;
class ChromeLatencyInfoDefaultTypeInternal;
extern ChromeLatencyInfoDefaultTypeInternal _ChromeLatencyInfo_default_instance_;
class ChromeLatencyInfo_ComponentInfo;
class ChromeLatencyInfo_ComponentInfoDefaultTypeInternal;
extern ChromeLatencyInfo_ComponentInfoDefaultTypeInternal _ChromeLatencyInfo_ComponentInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ChromeLatencyInfo* Arena::CreateMaybeMessage<::perfetto::protos::ChromeLatencyInfo>(Arena*);
template<> ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* Arena::CreateMaybeMessage<::perfetto::protos::ChromeLatencyInfo_ComponentInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ChromeLatencyInfo_Step : int {
  ChromeLatencyInfo_Step_STEP_UNSPECIFIED = 0,
  ChromeLatencyInfo_Step_STEP_SEND_INPUT_EVENT_UI = 3,
  ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_IMPL = 5,
  ChromeLatencyInfo_Step_STEP_DID_HANDLE_INPUT_AND_OVERSCROLL = 8,
  ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN = 4,
  ChromeLatencyInfo_Step_STEP_MAIN_THREAD_SCROLL_UPDATE = 2,
  ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT = 1,
  ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL = 9,
  ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_IMPL = 10,
  ChromeLatencyInfo_Step_STEP_SWAP_BUFFERS = 6,
  ChromeLatencyInfo_Step_STEP_DRAW_AND_SWAP = 7,
  ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS = 11
};
bool ChromeLatencyInfo_Step_IsValid(int value);
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo_Step_Step_MIN = ChromeLatencyInfo_Step_STEP_UNSPECIFIED;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo_Step_Step_MAX = ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS;
constexpr int ChromeLatencyInfo_Step_Step_ARRAYSIZE = ChromeLatencyInfo_Step_Step_MAX + 1;

const std::string& ChromeLatencyInfo_Step_Name(ChromeLatencyInfo_Step value);
template<typename T>
inline const std::string& ChromeLatencyInfo_Step_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeLatencyInfo_Step>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeLatencyInfo_Step_Name.");
  return ChromeLatencyInfo_Step_Name(static_cast<ChromeLatencyInfo_Step>(enum_t_value));
}
bool ChromeLatencyInfo_Step_Parse(
    const std::string& name, ChromeLatencyInfo_Step* value);
enum ChromeLatencyInfo_LatencyComponentType : int {
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED = 0,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH = 1,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL = 2,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL = 3,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL = 4,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_UI = 5,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN = 6,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN = 7,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL = 8,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT = 9,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH = 10,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP = 11,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME = 12,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER = 13,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP = 14
};
bool ChromeLatencyInfo_LatencyComponentType_IsValid(int value);
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MIN = ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MAX = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP;
constexpr int ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_ARRAYSIZE = ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MAX + 1;

const std::string& ChromeLatencyInfo_LatencyComponentType_Name(ChromeLatencyInfo_LatencyComponentType value);
template<typename T>
inline const std::string& ChromeLatencyInfo_LatencyComponentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeLatencyInfo_LatencyComponentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeLatencyInfo_LatencyComponentType_Name.");
  return ChromeLatencyInfo_LatencyComponentType_Name(static_cast<ChromeLatencyInfo_LatencyComponentType>(enum_t_value));
}
bool ChromeLatencyInfo_LatencyComponentType_Parse(
    const std::string& name, ChromeLatencyInfo_LatencyComponentType* value);
// ===================================================================

class ChromeLatencyInfo_ComponentInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeLatencyInfo.ComponentInfo) */ {
 public:
  ChromeLatencyInfo_ComponentInfo();
  virtual ~ChromeLatencyInfo_ComponentInfo();

  ChromeLatencyInfo_ComponentInfo(const ChromeLatencyInfo_ComponentInfo& from);
  ChromeLatencyInfo_ComponentInfo(ChromeLatencyInfo_ComponentInfo&& from) noexcept
    : ChromeLatencyInfo_ComponentInfo() {
    *this = ::std::move(from);
  }

  inline ChromeLatencyInfo_ComponentInfo& operator=(const ChromeLatencyInfo_ComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeLatencyInfo_ComponentInfo& operator=(ChromeLatencyInfo_ComponentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeLatencyInfo_ComponentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeLatencyInfo_ComponentInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeLatencyInfo_ComponentInfo*>(
               &_ChromeLatencyInfo_ComponentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeLatencyInfo_ComponentInfo& a, ChromeLatencyInfo_ComponentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeLatencyInfo_ComponentInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeLatencyInfo_ComponentInfo* New() const final {
    return CreateMaybeMessage<ChromeLatencyInfo_ComponentInfo>(nullptr);
  }

  ChromeLatencyInfo_ComponentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeLatencyInfo_ComponentInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeLatencyInfo_ComponentInfo& from);
  void MergeFrom(const ChromeLatencyInfo_ComponentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeLatencyInfo_ComponentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeLatencyInfo.ComponentInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUsFieldNumber = 2,
    kComponentTypeFieldNumber = 1,
  };
  // optional uint64 time_us = 2;
  bool has_time_us() const;
  void clear_time_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_us() const;
  void set_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
  bool has_component_type() const;
  void clear_component_type();
  ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType component_type() const;
  void set_component_type(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_us_;
  int component_type_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ChromeLatencyInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeLatencyInfo) */ {
 public:
  ChromeLatencyInfo();
  virtual ~ChromeLatencyInfo();

  ChromeLatencyInfo(const ChromeLatencyInfo& from);
  ChromeLatencyInfo(ChromeLatencyInfo&& from) noexcept
    : ChromeLatencyInfo() {
    *this = ::std::move(from);
  }

  inline ChromeLatencyInfo& operator=(const ChromeLatencyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeLatencyInfo& operator=(ChromeLatencyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeLatencyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeLatencyInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeLatencyInfo*>(
               &_ChromeLatencyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeLatencyInfo& a, ChromeLatencyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeLatencyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeLatencyInfo* New() const final {
    return CreateMaybeMessage<ChromeLatencyInfo>(nullptr);
  }

  ChromeLatencyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeLatencyInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeLatencyInfo& from);
  void MergeFrom(const ChromeLatencyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeLatencyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeLatencyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeLatencyInfo_ComponentInfo ComponentInfo;

  typedef ChromeLatencyInfo_Step Step;
  static constexpr Step STEP_UNSPECIFIED =
    ChromeLatencyInfo_Step_STEP_UNSPECIFIED;
  static constexpr Step STEP_SEND_INPUT_EVENT_UI =
    ChromeLatencyInfo_Step_STEP_SEND_INPUT_EVENT_UI;
  static constexpr Step STEP_HANDLE_INPUT_EVENT_IMPL =
    ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_IMPL;
  static constexpr Step STEP_DID_HANDLE_INPUT_AND_OVERSCROLL =
    ChromeLatencyInfo_Step_STEP_DID_HANDLE_INPUT_AND_OVERSCROLL;
  static constexpr Step STEP_HANDLE_INPUT_EVENT_MAIN =
    ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN;
  static constexpr Step STEP_MAIN_THREAD_SCROLL_UPDATE =
    ChromeLatencyInfo_Step_STEP_MAIN_THREAD_SCROLL_UPDATE;
  static constexpr Step STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT =
    ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT;
  static constexpr Step STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL =
    ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL;
  static constexpr Step STEP_HANDLED_INPUT_EVENT_IMPL =
    ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_IMPL;
  static constexpr Step STEP_SWAP_BUFFERS =
    ChromeLatencyInfo_Step_STEP_SWAP_BUFFERS;
  static constexpr Step STEP_DRAW_AND_SWAP =
    ChromeLatencyInfo_Step_STEP_DRAW_AND_SWAP;
  static constexpr Step STEP_FINISHED_SWAP_BUFFERS =
    ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS;
  static inline bool Step_IsValid(int value) {
    return ChromeLatencyInfo_Step_IsValid(value);
  }
  static constexpr Step Step_MIN =
    ChromeLatencyInfo_Step_Step_MIN;
  static constexpr Step Step_MAX =
    ChromeLatencyInfo_Step_Step_MAX;
  static constexpr int Step_ARRAYSIZE =
    ChromeLatencyInfo_Step_Step_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Step_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Step>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Step_Name.");
    return ChromeLatencyInfo_Step_Name(enum_t_value);
  }
  static inline bool Step_Parse(const std::string& name,
      Step* value) {
    return ChromeLatencyInfo_Step_Parse(name, value);
  }

  typedef ChromeLatencyInfo_LatencyComponentType LatencyComponentType;
  static constexpr LatencyComponentType COMPONENT_UNSPECIFIED =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_UI =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_UI;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP;
  static constexpr LatencyComponentType COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP =
    ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP;
  static inline bool LatencyComponentType_IsValid(int value) {
    return ChromeLatencyInfo_LatencyComponentType_IsValid(value);
  }
  static constexpr LatencyComponentType LatencyComponentType_MIN =
    ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MIN;
  static constexpr LatencyComponentType LatencyComponentType_MAX =
    ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MAX;
  static constexpr int LatencyComponentType_ARRAYSIZE =
    ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LatencyComponentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LatencyComponentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LatencyComponentType_Name.");
    return ChromeLatencyInfo_LatencyComponentType_Name(enum_t_value);
  }
  static inline bool LatencyComponentType_Parse(const std::string& name,
      LatencyComponentType* value) {
    return ChromeLatencyInfo_LatencyComponentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentInfoFieldNumber = 4,
    kTraceIdFieldNumber = 1,
    kStepFieldNumber = 2,
    kFrameTreeNodeIdFieldNumber = 3,
    kGestureScrollIdFieldNumber = 6,
    kIsCoalescedFieldNumber = 5,
  };
  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  int component_info_size() const;
  void clear_component_info();
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* mutable_component_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >*
      mutable_component_info();
  const ::perfetto::protos::ChromeLatencyInfo_ComponentInfo& component_info(int index) const;
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* add_component_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >&
      component_info() const;

  // optional int64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id();
  ::PROTOBUF_NAMESPACE_ID::int64 trace_id() const;
  void set_trace_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
  bool has_step() const;
  void clear_step();
  ::perfetto::protos::ChromeLatencyInfo_Step step() const;
  void set_step(::perfetto::protos::ChromeLatencyInfo_Step value);

  // optional int32 frame_tree_node_id = 3;
  bool has_frame_tree_node_id() const;
  void clear_frame_tree_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_tree_node_id() const;
  void set_frame_tree_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 gesture_scroll_id = 6;
  bool has_gesture_scroll_id() const;
  void clear_gesture_scroll_id();
  ::PROTOBUF_NAMESPACE_ID::int64 gesture_scroll_id() const;
  void set_gesture_scroll_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_coalesced = 5;
  bool has_is_coalesced() const;
  void clear_is_coalesced();
  bool is_coalesced() const;
  void set_is_coalesced(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeLatencyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo > component_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 trace_id_;
  int step_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_tree_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 gesture_scroll_id_;
  bool is_coalesced_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeLatencyInfo_ComponentInfo

// optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
inline bool ChromeLatencyInfo_ComponentInfo::has_component_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeLatencyInfo_ComponentInfo::clear_component_type() {
  component_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_ComponentInfo::component_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.ComponentInfo.component_type)
  return static_cast< ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType >(component_type_);
}
inline void ChromeLatencyInfo_ComponentInfo::set_component_type(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType value) {
  assert(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  component_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.ComponentInfo.component_type)
}

// optional uint64 time_us = 2;
inline bool ChromeLatencyInfo_ComponentInfo::has_time_us() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeLatencyInfo_ComponentInfo::clear_time_us() {
  time_us_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChromeLatencyInfo_ComponentInfo::time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.ComponentInfo.time_us)
  return time_us_;
}
inline void ChromeLatencyInfo_ComponentInfo::set_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.ComponentInfo.time_us)
}

// -------------------------------------------------------------------

// ChromeLatencyInfo

// optional int64 trace_id = 1;
inline bool ChromeLatencyInfo::has_trace_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeLatencyInfo::clear_trace_id() {
  trace_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChromeLatencyInfo::trace_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.trace_id)
  return trace_id_;
}
inline void ChromeLatencyInfo::set_trace_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.trace_id)
}

// optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
inline bool ChromeLatencyInfo::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeLatencyInfo::clear_step() {
  step_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeLatencyInfo_Step ChromeLatencyInfo::step() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.step)
  return static_cast< ::perfetto::protos::ChromeLatencyInfo_Step >(step_);
}
inline void ChromeLatencyInfo::set_step(::perfetto::protos::ChromeLatencyInfo_Step value) {
  assert(::perfetto::protos::ChromeLatencyInfo_Step_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  step_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.step)
}

// optional int32 frame_tree_node_id = 3;
inline bool ChromeLatencyInfo::has_frame_tree_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeLatencyInfo::clear_frame_tree_node_id() {
  frame_tree_node_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChromeLatencyInfo::frame_tree_node_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.frame_tree_node_id)
  return frame_tree_node_id_;
}
inline void ChromeLatencyInfo::set_frame_tree_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_tree_node_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.frame_tree_node_id)
}

// repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
inline int ChromeLatencyInfo::component_info_size() const {
  return component_info_.size();
}
inline void ChromeLatencyInfo::clear_component_info() {
  component_info_.Clear();
}
inline ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* ChromeLatencyInfo::mutable_component_info(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeLatencyInfo.component_info)
  return component_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >*
ChromeLatencyInfo::mutable_component_info() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeLatencyInfo.component_info)
  return &component_info_;
}
inline const ::perfetto::protos::ChromeLatencyInfo_ComponentInfo& ChromeLatencyInfo::component_info(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.component_info)
  return component_info_.Get(index);
}
inline ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* ChromeLatencyInfo::add_component_info() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeLatencyInfo.component_info)
  return component_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >&
ChromeLatencyInfo::component_info() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeLatencyInfo.component_info)
  return component_info_;
}

// optional bool is_coalesced = 5;
inline bool ChromeLatencyInfo::has_is_coalesced() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeLatencyInfo::clear_is_coalesced() {
  is_coalesced_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChromeLatencyInfo::is_coalesced() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.is_coalesced)
  return is_coalesced_;
}
inline void ChromeLatencyInfo::set_is_coalesced(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_coalesced_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.is_coalesced)
}

// optional int64 gesture_scroll_id = 6;
inline bool ChromeLatencyInfo::has_gesture_scroll_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeLatencyInfo::clear_gesture_scroll_id() {
  gesture_scroll_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChromeLatencyInfo::gesture_scroll_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.gesture_scroll_id)
  return gesture_scroll_id_;
}
inline void ChromeLatencyInfo::set_gesture_scroll_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  gesture_scroll_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.gesture_scroll_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ChromeLatencyInfo_Step> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto
