// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/track_event/chrome_process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/chrome_thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/counter_descriptor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class TrackDescriptor;
class TrackDescriptorDefaultTypeInternal;
extern TrackDescriptorDefaultTypeInternal _TrackDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TrackDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::TrackDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TrackDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackDescriptor) */ {
 public:
  TrackDescriptor();
  virtual ~TrackDescriptor();

  TrackDescriptor(const TrackDescriptor& from);
  TrackDescriptor(TrackDescriptor&& from) noexcept
    : TrackDescriptor() {
    *this = ::std::move(from);
  }

  inline TrackDescriptor& operator=(const TrackDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackDescriptor& operator=(TrackDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrackDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackDescriptor* internal_default_instance() {
    return reinterpret_cast<const TrackDescriptor*>(
               &_TrackDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackDescriptor& a, TrackDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackDescriptor* New() const final {
    return CreateMaybeMessage<TrackDescriptor>(nullptr);
  }

  TrackDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackDescriptor& from);
  void MergeFrom(const TrackDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kProcessFieldNumber = 3,
    kThreadFieldNumber = 4,
    kChromeProcessFieldNumber = 6,
    kChromeThreadFieldNumber = 7,
    kCounterFieldNumber = 8,
    kUuidFieldNumber = 1,
    kParentUuidFieldNumber = 5,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .perfetto.protos.ProcessDescriptor process = 3;
  bool has_process() const;
  void clear_process();
  const ::perfetto::protos::ProcessDescriptor& process() const;
  ::perfetto::protos::ProcessDescriptor* release_process();
  ::perfetto::protos::ProcessDescriptor* mutable_process();
  void set_allocated_process(::perfetto::protos::ProcessDescriptor* process);

  // optional .perfetto.protos.ThreadDescriptor thread = 4;
  bool has_thread() const;
  void clear_thread();
  const ::perfetto::protos::ThreadDescriptor& thread() const;
  ::perfetto::protos::ThreadDescriptor* release_thread();
  ::perfetto::protos::ThreadDescriptor* mutable_thread();
  void set_allocated_thread(::perfetto::protos::ThreadDescriptor* thread);

  // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
  bool has_chrome_process() const;
  void clear_chrome_process();
  const ::perfetto::protos::ChromeProcessDescriptor& chrome_process() const;
  ::perfetto::protos::ChromeProcessDescriptor* release_chrome_process();
  ::perfetto::protos::ChromeProcessDescriptor* mutable_chrome_process();
  void set_allocated_chrome_process(::perfetto::protos::ChromeProcessDescriptor* chrome_process);

  // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
  bool has_chrome_thread() const;
  void clear_chrome_thread();
  const ::perfetto::protos::ChromeThreadDescriptor& chrome_thread() const;
  ::perfetto::protos::ChromeThreadDescriptor* release_chrome_thread();
  ::perfetto::protos::ChromeThreadDescriptor* mutable_chrome_thread();
  void set_allocated_chrome_thread(::perfetto::protos::ChromeThreadDescriptor* chrome_thread);

  // optional .perfetto.protos.CounterDescriptor counter = 8;
  bool has_counter() const;
  void clear_counter();
  const ::perfetto::protos::CounterDescriptor& counter() const;
  ::perfetto::protos::CounterDescriptor* release_counter();
  ::perfetto::protos::CounterDescriptor* mutable_counter();
  void set_allocated_counter(::perfetto::protos::CounterDescriptor* counter);

  // optional uint64 uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid() const;
  void set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 parent_uuid = 5;
  bool has_parent_uuid() const;
  void clear_parent_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_uuid() const;
  void set_parent_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::perfetto::protos::ProcessDescriptor* process_;
  ::perfetto::protos::ThreadDescriptor* thread_;
  ::perfetto::protos::ChromeProcessDescriptor* chrome_process_;
  ::perfetto::protos::ChromeThreadDescriptor* chrome_thread_;
  ::perfetto::protos::CounterDescriptor* counter_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_uuid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackDescriptor

// optional uint64 uuid = 1;
inline bool TrackDescriptor::has_uuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackDescriptor::clear_uuid() {
  uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.uuid)
  return uuid_;
}
inline void TrackDescriptor::set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  uuid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.uuid)
}

// optional uint64 parent_uuid = 5;
inline bool TrackDescriptor::has_parent_uuid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackDescriptor::clear_parent_uuid() {
  parent_uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDescriptor::parent_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.parent_uuid)
  return parent_uuid_;
}
inline void TrackDescriptor::set_parent_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  parent_uuid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.parent_uuid)
}

// optional string name = 2;
inline bool TrackDescriptor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackDescriptor::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.name)
  return name_.GetNoArena();
}
inline void TrackDescriptor::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.name)
}
inline void TrackDescriptor::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TrackDescriptor.name)
}
inline void TrackDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackDescriptor.name)
}
inline void TrackDescriptor::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackDescriptor.name)
}
inline std::string* TrackDescriptor::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.name)
}

// optional .perfetto.protos.ProcessDescriptor process = 3;
inline bool TrackDescriptor::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::perfetto::protos::ProcessDescriptor& TrackDescriptor::process() const {
  const ::perfetto::protos::ProcessDescriptor* p = process_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.process)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ProcessDescriptor*>(
      &::perfetto::protos::_ProcessDescriptor_default_instance_);
}
inline ::perfetto::protos::ProcessDescriptor* TrackDescriptor::release_process() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.process)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ProcessDescriptor* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProcessDescriptor* TrackDescriptor::mutable_process() {
  _has_bits_[0] |= 0x00000002u;
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProcessDescriptor>(GetArenaNoVirtual());
    process_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.process)
  return process_;
}
inline void TrackDescriptor::set_allocated_process(::perfetto::protos::ProcessDescriptor* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.process)
}

// optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
inline bool TrackDescriptor::has_chrome_process() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::perfetto::protos::ChromeProcessDescriptor& TrackDescriptor::chrome_process() const {
  const ::perfetto::protos::ChromeProcessDescriptor* p = chrome_process_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.chrome_process)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeProcessDescriptor*>(
      &::perfetto::protos::_ChromeProcessDescriptor_default_instance_);
}
inline ::perfetto::protos::ChromeProcessDescriptor* TrackDescriptor::release_chrome_process() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.chrome_process)
  _has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeProcessDescriptor* temp = chrome_process_;
  chrome_process_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeProcessDescriptor* TrackDescriptor::mutable_chrome_process() {
  _has_bits_[0] |= 0x00000008u;
  if (chrome_process_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeProcessDescriptor>(GetArenaNoVirtual());
    chrome_process_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.chrome_process)
  return chrome_process_;
}
inline void TrackDescriptor::set_allocated_chrome_process(::perfetto::protos::ChromeProcessDescriptor* chrome_process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_process_);
  }
  if (chrome_process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chrome_process_ = chrome_process;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.chrome_process)
}

// optional .perfetto.protos.ThreadDescriptor thread = 4;
inline bool TrackDescriptor::has_thread() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::perfetto::protos::ThreadDescriptor& TrackDescriptor::thread() const {
  const ::perfetto::protos::ThreadDescriptor* p = thread_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.thread)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ThreadDescriptor*>(
      &::perfetto::protos::_ThreadDescriptor_default_instance_);
}
inline ::perfetto::protos::ThreadDescriptor* TrackDescriptor::release_thread() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.thread)
  _has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::ThreadDescriptor* temp = thread_;
  thread_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ThreadDescriptor* TrackDescriptor::mutable_thread() {
  _has_bits_[0] |= 0x00000004u;
  if (thread_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ThreadDescriptor>(GetArenaNoVirtual());
    thread_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.thread)
  return thread_;
}
inline void TrackDescriptor::set_allocated_thread(::perfetto::protos::ThreadDescriptor* thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_);
  }
  if (thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thread_ = thread;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.thread)
}

// optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
inline bool TrackDescriptor::has_chrome_thread() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::perfetto::protos::ChromeThreadDescriptor& TrackDescriptor::chrome_thread() const {
  const ::perfetto::protos::ChromeThreadDescriptor* p = chrome_thread_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.chrome_thread)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::ChromeThreadDescriptor*>(
      &::perfetto::protos::_ChromeThreadDescriptor_default_instance_);
}
inline ::perfetto::protos::ChromeThreadDescriptor* TrackDescriptor::release_chrome_thread() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.chrome_thread)
  _has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::ChromeThreadDescriptor* temp = chrome_thread_;
  chrome_thread_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeThreadDescriptor* TrackDescriptor::mutable_chrome_thread() {
  _has_bits_[0] |= 0x00000010u;
  if (chrome_thread_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeThreadDescriptor>(GetArenaNoVirtual());
    chrome_thread_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.chrome_thread)
  return chrome_thread_;
}
inline void TrackDescriptor::set_allocated_chrome_thread(::perfetto::protos::ChromeThreadDescriptor* chrome_thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_thread_);
  }
  if (chrome_thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_thread, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  chrome_thread_ = chrome_thread;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.chrome_thread)
}

// optional .perfetto.protos.CounterDescriptor counter = 8;
inline bool TrackDescriptor::has_counter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::perfetto::protos::CounterDescriptor& TrackDescriptor::counter() const {
  const ::perfetto::protos::CounterDescriptor* p = counter_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.counter)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::CounterDescriptor*>(
      &::perfetto::protos::_CounterDescriptor_default_instance_);
}
inline ::perfetto::protos::CounterDescriptor* TrackDescriptor::release_counter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.counter)
  _has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::CounterDescriptor* temp = counter_;
  counter_ = nullptr;
  return temp;
}
inline ::perfetto::protos::CounterDescriptor* TrackDescriptor::mutable_counter() {
  _has_bits_[0] |= 0x00000020u;
  if (counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::CounterDescriptor>(GetArenaNoVirtual());
    counter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.counter)
  return counter_;
}
inline void TrackDescriptor::set_allocated_counter(::perfetto::protos::CounterDescriptor* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter_);
  }
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  counter_ = counter;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.counter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto
