// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/system_info/cpu_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class CpuInfo;
class CpuInfoDefaultTypeInternal;
extern CpuInfoDefaultTypeInternal _CpuInfo_default_instance_;
class CpuInfo_Cpu;
class CpuInfo_CpuDefaultTypeInternal;
extern CpuInfo_CpuDefaultTypeInternal _CpuInfo_Cpu_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CpuInfo* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo>(Arena*);
template<> ::perfetto::protos::CpuInfo_Cpu* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo_Cpu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class CpuInfo_Cpu :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo.Cpu) */ {
 public:
  CpuInfo_Cpu();
  virtual ~CpuInfo_Cpu();

  CpuInfo_Cpu(const CpuInfo_Cpu& from);
  CpuInfo_Cpu(CpuInfo_Cpu&& from) noexcept
    : CpuInfo_Cpu() {
    *this = ::std::move(from);
  }

  inline CpuInfo_Cpu& operator=(const CpuInfo_Cpu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo_Cpu& operator=(CpuInfo_Cpu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuInfo_Cpu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfo_Cpu* internal_default_instance() {
    return reinterpret_cast<const CpuInfo_Cpu*>(
               &_CpuInfo_Cpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuInfo_Cpu& a, CpuInfo_Cpu& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo_Cpu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfo_Cpu* New() const final {
    return CreateMaybeMessage<CpuInfo_Cpu>(nullptr);
  }

  CpuInfo_Cpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfo_Cpu>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuInfo_Cpu& from);
  void MergeFrom(const CpuInfo_Cpu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuInfo_Cpu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuInfo.Cpu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequenciesFieldNumber = 2,
    kProcessorFieldNumber = 1,
  };
  // repeated uint32 frequencies = 2;
  int frequencies_size() const;
  void clear_frequencies();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequencies(int index) const;
  void set_frequencies(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_frequencies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_frequencies();

  // optional string processor = 1;
  bool has_processor() const;
  void clear_processor();
  const std::string& processor() const;
  void set_processor(const std::string& value);
  void set_processor(std::string&& value);
  void set_processor(const char* value);
  void set_processor(const char* value, size_t size);
  std::string* mutable_processor();
  std::string* release_processor();
  void set_allocated_processor(std::string* processor);

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo.Cpu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > frequencies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};
// -------------------------------------------------------------------

class CpuInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo) */ {
 public:
  CpuInfo();
  virtual ~CpuInfo();

  CpuInfo(const CpuInfo& from);
  CpuInfo(CpuInfo&& from) noexcept
    : CpuInfo() {
    *this = ::std::move(from);
  }

  inline CpuInfo& operator=(const CpuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo& operator=(CpuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfo* internal_default_instance() {
    return reinterpret_cast<const CpuInfo*>(
               &_CpuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuInfo& a, CpuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuInfo* New() const final {
    return CreateMaybeMessage<CpuInfo>(nullptr);
  }

  CpuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuInfo& from);
  void MergeFrom(const CpuInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CpuInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CpuInfo_Cpu Cpu;

  // accessors -------------------------------------------------------

  enum : int {
    kCpusFieldNumber = 1,
  };
  // repeated .perfetto.protos.CpuInfo.Cpu cpus = 1;
  int cpus_size() const;
  void clear_cpus();
  ::perfetto::protos::CpuInfo_Cpu* mutable_cpus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >*
      mutable_cpus();
  const ::perfetto::protos::CpuInfo_Cpu& cpus(int index) const;
  ::perfetto::protos::CpuInfo_Cpu* add_cpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >&
      cpus() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu > cpus_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuInfo_Cpu

// optional string processor = 1;
inline bool CpuInfo_Cpu::has_processor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfo_Cpu::clear_processor() {
  processor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CpuInfo_Cpu::processor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.processor)
  return processor_.GetNoArena();
}
inline void CpuInfo_Cpu::set_processor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  processor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.processor)
}
inline void CpuInfo_Cpu::set_processor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  processor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CpuInfo.Cpu.processor)
}
inline void CpuInfo_Cpu::set_processor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  processor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CpuInfo.Cpu.processor)
}
inline void CpuInfo_Cpu::set_processor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  processor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CpuInfo.Cpu.processor)
}
inline std::string* CpuInfo_Cpu::mutable_processor() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.Cpu.processor)
  return processor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuInfo_Cpu::release_processor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CpuInfo.Cpu.processor)
  if (!has_processor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return processor_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuInfo_Cpu::set_allocated_processor(std::string* processor) {
  if (processor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  processor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processor);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CpuInfo.Cpu.processor)
}

// repeated uint32 frequencies = 2;
inline int CpuInfo_Cpu::frequencies_size() const {
  return frequencies_.size();
}
inline void CpuInfo_Cpu::clear_frequencies() {
  frequencies_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpuInfo_Cpu::frequencies(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.frequencies)
  return frequencies_.Get(index);
}
inline void CpuInfo_Cpu::set_frequencies(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  frequencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.frequencies)
}
inline void CpuInfo_Cpu::add_frequencies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  frequencies_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.CpuInfo.Cpu.frequencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CpuInfo_Cpu::frequencies() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CpuInfo.Cpu.frequencies)
  return frequencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CpuInfo_Cpu::mutable_frequencies() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CpuInfo.Cpu.frequencies)
  return &frequencies_;
}

// -------------------------------------------------------------------

// CpuInfo

// repeated .perfetto.protos.CpuInfo.Cpu cpus = 1;
inline int CpuInfo::cpus_size() const {
  return cpus_.size();
}
inline void CpuInfo::clear_cpus() {
  cpus_.Clear();
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.cpus)
  return cpus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >*
CpuInfo::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CpuInfo.cpus)
  return &cpus_;
}
inline const ::perfetto::protos::CpuInfo_Cpu& CpuInfo::cpus(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.cpus)
  return cpus_.Get(index);
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::add_cpus() {
  // @@protoc_insertion_point(field_add:perfetto.protos.CpuInfo.cpus)
  return cpus_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >&
CpuInfo::cpus() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CpuInfo.cpus)
  return cpus_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto
