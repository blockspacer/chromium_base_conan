#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ps/process_tree.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ProcessTree::ProcessTree() = default;
ProcessTree::~ProcessTree() = default;
ProcessTree::ProcessTree(const ProcessTree&) = default;
ProcessTree& ProcessTree::operator=(const ProcessTree&) = default;
ProcessTree::ProcessTree(ProcessTree&&) noexcept = default;
ProcessTree& ProcessTree::operator=(ProcessTree&&) = default;

bool ProcessTree::operator==(const ProcessTree& other) const {
  return unknown_fields_ == other.unknown_fields_
   && processes_ == other.processes_
   && threads_ == other.threads_
   && collection_end_timestamp_ == other.collection_end_timestamp_;
}

int ProcessTree::processes_size() const { return static_cast<int>(processes_.size()); }
void ProcessTree::clear_processes() { processes_.clear(); }
ProcessTree_Process* ProcessTree::add_processes() { processes_.emplace_back(); return &processes_.back(); }
int ProcessTree::threads_size() const { return static_cast<int>(threads_.size()); }
void ProcessTree::clear_threads() { threads_.clear(); }
ProcessTree_Thread* ProcessTree::add_threads() { threads_.emplace_back(); return &threads_.back(); }
bool ProcessTree::ParseFromArray(const void* raw, size_t size) {
  processes_.clear();
  threads_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* processes */:
        processes_.emplace_back();
        processes_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* threads */:
        threads_.emplace_back();
        threads_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* collection_end_timestamp */:
        field.get(&collection_end_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessTree::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessTree::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessTree::Serialize(::protozero::Message* msg) const {
  // Field 1: processes
  for (auto& it : processes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: threads
  for (auto& it : threads_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: collection_end_timestamp
  if (_has_field_[3]) {
    msg->AppendVarInt(3, collection_end_timestamp_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


ProcessTree_Thread::ProcessTree_Thread() = default;
ProcessTree_Thread::~ProcessTree_Thread() = default;
ProcessTree_Thread::ProcessTree_Thread(const ProcessTree_Thread&) = default;
ProcessTree_Thread& ProcessTree_Thread::operator=(const ProcessTree_Thread&) = default;
ProcessTree_Thread::ProcessTree_Thread(ProcessTree_Thread&&) noexcept = default;
ProcessTree_Thread& ProcessTree_Thread::operator=(ProcessTree_Thread&&) = default;

bool ProcessTree_Thread::operator==(const ProcessTree_Thread& other) const {
  return unknown_fields_ == other.unknown_fields_
   && tid_ == other.tid_
   && tgid_ == other.tgid_
   && name_ == other.name_;
}

bool ProcessTree_Thread::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* tid */:
        field.get(&tid_);
        break;
      case 3 /* tgid */:
        field.get(&tgid_);
        break;
      case 2 /* name */:
        field.get(&name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessTree_Thread::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessTree_Thread::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessTree_Thread::Serialize(::protozero::Message* msg) const {
  // Field 1: tid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, tid_);
  }

  // Field 3: tgid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, tgid_);
  }

  // Field 2: name
  if (_has_field_[2]) {
    msg->AppendString(2, name_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


ProcessTree_Process::ProcessTree_Process() = default;
ProcessTree_Process::~ProcessTree_Process() = default;
ProcessTree_Process::ProcessTree_Process(const ProcessTree_Process&) = default;
ProcessTree_Process& ProcessTree_Process::operator=(const ProcessTree_Process&) = default;
ProcessTree_Process::ProcessTree_Process(ProcessTree_Process&&) noexcept = default;
ProcessTree_Process& ProcessTree_Process::operator=(ProcessTree_Process&&) = default;

bool ProcessTree_Process::operator==(const ProcessTree_Process& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_
   && ppid_ == other.ppid_
   && cmdline_ == other.cmdline_
   && threads_deprecated_ == other.threads_deprecated_
   && uid_ == other.uid_;
}

int ProcessTree_Process::threads_deprecated_size() const { return static_cast<int>(threads_deprecated_.size()); }
void ProcessTree_Process::clear_threads_deprecated() { threads_deprecated_.clear(); }
ProcessTree_Thread* ProcessTree_Process::add_threads_deprecated() { threads_deprecated_.emplace_back(); return &threads_deprecated_.back(); }
bool ProcessTree_Process::ParseFromArray(const void* raw, size_t size) {
  cmdline_.clear();
  threads_deprecated_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* ppid */:
        field.get(&ppid_);
        break;
      case 3 /* cmdline */:
        cmdline_.emplace_back();
        field.get(&cmdline_.back());
        break;
      case 4 /* threads_deprecated */:
        threads_deprecated_.emplace_back();
        threads_deprecated_.back().ParseFromArray(field.data(), field.size());
        break;
      case 5 /* uid */:
        field.get(&uid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessTree_Process::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessTree_Process::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessTree_Process::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  // Field 2: ppid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, ppid_);
  }

  // Field 3: cmdline
  for (auto& it : cmdline_) {
    msg->AppendString(3, it);
  }

  // Field 4: threads_deprecated
  for (auto& it : threads_deprecated_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 5: uid
  if (_has_field_[5]) {
    msg->AppendVarInt(5, uid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
