// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_tree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ProcessTree;
class ProcessTreeDefaultTypeInternal;
extern ProcessTreeDefaultTypeInternal _ProcessTree_default_instance_;
class ProcessTree_Process;
class ProcessTree_ProcessDefaultTypeInternal;
extern ProcessTree_ProcessDefaultTypeInternal _ProcessTree_Process_default_instance_;
class ProcessTree_Thread;
class ProcessTree_ThreadDefaultTypeInternal;
extern ProcessTree_ThreadDefaultTypeInternal _ProcessTree_Thread_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ProcessTree* Arena::CreateMaybeMessage<::perfetto::protos::ProcessTree>(Arena*);
template<> ::perfetto::protos::ProcessTree_Process* Arena::CreateMaybeMessage<::perfetto::protos::ProcessTree_Process>(Arena*);
template<> ::perfetto::protos::ProcessTree_Thread* Arena::CreateMaybeMessage<::perfetto::protos::ProcessTree_Thread>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ProcessTree_Thread :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessTree.Thread) */ {
 public:
  ProcessTree_Thread();
  virtual ~ProcessTree_Thread();

  ProcessTree_Thread(const ProcessTree_Thread& from);
  ProcessTree_Thread(ProcessTree_Thread&& from) noexcept
    : ProcessTree_Thread() {
    *this = ::std::move(from);
  }

  inline ProcessTree_Thread& operator=(const ProcessTree_Thread& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTree_Thread& operator=(ProcessTree_Thread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessTree_Thread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessTree_Thread* internal_default_instance() {
    return reinterpret_cast<const ProcessTree_Thread*>(
               &_ProcessTree_Thread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessTree_Thread& a, ProcessTree_Thread& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTree_Thread* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessTree_Thread* New() const final {
    return CreateMaybeMessage<ProcessTree_Thread>(nullptr);
  }

  ProcessTree_Thread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessTree_Thread>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessTree_Thread& from);
  void MergeFrom(const ProcessTree_Thread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessTree_Thread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessTree.Thread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTidFieldNumber = 1,
    kTgidFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 tid = 1;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tgid = 3;
  bool has_tgid() const;
  void clear_tgid();
  ::PROTOBUF_NAMESPACE_ID::int32 tgid() const;
  void set_tgid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree.Thread)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tgid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
};
// -------------------------------------------------------------------

class ProcessTree_Process :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessTree.Process) */ {
 public:
  ProcessTree_Process();
  virtual ~ProcessTree_Process();

  ProcessTree_Process(const ProcessTree_Process& from);
  ProcessTree_Process(ProcessTree_Process&& from) noexcept
    : ProcessTree_Process() {
    *this = ::std::move(from);
  }

  inline ProcessTree_Process& operator=(const ProcessTree_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTree_Process& operator=(ProcessTree_Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessTree_Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessTree_Process* internal_default_instance() {
    return reinterpret_cast<const ProcessTree_Process*>(
               &_ProcessTree_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessTree_Process& a, ProcessTree_Process& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTree_Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessTree_Process* New() const final {
    return CreateMaybeMessage<ProcessTree_Process>(nullptr);
  }

  ProcessTree_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessTree_Process>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessTree_Process& from);
  void MergeFrom(const ProcessTree_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessTree_Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessTree.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdlineFieldNumber = 3,
    kThreadsDeprecatedFieldNumber = 4,
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kUidFieldNumber = 5,
  };
  // repeated string cmdline = 3;
  int cmdline_size() const;
  void clear_cmdline();
  const std::string& cmdline(int index) const;
  std::string* mutable_cmdline(int index);
  void set_cmdline(int index, const std::string& value);
  void set_cmdline(int index, std::string&& value);
  void set_cmdline(int index, const char* value);
  void set_cmdline(int index, const char* value, size_t size);
  std::string* add_cmdline();
  void add_cmdline(const std::string& value);
  void add_cmdline(std::string&& value);
  void add_cmdline(const char* value);
  void add_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cmdline();

  // repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int threads_deprecated_size() const;
  PROTOBUF_DEPRECATED void clear_threads_deprecated();
  PROTOBUF_DEPRECATED ::perfetto::protos::ProcessTree_Thread* mutable_threads_deprecated(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
      mutable_threads_deprecated();
  PROTOBUF_DEPRECATED const ::perfetto::protos::ProcessTree_Thread& threads_deprecated(int index) const;
  PROTOBUF_DEPRECATED ::perfetto::protos::ProcessTree_Thread* add_threads_deprecated();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
      threads_deprecated() const;

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ppid = 2;
  bool has_ppid() const;
  void clear_ppid();
  ::PROTOBUF_NAMESPACE_ID::int32 ppid() const;
  void set_ppid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 5;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread > threads_deprecated_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ppid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
};
// -------------------------------------------------------------------

class ProcessTree :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessTree) */ {
 public:
  ProcessTree();
  virtual ~ProcessTree();

  ProcessTree(const ProcessTree& from);
  ProcessTree(ProcessTree&& from) noexcept
    : ProcessTree() {
    *this = ::std::move(from);
  }

  inline ProcessTree& operator=(const ProcessTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTree& operator=(ProcessTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessTree* internal_default_instance() {
    return reinterpret_cast<const ProcessTree*>(
               &_ProcessTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessTree& a, ProcessTree& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTree* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessTree* New() const final {
    return CreateMaybeMessage<ProcessTree>(nullptr);
  }

  ProcessTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessTree>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessTree& from);
  void MergeFrom(const ProcessTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessTree";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessTree_Thread Thread;
  typedef ProcessTree_Process Process;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
    kThreadsFieldNumber = 2,
    kCollectionEndTimestampFieldNumber = 3,
  };
  // repeated .perfetto.protos.ProcessTree.Process processes = 1;
  int processes_size() const;
  void clear_processes();
  ::perfetto::protos::ProcessTree_Process* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >*
      mutable_processes();
  const ::perfetto::protos::ProcessTree_Process& processes(int index) const;
  ::perfetto::protos::ProcessTree_Process* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >&
      processes() const;

  // repeated .perfetto.protos.ProcessTree.Thread threads = 2;
  int threads_size() const;
  void clear_threads();
  ::perfetto::protos::ProcessTree_Thread* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
      mutable_threads();
  const ::perfetto::protos::ProcessTree_Thread& threads(int index) const;
  ::perfetto::protos::ProcessTree_Thread* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
      threads() const;

  // optional uint64 collection_end_timestamp = 3;
  bool has_collection_end_timestamp() const;
  void clear_collection_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_end_timestamp() const;
  void set_collection_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process > processes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread > threads_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_end_timestamp_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessTree_Thread

// optional int32 tid = 1;
inline bool ProcessTree_Thread::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessTree_Thread::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessTree_Thread::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.tid)
  return tid_;
}
inline void ProcessTree_Thread::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.tid)
}

// optional int32 tgid = 3;
inline bool ProcessTree_Thread::has_tgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessTree_Thread::clear_tgid() {
  tgid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessTree_Thread::tgid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.tgid)
  return tgid_;
}
inline void ProcessTree_Thread::set_tgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  tgid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.tgid)
}

// optional string name = 2;
inline bool ProcessTree_Thread::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessTree_Thread::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessTree_Thread::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.name)
  return name_.GetNoArena();
}
inline void ProcessTree_Thread::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.name)
}
inline void ProcessTree_Thread::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ProcessTree.Thread.name)
}
inline void ProcessTree_Thread::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ProcessTree.Thread.name)
}
inline void ProcessTree_Thread::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ProcessTree.Thread.name)
}
inline std::string* ProcessTree_Thread::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.Thread.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessTree_Thread::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProcessTree.Thread.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessTree_Thread::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProcessTree.Thread.name)
}

// -------------------------------------------------------------------

// ProcessTree_Process

// optional int32 pid = 1;
inline bool ProcessTree_Process::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessTree_Process::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessTree_Process::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.pid)
  return pid_;
}
inline void ProcessTree_Process::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.pid)
}

// optional int32 ppid = 2;
inline bool ProcessTree_Process::has_ppid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessTree_Process::clear_ppid() {
  ppid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessTree_Process::ppid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.ppid)
  return ppid_;
}
inline void ProcessTree_Process::set_ppid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ppid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.ppid)
}

// repeated string cmdline = 3;
inline int ProcessTree_Process::cmdline_size() const {
  return cmdline_.size();
}
inline void ProcessTree_Process::clear_cmdline() {
  cmdline_.Clear();
}
inline const std::string& ProcessTree_Process::cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.cmdline)
  return cmdline_.Get(index);
}
inline std::string* ProcessTree_Process::mutable_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.Process.cmdline)
  return cmdline_.Mutable(index);
}
inline void ProcessTree_Process::set_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.cmdline)
  cmdline_.Mutable(index)->assign(value);
}
inline void ProcessTree_Process::set_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.cmdline)
  cmdline_.Mutable(index)->assign(std::move(value));
}
inline void ProcessTree_Process::set_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::set_cmdline(int index, const char* value, size_t size) {
  cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ProcessTree.Process.cmdline)
}
inline std::string* ProcessTree_Process::add_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ProcessTree.Process.cmdline)
  return cmdline_.Add();
}
inline void ProcessTree_Process::add_cmdline(const std::string& value) {
  cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(std::string&& value) {
  cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(const char* value, size_t size) {
  cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ProcessTree.Process.cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessTree_Process::cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.Process.cmdline)
  return cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessTree_Process::mutable_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.Process.cmdline)
  return &cmdline_;
}

// repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
inline int ProcessTree_Process::threads_deprecated_size() const {
  return threads_deprecated_.size();
}
inline void ProcessTree_Process::clear_threads_deprecated() {
  threads_deprecated_.Clear();
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree_Process::mutable_threads_deprecated(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return threads_deprecated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
ProcessTree_Process::mutable_threads_deprecated() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return &threads_deprecated_;
}
inline const ::perfetto::protos::ProcessTree_Thread& ProcessTree_Process::threads_deprecated(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return threads_deprecated_.Get(index);
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree_Process::add_threads_deprecated() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return threads_deprecated_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
ProcessTree_Process::threads_deprecated() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return threads_deprecated_;
}

// optional int32 uid = 5;
inline bool ProcessTree_Process::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessTree_Process::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessTree_Process::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.uid)
  return uid_;
}
inline void ProcessTree_Process::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.uid)
}

// -------------------------------------------------------------------

// ProcessTree

// repeated .perfetto.protos.ProcessTree.Process processes = 1;
inline int ProcessTree::processes_size() const {
  return processes_.size();
}
inline void ProcessTree::clear_processes() {
  processes_.Clear();
}
inline ::perfetto::protos::ProcessTree_Process* ProcessTree::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.processes)
  return processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >*
ProcessTree::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.processes)
  return &processes_;
}
inline const ::perfetto::protos::ProcessTree_Process& ProcessTree::processes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.processes)
  return processes_.Get(index);
}
inline ::perfetto::protos::ProcessTree_Process* ProcessTree::add_processes() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.processes)
  return processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >&
ProcessTree::processes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.processes)
  return processes_;
}

// repeated .perfetto.protos.ProcessTree.Thread threads = 2;
inline int ProcessTree::threads_size() const {
  return threads_.size();
}
inline void ProcessTree::clear_threads() {
  threads_.Clear();
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.threads)
  return threads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
ProcessTree::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.threads)
  return &threads_;
}
inline const ::perfetto::protos::ProcessTree_Thread& ProcessTree::threads(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.threads)
  return threads_.Get(index);
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree::add_threads() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.threads)
  return threads_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
ProcessTree::threads() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.threads)
  return threads_;
}

// optional uint64 collection_end_timestamp = 3;
inline bool ProcessTree::has_collection_end_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessTree::clear_collection_end_timestamp() {
  collection_end_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessTree::collection_end_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.collection_end_timestamp)
  return collection_end_timestamp_;
}
inline void ProcessTree::set_collection_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  collection_end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.collection_end_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto
