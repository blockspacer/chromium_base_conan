#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ps/process_stats.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ProcessStats::ProcessStats() = default;
ProcessStats::~ProcessStats() = default;
ProcessStats::ProcessStats(const ProcessStats&) = default;
ProcessStats& ProcessStats::operator=(const ProcessStats&) = default;
ProcessStats::ProcessStats(ProcessStats&&) noexcept = default;
ProcessStats& ProcessStats::operator=(ProcessStats&&) = default;

bool ProcessStats::operator==(const ProcessStats& other) const {
  return unknown_fields_ == other.unknown_fields_
   && processes_ == other.processes_
   && collection_end_timestamp_ == other.collection_end_timestamp_;
}

int ProcessStats::processes_size() const { return static_cast<int>(processes_.size()); }
void ProcessStats::clear_processes() { processes_.clear(); }
ProcessStats_Process* ProcessStats::add_processes() { processes_.emplace_back(); return &processes_.back(); }
bool ProcessStats::ParseFromArray(const void* raw, size_t size) {
  processes_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* processes */:
        processes_.emplace_back();
        processes_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* collection_end_timestamp */:
        field.get(&collection_end_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats::Serialize(::protozero::Message* msg) const {
  // Field 1: processes
  for (auto& it : processes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: collection_end_timestamp
  if (_has_field_[2]) {
    msg->AppendVarInt(2, collection_end_timestamp_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


ProcessStats_Process::ProcessStats_Process() = default;
ProcessStats_Process::~ProcessStats_Process() = default;
ProcessStats_Process::ProcessStats_Process(const ProcessStats_Process&) = default;
ProcessStats_Process& ProcessStats_Process::operator=(const ProcessStats_Process&) = default;
ProcessStats_Process::ProcessStats_Process(ProcessStats_Process&&) noexcept = default;
ProcessStats_Process& ProcessStats_Process::operator=(ProcessStats_Process&&) = default;

bool ProcessStats_Process::operator==(const ProcessStats_Process& other) const {
  return unknown_fields_ == other.unknown_fields_
   && pid_ == other.pid_
   && vm_size_kb_ == other.vm_size_kb_
   && vm_rss_kb_ == other.vm_rss_kb_
   && rss_anon_kb_ == other.rss_anon_kb_
   && rss_file_kb_ == other.rss_file_kb_
   && rss_shmem_kb_ == other.rss_shmem_kb_
   && vm_swap_kb_ == other.vm_swap_kb_
   && vm_locked_kb_ == other.vm_locked_kb_
   && vm_hwm_kb_ == other.vm_hwm_kb_
   && oom_score_adj_ == other.oom_score_adj_
   && threads_ == other.threads_
   && is_peak_rss_resettable_ == other.is_peak_rss_resettable_
   && chrome_private_footprint_kb_ == other.chrome_private_footprint_kb_
   && chrome_peak_resident_set_kb_ == other.chrome_peak_resident_set_kb_;
}

int ProcessStats_Process::threads_size() const { return static_cast<int>(threads_.size()); }
void ProcessStats_Process::clear_threads() { threads_.clear(); }
ProcessStats_Thread* ProcessStats_Process::add_threads() { threads_.emplace_back(); return &threads_.back(); }
bool ProcessStats_Process::ParseFromArray(const void* raw, size_t size) {
  threads_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* vm_size_kb */:
        field.get(&vm_size_kb_);
        break;
      case 3 /* vm_rss_kb */:
        field.get(&vm_rss_kb_);
        break;
      case 4 /* rss_anon_kb */:
        field.get(&rss_anon_kb_);
        break;
      case 5 /* rss_file_kb */:
        field.get(&rss_file_kb_);
        break;
      case 6 /* rss_shmem_kb */:
        field.get(&rss_shmem_kb_);
        break;
      case 7 /* vm_swap_kb */:
        field.get(&vm_swap_kb_);
        break;
      case 8 /* vm_locked_kb */:
        field.get(&vm_locked_kb_);
        break;
      case 9 /* vm_hwm_kb */:
        field.get(&vm_hwm_kb_);
        break;
      case 10 /* oom_score_adj */:
        field.get(&oom_score_adj_);
        break;
      case 11 /* threads */:
        threads_.emplace_back();
        threads_.back().ParseFromArray(field.data(), field.size());
        break;
      case 12 /* is_peak_rss_resettable */:
        field.get(&is_peak_rss_resettable_);
        break;
      case 13 /* chrome_private_footprint_kb */:
        field.get(&chrome_private_footprint_kb_);
        break;
      case 14 /* chrome_peak_resident_set_kb */:
        field.get(&chrome_peak_resident_set_kb_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats_Process::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats_Process::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats_Process::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, pid_);
  }

  // Field 2: vm_size_kb
  if (_has_field_[2]) {
    msg->AppendVarInt(2, vm_size_kb_);
  }

  // Field 3: vm_rss_kb
  if (_has_field_[3]) {
    msg->AppendVarInt(3, vm_rss_kb_);
  }

  // Field 4: rss_anon_kb
  if (_has_field_[4]) {
    msg->AppendVarInt(4, rss_anon_kb_);
  }

  // Field 5: rss_file_kb
  if (_has_field_[5]) {
    msg->AppendVarInt(5, rss_file_kb_);
  }

  // Field 6: rss_shmem_kb
  if (_has_field_[6]) {
    msg->AppendVarInt(6, rss_shmem_kb_);
  }

  // Field 7: vm_swap_kb
  if (_has_field_[7]) {
    msg->AppendVarInt(7, vm_swap_kb_);
  }

  // Field 8: vm_locked_kb
  if (_has_field_[8]) {
    msg->AppendVarInt(8, vm_locked_kb_);
  }

  // Field 9: vm_hwm_kb
  if (_has_field_[9]) {
    msg->AppendVarInt(9, vm_hwm_kb_);
  }

  // Field 10: oom_score_adj
  if (_has_field_[10]) {
    msg->AppendVarInt(10, oom_score_adj_);
  }

  // Field 11: threads
  for (auto& it : threads_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: is_peak_rss_resettable
  if (_has_field_[12]) {
    msg->AppendTinyVarInt(12, is_peak_rss_resettable_);
  }

  // Field 13: chrome_private_footprint_kb
  if (_has_field_[13]) {
    msg->AppendVarInt(13, chrome_private_footprint_kb_);
  }

  // Field 14: chrome_peak_resident_set_kb
  if (_has_field_[14]) {
    msg->AppendVarInt(14, chrome_peak_resident_set_kb_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


ProcessStats_Thread::ProcessStats_Thread() = default;
ProcessStats_Thread::~ProcessStats_Thread() = default;
ProcessStats_Thread::ProcessStats_Thread(const ProcessStats_Thread&) = default;
ProcessStats_Thread& ProcessStats_Thread::operator=(const ProcessStats_Thread&) = default;
ProcessStats_Thread::ProcessStats_Thread(ProcessStats_Thread&&) noexcept = default;
ProcessStats_Thread& ProcessStats_Thread::operator=(ProcessStats_Thread&&) = default;

bool ProcessStats_Thread::operator==(const ProcessStats_Thread& other) const {
  return unknown_fields_ == other.unknown_fields_
   && tid_ == other.tid_
   && cpu_freq_indices_ == other.cpu_freq_indices_
   && cpu_freq_ticks_ == other.cpu_freq_ticks_
   && cpu_freq_full_ == other.cpu_freq_full_;
}

bool ProcessStats_Thread::ParseFromArray(const void* raw, size_t size) {
  cpu_freq_indices_.clear();
  cpu_freq_ticks_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* tid */:
        field.get(&tid_);
        break;
      case 2 /* cpu_freq_indices */:
        cpu_freq_indices_.emplace_back();
        field.get(&cpu_freq_indices_.back());
        break;
      case 3 /* cpu_freq_ticks */:
        cpu_freq_ticks_.emplace_back();
        field.get(&cpu_freq_ticks_.back());
        break;
      case 4 /* cpu_freq_full */:
        field.get(&cpu_freq_full_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats_Thread::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats_Thread::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats_Thread::Serialize(::protozero::Message* msg) const {
  // Field 1: tid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, tid_);
  }

  // Field 2: cpu_freq_indices
  for (auto& it : cpu_freq_indices_) {
    msg->AppendVarInt(2, it);
  }

  // Field 3: cpu_freq_ticks
  for (auto& it : cpu_freq_ticks_) {
    msg->AppendVarInt(3, it);
  }

  // Field 4: cpu_freq_full
  if (_has_field_[4]) {
    msg->AppendTinyVarInt(4, cpu_freq_full_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
