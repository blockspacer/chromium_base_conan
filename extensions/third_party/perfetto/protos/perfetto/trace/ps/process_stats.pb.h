// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ProcessStats;
class ProcessStatsDefaultTypeInternal;
extern ProcessStatsDefaultTypeInternal _ProcessStats_default_instance_;
class ProcessStats_Process;
class ProcessStats_ProcessDefaultTypeInternal;
extern ProcessStats_ProcessDefaultTypeInternal _ProcessStats_Process_default_instance_;
class ProcessStats_Thread;
class ProcessStats_ThreadDefaultTypeInternal;
extern ProcessStats_ThreadDefaultTypeInternal _ProcessStats_Thread_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ProcessStats* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats>(Arena*);
template<> ::perfetto::protos::ProcessStats_Process* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats_Process>(Arena*);
template<> ::perfetto::protos::ProcessStats_Thread* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats_Thread>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ProcessStats_Thread :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats.Thread) */ {
 public:
  ProcessStats_Thread();
  virtual ~ProcessStats_Thread();

  ProcessStats_Thread(const ProcessStats_Thread& from);
  ProcessStats_Thread(ProcessStats_Thread&& from) noexcept
    : ProcessStats_Thread() {
    *this = ::std::move(from);
  }

  inline ProcessStats_Thread& operator=(const ProcessStats_Thread& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats_Thread& operator=(ProcessStats_Thread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessStats_Thread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessStats_Thread* internal_default_instance() {
    return reinterpret_cast<const ProcessStats_Thread*>(
               &_ProcessStats_Thread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessStats_Thread& a, ProcessStats_Thread& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStats_Thread* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessStats_Thread* New() const final {
    return CreateMaybeMessage<ProcessStats_Thread>(nullptr);
  }

  ProcessStats_Thread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessStats_Thread>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessStats_Thread& from);
  void MergeFrom(const ProcessStats_Thread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats_Thread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats.Thread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFreqIndicesFieldNumber = 2,
    kCpuFreqTicksFieldNumber = 3,
    kTidFieldNumber = 1,
    kCpuFreqFullFieldNumber = 4,
  };
  // repeated uint32 cpu_freq_indices = 2;
  int cpu_freq_indices_size() const;
  void clear_cpu_freq_indices();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_freq_indices(int index) const;
  void set_cpu_freq_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cpu_freq_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cpu_freq_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cpu_freq_indices();

  // repeated uint64 cpu_freq_ticks = 3;
  int cpu_freq_ticks_size() const;
  void clear_cpu_freq_ticks();
  ::PROTOBUF_NAMESPACE_ID::uint64 cpu_freq_ticks(int index) const;
  void set_cpu_freq_ticks(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_cpu_freq_ticks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      cpu_freq_ticks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_cpu_freq_ticks();

  // optional int32 tid = 1;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool cpu_freq_full = 4;
  bool has_cpu_freq_full() const;
  void clear_cpu_freq_full();
  bool cpu_freq_full() const;
  void set_cpu_freq_full(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats.Thread)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cpu_freq_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > cpu_freq_ticks_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  bool cpu_freq_full_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ProcessStats_Process :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats.Process) */ {
 public:
  ProcessStats_Process();
  virtual ~ProcessStats_Process();

  ProcessStats_Process(const ProcessStats_Process& from);
  ProcessStats_Process(ProcessStats_Process&& from) noexcept
    : ProcessStats_Process() {
    *this = ::std::move(from);
  }

  inline ProcessStats_Process& operator=(const ProcessStats_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats_Process& operator=(ProcessStats_Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessStats_Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessStats_Process* internal_default_instance() {
    return reinterpret_cast<const ProcessStats_Process*>(
               &_ProcessStats_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessStats_Process& a, ProcessStats_Process& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStats_Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessStats_Process* New() const final {
    return CreateMaybeMessage<ProcessStats_Process>(nullptr);
  }

  ProcessStats_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessStats_Process>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessStats_Process& from);
  void MergeFrom(const ProcessStats_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats_Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadsFieldNumber = 11,
    kVmSizeKbFieldNumber = 2,
    kVmRssKbFieldNumber = 3,
    kRssAnonKbFieldNumber = 4,
    kRssFileKbFieldNumber = 5,
    kRssShmemKbFieldNumber = 6,
    kPidFieldNumber = 1,
    kIsPeakRssResettableFieldNumber = 12,
    kVmSwapKbFieldNumber = 7,
    kVmLockedKbFieldNumber = 8,
    kVmHwmKbFieldNumber = 9,
    kOomScoreAdjFieldNumber = 10,
    kChromePrivateFootprintKbFieldNumber = 13,
    kChromePeakResidentSetKbFieldNumber = 14,
  };
  // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
  int threads_size() const;
  void clear_threads();
  ::perfetto::protos::ProcessStats_Thread* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >*
      mutable_threads();
  const ::perfetto::protos::ProcessStats_Thread& threads(int index) const;
  ::perfetto::protos::ProcessStats_Thread* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >&
      threads() const;

  // optional uint64 vm_size_kb = 2;
  bool has_vm_size_kb() const;
  void clear_vm_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_size_kb() const;
  void set_vm_size_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 vm_rss_kb = 3;
  bool has_vm_rss_kb() const;
  void clear_vm_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_rss_kb() const;
  void set_vm_rss_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rss_anon_kb = 4;
  bool has_rss_anon_kb() const;
  void clear_rss_anon_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 rss_anon_kb() const;
  void set_rss_anon_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rss_file_kb = 5;
  bool has_rss_file_kb() const;
  void clear_rss_file_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 rss_file_kb() const;
  void set_rss_file_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rss_shmem_kb = 6;
  bool has_rss_shmem_kb() const;
  void clear_rss_shmem_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 rss_shmem_kb() const;
  void set_rss_shmem_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_peak_rss_resettable = 12;
  bool has_is_peak_rss_resettable() const;
  void clear_is_peak_rss_resettable();
  bool is_peak_rss_resettable() const;
  void set_is_peak_rss_resettable(bool value);

  // optional uint64 vm_swap_kb = 7;
  bool has_vm_swap_kb() const;
  void clear_vm_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_swap_kb() const;
  void set_vm_swap_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 vm_locked_kb = 8;
  bool has_vm_locked_kb() const;
  void clear_vm_locked_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_locked_kb() const;
  void set_vm_locked_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 vm_hwm_kb = 9;
  bool has_vm_hwm_kb() const;
  void clear_vm_hwm_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_hwm_kb() const;
  void set_vm_hwm_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 oom_score_adj = 10;
  bool has_oom_score_adj() const;
  void clear_oom_score_adj();
  ::PROTOBUF_NAMESPACE_ID::int64 oom_score_adj() const;
  void set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 chrome_private_footprint_kb = 13;
  bool has_chrome_private_footprint_kb() const;
  void clear_chrome_private_footprint_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 chrome_private_footprint_kb() const;
  void set_chrome_private_footprint_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 chrome_peak_resident_set_kb = 14;
  bool has_chrome_peak_resident_set_kb() const;
  void clear_chrome_peak_resident_set_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 chrome_peak_resident_set_kb() const;
  void set_chrome_peak_resident_set_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread > threads_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_rss_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rss_anon_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rss_file_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rss_shmem_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  bool is_peak_rss_resettable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_swap_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_locked_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vm_hwm_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 oom_score_adj_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chrome_private_footprint_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chrome_peak_resident_set_kb_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ProcessStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats) */ {
 public:
  ProcessStats();
  virtual ~ProcessStats();

  ProcessStats(const ProcessStats& from);
  ProcessStats(ProcessStats&& from) noexcept
    : ProcessStats() {
    *this = ::std::move(from);
  }

  inline ProcessStats& operator=(const ProcessStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats& operator=(ProcessStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessStats* internal_default_instance() {
    return reinterpret_cast<const ProcessStats*>(
               &_ProcessStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessStats& a, ProcessStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessStats* New() const final {
    return CreateMaybeMessage<ProcessStats>(nullptr);
  }

  ProcessStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessStats& from);
  void MergeFrom(const ProcessStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessStats_Thread Thread;
  typedef ProcessStats_Process Process;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
    kCollectionEndTimestampFieldNumber = 2,
  };
  // repeated .perfetto.protos.ProcessStats.Process processes = 1;
  int processes_size() const;
  void clear_processes();
  ::perfetto::protos::ProcessStats_Process* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >*
      mutable_processes();
  const ::perfetto::protos::ProcessStats_Process& processes(int index) const;
  ::perfetto::protos::ProcessStats_Process* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >&
      processes() const;

  // optional uint64 collection_end_timestamp = 2;
  bool has_collection_end_timestamp() const;
  void clear_collection_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_end_timestamp() const;
  void set_collection_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process > processes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collection_end_timestamp_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessStats_Thread

// optional int32 tid = 1;
inline bool ProcessStats_Thread::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessStats_Thread::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessStats_Thread::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Thread.tid)
  return tid_;
}
inline void ProcessStats_Thread::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Thread.tid)
}

// repeated uint32 cpu_freq_indices = 2;
inline int ProcessStats_Thread::cpu_freq_indices_size() const {
  return cpu_freq_indices_.size();
}
inline void ProcessStats_Thread::clear_cpu_freq_indices() {
  cpu_freq_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessStats_Thread::cpu_freq_indices(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Thread.cpu_freq_indices)
  return cpu_freq_indices_.Get(index);
}
inline void ProcessStats_Thread::set_cpu_freq_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cpu_freq_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Thread.cpu_freq_indices)
}
inline void ProcessStats_Thread::add_cpu_freq_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cpu_freq_indices_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.Thread.cpu_freq_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProcessStats_Thread::cpu_freq_indices() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.Thread.cpu_freq_indices)
  return cpu_freq_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProcessStats_Thread::mutable_cpu_freq_indices() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.Thread.cpu_freq_indices)
  return &cpu_freq_indices_;
}

// repeated uint64 cpu_freq_ticks = 3;
inline int ProcessStats_Thread::cpu_freq_ticks_size() const {
  return cpu_freq_ticks_.size();
}
inline void ProcessStats_Thread::clear_cpu_freq_ticks() {
  cpu_freq_ticks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Thread::cpu_freq_ticks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Thread.cpu_freq_ticks)
  return cpu_freq_ticks_.Get(index);
}
inline void ProcessStats_Thread::set_cpu_freq_ticks(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cpu_freq_ticks_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Thread.cpu_freq_ticks)
}
inline void ProcessStats_Thread::add_cpu_freq_ticks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cpu_freq_ticks_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.Thread.cpu_freq_ticks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ProcessStats_Thread::cpu_freq_ticks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.Thread.cpu_freq_ticks)
  return cpu_freq_ticks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ProcessStats_Thread::mutable_cpu_freq_ticks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.Thread.cpu_freq_ticks)
  return &cpu_freq_ticks_;
}

// optional bool cpu_freq_full = 4;
inline bool ProcessStats_Thread::has_cpu_freq_full() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessStats_Thread::clear_cpu_freq_full() {
  cpu_freq_full_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProcessStats_Thread::cpu_freq_full() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Thread.cpu_freq_full)
  return cpu_freq_full_;
}
inline void ProcessStats_Thread::set_cpu_freq_full(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_freq_full_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Thread.cpu_freq_full)
}

// -------------------------------------------------------------------

// ProcessStats_Process

// optional int32 pid = 1;
inline bool ProcessStats_Process::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessStats_Process::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessStats_Process::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.pid)
  return pid_;
}
inline void ProcessStats_Process::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.pid)
}

// optional uint64 vm_size_kb = 2;
inline bool ProcessStats_Process::has_vm_size_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessStats_Process::clear_vm_size_kb() {
  vm_size_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::vm_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_size_kb)
  return vm_size_kb_;
}
inline void ProcessStats_Process::set_vm_size_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  vm_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_size_kb)
}

// optional uint64 vm_rss_kb = 3;
inline bool ProcessStats_Process::has_vm_rss_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessStats_Process::clear_vm_rss_kb() {
  vm_rss_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::vm_rss_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_rss_kb)
  return vm_rss_kb_;
}
inline void ProcessStats_Process::set_vm_rss_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  vm_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_rss_kb)
}

// optional uint64 rss_anon_kb = 4;
inline bool ProcessStats_Process::has_rss_anon_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessStats_Process::clear_rss_anon_kb() {
  rss_anon_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::rss_anon_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.rss_anon_kb)
  return rss_anon_kb_;
}
inline void ProcessStats_Process::set_rss_anon_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  rss_anon_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.rss_anon_kb)
}

// optional uint64 rss_file_kb = 5;
inline bool ProcessStats_Process::has_rss_file_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessStats_Process::clear_rss_file_kb() {
  rss_file_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::rss_file_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.rss_file_kb)
  return rss_file_kb_;
}
inline void ProcessStats_Process::set_rss_file_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  rss_file_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.rss_file_kb)
}

// optional uint64 rss_shmem_kb = 6;
inline bool ProcessStats_Process::has_rss_shmem_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessStats_Process::clear_rss_shmem_kb() {
  rss_shmem_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::rss_shmem_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.rss_shmem_kb)
  return rss_shmem_kb_;
}
inline void ProcessStats_Process::set_rss_shmem_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  rss_shmem_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.rss_shmem_kb)
}

// optional uint64 vm_swap_kb = 7;
inline bool ProcessStats_Process::has_vm_swap_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProcessStats_Process::clear_vm_swap_kb() {
  vm_swap_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::vm_swap_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_swap_kb)
  return vm_swap_kb_;
}
inline void ProcessStats_Process::set_vm_swap_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  vm_swap_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_swap_kb)
}

// optional uint64 vm_locked_kb = 8;
inline bool ProcessStats_Process::has_vm_locked_kb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessStats_Process::clear_vm_locked_kb() {
  vm_locked_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::vm_locked_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_locked_kb)
  return vm_locked_kb_;
}
inline void ProcessStats_Process::set_vm_locked_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  vm_locked_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_locked_kb)
}

// optional uint64 vm_hwm_kb = 9;
inline bool ProcessStats_Process::has_vm_hwm_kb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProcessStats_Process::clear_vm_hwm_kb() {
  vm_hwm_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats_Process::vm_hwm_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_hwm_kb)
  return vm_hwm_kb_;
}
inline void ProcessStats_Process::set_vm_hwm_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  vm_hwm_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_hwm_kb)
}

// optional int64 oom_score_adj = 10;
inline bool ProcessStats_Process::has_oom_score_adj() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProcessStats_Process::clear_oom_score_adj() {
  oom_score_adj_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessStats_Process::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.oom_score_adj)
  return oom_score_adj_;
}
inline void ProcessStats_Process::set_oom_score_adj(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  oom_score_adj_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.oom_score_adj)
}

// repeated .perfetto.protos.ProcessStats.Thread threads = 11;
inline int ProcessStats_Process::threads_size() const {
  return threads_.size();
}
inline void ProcessStats_Process::clear_threads() {
  threads_.Clear();
}
inline ::perfetto::protos::ProcessStats_Thread* ProcessStats_Process::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessStats.Process.threads)
  return threads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >*
ProcessStats_Process::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.Process.threads)
  return &threads_;
}
inline const ::perfetto::protos::ProcessStats_Thread& ProcessStats_Process::threads(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.threads)
  return threads_.Get(index);
}
inline ::perfetto::protos::ProcessStats_Thread* ProcessStats_Process::add_threads() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.Process.threads)
  return threads_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >&
ProcessStats_Process::threads() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.Process.threads)
  return threads_;
}

// optional bool is_peak_rss_resettable = 12;
inline bool ProcessStats_Process::has_is_peak_rss_resettable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessStats_Process::clear_is_peak_rss_resettable() {
  is_peak_rss_resettable_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProcessStats_Process::is_peak_rss_resettable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.is_peak_rss_resettable)
  return is_peak_rss_resettable_;
}
inline void ProcessStats_Process::set_is_peak_rss_resettable(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_peak_rss_resettable_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.is_peak_rss_resettable)
}

// optional uint32 chrome_private_footprint_kb = 13;
inline bool ProcessStats_Process::has_chrome_private_footprint_kb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProcessStats_Process::clear_chrome_private_footprint_kb() {
  chrome_private_footprint_kb_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessStats_Process::chrome_private_footprint_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.chrome_private_footprint_kb)
  return chrome_private_footprint_kb_;
}
inline void ProcessStats_Process::set_chrome_private_footprint_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  chrome_private_footprint_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.chrome_private_footprint_kb)
}

// optional uint32 chrome_peak_resident_set_kb = 14;
inline bool ProcessStats_Process::has_chrome_peak_resident_set_kb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProcessStats_Process::clear_chrome_peak_resident_set_kb() {
  chrome_peak_resident_set_kb_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessStats_Process::chrome_peak_resident_set_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.chrome_peak_resident_set_kb)
  return chrome_peak_resident_set_kb_;
}
inline void ProcessStats_Process::set_chrome_peak_resident_set_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  chrome_peak_resident_set_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.chrome_peak_resident_set_kb)
}

// -------------------------------------------------------------------

// ProcessStats

// repeated .perfetto.protos.ProcessStats.Process processes = 1;
inline int ProcessStats::processes_size() const {
  return processes_.size();
}
inline void ProcessStats::clear_processes() {
  processes_.Clear();
}
inline ::perfetto::protos::ProcessStats_Process* ProcessStats::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessStats.processes)
  return processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >*
ProcessStats::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.processes)
  return &processes_;
}
inline const ::perfetto::protos::ProcessStats_Process& ProcessStats::processes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.processes)
  return processes_.Get(index);
}
inline ::perfetto::protos::ProcessStats_Process* ProcessStats::add_processes() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.processes)
  return processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >&
ProcessStats::processes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.processes)
  return processes_;
}

// optional uint64 collection_end_timestamp = 2;
inline bool ProcessStats::has_collection_end_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessStats::clear_collection_end_timestamp() {
  collection_end_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessStats::collection_end_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.collection_end_timestamp)
  return collection_end_timestamp_;
}
inline void ProcessStats::set_collection_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  collection_end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.collection_end_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto
