// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PS_PROCESS_TREE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PS_PROCESS_TREE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ProcessTree;
class ProcessTree_Thread;
class ProcessTree_Process;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT ProcessTree : public ::protozero::CppMessageObj {
 public:
  using Thread = ProcessTree_Thread;
  using Process = ProcessTree_Process;
  enum FieldNumbers {
    kProcessesFieldNumber = 1,
    kThreadsFieldNumber = 2,
    kCollectionEndTimestampFieldNumber = 3,
  };

  ProcessTree();
  ~ProcessTree() override;
  ProcessTree(ProcessTree&&) noexcept;
  ProcessTree& operator=(ProcessTree&&);
  ProcessTree(const ProcessTree&);
  ProcessTree& operator=(const ProcessTree&);
  bool operator==(const ProcessTree&) const;
  bool operator!=(const ProcessTree& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ProcessTree_Process>& processes() const { return processes_; }
  std::vector<ProcessTree_Process>* mutable_processes() { return &processes_; }
  int processes_size() const;
  void clear_processes();
  ProcessTree_Process* add_processes();

  const std::vector<ProcessTree_Thread>& threads() const { return threads_; }
  std::vector<ProcessTree_Thread>* mutable_threads() { return &threads_; }
  int threads_size() const;
  void clear_threads();
  ProcessTree_Thread* add_threads();

  bool has_collection_end_timestamp() const { return _has_field_[3]; }
  uint64_t collection_end_timestamp() const { return collection_end_timestamp_; }
  void set_collection_end_timestamp(uint64_t value) { collection_end_timestamp_ = value; _has_field_.set(3); }

 private:
  std::vector<ProcessTree_Process> processes_;
  std::vector<ProcessTree_Thread> threads_;
  uint64_t collection_end_timestamp_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT ProcessTree_Thread : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTidFieldNumber = 1,
    kTgidFieldNumber = 3,
    kNameFieldNumber = 2,
  };

  ProcessTree_Thread();
  ~ProcessTree_Thread() override;
  ProcessTree_Thread(ProcessTree_Thread&&) noexcept;
  ProcessTree_Thread& operator=(ProcessTree_Thread&&);
  ProcessTree_Thread(const ProcessTree_Thread&);
  ProcessTree_Thread& operator=(const ProcessTree_Thread&);
  bool operator==(const ProcessTree_Thread&) const;
  bool operator!=(const ProcessTree_Thread& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tid() const { return _has_field_[1]; }
  int32_t tid() const { return tid_; }
  void set_tid(int32_t value) { tid_ = value; _has_field_.set(1); }

  bool has_tgid() const { return _has_field_[3]; }
  int32_t tgid() const { return tgid_; }
  void set_tgid(int32_t value) { tgid_ = value; _has_field_.set(3); }

  bool has_name() const { return _has_field_[2]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(2); }

 private:
  int32_t tid_{};
  int32_t tgid_{};
  std::string name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT ProcessTree_Process : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kCmdlineFieldNumber = 3,
    kThreadsDeprecatedFieldNumber = 4,
    kUidFieldNumber = 5,
  };

  ProcessTree_Process();
  ~ProcessTree_Process() override;
  ProcessTree_Process(ProcessTree_Process&&) noexcept;
  ProcessTree_Process& operator=(ProcessTree_Process&&);
  ProcessTree_Process(const ProcessTree_Process&);
  ProcessTree_Process& operator=(const ProcessTree_Process&);
  bool operator==(const ProcessTree_Process&) const;
  bool operator!=(const ProcessTree_Process& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_ppid() const { return _has_field_[2]; }
  int32_t ppid() const { return ppid_; }
  void set_ppid(int32_t value) { ppid_ = value; _has_field_.set(2); }

  const std::vector<std::string>& cmdline() const { return cmdline_; }
  std::vector<std::string>* mutable_cmdline() { return &cmdline_; }
  int cmdline_size() const { return static_cast<int>(cmdline_.size()); }
  void clear_cmdline() { cmdline_.clear(); }
  void add_cmdline(std::string value) { cmdline_.emplace_back(value); }
  std::string* add_cmdline() { cmdline_.emplace_back(); return &cmdline_.back(); }

  const std::vector<ProcessTree_Thread>& threads_deprecated() const { return threads_deprecated_; }
  std::vector<ProcessTree_Thread>* mutable_threads_deprecated() { return &threads_deprecated_; }
  int threads_deprecated_size() const;
  void clear_threads_deprecated();
  ProcessTree_Thread* add_threads_deprecated();

  bool has_uid() const { return _has_field_[5]; }
  int32_t uid() const { return uid_; }
  void set_uid(int32_t value) { uid_ = value; _has_field_.set(5); }

 private:
  int32_t pid_{};
  int32_t ppid_{};
  std::vector<std::string> cmdline_;
  std::vector<ProcessTree_Thread> threads_deprecated_;
  int32_t uid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PS_PROCESS_TREE_PROTO_CPP_H_
