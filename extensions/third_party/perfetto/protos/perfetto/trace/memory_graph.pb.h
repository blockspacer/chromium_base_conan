// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/memory_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class MemoryTrackerSnapshot;
class MemoryTrackerSnapshotDefaultTypeInternal;
extern MemoryTrackerSnapshotDefaultTypeInternal _MemoryTrackerSnapshot_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot;
class MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::MemoryTrackerSnapshot* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units : int {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED = 0,
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_BYTES = 1,
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT = 2
};
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(int value);
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MIN = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MAX = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT;
constexpr int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_ARRAYSIZE = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MAX + 1;

const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value);
template<typename T>
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name.");
  return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(static_cast<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>(enum_t_value));
}
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Parse(
    const std::string& name, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units* value);
enum MemoryTrackerSnapshot_LevelOfDetail : int {
  MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL = 0,
  MemoryTrackerSnapshot_LevelOfDetail_DETAIL_LIGHT = 1,
  MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND = 2
};
bool MemoryTrackerSnapshot_LevelOfDetail_IsValid(int value);
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MIN = MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MAX = MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND;
constexpr int MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_ARRAYSIZE = MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MAX + 1;

const std::string& MemoryTrackerSnapshot_LevelOfDetail_Name(MemoryTrackerSnapshot_LevelOfDetail value);
template<typename T>
inline const std::string& MemoryTrackerSnapshot_LevelOfDetail_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemoryTrackerSnapshot_LevelOfDetail>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemoryTrackerSnapshot_LevelOfDetail_Name.");
  return MemoryTrackerSnapshot_LevelOfDetail_Name(static_cast<MemoryTrackerSnapshot_LevelOfDetail>(enum_t_value));
}
bool MemoryTrackerSnapshot_LevelOfDetail_Parse(
    const std::string& name, MemoryTrackerSnapshot_LevelOfDetail* value);
// ===================================================================

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry) */ {
 public:
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry();
  virtual ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry();

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from);
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& operator=(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& operator=(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& a, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* New() const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>(nullptr);
  }

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units Units;
  static constexpr Units UNSPECIFIED =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED;
  static constexpr Units BYTES =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_BYTES;
  static constexpr Units COUNT =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT;
  static inline bool Units_IsValid(int value) {
    return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(value);
  }
  static constexpr Units Units_MIN =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MIN;
  static constexpr Units Units_MAX =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MAX;
  static constexpr int Units_ARRAYSIZE =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Units_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Units>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Units_Name.");
    return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(enum_t_value);
  }
  static inline bool Units_Parse(const std::string& name,
      Units* value) {
    return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueStringFieldNumber = 4,
    kValueUint64FieldNumber = 3,
    kUnitsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string value_string = 4;
  bool has_value_string() const;
  void clear_value_string();
  const std::string& value_string() const;
  void set_value_string(const std::string& value);
  void set_value_string(std::string&& value);
  void set_value_string(const char* value);
  void set_value_string(const char* value, size_t size);
  std::string* mutable_value_string();
  std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);

  // optional uint64 value_uint64 = 3;
  bool has_value_uint64() const;
  void clear_value_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 value_uint64() const;
  void set_value_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
  bool has_units() const;
  void clear_units();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units units() const;
  void set_units(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_uint64_;
  int units_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode) */ {
 public:
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode();
  virtual ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode();

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from);
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& operator=(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& operator=(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& a, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* New() const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>(nullptr);
  }

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry MemoryNodeEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kAbsoluteNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSizeBytesFieldNumber = 4,
    kWeakFieldNumber = 3,
  };
  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
  int entries_size() const;
  void clear_entries();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >*
      mutable_entries();
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& entries(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >&
      entries() const;

  // optional string absolute_name = 2;
  bool has_absolute_name() const;
  void clear_absolute_name();
  const std::string& absolute_name() const;
  void set_absolute_name(const std::string& value);
  void set_absolute_name(std::string&& value);
  void set_absolute_name(const char* value);
  void set_absolute_name(const char* value, size_t size);
  std::string* mutable_absolute_name();
  std::string* release_absolute_name();
  void set_allocated_absolute_name(std::string* absolute_name);

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 size_bytes = 4;
  bool has_size_bytes() const;
  void clear_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes() const;
  void set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool weak = 3;
  bool has_weak() const;
  void clear_weak();
  bool weak() const;
  void set_weak(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes_;
  bool weak_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge) */ {
 public:
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge();
  virtual ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge();

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from);
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& operator=(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& operator=(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& a, MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* New() const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>(nullptr);
  }

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kImportanceFieldNumber = 3,
    kOverridableFieldNumber = 4,
  };
  // optional uint64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id() const;
  void set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 target_id = 2;
  bool has_target_id() const;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 importance = 3;
  bool has_importance() const;
  void clear_importance();
  ::PROTOBUF_NAMESPACE_ID::uint32 importance() const;
  void set_importance(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool overridable = 4;
  bool has_overridable() const;
  void clear_overridable();
  bool overridable() const;
  void set_overridable(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 importance_;
  bool overridable_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot_ProcessSnapshot :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot) */ {
 public:
  MemoryTrackerSnapshot_ProcessSnapshot();
  virtual ~MemoryTrackerSnapshot_ProcessSnapshot();

  MemoryTrackerSnapshot_ProcessSnapshot(const MemoryTrackerSnapshot_ProcessSnapshot& from);
  MemoryTrackerSnapshot_ProcessSnapshot(MemoryTrackerSnapshot_ProcessSnapshot&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot& operator=(const MemoryTrackerSnapshot_ProcessSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot& operator=(MemoryTrackerSnapshot_ProcessSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryTrackerSnapshot_ProcessSnapshot* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot& a, MemoryTrackerSnapshot_ProcessSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryTrackerSnapshot_ProcessSnapshot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryTrackerSnapshot_ProcessSnapshot* New() const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot>(nullptr);
  }

  MemoryTrackerSnapshot_ProcessSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode MemoryNode;
  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge MemoryEdge;

  // accessors -------------------------------------------------------

  enum : int {
    kAllocatorDumpsFieldNumber = 2,
    kMemoryEdgesFieldNumber = 3,
    kPidFieldNumber = 1,
  };
  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
  int allocator_dumps_size() const;
  void clear_allocator_dumps();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* mutable_allocator_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >*
      mutable_allocator_dumps();
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& allocator_dumps(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* add_allocator_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >&
      allocator_dumps() const;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
  int memory_edges_size() const;
  void clear_memory_edges();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* mutable_memory_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >*
      mutable_memory_edges();
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& memory_edges(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* add_memory_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >&
      memory_edges() const;

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode > allocator_dumps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge > memory_edges_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot) */ {
 public:
  MemoryTrackerSnapshot();
  virtual ~MemoryTrackerSnapshot();

  MemoryTrackerSnapshot(const MemoryTrackerSnapshot& from);
  MemoryTrackerSnapshot(MemoryTrackerSnapshot&& from) noexcept
    : MemoryTrackerSnapshot() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot& operator=(const MemoryTrackerSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot& operator=(MemoryTrackerSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryTrackerSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryTrackerSnapshot* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot*>(
               &_MemoryTrackerSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemoryTrackerSnapshot& a, MemoryTrackerSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryTrackerSnapshot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryTrackerSnapshot* New() const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot>(nullptr);
  }

  MemoryTrackerSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryTrackerSnapshot& from);
  void MergeFrom(const MemoryTrackerSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot ProcessSnapshot;

  typedef MemoryTrackerSnapshot_LevelOfDetail LevelOfDetail;
  static constexpr LevelOfDetail DETAIL_FULL =
    MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL;
  static constexpr LevelOfDetail DETAIL_LIGHT =
    MemoryTrackerSnapshot_LevelOfDetail_DETAIL_LIGHT;
  static constexpr LevelOfDetail DETAIL_BACKGROUND =
    MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND;
  static inline bool LevelOfDetail_IsValid(int value) {
    return MemoryTrackerSnapshot_LevelOfDetail_IsValid(value);
  }
  static constexpr LevelOfDetail LevelOfDetail_MIN =
    MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MIN;
  static constexpr LevelOfDetail LevelOfDetail_MAX =
    MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MAX;
  static constexpr int LevelOfDetail_ARRAYSIZE =
    MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LevelOfDetail_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LevelOfDetail>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LevelOfDetail_Name.");
    return MemoryTrackerSnapshot_LevelOfDetail_Name(enum_t_value);
  }
  static inline bool LevelOfDetail_Parse(const std::string& name,
      LevelOfDetail* value) {
    return MemoryTrackerSnapshot_LevelOfDetail_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProcessMemoryDumpsFieldNumber = 3,
    kGlobalDumpIdFieldNumber = 1,
    kLevelOfDetailFieldNumber = 2,
  };
  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
  int process_memory_dumps_size() const;
  void clear_process_memory_dumps();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* mutable_process_memory_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >*
      mutable_process_memory_dumps();
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot& process_memory_dumps(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* add_process_memory_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >&
      process_memory_dumps() const;

  // optional uint64 global_dump_id = 1;
  bool has_global_dump_id() const;
  void clear_global_dump_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 global_dump_id() const;
  void set_global_dump_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
  bool has_level_of_detail() const;
  void clear_level_of_detail();
  ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail level_of_detail() const;
  void set_level_of_detail(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot > process_memory_dumps_;
  ::PROTOBUF_NAMESPACE_ID::uint64 global_dump_id_;
  int level_of_detail_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry

// optional string name = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
  return name_.GetNoArena();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}

// optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_units() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_units() {
  units_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::units() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.units)
  return static_cast< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units >(units_);
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_units(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value) {
  assert(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  units_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.units)
}

// optional uint64 value_uint64 = 3;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_value_uint64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_value_uint64() {
  value_uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::value_uint64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_uint64)
  return value_uint64_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  value_uint64_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_uint64)
}

// optional string value_string = 4;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_value_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_value_string() {
  value_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::value_string() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
  return value_string_.GetNoArena();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::mutable_value_string() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
  return value_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::release_value_string() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
  if (!has_value_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_allocated_value_string(std::string* value_string) {
  if (value_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_string);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode

// optional uint64 id = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.id)
  return id_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.id)
}

// optional string absolute_name = 2;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_absolute_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_absolute_name() {
  absolute_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::absolute_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
  return absolute_name_.GetNoArena();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_absolute_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  absolute_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_absolute_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  absolute_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_absolute_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  absolute_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_absolute_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  absolute_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::mutable_absolute_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
  return absolute_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::release_absolute_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
  if (!has_absolute_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return absolute_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_allocated_absolute_name(std::string* absolute_name) {
  if (absolute_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  absolute_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absolute_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}

// optional bool weak = 3;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_weak() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_weak() {
  weak_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::weak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.weak)
  return weak_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_weak(bool value) {
  _has_bits_[0] |= 0x00000008u;
  weak_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.weak)
}

// optional uint64 size_bytes = 4;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_size_bytes() {
  size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::size_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.size_bytes)
  return size_bytes_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.size_bytes)
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
inline int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::entries_size() const {
  return entries_.size();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_entries() {
  entries_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >*
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return &entries_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::entries(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return entries_.Get(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::add_entries() {
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >&
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::entries() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return entries_;
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge

// optional uint64 source_id = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_source_id() {
  source_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::source_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.source_id)
  return source_id_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.source_id)
}

// optional uint64 target_id = 2;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_target_id() {
  target_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::target_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.target_id)
  return target_id_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  target_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.target_id)
}

// optional uint32 importance = 3;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_importance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_importance() {
  importance_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::importance() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.importance)
  return importance_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_importance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  importance_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.importance)
}

// optional bool overridable = 4;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_overridable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_overridable() {
  overridable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::overridable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.overridable)
  return overridable_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_overridable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  overridable_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.overridable)
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot_ProcessSnapshot

// optional int32 pid = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryTrackerSnapshot_ProcessSnapshot::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.pid)
  return pid_;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.pid)
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
inline int MemoryTrackerSnapshot_ProcessSnapshot::allocator_dumps_size() const {
  return allocator_dumps_.size();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::clear_allocator_dumps() {
  allocator_dumps_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* MemoryTrackerSnapshot_ProcessSnapshot::mutable_allocator_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return allocator_dumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >*
MemoryTrackerSnapshot_ProcessSnapshot::mutable_allocator_dumps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return &allocator_dumps_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& MemoryTrackerSnapshot_ProcessSnapshot::allocator_dumps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return allocator_dumps_.Get(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* MemoryTrackerSnapshot_ProcessSnapshot::add_allocator_dumps() {
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return allocator_dumps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >&
MemoryTrackerSnapshot_ProcessSnapshot::allocator_dumps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return allocator_dumps_;
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
inline int MemoryTrackerSnapshot_ProcessSnapshot::memory_edges_size() const {
  return memory_edges_.size();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::clear_memory_edges() {
  memory_edges_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* MemoryTrackerSnapshot_ProcessSnapshot::mutable_memory_edges(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return memory_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >*
MemoryTrackerSnapshot_ProcessSnapshot::mutable_memory_edges() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return &memory_edges_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& MemoryTrackerSnapshot_ProcessSnapshot::memory_edges(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return memory_edges_.Get(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* MemoryTrackerSnapshot_ProcessSnapshot::add_memory_edges() {
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return memory_edges_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >&
MemoryTrackerSnapshot_ProcessSnapshot::memory_edges() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return memory_edges_;
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot

// optional uint64 global_dump_id = 1;
inline bool MemoryTrackerSnapshot::has_global_dump_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryTrackerSnapshot::clear_global_dump_id() {
  global_dump_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryTrackerSnapshot::global_dump_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.global_dump_id)
  return global_dump_id_;
}
inline void MemoryTrackerSnapshot::set_global_dump_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  global_dump_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.global_dump_id)
}

// optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
inline bool MemoryTrackerSnapshot::has_level_of_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryTrackerSnapshot::clear_level_of_detail() {
  level_of_detail_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::level_of_detail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.level_of_detail)
  return static_cast< ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail >(level_of_detail_);
}
inline void MemoryTrackerSnapshot::set_level_of_detail(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail value) {
  assert(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  level_of_detail_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.level_of_detail)
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
inline int MemoryTrackerSnapshot::process_memory_dumps_size() const {
  return process_memory_dumps_.size();
}
inline void MemoryTrackerSnapshot::clear_process_memory_dumps() {
  process_memory_dumps_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* MemoryTrackerSnapshot::mutable_process_memory_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return process_memory_dumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >*
MemoryTrackerSnapshot::mutable_process_memory_dumps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return &process_memory_dumps_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot& MemoryTrackerSnapshot::process_memory_dumps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return process_memory_dumps_.Get(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* MemoryTrackerSnapshot::add_process_memory_dumps() {
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return process_memory_dumps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >&
MemoryTrackerSnapshot::process_memory_dumps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return process_memory_dumps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto
