// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/gpu_counter_descriptor.proto

#include "protos/perfetto/common/gpu_counter_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
namespace perfetto {
namespace protos {
class GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterDescriptor_GpuCounterSpec> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 int_peak_value_;
  double double_peak_value_;
} _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
class GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterDescriptor_GpuCounterBlock> _instance;
} _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
class GpuCounterDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuCounterDescriptor> _instance;
} _GpuCounterDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto}, {
      &scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base,
      &scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base,}};

static void InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterDescriptor_GpuCounterBlock_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto}, {}};

static void InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuCounterDescriptor_GpuCounterSpec_default_instance_;
    new (ptr) ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto}, {}};

namespace perfetto {
namespace protos {
bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuCounterDescriptor_GpuCounterGroup_strings[7] = {};

static const char GpuCounterDescriptor_GpuCounterGroup_names[] =
  "COMPUTE"
  "FRAGMENTS"
  "MEMORY"
  "PRIMITIVES"
  "SYSTEM"
  "UNCLASSIFIED"
  "VERTICES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuCounterDescriptor_GpuCounterGroup_entries[] = {
  { {GpuCounterDescriptor_GpuCounterGroup_names + 0, 7}, 6 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 7, 9}, 3 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 16, 6}, 5 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 22, 10}, 4 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 32, 6}, 1 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 38, 12}, 0 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 50, 8}, 2 },
};

static const int GpuCounterDescriptor_GpuCounterGroup_entries_by_number[] = {
  5, // 0 -> UNCLASSIFIED
  4, // 1 -> SYSTEM
  6, // 2 -> VERTICES
  1, // 3 -> FRAGMENTS
  3, // 4 -> PRIMITIVES
  2, // 5 -> MEMORY
  0, // 6 -> COMPUTE
};

const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(
    GpuCounterDescriptor_GpuCounterGroup value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuCounterDescriptor_GpuCounterGroup_entries,
          GpuCounterDescriptor_GpuCounterGroup_entries_by_number,
          7, GpuCounterDescriptor_GpuCounterGroup_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuCounterDescriptor_GpuCounterGroup_entries,
      GpuCounterDescriptor_GpuCounterGroup_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuCounterDescriptor_GpuCounterGroup_strings[idx].get();
}
bool GpuCounterDescriptor_GpuCounterGroup_Parse(
    const std::string& name, GpuCounterDescriptor_GpuCounterGroup* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuCounterDescriptor_GpuCounterGroup_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<GpuCounterDescriptor_GpuCounterGroup>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::UNCLASSIFIED;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::SYSTEM;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::VERTICES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::FRAGMENTS;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::PRIMITIVES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::MEMORY;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::COMPUTE;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MIN;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MAX;
constexpr int GpuCounterDescriptor::GpuCounterGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GpuCounterDescriptor_MeasureUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuCounterDescriptor_MeasureUnit_strings[41] = {};

static const char GpuCounterDescriptor_MeasureUnit_names[] =
  "AMPERE"
  "BIT"
  "BYTE"
  "CELSIUS"
  "FAHRENHEIT"
  "FRAGMENT"
  "GIGABIT"
  "GIGABYTE"
  "GIGAHERTZ"
  "HERTZ"
  "HOUR"
  "INSTRUCTION"
  "JOULE"
  "KELVIN"
  "KILOBIT"
  "KILOBYTE"
  "KILOHERTZ"
  "KILOWATT"
  "MEGABIT"
  "MEGABYTE"
  "MEGAHERTZ"
  "MICROSECOND"
  "MILLISECOND"
  "MILLIWATT"
  "MINUTE"
  "NANOSECOND"
  "NONE"
  "PERCENT"
  "PETABIT"
  "PETABYTE"
  "PETAHERTZ"
  "PIXEL"
  "PRIMITIVE"
  "SECOND"
  "TERABIT"
  "TERABYTE"
  "TERAHERTZ"
  "TRIANGLE"
  "VERTEX"
  "VOLT"
  "WATT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuCounterDescriptor_MeasureUnit_entries[] = {
  { {GpuCounterDescriptor_MeasureUnit_names + 0, 6}, 33 },
  { {GpuCounterDescriptor_MeasureUnit_names + 6, 3}, 1 },
  { {GpuCounterDescriptor_MeasureUnit_names + 9, 4}, 7 },
  { {GpuCounterDescriptor_MeasureUnit_names + 13, 7}, 34 },
  { {GpuCounterDescriptor_MeasureUnit_names + 20, 10}, 35 },
  { {GpuCounterDescriptor_MeasureUnit_names + 30, 8}, 39 },
  { {GpuCounterDescriptor_MeasureUnit_names + 38, 7}, 4 },
  { {GpuCounterDescriptor_MeasureUnit_names + 45, 8}, 10 },
  { {GpuCounterDescriptor_MeasureUnit_names + 53, 9}, 16 },
  { {GpuCounterDescriptor_MeasureUnit_names + 62, 5}, 13 },
  { {GpuCounterDescriptor_MeasureUnit_names + 67, 4}, 24 },
  { {GpuCounterDescriptor_MeasureUnit_names + 71, 11}, 40 },
  { {GpuCounterDescriptor_MeasureUnit_names + 82, 5}, 31 },
  { {GpuCounterDescriptor_MeasureUnit_names + 87, 6}, 36 },
  { {GpuCounterDescriptor_MeasureUnit_names + 93, 7}, 2 },
  { {GpuCounterDescriptor_MeasureUnit_names + 100, 8}, 8 },
  { {GpuCounterDescriptor_MeasureUnit_names + 108, 9}, 14 },
  { {GpuCounterDescriptor_MeasureUnit_names + 117, 8}, 30 },
  { {GpuCounterDescriptor_MeasureUnit_names + 125, 7}, 3 },
  { {GpuCounterDescriptor_MeasureUnit_names + 132, 8}, 9 },
  { {GpuCounterDescriptor_MeasureUnit_names + 140, 9}, 15 },
  { {GpuCounterDescriptor_MeasureUnit_names + 149, 11}, 20 },
  { {GpuCounterDescriptor_MeasureUnit_names + 160, 11}, 21 },
  { {GpuCounterDescriptor_MeasureUnit_names + 171, 9}, 28 },
  { {GpuCounterDescriptor_MeasureUnit_names + 180, 6}, 23 },
  { {GpuCounterDescriptor_MeasureUnit_names + 186, 10}, 19 },
  { {GpuCounterDescriptor_MeasureUnit_names + 196, 4}, 0 },
  { {GpuCounterDescriptor_MeasureUnit_names + 200, 7}, 37 },
  { {GpuCounterDescriptor_MeasureUnit_names + 207, 7}, 6 },
  { {GpuCounterDescriptor_MeasureUnit_names + 214, 8}, 12 },
  { {GpuCounterDescriptor_MeasureUnit_names + 222, 9}, 18 },
  { {GpuCounterDescriptor_MeasureUnit_names + 231, 5}, 26 },
  { {GpuCounterDescriptor_MeasureUnit_names + 236, 9}, 38 },
  { {GpuCounterDescriptor_MeasureUnit_names + 245, 6}, 22 },
  { {GpuCounterDescriptor_MeasureUnit_names + 251, 7}, 5 },
  { {GpuCounterDescriptor_MeasureUnit_names + 258, 8}, 11 },
  { {GpuCounterDescriptor_MeasureUnit_names + 266, 9}, 17 },
  { {GpuCounterDescriptor_MeasureUnit_names + 275, 8}, 27 },
  { {GpuCounterDescriptor_MeasureUnit_names + 283, 6}, 25 },
  { {GpuCounterDescriptor_MeasureUnit_names + 289, 4}, 32 },
  { {GpuCounterDescriptor_MeasureUnit_names + 293, 4}, 29 },
};

static const int GpuCounterDescriptor_MeasureUnit_entries_by_number[] = {
  26, // 0 -> NONE
  1, // 1 -> BIT
  14, // 2 -> KILOBIT
  18, // 3 -> MEGABIT
  6, // 4 -> GIGABIT
  34, // 5 -> TERABIT
  28, // 6 -> PETABIT
  2, // 7 -> BYTE
  15, // 8 -> KILOBYTE
  19, // 9 -> MEGABYTE
  7, // 10 -> GIGABYTE
  35, // 11 -> TERABYTE
  29, // 12 -> PETABYTE
  9, // 13 -> HERTZ
  16, // 14 -> KILOHERTZ
  20, // 15 -> MEGAHERTZ
  8, // 16 -> GIGAHERTZ
  36, // 17 -> TERAHERTZ
  30, // 18 -> PETAHERTZ
  25, // 19 -> NANOSECOND
  21, // 20 -> MICROSECOND
  22, // 21 -> MILLISECOND
  33, // 22 -> SECOND
  24, // 23 -> MINUTE
  10, // 24 -> HOUR
  38, // 25 -> VERTEX
  31, // 26 -> PIXEL
  37, // 27 -> TRIANGLE
  23, // 28 -> MILLIWATT
  40, // 29 -> WATT
  17, // 30 -> KILOWATT
  12, // 31 -> JOULE
  39, // 32 -> VOLT
  0, // 33 -> AMPERE
  3, // 34 -> CELSIUS
  4, // 35 -> FAHRENHEIT
  13, // 36 -> KELVIN
  27, // 37 -> PERCENT
  32, // 38 -> PRIMITIVE
  5, // 39 -> FRAGMENT
  11, // 40 -> INSTRUCTION
};

const std::string& GpuCounterDescriptor_MeasureUnit_Name(
    GpuCounterDescriptor_MeasureUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuCounterDescriptor_MeasureUnit_entries,
          GpuCounterDescriptor_MeasureUnit_entries_by_number,
          41, GpuCounterDescriptor_MeasureUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuCounterDescriptor_MeasureUnit_entries,
      GpuCounterDescriptor_MeasureUnit_entries_by_number,
      41, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuCounterDescriptor_MeasureUnit_strings[idx].get();
}
bool GpuCounterDescriptor_MeasureUnit_Parse(
    const std::string& name, GpuCounterDescriptor_MeasureUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuCounterDescriptor_MeasureUnit_entries, 41, name, &int_value);
  if (success) {
    *value = static_cast<GpuCounterDescriptor_MeasureUnit>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NONE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NANOSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MICROSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLISECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::SECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MINUTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HOUR;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VERTEX;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PIXEL;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TRIANGLE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PRIMITIVE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FRAGMENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLIWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::WATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::JOULE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VOLT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::AMPERE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::CELSIUS;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FAHRENHEIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KELVIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PERCENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::INSTRUCTION;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MAX;
constexpr int GpuCounterDescriptor::MeasureUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GpuCounterDescriptor_GpuCounterSpec::InitAsDefaultInstance() {
}
class GpuCounterDescriptor_GpuCounterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterSpec>()._has_bits_);
  static void set_has_counter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_select_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}
GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      numerator_units_(from.numerator_units_),
      denominator_units_(from.denominator_units_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&counter_id_, &from.counter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_by_default_) -
    reinterpret_cast<char*>(&counter_id_)) + sizeof(select_by_default_));
  clear_has_peak_value();
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      set_int_peak_value(from.int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      set_double_peak_value(from.double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}

void GpuCounterDescriptor_GpuCounterSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&counter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_by_default_) -
      reinterpret_cast<char*>(&counter_id_)) + sizeof(select_by_default_));
  clear_has_peak_value();
}

GpuCounterDescriptor_GpuCounterSpec::~GpuCounterDescriptor_GpuCounterSpec() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  SharedDtor();
}

void GpuCounterDescriptor_GpuCounterSpec::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_peak_value()) {
    clear_peak_value();
  }
}

void GpuCounterDescriptor_GpuCounterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterDescriptor_GpuCounterSpec& GpuCounterDescriptor_GpuCounterSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterDescriptor_GpuCounterSpec_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterDescriptor_GpuCounterSpec::clear_peak_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  switch (peak_value_case()) {
    case kIntPeakValue: {
      // No need to clear
      break;
    }
    case kDoublePeakValue: {
      // No need to clear
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PEAK_VALUE_NOT_SET;
}


void GpuCounterDescriptor_GpuCounterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numerator_units_.Clear();
  denominator_units_.Clear();
  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&counter_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&select_by_default_) -
        reinterpret_cast<char*>(&counter_id_)) + sizeof(select_by_default_));
  }
  clear_peak_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterDescriptor_GpuCounterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_counter_id(&has_bits);
          counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int_peak_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_int_peak_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_peak_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          set_double_peak_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(val))) {
              add_numerator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 56);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_numerator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(val))) {
              add_denominator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_denominator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool select_by_default = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_select_by_default(&has_bits);
          select_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(val))) {
              add_groups(static_cast<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 80);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_groups(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterDescriptor_GpuCounterSpec::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 counter_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_counter_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int_peak_value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_peak_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_value_.int_peak_value_)));
          set_has_int_peak_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_peak_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          clear_peak_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_value_.double_peak_value_)));
          set_has_double_peak_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value)) {
            add_numerator_units(static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 7,
                 ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid,
                 &unknown_fields_stream,
                 this->mutable_numerator_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value)) {
            add_denominator_units(static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid,
                 &unknown_fields_stream,
                 this->mutable_denominator_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool select_by_default = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_select_by_default(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_by_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value)) {
            add_groups(static_cast< ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 10,
                 ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid,
                 &unknown_fields_stream,
                 this->mutable_groups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterDescriptor_GpuCounterSpec::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 counter_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->counter_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  switch (peak_value_case()) {
    case kIntPeakValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->int_peak_value(), output);
      break;
    case kDoublePeakValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->double_peak_value(), output);
      break;
    default: ;
  }
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  for (int i = 0, n = this->numerator_units_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->numerator_units(i), output);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  for (int i = 0, n = this->denominator_units_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->denominator_units(i), output);
  }

  // optional bool select_by_default = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->select_by_default(), output);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  for (int i = 0, n = this->groups_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->groups(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}

size_t GpuCounterDescriptor_GpuCounterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->numerator_units_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->numerator_units(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->denominator_units_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->denominator_units(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->groups_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->groups(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 counter_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->counter_id());
    }

    // optional bool select_by_default = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  switch (peak_value_case()) {
    // optional int64 int_peak_value = 5;
    case kIntPeakValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->int_peak_value());
      break;
    }
    // optional double double_peak_value = 6;
    case kDoublePeakValue: {
      total_size += 1 + 8;
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor_GpuCounterSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterDescriptor_GpuCounterSpec*>(
      &from));
}

void GpuCounterDescriptor_GpuCounterSpec::MergeFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numerator_units_.MergeFrom(from.numerator_units_);
  denominator_units_.MergeFrom(from.denominator_units_);
  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      counter_id_ = from.counter_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      select_by_default_ = from.select_by_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      set_int_peak_value(from.int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      set_double_peak_value(from.double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
}

void GpuCounterDescriptor_GpuCounterSpec::CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterSpec::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterSpec::InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  numerator_units_.InternalSwap(&other->numerator_units_);
  denominator_units_.InternalSwap(&other->denominator_units_);
  groups_.InternalSwap(&other->groups_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(counter_id_, other->counter_id_);
  swap(select_by_default_, other->select_by_default_);
  swap(peak_value_, other->peak_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GpuCounterDescriptor_GpuCounterSpec::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
}


// ===================================================================

void GpuCounterDescriptor_GpuCounterBlock::InitAsDefaultInstance() {
}
class GpuCounterDescriptor_GpuCounterBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterBlock>()._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}
GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      counter_ids_(from.counter_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_capacity_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(block_capacity_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}

void GpuCounterDescriptor_GpuCounterBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_capacity_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(block_capacity_));
}

GpuCounterDescriptor_GpuCounterBlock::~GpuCounterDescriptor_GpuCounterBlock() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  SharedDtor();
}

void GpuCounterDescriptor_GpuCounterBlock::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpuCounterDescriptor_GpuCounterBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterDescriptor_GpuCounterBlock& GpuCounterDescriptor_GpuCounterBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterDescriptor_GpuCounterBlock_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterDescriptor_GpuCounterBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counter_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&block_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_capacity_) -
        reinterpret_cast<char*>(&block_id_)) + sizeof(block_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterDescriptor_GpuCounterBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_block_id(&has_bits);
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_block_capacity(&has_bits);
          block_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 counter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_counter_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 40);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_counter_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterDescriptor_GpuCounterBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_block_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_capacity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_block_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 counter_ids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_counter_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterDescriptor_GpuCounterBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 block_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->block_id(), output);
  }

  // optional uint32 block_capacity = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->block_capacity(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // repeated uint32 counter_ids = 5;
  for (int i = 0, n = this->counter_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      5, this->counter_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}

size_t GpuCounterDescriptor_GpuCounterBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counter_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->counter_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->counter_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 block_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_id());
    }

    // optional uint32 block_capacity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_capacity());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor_GpuCounterBlock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterDescriptor_GpuCounterBlock*>(
      &from));
}

void GpuCounterDescriptor_GpuCounterBlock::MergeFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counter_ids_.MergeFrom(from.counter_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      block_id_ = from.block_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      block_capacity_ = from.block_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuCounterDescriptor_GpuCounterBlock::CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterBlock::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterBlock::InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counter_ids_.InternalSwap(&other->counter_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_id_, other->block_id_);
  swap(block_capacity_, other->block_capacity_);
}

std::string GpuCounterDescriptor_GpuCounterBlock::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
}


// ===================================================================

void GpuCounterDescriptor::InitAsDefaultInstance() {
}
class GpuCounterDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor>()._has_bits_);
  static void set_has_min_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_supports_instrumented_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GpuCounterDescriptor::GpuCounterDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.GpuCounterDescriptor)
}
GpuCounterDescriptor::GpuCounterDescriptor(const GpuCounterDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      specs_(from.specs_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_sampling_period_ns_, &from.min_sampling_period_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&supports_instrumented_sampling_) -
    reinterpret_cast<char*>(&min_sampling_period_ns_)) + sizeof(supports_instrumented_sampling_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor)
}

void GpuCounterDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base);
  ::memset(&min_sampling_period_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supports_instrumented_sampling_) -
      reinterpret_cast<char*>(&min_sampling_period_ns_)) + sizeof(supports_instrumented_sampling_));
}

GpuCounterDescriptor::~GpuCounterDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor)
  SharedDtor();
}

void GpuCounterDescriptor::SharedDtor() {
}

void GpuCounterDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuCounterDescriptor& GpuCounterDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuCounterDescriptor_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void GpuCounterDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specs_.Clear();
  blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&min_sampling_period_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supports_instrumented_sampling_) -
        reinterpret_cast<char*>(&min_sampling_period_ns_)) + sizeof(supports_instrumented_sampling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuCounterDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint64 min_sampling_period_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_sampling_period_ns(&has_bits);
          min_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_sampling_period_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_sampling_period_ns(&has_bits);
          max_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool supports_instrumented_sampling = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_supports_instrumented_sampling(&has_bits);
          supports_instrumented_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuCounterDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.GpuCounterDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_specs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_sampling_period_ns = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_min_sampling_period_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_sampling_period_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_sampling_period_ns = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_sampling_period_ns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_sampling_period_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool supports_instrumented_sampling = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_supports_instrumented_sampling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_instrumented_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.GpuCounterDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.GpuCounterDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuCounterDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.GpuCounterDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->specs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->specs(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->blocks(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_sampling_period_ns = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->min_sampling_period_ns(), output);
  }

  // optional uint64 max_sampling_period_ns = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->max_sampling_period_ns(), output);
  }

  // optional bool supports_instrumented_sampling = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->supports_instrumented_sampling(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.GpuCounterDescriptor)
}

size_t GpuCounterDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->specs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->specs(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blocks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 min_sampling_period_ns = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->min_sampling_period_ns());
    }

    // optional uint64 max_sampling_period_ns = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_sampling_period_ns());
    }

    // optional bool supports_instrumented_sampling = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuCounterDescriptor*>(
      &from));
}

void GpuCounterDescriptor::MergeFrom(const GpuCounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specs_.MergeFrom(from.specs_);
  blocks_.MergeFrom(from.blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      min_sampling_period_ns_ = from.min_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_sampling_period_ns_ = from.max_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      supports_instrumented_sampling_ = from.supports_instrumented_sampling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuCounterDescriptor::CopyFrom(const GpuCounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor::InternalSwap(GpuCounterDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&specs_)->InternalSwap(CastToBase(&other->specs_));
  CastToBase(&blocks_)->InternalSwap(CastToBase(&other->blocks_));
  swap(min_sampling_period_ns_, other->min_sampling_period_ns_);
  swap(max_sampling_period_ns_, other->max_sampling_period_ns_);
  swap(supports_instrumented_sampling_, other->supports_instrumented_sampling_);
}

std::string GpuCounterDescriptor::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::GpuCounterDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
