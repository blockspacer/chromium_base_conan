// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/tracing_service_state.proto

#include "protos/perfetto/common/tracing_service_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fdata_5fsource_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSourceDescriptor_protos_2fperfetto_2fcommon_2fdata_5fsource_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
namespace perfetto {
namespace protos {
class TracingServiceState_ProducerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_Producer> _instance;
} _TracingServiceState_Producer_default_instance_;
class TracingServiceState_DataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_DataSource> _instance;
} _TracingServiceState_DataSource_default_instance_;
class TracingServiceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState> _instance;
} _TracingServiceState_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {
      &scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base,
      &scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_DataSource_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_DataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceState_DataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {
      &scc_info_DataSourceDescriptor_protos_2fperfetto_2fcommon_2fdata_5fsource_5fdescriptor_2eproto.base,}};

static void InitDefaultsscc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_Producer_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_Producer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceState_Producer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void TracingServiceState_Producer::InitAsDefaultInstance() {
}
class TracingServiceState_Producer::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_Producer>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TracingServiceState_Producer::TracingServiceState_Producer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceState.Producer)
}
TracingServiceState_Producer::TracingServiceState_Producer(const TracingServiceState_Producer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.Producer)
}

void TracingServiceState_Producer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(uid_));
}

TracingServiceState_Producer::~TracingServiceState_Producer() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.Producer)
  SharedDtor();
}

void TracingServiceState_Producer::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TracingServiceState_Producer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_Producer& TracingServiceState_Producer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_Producer::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.Producer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceState_Producer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceState_Producer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceState.Producer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceState.Producer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceState.Producer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceState_Producer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceState.Producer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceState.Producer)
}

size_t TracingServiceState_Producer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.Producer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_Producer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_Producer*>(
      &from));
}

void TracingServiceState_Producer::MergeFrom(const TracingServiceState_Producer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.Producer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_Producer::CopyFrom(const TracingServiceState_Producer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.Producer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_Producer::IsInitialized() const {
  return true;
}

void TracingServiceState_Producer::InternalSwap(TracingServiceState_Producer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(uid_, other->uid_);
}

std::string TracingServiceState_Producer::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.Producer";
}


// ===================================================================

void TracingServiceState_DataSource::InitAsDefaultInstance() {
  ::perfetto::protos::_TracingServiceState_DataSource_default_instance_._instance.get_mutable()->ds_descriptor_ = const_cast< ::perfetto::protos::DataSourceDescriptor*>(
      ::perfetto::protos::DataSourceDescriptor::internal_default_instance());
}
class TracingServiceState_DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_DataSource>()._has_bits_);
  static const ::perfetto::protos::DataSourceDescriptor& ds_descriptor(const TracingServiceState_DataSource* msg);
  static void set_has_ds_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::DataSourceDescriptor&
TracingServiceState_DataSource::_Internal::ds_descriptor(const TracingServiceState_DataSource* msg) {
  return *msg->ds_descriptor_;
}
void TracingServiceState_DataSource::clear_ds_descriptor() {
  if (ds_descriptor_ != nullptr) ds_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TracingServiceState_DataSource::TracingServiceState_DataSource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceState.DataSource)
}
TracingServiceState_DataSource::TracingServiceState_DataSource(const TracingServiceState_DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ds_descriptor()) {
    ds_descriptor_ = new ::perfetto::protos::DataSourceDescriptor(*from.ds_descriptor_);
  } else {
    ds_descriptor_ = nullptr;
  }
  producer_id_ = from.producer_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.DataSource)
}

void TracingServiceState_DataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  ::memset(&ds_descriptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&producer_id_) -
      reinterpret_cast<char*>(&ds_descriptor_)) + sizeof(producer_id_));
}

TracingServiceState_DataSource::~TracingServiceState_DataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.DataSource)
  SharedDtor();
}

void TracingServiceState_DataSource::SharedDtor() {
  if (this != internal_default_instance()) delete ds_descriptor_;
}

void TracingServiceState_DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_DataSource& TracingServiceState_DataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ds_descriptor_ != nullptr);
    ds_descriptor_->Clear();
  }
  producer_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceState_DataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ds_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 producer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_producer_id(&has_bits);
          producer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceState_DataSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceState.DataSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ds_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 producer_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_producer_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &producer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceState.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceState.DataSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceState_DataSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceState.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::ds_descriptor(this), output);
  }

  // optional int32 producer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->producer_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceState.DataSource)
}

size_t TracingServiceState_DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.DataSource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ds_descriptor_);
    }

    // optional int32 producer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->producer_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_DataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_DataSource*>(
      &from));
}

void TracingServiceState_DataSource::MergeFrom(const TracingServiceState_DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ds_descriptor()->::perfetto::protos::DataSourceDescriptor::MergeFrom(from.ds_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      producer_id_ = from.producer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_DataSource::CopyFrom(const TracingServiceState_DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_DataSource::IsInitialized() const {
  return true;
}

void TracingServiceState_DataSource::InternalSwap(TracingServiceState_DataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ds_descriptor_, other->ds_descriptor_);
  swap(producer_id_, other->producer_id_);
}

std::string TracingServiceState_DataSource::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.DataSource";
}


// ===================================================================

void TracingServiceState::InitAsDefaultInstance() {
}
class TracingServiceState::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState>()._has_bits_);
  static void set_has_num_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_sessions_started(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TracingServiceState::TracingServiceState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceState)
}
TracingServiceState::TracingServiceState(const TracingServiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      producers_(from.producers_),
      data_sources_(from.data_sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_sessions_, &from.num_sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sessions_started_) -
    reinterpret_cast<char*>(&num_sessions_)) + sizeof(num_sessions_started_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState)
}

void TracingServiceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  ::memset(&num_sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_started_) -
      reinterpret_cast<char*>(&num_sessions_)) + sizeof(num_sessions_started_));
}

TracingServiceState::~TracingServiceState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState)
  SharedDtor();
}

void TracingServiceState::SharedDtor() {
}

void TracingServiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState& TracingServiceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producers_.Clear();
  data_sources_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sessions_started_) -
        reinterpret_cast<char*>(&num_sessions_)) + sizeof(num_sessions_started_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_producers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_sessions(&has_bits);
          num_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sessions_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_sessions_started(&has_bits);
          num_sessions_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_producers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sessions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_sessions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sessions_started = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_sessions_started(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sessions_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->producers(static_cast<int>(i)),
      output);
  }

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_sources_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->data_sources(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_sessions = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_sessions(), output);
  }

  // optional int32 num_sessions_started = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_sessions_started(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceState)
}

size_t TracingServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->producers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->producers(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data_sources(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 num_sessions = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sessions());
    }

    // optional int32 num_sessions_started = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sessions_started());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState*>(
      &from));
}

void TracingServiceState::MergeFrom(const TracingServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  producers_.MergeFrom(from.producers_);
  data_sources_.MergeFrom(from.data_sources_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_sessions_ = from.num_sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_sessions_started_ = from.num_sessions_started_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState::CopyFrom(const TracingServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState::IsInitialized() const {
  return true;
}

void TracingServiceState::InternalSwap(TracingServiceState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&producers_)->InternalSwap(CastToBase(&other->producers_));
  CastToBase(&data_sources_)->InternalSwap(CastToBase(&other->data_sources_));
  swap(num_sessions_, other->num_sessions_);
  swap(num_sessions_started_, other->num_sessions_started_);
}

std::string TracingServiceState::GetTypeName() const {
  return "perfetto.protos.TracingServiceState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_Producer* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_Producer >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceState_Producer >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_DataSource* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_DataSource >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceState_DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
