// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/trace_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class TraceStats;
class TraceStatsDefaultTypeInternal;
extern TraceStatsDefaultTypeInternal _TraceStats_default_instance_;
class TraceStats_BufferStats;
class TraceStats_BufferStatsDefaultTypeInternal;
extern TraceStats_BufferStatsDefaultTypeInternal _TraceStats_BufferStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TraceStats* Arena::CreateMaybeMessage<::perfetto::protos::TraceStats>(Arena*);
template<> ::perfetto::protos::TraceStats_BufferStats* Arena::CreateMaybeMessage<::perfetto::protos::TraceStats_BufferStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TraceStats_BufferStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceStats.BufferStats) */ {
 public:
  TraceStats_BufferStats();
  virtual ~TraceStats_BufferStats();

  TraceStats_BufferStats(const TraceStats_BufferStats& from);
  TraceStats_BufferStats(TraceStats_BufferStats&& from) noexcept
    : TraceStats_BufferStats() {
    *this = ::std::move(from);
  }

  inline TraceStats_BufferStats& operator=(const TraceStats_BufferStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStats_BufferStats& operator=(TraceStats_BufferStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceStats_BufferStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceStats_BufferStats* internal_default_instance() {
    return reinterpret_cast<const TraceStats_BufferStats*>(
               &_TraceStats_BufferStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceStats_BufferStats& a, TraceStats_BufferStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceStats_BufferStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceStats_BufferStats* New() const final {
    return CreateMaybeMessage<TraceStats_BufferStats>(nullptr);
  }

  TraceStats_BufferStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceStats_BufferStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceStats_BufferStats& from);
  void MergeFrom(const TraceStats_BufferStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceStats_BufferStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceStats.BufferStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesWrittenFieldNumber = 1,
    kChunksWrittenFieldNumber = 2,
    kChunksOverwrittenFieldNumber = 3,
    kWriteWrapCountFieldNumber = 4,
    kPatchesSucceededFieldNumber = 5,
    kPatchesFailedFieldNumber = 6,
    kReadaheadsSucceededFieldNumber = 7,
    kReadaheadsFailedFieldNumber = 8,
    kAbiViolationsFieldNumber = 9,
    kChunksRewrittenFieldNumber = 10,
    kChunksCommittedOutOfOrderFieldNumber = 11,
    kBufferSizeFieldNumber = 12,
    kBytesOverwrittenFieldNumber = 13,
    kBytesReadFieldNumber = 14,
    kPaddingBytesWrittenFieldNumber = 15,
    kPaddingBytesClearedFieldNumber = 16,
    kChunksReadFieldNumber = 17,
    kChunksDiscardedFieldNumber = 18,
    kTraceWriterPacketLossFieldNumber = 19,
  };
  // optional uint64 bytes_written = 1;
  bool has_bytes_written() const;
  void clear_bytes_written();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_written() const;
  void set_bytes_written(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chunks_written = 2;
  bool has_chunks_written() const;
  void clear_chunks_written();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_written() const;
  void set_chunks_written(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chunks_overwritten = 3;
  bool has_chunks_overwritten() const;
  void clear_chunks_overwritten();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_overwritten() const;
  void set_chunks_overwritten(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 write_wrap_count = 4;
  bool has_write_wrap_count() const;
  void clear_write_wrap_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 write_wrap_count() const;
  void set_write_wrap_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 patches_succeeded = 5;
  bool has_patches_succeeded() const;
  void clear_patches_succeeded();
  ::PROTOBUF_NAMESPACE_ID::uint64 patches_succeeded() const;
  void set_patches_succeeded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 patches_failed = 6;
  bool has_patches_failed() const;
  void clear_patches_failed();
  ::PROTOBUF_NAMESPACE_ID::uint64 patches_failed() const;
  void set_patches_failed(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 readaheads_succeeded = 7;
  bool has_readaheads_succeeded() const;
  void clear_readaheads_succeeded();
  ::PROTOBUF_NAMESPACE_ID::uint64 readaheads_succeeded() const;
  void set_readaheads_succeeded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 readaheads_failed = 8;
  bool has_readaheads_failed() const;
  void clear_readaheads_failed();
  ::PROTOBUF_NAMESPACE_ID::uint64 readaheads_failed() const;
  void set_readaheads_failed(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 abi_violations = 9;
  bool has_abi_violations() const;
  void clear_abi_violations();
  ::PROTOBUF_NAMESPACE_ID::uint64 abi_violations() const;
  void set_abi_violations(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chunks_rewritten = 10;
  bool has_chunks_rewritten() const;
  void clear_chunks_rewritten();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_rewritten() const;
  void set_chunks_rewritten(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chunks_committed_out_of_order = 11;
  bool has_chunks_committed_out_of_order() const;
  void clear_chunks_committed_out_of_order();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_committed_out_of_order() const;
  void set_chunks_committed_out_of_order(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 buffer_size = 12;
  bool has_buffer_size() const;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bytes_overwritten = 13;
  bool has_bytes_overwritten() const;
  void clear_bytes_overwritten();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_overwritten() const;
  void set_bytes_overwritten(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bytes_read = 14;
  bool has_bytes_read() const;
  void clear_bytes_read();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_read() const;
  void set_bytes_read(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 padding_bytes_written = 15;
  bool has_padding_bytes_written() const;
  void clear_padding_bytes_written();
  ::PROTOBUF_NAMESPACE_ID::uint64 padding_bytes_written() const;
  void set_padding_bytes_written(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 padding_bytes_cleared = 16;
  bool has_padding_bytes_cleared() const;
  void clear_padding_bytes_cleared();
  ::PROTOBUF_NAMESPACE_ID::uint64 padding_bytes_cleared() const;
  void set_padding_bytes_cleared(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chunks_read = 17;
  bool has_chunks_read() const;
  void clear_chunks_read();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_read() const;
  void set_chunks_read(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chunks_discarded = 18;
  bool has_chunks_discarded() const;
  void clear_chunks_discarded();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_discarded() const;
  void set_chunks_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 trace_writer_packet_loss = 19;
  bool has_trace_writer_packet_loss() const;
  void clear_trace_writer_packet_loss();
  ::PROTOBUF_NAMESPACE_ID::uint64 trace_writer_packet_loss() const;
  void set_trace_writer_packet_loss(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceStats.BufferStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_written_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_written_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_overwritten_;
  ::PROTOBUF_NAMESPACE_ID::uint64 write_wrap_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 patches_succeeded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 patches_failed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 readaheads_succeeded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 readaheads_failed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 abi_violations_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_rewritten_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_committed_out_of_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_overwritten_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_read_;
  ::PROTOBUF_NAMESPACE_ID::uint64 padding_bytes_written_;
  ::PROTOBUF_NAMESPACE_ID::uint64 padding_bytes_cleared_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_read_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_discarded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trace_writer_packet_loss_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
};
// -------------------------------------------------------------------

class TraceStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceStats) */ {
 public:
  TraceStats();
  virtual ~TraceStats();

  TraceStats(const TraceStats& from);
  TraceStats(TraceStats&& from) noexcept
    : TraceStats() {
    *this = ::std::move(from);
  }

  inline TraceStats& operator=(const TraceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStats& operator=(TraceStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceStats* internal_default_instance() {
    return reinterpret_cast<const TraceStats*>(
               &_TraceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceStats& a, TraceStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceStats* New() const final {
    return CreateMaybeMessage<TraceStats>(nullptr);
  }

  TraceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceStats& from);
  void MergeFrom(const TraceStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TraceStats_BufferStats BufferStats;

  // accessors -------------------------------------------------------

  enum : int {
    kBufferStatsFieldNumber = 1,
    kProducersSeenFieldNumber = 3,
    kProducersConnectedFieldNumber = 2,
    kDataSourcesRegisteredFieldNumber = 4,
    kDataSourcesSeenFieldNumber = 5,
    kTracingSessionsFieldNumber = 6,
    kTotalBuffersFieldNumber = 7,
    kChunksDiscardedFieldNumber = 8,
    kPatchesDiscardedFieldNumber = 9,
    kInvalidPacketsFieldNumber = 10,
  };
  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  int buffer_stats_size() const;
  void clear_buffer_stats();
  ::perfetto::protos::TraceStats_BufferStats* mutable_buffer_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >*
      mutable_buffer_stats();
  const ::perfetto::protos::TraceStats_BufferStats& buffer_stats(int index) const;
  ::perfetto::protos::TraceStats_BufferStats* add_buffer_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >&
      buffer_stats() const;

  // optional uint64 producers_seen = 3;
  bool has_producers_seen() const;
  void clear_producers_seen();
  ::PROTOBUF_NAMESPACE_ID::uint64 producers_seen() const;
  void set_producers_seen(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 producers_connected = 2;
  bool has_producers_connected() const;
  void clear_producers_connected();
  ::PROTOBUF_NAMESPACE_ID::uint32 producers_connected() const;
  void set_producers_connected(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 data_sources_registered = 4;
  bool has_data_sources_registered() const;
  void clear_data_sources_registered();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_sources_registered() const;
  void set_data_sources_registered(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 data_sources_seen = 5;
  bool has_data_sources_seen() const;
  void clear_data_sources_seen();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_sources_seen() const;
  void set_data_sources_seen(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 tracing_sessions = 6;
  bool has_tracing_sessions() const;
  void clear_tracing_sessions();
  ::PROTOBUF_NAMESPACE_ID::uint32 tracing_sessions() const;
  void set_tracing_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 total_buffers = 7;
  bool has_total_buffers() const;
  void clear_total_buffers();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_buffers() const;
  void set_total_buffers(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 chunks_discarded = 8;
  bool has_chunks_discarded() const;
  void clear_chunks_discarded();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_discarded() const;
  void set_chunks_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 patches_discarded = 9;
  bool has_patches_discarded() const;
  void clear_patches_discarded();
  ::PROTOBUF_NAMESPACE_ID::uint64 patches_discarded() const;
  void set_patches_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 invalid_packets = 10;
  bool has_invalid_packets() const;
  void clear_invalid_packets();
  ::PROTOBUF_NAMESPACE_ID::uint64 invalid_packets() const;
  void set_invalid_packets(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats > buffer_stats_;
  ::PROTOBUF_NAMESPACE_ID::uint64 producers_seen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 producers_connected_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_sources_registered_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_sources_seen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tracing_sessions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_buffers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_discarded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 patches_discarded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invalid_packets_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceStats_BufferStats

// optional uint64 buffer_size = 12;
inline bool TraceStats_BufferStats::has_buffer_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TraceStats_BufferStats::clear_buffer_size() {
  buffer_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::buffer_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.buffer_size)
  return buffer_size_;
}
inline void TraceStats_BufferStats::set_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  buffer_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.buffer_size)
}

// optional uint64 bytes_written = 1;
inline bool TraceStats_BufferStats::has_bytes_written() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceStats_BufferStats::clear_bytes_written() {
  bytes_written_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::bytes_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_written)
  return bytes_written_;
}
inline void TraceStats_BufferStats::set_bytes_written(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_written)
}

// optional uint64 bytes_overwritten = 13;
inline bool TraceStats_BufferStats::has_bytes_overwritten() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TraceStats_BufferStats::clear_bytes_overwritten() {
  bytes_overwritten_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::bytes_overwritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_overwritten)
  return bytes_overwritten_;
}
inline void TraceStats_BufferStats::set_bytes_overwritten(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  bytes_overwritten_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_overwritten)
}

// optional uint64 bytes_read = 14;
inline bool TraceStats_BufferStats::has_bytes_read() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TraceStats_BufferStats::clear_bytes_read() {
  bytes_read_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::bytes_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_read)
  return bytes_read_;
}
inline void TraceStats_BufferStats::set_bytes_read(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_read)
}

// optional uint64 padding_bytes_written = 15;
inline bool TraceStats_BufferStats::has_padding_bytes_written() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TraceStats_BufferStats::clear_padding_bytes_written() {
  padding_bytes_written_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::padding_bytes_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.padding_bytes_written)
  return padding_bytes_written_;
}
inline void TraceStats_BufferStats::set_padding_bytes_written(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  padding_bytes_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.padding_bytes_written)
}

// optional uint64 padding_bytes_cleared = 16;
inline bool TraceStats_BufferStats::has_padding_bytes_cleared() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TraceStats_BufferStats::clear_padding_bytes_cleared() {
  padding_bytes_cleared_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::padding_bytes_cleared() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.padding_bytes_cleared)
  return padding_bytes_cleared_;
}
inline void TraceStats_BufferStats::set_padding_bytes_cleared(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  padding_bytes_cleared_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.padding_bytes_cleared)
}

// optional uint64 chunks_written = 2;
inline bool TraceStats_BufferStats::has_chunks_written() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceStats_BufferStats::clear_chunks_written() {
  chunks_written_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::chunks_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_written)
  return chunks_written_;
}
inline void TraceStats_BufferStats::set_chunks_written(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  chunks_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_written)
}

// optional uint64 chunks_rewritten = 10;
inline bool TraceStats_BufferStats::has_chunks_rewritten() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TraceStats_BufferStats::clear_chunks_rewritten() {
  chunks_rewritten_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::chunks_rewritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_rewritten)
  return chunks_rewritten_;
}
inline void TraceStats_BufferStats::set_chunks_rewritten(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  chunks_rewritten_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_rewritten)
}

// optional uint64 chunks_overwritten = 3;
inline bool TraceStats_BufferStats::has_chunks_overwritten() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceStats_BufferStats::clear_chunks_overwritten() {
  chunks_overwritten_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::chunks_overwritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_overwritten)
  return chunks_overwritten_;
}
inline void TraceStats_BufferStats::set_chunks_overwritten(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  chunks_overwritten_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_overwritten)
}

// optional uint64 chunks_discarded = 18;
inline bool TraceStats_BufferStats::has_chunks_discarded() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TraceStats_BufferStats::clear_chunks_discarded() {
  chunks_discarded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::chunks_discarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_discarded)
  return chunks_discarded_;
}
inline void TraceStats_BufferStats::set_chunks_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  chunks_discarded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_discarded)
}

// optional uint64 chunks_read = 17;
inline bool TraceStats_BufferStats::has_chunks_read() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TraceStats_BufferStats::clear_chunks_read() {
  chunks_read_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::chunks_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_read)
  return chunks_read_;
}
inline void TraceStats_BufferStats::set_chunks_read(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  chunks_read_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_read)
}

// optional uint64 chunks_committed_out_of_order = 11;
inline bool TraceStats_BufferStats::has_chunks_committed_out_of_order() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TraceStats_BufferStats::clear_chunks_committed_out_of_order() {
  chunks_committed_out_of_order_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::chunks_committed_out_of_order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_committed_out_of_order)
  return chunks_committed_out_of_order_;
}
inline void TraceStats_BufferStats::set_chunks_committed_out_of_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  chunks_committed_out_of_order_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_committed_out_of_order)
}

// optional uint64 write_wrap_count = 4;
inline bool TraceStats_BufferStats::has_write_wrap_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceStats_BufferStats::clear_write_wrap_count() {
  write_wrap_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::write_wrap_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.write_wrap_count)
  return write_wrap_count_;
}
inline void TraceStats_BufferStats::set_write_wrap_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  write_wrap_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.write_wrap_count)
}

// optional uint64 patches_succeeded = 5;
inline bool TraceStats_BufferStats::has_patches_succeeded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceStats_BufferStats::clear_patches_succeeded() {
  patches_succeeded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::patches_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.patches_succeeded)
  return patches_succeeded_;
}
inline void TraceStats_BufferStats::set_patches_succeeded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  patches_succeeded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.patches_succeeded)
}

// optional uint64 patches_failed = 6;
inline bool TraceStats_BufferStats::has_patches_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TraceStats_BufferStats::clear_patches_failed() {
  patches_failed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::patches_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.patches_failed)
  return patches_failed_;
}
inline void TraceStats_BufferStats::set_patches_failed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  patches_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.patches_failed)
}

// optional uint64 readaheads_succeeded = 7;
inline bool TraceStats_BufferStats::has_readaheads_succeeded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TraceStats_BufferStats::clear_readaheads_succeeded() {
  readaheads_succeeded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::readaheads_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.readaheads_succeeded)
  return readaheads_succeeded_;
}
inline void TraceStats_BufferStats::set_readaheads_succeeded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  readaheads_succeeded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.readaheads_succeeded)
}

// optional uint64 readaheads_failed = 8;
inline bool TraceStats_BufferStats::has_readaheads_failed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TraceStats_BufferStats::clear_readaheads_failed() {
  readaheads_failed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::readaheads_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.readaheads_failed)
  return readaheads_failed_;
}
inline void TraceStats_BufferStats::set_readaheads_failed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  readaheads_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.readaheads_failed)
}

// optional uint64 abi_violations = 9;
inline bool TraceStats_BufferStats::has_abi_violations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TraceStats_BufferStats::clear_abi_violations() {
  abi_violations_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::abi_violations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.abi_violations)
  return abi_violations_;
}
inline void TraceStats_BufferStats::set_abi_violations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  abi_violations_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.abi_violations)
}

// optional uint64 trace_writer_packet_loss = 19;
inline bool TraceStats_BufferStats::has_trace_writer_packet_loss() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TraceStats_BufferStats::clear_trace_writer_packet_loss() {
  trace_writer_packet_loss_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats_BufferStats::trace_writer_packet_loss() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.trace_writer_packet_loss)
  return trace_writer_packet_loss_;
}
inline void TraceStats_BufferStats::set_trace_writer_packet_loss(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  trace_writer_packet_loss_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.trace_writer_packet_loss)
}

// -------------------------------------------------------------------

// TraceStats

// repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
inline int TraceStats::buffer_stats_size() const {
  return buffer_stats_.size();
}
inline void TraceStats::clear_buffer_stats() {
  buffer_stats_.Clear();
}
inline ::perfetto::protos::TraceStats_BufferStats* TraceStats::mutable_buffer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >*
TraceStats::mutable_buffer_stats() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.buffer_stats)
  return &buffer_stats_;
}
inline const ::perfetto::protos::TraceStats_BufferStats& TraceStats::buffer_stats(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_.Get(index);
}
inline ::perfetto::protos::TraceStats_BufferStats* TraceStats::add_buffer_stats() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >&
TraceStats::buffer_stats() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_;
}

// optional uint32 producers_connected = 2;
inline bool TraceStats::has_producers_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceStats::clear_producers_connected() {
  producers_connected_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceStats::producers_connected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.producers_connected)
  return producers_connected_;
}
inline void TraceStats::set_producers_connected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  producers_connected_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.producers_connected)
}

// optional uint64 producers_seen = 3;
inline bool TraceStats::has_producers_seen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceStats::clear_producers_seen() {
  producers_seen_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats::producers_seen() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.producers_seen)
  return producers_seen_;
}
inline void TraceStats::set_producers_seen(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  producers_seen_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.producers_seen)
}

// optional uint32 data_sources_registered = 4;
inline bool TraceStats::has_data_sources_registered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceStats::clear_data_sources_registered() {
  data_sources_registered_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceStats::data_sources_registered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.data_sources_registered)
  return data_sources_registered_;
}
inline void TraceStats::set_data_sources_registered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_sources_registered_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.data_sources_registered)
}

// optional uint64 data_sources_seen = 5;
inline bool TraceStats::has_data_sources_seen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceStats::clear_data_sources_seen() {
  data_sources_seen_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats::data_sources_seen() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.data_sources_seen)
  return data_sources_seen_;
}
inline void TraceStats::set_data_sources_seen(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  data_sources_seen_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.data_sources_seen)
}

// optional uint32 tracing_sessions = 6;
inline bool TraceStats::has_tracing_sessions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceStats::clear_tracing_sessions() {
  tracing_sessions_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceStats::tracing_sessions() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.tracing_sessions)
  return tracing_sessions_;
}
inline void TraceStats::set_tracing_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tracing_sessions_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.tracing_sessions)
}

// optional uint32 total_buffers = 7;
inline bool TraceStats::has_total_buffers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TraceStats::clear_total_buffers() {
  total_buffers_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceStats::total_buffers() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.total_buffers)
  return total_buffers_;
}
inline void TraceStats::set_total_buffers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  total_buffers_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.total_buffers)
}

// optional uint64 chunks_discarded = 8;
inline bool TraceStats::has_chunks_discarded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TraceStats::clear_chunks_discarded() {
  chunks_discarded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats::chunks_discarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.chunks_discarded)
  return chunks_discarded_;
}
inline void TraceStats::set_chunks_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  chunks_discarded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.chunks_discarded)
}

// optional uint64 patches_discarded = 9;
inline bool TraceStats::has_patches_discarded() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TraceStats::clear_patches_discarded() {
  patches_discarded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats::patches_discarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.patches_discarded)
  return patches_discarded_;
}
inline void TraceStats::set_patches_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  patches_discarded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.patches_discarded)
}

// optional uint64 invalid_packets = 10;
inline bool TraceStats::has_invalid_packets() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TraceStats::clear_invalid_packets() {
  invalid_packets_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceStats::invalid_packets() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.invalid_packets)
  return invalid_packets_;
}
inline void TraceStats::set_invalid_packets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  invalid_packets_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.invalid_packets)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto
