// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/tracing_service_capabilities.proto

#include "protos/perfetto/common/tracing_service_capabilities.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class TracingServiceCapabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceCapabilities> _instance;
} _TracingServiceCapabilities_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TracingServiceCapabilities_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fcapabilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceCapabilities_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceCapabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TracingServiceCapabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceCapabilities_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fcapabilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TracingServiceCapabilities_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fcapabilities_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void TracingServiceCapabilities::InitAsDefaultInstance() {
}
class TracingServiceCapabilities::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceCapabilities>()._has_bits_);
  static void set_has_has_query_capabilities(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_trace_config_output_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TracingServiceCapabilities::TracingServiceCapabilities()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TracingServiceCapabilities)
}
TracingServiceCapabilities::TracingServiceCapabilities(const TracingServiceCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      observable_events_(from.observable_events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_query_capabilities_, &from.has_query_capabilities_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_trace_config_output_path_) -
    reinterpret_cast<char*>(&has_query_capabilities_)) + sizeof(has_trace_config_output_path_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceCapabilities)
}

void TracingServiceCapabilities::SharedCtor() {
  ::memset(&has_query_capabilities_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_trace_config_output_path_) -
      reinterpret_cast<char*>(&has_query_capabilities_)) + sizeof(has_trace_config_output_path_));
}

TracingServiceCapabilities::~TracingServiceCapabilities() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceCapabilities)
  SharedDtor();
}

void TracingServiceCapabilities::SharedDtor() {
}

void TracingServiceCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceCapabilities& TracingServiceCapabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceCapabilities_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fcapabilities_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observable_events_.Clear();
  ::memset(&has_query_capabilities_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_trace_config_output_path_) -
      reinterpret_cast<char*>(&has_query_capabilities_)) + sizeof(has_trace_config_output_path_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingServiceCapabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_query_capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_query_capabilities(&has_bits);
          has_query_capabilities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ObservableEvents.Type observable_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ObservableEvents_Type_IsValid(val))) {
              add_observable_events(static_cast<::perfetto::protos::ObservableEvents_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_observable_events(), ptr, ctx, ::perfetto::protos::ObservableEvents_Type_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_trace_config_output_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_trace_config_output_path(&has_bits);
          has_trace_config_output_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingServiceCapabilities::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TracingServiceCapabilities)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_query_capabilities = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_has_query_capabilities(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_query_capabilities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.ObservableEvents.Type observable_events = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ObservableEvents_Type_IsValid(value)) {
            add_observable_events(static_cast< ::perfetto::protos::ObservableEvents_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::perfetto::protos::ObservableEvents_Type_IsValid,
                 &unknown_fields_stream,
                 this->mutable_observable_events())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_trace_config_output_path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_has_trace_config_output_path(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_trace_config_output_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TracingServiceCapabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TracingServiceCapabilities)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingServiceCapabilities::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TracingServiceCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_query_capabilities = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->has_query_capabilities(), output);
  }

  // repeated .perfetto.protos.ObservableEvents.Type observable_events = 2;
  for (int i = 0, n = this->observable_events_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->observable_events(i), output);
  }

  // optional bool has_trace_config_output_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_trace_config_output_path(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TracingServiceCapabilities)
}

size_t TracingServiceCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceCapabilities)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ObservableEvents.Type observable_events = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->observable_events_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->observable_events(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool has_query_capabilities = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_trace_config_output_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceCapabilities::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceCapabilities*>(
      &from));
}

void TracingServiceCapabilities::MergeFrom(const TracingServiceCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observable_events_.MergeFrom(from.observable_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      has_query_capabilities_ = from.has_query_capabilities_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_trace_config_output_path_ = from.has_trace_config_output_path_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceCapabilities::CopyFrom(const TracingServiceCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceCapabilities::IsInitialized() const {
  return true;
}

void TracingServiceCapabilities::InternalSwap(TracingServiceCapabilities* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  observable_events_.InternalSwap(&other->observable_events_);
  swap(has_query_capabilities_, other->has_query_capabilities_);
  swap(has_trace_config_output_path_, other->has_trace_config_output_path_);
}

std::string TracingServiceCapabilities::GetTypeName() const {
  return "perfetto.protos.TracingServiceCapabilities";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceCapabilities* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceCapabilities >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TracingServiceCapabilities >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
