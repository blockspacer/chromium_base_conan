// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/gpu_counter_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class GpuCounterDescriptor;
class GpuCounterDescriptorDefaultTypeInternal;
extern GpuCounterDescriptorDefaultTypeInternal _GpuCounterDescriptor_default_instance_;
class GpuCounterDescriptor_GpuCounterBlock;
class GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal;
extern GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
class GpuCounterDescriptor_GpuCounterSpec;
class GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal;
extern GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::GpuCounterDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor>(Arena*);
template<> ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>(Arena*);
template<> ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum GpuCounterDescriptor_GpuCounterGroup : int {
  GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED = 0,
  GpuCounterDescriptor_GpuCounterGroup_SYSTEM = 1,
  GpuCounterDescriptor_GpuCounterGroup_VERTICES = 2,
  GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS = 3,
  GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES = 4,
  GpuCounterDescriptor_GpuCounterGroup_MEMORY = 5,
  GpuCounterDescriptor_GpuCounterGroup_COMPUTE = 6
};
bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value);
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MIN = GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX = GpuCounterDescriptor_GpuCounterGroup_COMPUTE;
constexpr int GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_ARRAYSIZE = GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX + 1;

const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(GpuCounterDescriptor_GpuCounterGroup value);
template<typename T>
inline const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpuCounterDescriptor_GpuCounterGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpuCounterDescriptor_GpuCounterGroup_Name.");
  return GpuCounterDescriptor_GpuCounterGroup_Name(static_cast<GpuCounterDescriptor_GpuCounterGroup>(enum_t_value));
}
bool GpuCounterDescriptor_GpuCounterGroup_Parse(
    const std::string& name, GpuCounterDescriptor_GpuCounterGroup* value);
enum GpuCounterDescriptor_MeasureUnit : int {
  GpuCounterDescriptor_MeasureUnit_NONE = 0,
  GpuCounterDescriptor_MeasureUnit_BIT = 1,
  GpuCounterDescriptor_MeasureUnit_KILOBIT = 2,
  GpuCounterDescriptor_MeasureUnit_MEGABIT = 3,
  GpuCounterDescriptor_MeasureUnit_GIGABIT = 4,
  GpuCounterDescriptor_MeasureUnit_TERABIT = 5,
  GpuCounterDescriptor_MeasureUnit_PETABIT = 6,
  GpuCounterDescriptor_MeasureUnit_BYTE = 7,
  GpuCounterDescriptor_MeasureUnit_KILOBYTE = 8,
  GpuCounterDescriptor_MeasureUnit_MEGABYTE = 9,
  GpuCounterDescriptor_MeasureUnit_GIGABYTE = 10,
  GpuCounterDescriptor_MeasureUnit_TERABYTE = 11,
  GpuCounterDescriptor_MeasureUnit_PETABYTE = 12,
  GpuCounterDescriptor_MeasureUnit_HERTZ = 13,
  GpuCounterDescriptor_MeasureUnit_KILOHERTZ = 14,
  GpuCounterDescriptor_MeasureUnit_MEGAHERTZ = 15,
  GpuCounterDescriptor_MeasureUnit_GIGAHERTZ = 16,
  GpuCounterDescriptor_MeasureUnit_TERAHERTZ = 17,
  GpuCounterDescriptor_MeasureUnit_PETAHERTZ = 18,
  GpuCounterDescriptor_MeasureUnit_NANOSECOND = 19,
  GpuCounterDescriptor_MeasureUnit_MICROSECOND = 20,
  GpuCounterDescriptor_MeasureUnit_MILLISECOND = 21,
  GpuCounterDescriptor_MeasureUnit_SECOND = 22,
  GpuCounterDescriptor_MeasureUnit_MINUTE = 23,
  GpuCounterDescriptor_MeasureUnit_HOUR = 24,
  GpuCounterDescriptor_MeasureUnit_VERTEX = 25,
  GpuCounterDescriptor_MeasureUnit_PIXEL = 26,
  GpuCounterDescriptor_MeasureUnit_TRIANGLE = 27,
  GpuCounterDescriptor_MeasureUnit_PRIMITIVE = 38,
  GpuCounterDescriptor_MeasureUnit_FRAGMENT = 39,
  GpuCounterDescriptor_MeasureUnit_MILLIWATT = 28,
  GpuCounterDescriptor_MeasureUnit_WATT = 29,
  GpuCounterDescriptor_MeasureUnit_KILOWATT = 30,
  GpuCounterDescriptor_MeasureUnit_JOULE = 31,
  GpuCounterDescriptor_MeasureUnit_VOLT = 32,
  GpuCounterDescriptor_MeasureUnit_AMPERE = 33,
  GpuCounterDescriptor_MeasureUnit_CELSIUS = 34,
  GpuCounterDescriptor_MeasureUnit_FAHRENHEIT = 35,
  GpuCounterDescriptor_MeasureUnit_KELVIN = 36,
  GpuCounterDescriptor_MeasureUnit_PERCENT = 37,
  GpuCounterDescriptor_MeasureUnit_INSTRUCTION = 40
};
bool GpuCounterDescriptor_MeasureUnit_IsValid(int value);
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_MeasureUnit_MeasureUnit_MIN = GpuCounterDescriptor_MeasureUnit_NONE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX = GpuCounterDescriptor_MeasureUnit_INSTRUCTION;
constexpr int GpuCounterDescriptor_MeasureUnit_MeasureUnit_ARRAYSIZE = GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX + 1;

const std::string& GpuCounterDescriptor_MeasureUnit_Name(GpuCounterDescriptor_MeasureUnit value);
template<typename T>
inline const std::string& GpuCounterDescriptor_MeasureUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpuCounterDescriptor_MeasureUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpuCounterDescriptor_MeasureUnit_Name.");
  return GpuCounterDescriptor_MeasureUnit_Name(static_cast<GpuCounterDescriptor_MeasureUnit>(enum_t_value));
}
bool GpuCounterDescriptor_MeasureUnit_Parse(
    const std::string& name, GpuCounterDescriptor_MeasureUnit* value);
// ===================================================================

class GpuCounterDescriptor_GpuCounterSpec :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec) */ {
 public:
  GpuCounterDescriptor_GpuCounterSpec();
  virtual ~GpuCounterDescriptor_GpuCounterSpec();

  GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from);
  GpuCounterDescriptor_GpuCounterSpec(GpuCounterDescriptor_GpuCounterSpec&& from) noexcept
    : GpuCounterDescriptor_GpuCounterSpec() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor_GpuCounterSpec& operator=(const GpuCounterDescriptor_GpuCounterSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor_GpuCounterSpec& operator=(GpuCounterDescriptor_GpuCounterSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterDescriptor_GpuCounterSpec& default_instance();

  enum PeakValueCase {
    kIntPeakValue = 5,
    kDoublePeakValue = 6,
    PEAK_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterDescriptor_GpuCounterSpec* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor_GpuCounterSpec*>(
               &_GpuCounterDescriptor_GpuCounterSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpuCounterDescriptor_GpuCounterSpec& a, GpuCounterDescriptor_GpuCounterSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor_GpuCounterSpec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterDescriptor_GpuCounterSpec* New() const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterSpec>(nullptr);
  }

  GpuCounterDescriptor_GpuCounterSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from);
  void MergeFrom(const GpuCounterDescriptor_GpuCounterSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumeratorUnitsFieldNumber = 7,
    kDenominatorUnitsFieldNumber = 8,
    kGroupsFieldNumber = 10,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCounterIdFieldNumber = 1,
    kSelectByDefaultFieldNumber = 9,
    kIntPeakValueFieldNumber = 5,
    kDoublePeakValueFieldNumber = 6,
  };
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  int numerator_units_size() const;
  void clear_numerator_units();
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit numerator_units(int index) const;
  void set_numerator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  void add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& numerator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_numerator_units();

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  int denominator_units_size() const;
  void clear_denominator_units();
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit denominator_units(int index) const;
  void set_denominator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  void add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& denominator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_denominator_units();

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  int groups_size() const;
  void clear_groups();
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup groups(int index) const;
  void set_groups(int index, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  void add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_groups();

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional uint32 counter_id = 1;
  bool has_counter_id() const;
  void clear_counter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id() const;
  void set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool select_by_default = 9;
  bool has_select_by_default() const;
  void clear_select_by_default();
  bool select_by_default() const;
  void set_select_by_default(bool value);

  // optional int64 int_peak_value = 5;
  bool has_int_peak_value() const;
  void clear_int_peak_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_peak_value() const;
  void set_int_peak_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double double_peak_value = 6;
  bool has_double_peak_value() const;
  void clear_double_peak_value();
  double double_peak_value() const;
  void set_double_peak_value(double value);

  void clear_peak_value();
  PeakValueCase peak_value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
 private:
  class _Internal;
  void set_has_int_peak_value();
  void set_has_double_peak_value();

  inline bool has_peak_value() const;
  inline void clear_has_peak_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> numerator_units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> denominator_units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id_;
  bool select_by_default_;
  union PeakValueUnion {
    PeakValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 int_peak_value_;
    double double_peak_value_;
  } peak_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class GpuCounterDescriptor_GpuCounterBlock :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock) */ {
 public:
  GpuCounterDescriptor_GpuCounterBlock();
  virtual ~GpuCounterDescriptor_GpuCounterBlock();

  GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from);
  GpuCounterDescriptor_GpuCounterBlock(GpuCounterDescriptor_GpuCounterBlock&& from) noexcept
    : GpuCounterDescriptor_GpuCounterBlock() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor_GpuCounterBlock& operator=(const GpuCounterDescriptor_GpuCounterBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor_GpuCounterBlock& operator=(GpuCounterDescriptor_GpuCounterBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterDescriptor_GpuCounterBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterDescriptor_GpuCounterBlock* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor_GpuCounterBlock*>(
               &_GpuCounterDescriptor_GpuCounterBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpuCounterDescriptor_GpuCounterBlock& a, GpuCounterDescriptor_GpuCounterBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor_GpuCounterBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterDescriptor_GpuCounterBlock* New() const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterBlock>(nullptr);
  }

  GpuCounterDescriptor_GpuCounterBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterBlock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from);
  void MergeFrom(const GpuCounterDescriptor_GpuCounterBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterIdsFieldNumber = 5,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kBlockIdFieldNumber = 1,
    kBlockCapacityFieldNumber = 2,
  };
  // repeated uint32 counter_ids = 5;
  int counter_ids_size() const;
  void clear_counter_ids();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_ids(int index) const;
  void set_counter_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_counter_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      counter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_counter_ids();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional uint32 block_id = 1;
  bool has_block_id() const;
  void clear_block_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 block_capacity = 2;
  bool has_block_capacity() const;
  void clear_block_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_capacity() const;
  void set_block_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > counter_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_capacity_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class GpuCounterDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor) */ {
 public:
  GpuCounterDescriptor();
  virtual ~GpuCounterDescriptor();

  GpuCounterDescriptor(const GpuCounterDescriptor& from);
  GpuCounterDescriptor(GpuCounterDescriptor&& from) noexcept
    : GpuCounterDescriptor() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor& operator=(const GpuCounterDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor& operator=(GpuCounterDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GpuCounterDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuCounterDescriptor* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor*>(
               &_GpuCounterDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GpuCounterDescriptor& a, GpuCounterDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterDescriptor* New() const final {
    return CreateMaybeMessage<GpuCounterDescriptor>(nullptr);
  }

  GpuCounterDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterDescriptor& from);
  void MergeFrom(const GpuCounterDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GpuCounterDescriptor_GpuCounterSpec GpuCounterSpec;
  typedef GpuCounterDescriptor_GpuCounterBlock GpuCounterBlock;

  typedef GpuCounterDescriptor_GpuCounterGroup GpuCounterGroup;
  static constexpr GpuCounterGroup UNCLASSIFIED =
    GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED;
  static constexpr GpuCounterGroup SYSTEM =
    GpuCounterDescriptor_GpuCounterGroup_SYSTEM;
  static constexpr GpuCounterGroup VERTICES =
    GpuCounterDescriptor_GpuCounterGroup_VERTICES;
  static constexpr GpuCounterGroup FRAGMENTS =
    GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS;
  static constexpr GpuCounterGroup PRIMITIVES =
    GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES;
  static constexpr GpuCounterGroup MEMORY =
    GpuCounterDescriptor_GpuCounterGroup_MEMORY;
  static constexpr GpuCounterGroup COMPUTE =
    GpuCounterDescriptor_GpuCounterGroup_COMPUTE;
  static inline bool GpuCounterGroup_IsValid(int value) {
    return GpuCounterDescriptor_GpuCounterGroup_IsValid(value);
  }
  static constexpr GpuCounterGroup GpuCounterGroup_MIN =
    GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MIN;
  static constexpr GpuCounterGroup GpuCounterGroup_MAX =
    GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX;
  static constexpr int GpuCounterGroup_ARRAYSIZE =
    GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GpuCounterGroup_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GpuCounterGroup>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GpuCounterGroup_Name.");
    return GpuCounterDescriptor_GpuCounterGroup_Name(enum_t_value);
  }
  static inline bool GpuCounterGroup_Parse(const std::string& name,
      GpuCounterGroup* value) {
    return GpuCounterDescriptor_GpuCounterGroup_Parse(name, value);
  }

  typedef GpuCounterDescriptor_MeasureUnit MeasureUnit;
  static constexpr MeasureUnit NONE =
    GpuCounterDescriptor_MeasureUnit_NONE;
  static constexpr MeasureUnit BIT =
    GpuCounterDescriptor_MeasureUnit_BIT;
  static constexpr MeasureUnit KILOBIT =
    GpuCounterDescriptor_MeasureUnit_KILOBIT;
  static constexpr MeasureUnit MEGABIT =
    GpuCounterDescriptor_MeasureUnit_MEGABIT;
  static constexpr MeasureUnit GIGABIT =
    GpuCounterDescriptor_MeasureUnit_GIGABIT;
  static constexpr MeasureUnit TERABIT =
    GpuCounterDescriptor_MeasureUnit_TERABIT;
  static constexpr MeasureUnit PETABIT =
    GpuCounterDescriptor_MeasureUnit_PETABIT;
  static constexpr MeasureUnit BYTE =
    GpuCounterDescriptor_MeasureUnit_BYTE;
  static constexpr MeasureUnit KILOBYTE =
    GpuCounterDescriptor_MeasureUnit_KILOBYTE;
  static constexpr MeasureUnit MEGABYTE =
    GpuCounterDescriptor_MeasureUnit_MEGABYTE;
  static constexpr MeasureUnit GIGABYTE =
    GpuCounterDescriptor_MeasureUnit_GIGABYTE;
  static constexpr MeasureUnit TERABYTE =
    GpuCounterDescriptor_MeasureUnit_TERABYTE;
  static constexpr MeasureUnit PETABYTE =
    GpuCounterDescriptor_MeasureUnit_PETABYTE;
  static constexpr MeasureUnit HERTZ =
    GpuCounterDescriptor_MeasureUnit_HERTZ;
  static constexpr MeasureUnit KILOHERTZ =
    GpuCounterDescriptor_MeasureUnit_KILOHERTZ;
  static constexpr MeasureUnit MEGAHERTZ =
    GpuCounterDescriptor_MeasureUnit_MEGAHERTZ;
  static constexpr MeasureUnit GIGAHERTZ =
    GpuCounterDescriptor_MeasureUnit_GIGAHERTZ;
  static constexpr MeasureUnit TERAHERTZ =
    GpuCounterDescriptor_MeasureUnit_TERAHERTZ;
  static constexpr MeasureUnit PETAHERTZ =
    GpuCounterDescriptor_MeasureUnit_PETAHERTZ;
  static constexpr MeasureUnit NANOSECOND =
    GpuCounterDescriptor_MeasureUnit_NANOSECOND;
  static constexpr MeasureUnit MICROSECOND =
    GpuCounterDescriptor_MeasureUnit_MICROSECOND;
  static constexpr MeasureUnit MILLISECOND =
    GpuCounterDescriptor_MeasureUnit_MILLISECOND;
  static constexpr MeasureUnit SECOND =
    GpuCounterDescriptor_MeasureUnit_SECOND;
  static constexpr MeasureUnit MINUTE =
    GpuCounterDescriptor_MeasureUnit_MINUTE;
  static constexpr MeasureUnit HOUR =
    GpuCounterDescriptor_MeasureUnit_HOUR;
  static constexpr MeasureUnit VERTEX =
    GpuCounterDescriptor_MeasureUnit_VERTEX;
  static constexpr MeasureUnit PIXEL =
    GpuCounterDescriptor_MeasureUnit_PIXEL;
  static constexpr MeasureUnit TRIANGLE =
    GpuCounterDescriptor_MeasureUnit_TRIANGLE;
  static constexpr MeasureUnit PRIMITIVE =
    GpuCounterDescriptor_MeasureUnit_PRIMITIVE;
  static constexpr MeasureUnit FRAGMENT =
    GpuCounterDescriptor_MeasureUnit_FRAGMENT;
  static constexpr MeasureUnit MILLIWATT =
    GpuCounterDescriptor_MeasureUnit_MILLIWATT;
  static constexpr MeasureUnit WATT =
    GpuCounterDescriptor_MeasureUnit_WATT;
  static constexpr MeasureUnit KILOWATT =
    GpuCounterDescriptor_MeasureUnit_KILOWATT;
  static constexpr MeasureUnit JOULE =
    GpuCounterDescriptor_MeasureUnit_JOULE;
  static constexpr MeasureUnit VOLT =
    GpuCounterDescriptor_MeasureUnit_VOLT;
  static constexpr MeasureUnit AMPERE =
    GpuCounterDescriptor_MeasureUnit_AMPERE;
  static constexpr MeasureUnit CELSIUS =
    GpuCounterDescriptor_MeasureUnit_CELSIUS;
  static constexpr MeasureUnit FAHRENHEIT =
    GpuCounterDescriptor_MeasureUnit_FAHRENHEIT;
  static constexpr MeasureUnit KELVIN =
    GpuCounterDescriptor_MeasureUnit_KELVIN;
  static constexpr MeasureUnit PERCENT =
    GpuCounterDescriptor_MeasureUnit_PERCENT;
  static constexpr MeasureUnit INSTRUCTION =
    GpuCounterDescriptor_MeasureUnit_INSTRUCTION;
  static inline bool MeasureUnit_IsValid(int value) {
    return GpuCounterDescriptor_MeasureUnit_IsValid(value);
  }
  static constexpr MeasureUnit MeasureUnit_MIN =
    GpuCounterDescriptor_MeasureUnit_MeasureUnit_MIN;
  static constexpr MeasureUnit MeasureUnit_MAX =
    GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX;
  static constexpr int MeasureUnit_ARRAYSIZE =
    GpuCounterDescriptor_MeasureUnit_MeasureUnit_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MeasureUnit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MeasureUnit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MeasureUnit_Name.");
    return GpuCounterDescriptor_MeasureUnit_Name(enum_t_value);
  }
  static inline bool MeasureUnit_Parse(const std::string& name,
      MeasureUnit* value) {
    return GpuCounterDescriptor_MeasureUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpecsFieldNumber = 1,
    kBlocksFieldNumber = 2,
    kMinSamplingPeriodNsFieldNumber = 3,
    kMaxSamplingPeriodNsFieldNumber = 4,
    kSupportsInstrumentedSamplingFieldNumber = 5,
  };
  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  int specs_size() const;
  void clear_specs();
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* mutable_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >*
      mutable_specs();
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& specs(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* add_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >&
      specs() const;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >*
      mutable_blocks();
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& blocks(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >&
      blocks() const;

  // optional uint64 min_sampling_period_ns = 3;
  bool has_min_sampling_period_ns() const;
  void clear_min_sampling_period_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_sampling_period_ns() const;
  void set_min_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 max_sampling_period_ns = 4;
  bool has_max_sampling_period_ns() const;
  void clear_max_sampling_period_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_sampling_period_ns() const;
  void set_max_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool supports_instrumented_sampling = 5;
  bool has_supports_instrumented_sampling() const;
  void clear_supports_instrumented_sampling();
  bool supports_instrumented_sampling() const;
  void set_supports_instrumented_sampling(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec > specs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_sampling_period_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_sampling_period_ns_;
  bool supports_instrumented_sampling_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpuCounterDescriptor_GpuCounterSpec

// optional uint32 counter_id = 1;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_counter_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_counter_id() {
  counter_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterSpec::counter_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.counter_id)
  return counter_id_;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  counter_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.counter_id)
}

// optional string name = 2;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  return name_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}

// optional string description = 3;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  return description_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}

// optional int64 int_peak_value = 5;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_int_peak_value() const {
  return peak_value_case() == kIntPeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_has_int_peak_value() {
  _oneof_case_[0] = kIntPeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_int_peak_value() {
  if (has_int_peak_value()) {
    peak_value_.int_peak_value_ = PROTOBUF_LONGLONG(0);
    clear_has_peak_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GpuCounterDescriptor_GpuCounterSpec::int_peak_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.int_peak_value)
  if (has_int_peak_value()) {
    return peak_value_.int_peak_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_int_peak_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_int_peak_value()) {
    clear_peak_value();
    set_has_int_peak_value();
  }
  peak_value_.int_peak_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.int_peak_value)
}

// optional double double_peak_value = 6;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_double_peak_value() const {
  return peak_value_case() == kDoublePeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_has_double_peak_value() {
  _oneof_case_[0] = kDoublePeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_double_peak_value() {
  if (has_double_peak_value()) {
    peak_value_.double_peak_value_ = 0;
    clear_has_peak_value();
  }
}
inline double GpuCounterDescriptor_GpuCounterSpec::double_peak_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.double_peak_value)
  if (has_double_peak_value()) {
    return peak_value_.double_peak_value_;
  }
  return 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_double_peak_value(double value) {
  if (!has_double_peak_value()) {
    clear_peak_value();
    set_has_double_peak_value();
  }
  peak_value_.double_peak_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.double_peak_value)
}

// repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
inline int GpuCounterDescriptor_GpuCounterSpec::numerator_units_size() const {
  return numerator_units_.size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_numerator_units() {
  numerator_units_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::numerator_units(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(numerator_units_.Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_numerator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  numerator_units_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  numerator_units_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GpuCounterDescriptor_GpuCounterSpec::numerator_units() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return numerator_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GpuCounterDescriptor_GpuCounterSpec::mutable_numerator_units() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return &numerator_units_;
}

// repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
inline int GpuCounterDescriptor_GpuCounterSpec::denominator_units_size() const {
  return denominator_units_.size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_denominator_units() {
  denominator_units_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::denominator_units(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return static_cast< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit >(denominator_units_.Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_denominator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  denominator_units_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  denominator_units_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GpuCounterDescriptor_GpuCounterSpec::denominator_units() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return denominator_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GpuCounterDescriptor_GpuCounterSpec::mutable_denominator_units() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return &denominator_units_;
}

// optional bool select_by_default = 9;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_select_by_default() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_select_by_default() {
  select_by_default_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GpuCounterDescriptor_GpuCounterSpec::select_by_default() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.select_by_default)
  return select_by_default_;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_select_by_default(bool value) {
  _has_bits_[0] |= 0x00000008u;
  select_by_default_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.select_by_default)
}

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
inline int GpuCounterDescriptor_GpuCounterSpec::groups_size() const {
  return groups_.size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_groups() {
  groups_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterSpec::groups(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return static_cast< ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup >(groups_.Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_groups(int index, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  assert(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value));
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  assert(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value));
  groups_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GpuCounterDescriptor_GpuCounterSpec::groups() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GpuCounterDescriptor_GpuCounterSpec::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return &groups_;
}

inline bool GpuCounterDescriptor_GpuCounterSpec::has_peak_value() const {
  return peak_value_case() != PEAK_VALUE_NOT_SET;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_has_peak_value() {
  _oneof_case_[0] = PEAK_VALUE_NOT_SET;
}
inline GpuCounterDescriptor_GpuCounterSpec::PeakValueCase GpuCounterDescriptor_GpuCounterSpec::peak_value_case() const {
  return GpuCounterDescriptor_GpuCounterSpec::PeakValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GpuCounterDescriptor_GpuCounterBlock

// optional uint32 block_id = 1;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_block_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_block_id() {
  block_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterBlock::block_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_id)
  return block_id_;
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_block_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  block_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_id)
}

// optional uint32 block_capacity = 2;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_block_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_block_capacity() {
  block_capacity_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterBlock::block_capacity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_capacity)
  return block_capacity_;
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_block_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  block_capacity_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_capacity)
}

// optional string name = 3;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  return name_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}

// optional string description = 4;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  return description_.GetNoArena();
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}

// repeated uint32 counter_ids = 5;
inline int GpuCounterDescriptor_GpuCounterBlock::counter_ids_size() const {
  return counter_ids_.size();
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_counter_ids() {
  counter_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterDescriptor_GpuCounterBlock::counter_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return counter_ids_.Get(index);
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_counter_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counter_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
}
inline void GpuCounterDescriptor_GpuCounterBlock::add_counter_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counter_ids_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GpuCounterDescriptor_GpuCounterBlock::counter_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return counter_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GpuCounterDescriptor_GpuCounterBlock::mutable_counter_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return &counter_ids_;
}

// -------------------------------------------------------------------

// GpuCounterDescriptor

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
inline int GpuCounterDescriptor::specs_size() const {
  return specs_.size();
}
inline void GpuCounterDescriptor::clear_specs() {
  specs_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::mutable_specs(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >*
GpuCounterDescriptor::mutable_specs() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.specs)
  return &specs_;
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& GpuCounterDescriptor::specs(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_.Get(index);
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::add_specs() {
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >&
GpuCounterDescriptor::specs() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.specs)
  return specs_;
}

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
inline int GpuCounterDescriptor::blocks_size() const {
  return blocks_.size();
}
inline void GpuCounterDescriptor::clear_blocks() {
  blocks_.Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >*
GpuCounterDescriptor::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.blocks)
  return &blocks_;
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& GpuCounterDescriptor::blocks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_.Get(index);
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::add_blocks() {
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >&
GpuCounterDescriptor::blocks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.blocks)
  return blocks_;
}

// optional uint64 min_sampling_period_ns = 3;
inline bool GpuCounterDescriptor::has_min_sampling_period_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuCounterDescriptor::clear_min_sampling_period_ns() {
  min_sampling_period_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuCounterDescriptor::min_sampling_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.min_sampling_period_ns)
  return min_sampling_period_ns_;
}
inline void GpuCounterDescriptor::set_min_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  min_sampling_period_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.min_sampling_period_ns)
}

// optional uint64 max_sampling_period_ns = 4;
inline bool GpuCounterDescriptor::has_max_sampling_period_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuCounterDescriptor::clear_max_sampling_period_ns() {
  max_sampling_period_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuCounterDescriptor::max_sampling_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.max_sampling_period_ns)
  return max_sampling_period_ns_;
}
inline void GpuCounterDescriptor::set_max_sampling_period_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  max_sampling_period_ns_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.max_sampling_period_ns)
}

// optional bool supports_instrumented_sampling = 5;
inline bool GpuCounterDescriptor::has_supports_instrumented_sampling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuCounterDescriptor::clear_supports_instrumented_sampling() {
  supports_instrumented_sampling_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GpuCounterDescriptor::supports_instrumented_sampling() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.supports_instrumented_sampling)
  return supports_instrumented_sampling_;
}
inline void GpuCounterDescriptor::set_supports_instrumented_sampling(bool value) {
  _has_bits_[0] |= 0x00000004u;
  supports_instrumented_sampling_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.supports_instrumented_sampling)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::GpuCounterDescriptor_MeasureUnit> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto
