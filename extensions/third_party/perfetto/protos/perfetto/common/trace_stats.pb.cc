// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/trace_stats.proto

#include "protos/perfetto/common/trace_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceStats_BufferStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
namespace perfetto {
namespace protos {
class TraceStats_BufferStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceStats_BufferStats> _instance;
} _TraceStats_BufferStats_default_instance_;
class TraceStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceStats> _instance;
} _TraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceStats_default_instance_;
    new (ptr) ::perfetto::protos::TraceStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto}, {
      &scc_info_TraceStats_BufferStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_TraceStats_BufferStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceStats_BufferStats_default_instance_;
    new (ptr) ::perfetto::protos::TraceStats_BufferStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceStats_BufferStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceStats_BufferStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceStats_BufferStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void TraceStats_BufferStats::InitAsDefaultInstance() {
}
class TraceStats_BufferStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceStats_BufferStats>()._has_bits_);
  static void set_has_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_overwritten(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_padding_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_padding_bytes_cleared(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_chunks_written(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunks_rewritten(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_chunks_overwritten(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chunks_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_chunks_read(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_chunks_committed_out_of_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_write_wrap_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_patches_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_patches_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_readaheads_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_readaheads_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_abi_violations(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trace_writer_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

TraceStats_BufferStats::TraceStats_BufferStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceStats.BufferStats)
}
TraceStats_BufferStats::TraceStats_BufferStats(const TraceStats_BufferStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_written_, &from.bytes_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_writer_packet_loss_) -
    reinterpret_cast<char*>(&bytes_written_)) + sizeof(trace_writer_packet_loss_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats.BufferStats)
}

void TraceStats_BufferStats::SharedCtor() {
  ::memset(&bytes_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_writer_packet_loss_) -
      reinterpret_cast<char*>(&bytes_written_)) + sizeof(trace_writer_packet_loss_));
}

TraceStats_BufferStats::~TraceStats_BufferStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats.BufferStats)
  SharedDtor();
}

void TraceStats_BufferStats::SharedDtor() {
}

void TraceStats_BufferStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceStats_BufferStats& TraceStats_BufferStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceStats_BufferStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto.base);
  return *internal_default_instance();
}


void TraceStats_BufferStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats.BufferStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bytes_written_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&readaheads_failed_) -
        reinterpret_cast<char*>(&bytes_written_)) + sizeof(readaheads_failed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&abi_violations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&padding_bytes_cleared_) -
        reinterpret_cast<char*>(&abi_violations_)) + sizeof(padding_bytes_cleared_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&chunks_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_writer_packet_loss_) -
        reinterpret_cast<char*>(&chunks_read_)) + sizeof(trace_writer_packet_loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceStats_BufferStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bytes_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bytes_written(&has_bits);
          bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_written = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chunks_written(&has_bits);
          chunks_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_overwritten = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chunks_overwritten(&has_bits);
          chunks_overwritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 write_wrap_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_write_wrap_count(&has_bits);
          write_wrap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 patches_succeeded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_patches_succeeded(&has_bits);
          patches_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 patches_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_patches_failed(&has_bits);
          patches_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 readaheads_succeeded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_readaheads_succeeded(&has_bits);
          readaheads_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 readaheads_failed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_readaheads_failed(&has_bits);
          readaheads_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 abi_violations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_abi_violations(&has_bits);
          abi_violations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_rewritten = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_chunks_rewritten(&has_bits);
          chunks_rewritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_committed_out_of_order = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_chunks_committed_out_of_order(&has_bits);
          chunks_committed_out_of_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 buffer_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_buffer_size(&has_bits);
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bytes_overwritten = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bytes_overwritten(&has_bits);
          bytes_overwritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bytes_read = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_bytes_read(&has_bits);
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 padding_bytes_written = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_padding_bytes_written(&has_bits);
          padding_bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 padding_bytes_cleared = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_padding_bytes_cleared(&has_bits);
          padding_bytes_cleared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_read = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_chunks_read(&has_bits);
          chunks_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_discarded = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_chunks_discarded(&has_bits);
          chunks_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 trace_writer_packet_loss = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_trace_writer_packet_loss(&has_bits);
          trace_writer_packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceStats_BufferStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceStats.BufferStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bytes_written = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_bytes_written(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_written = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_chunks_written(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_overwritten = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_chunks_overwritten(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_overwritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 write_wrap_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_write_wrap_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_wrap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_succeeded = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_patches_succeeded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_failed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_patches_failed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 readaheads_succeeded = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_readaheads_succeeded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readaheads_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 readaheads_failed = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_readaheads_failed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readaheads_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 abi_violations = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_abi_violations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &abi_violations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_rewritten = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_chunks_rewritten(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_rewritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_committed_out_of_order = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_chunks_committed_out_of_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_committed_out_of_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 buffer_size = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_overwritten = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_bytes_overwritten(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_overwritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_read = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_bytes_read(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 padding_bytes_written = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_padding_bytes_written(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &padding_bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 padding_bytes_cleared = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_padding_bytes_cleared(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &padding_bytes_cleared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_read = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_chunks_read(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_discarded = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_chunks_discarded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 trace_writer_packet_loss = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_trace_writer_packet_loss(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_writer_packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceStats.BufferStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceStats.BufferStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceStats_BufferStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceStats.BufferStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_written = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->bytes_written(), output);
  }

  // optional uint64 chunks_written = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->chunks_written(), output);
  }

  // optional uint64 chunks_overwritten = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->chunks_overwritten(), output);
  }

  // optional uint64 write_wrap_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->write_wrap_count(), output);
  }

  // optional uint64 patches_succeeded = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->patches_succeeded(), output);
  }

  // optional uint64 patches_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->patches_failed(), output);
  }

  // optional uint64 readaheads_succeeded = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->readaheads_succeeded(), output);
  }

  // optional uint64 readaheads_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->readaheads_failed(), output);
  }

  // optional uint64 abi_violations = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->abi_violations(), output);
  }

  // optional uint64 chunks_rewritten = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->chunks_rewritten(), output);
  }

  // optional uint64 chunks_committed_out_of_order = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->chunks_committed_out_of_order(), output);
  }

  // optional uint64 buffer_size = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(12, this->buffer_size(), output);
  }

  // optional uint64 bytes_overwritten = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->bytes_overwritten(), output);
  }

  // optional uint64 bytes_read = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(14, this->bytes_read(), output);
  }

  // optional uint64 padding_bytes_written = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(15, this->padding_bytes_written(), output);
  }

  // optional uint64 padding_bytes_cleared = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(16, this->padding_bytes_cleared(), output);
  }

  // optional uint64 chunks_read = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(17, this->chunks_read(), output);
  }

  // optional uint64 chunks_discarded = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(18, this->chunks_discarded(), output);
  }

  // optional uint64 trace_writer_packet_loss = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(19, this->trace_writer_packet_loss(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceStats.BufferStats)
}

size_t TraceStats_BufferStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats.BufferStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bytes_written = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bytes_written());
    }

    // optional uint64 chunks_written = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_written());
    }

    // optional uint64 chunks_overwritten = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_overwritten());
    }

    // optional uint64 write_wrap_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->write_wrap_count());
    }

    // optional uint64 patches_succeeded = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->patches_succeeded());
    }

    // optional uint64 patches_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->patches_failed());
    }

    // optional uint64 readaheads_succeeded = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->readaheads_succeeded());
    }

    // optional uint64 readaheads_failed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->readaheads_failed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 abi_violations = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->abi_violations());
    }

    // optional uint64 chunks_rewritten = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_rewritten());
    }

    // optional uint64 chunks_committed_out_of_order = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_committed_out_of_order());
    }

    // optional uint64 buffer_size = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

    // optional uint64 bytes_overwritten = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bytes_overwritten());
    }

    // optional uint64 bytes_read = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bytes_read());
    }

    // optional uint64 padding_bytes_written = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->padding_bytes_written());
    }

    // optional uint64 padding_bytes_cleared = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->padding_bytes_cleared());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint64 chunks_read = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_read());
    }

    // optional uint64 chunks_discarded = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_discarded());
    }

    // optional uint64 trace_writer_packet_loss = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->trace_writer_packet_loss());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceStats_BufferStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceStats_BufferStats*>(
      &from));
}

void TraceStats_BufferStats::MergeFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats.BufferStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bytes_written_ = from.bytes_written_;
    }
    if (cached_has_bits & 0x00000002u) {
      chunks_written_ = from.chunks_written_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunks_overwritten_ = from.chunks_overwritten_;
    }
    if (cached_has_bits & 0x00000008u) {
      write_wrap_count_ = from.write_wrap_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      patches_succeeded_ = from.patches_succeeded_;
    }
    if (cached_has_bits & 0x00000020u) {
      patches_failed_ = from.patches_failed_;
    }
    if (cached_has_bits & 0x00000040u) {
      readaheads_succeeded_ = from.readaheads_succeeded_;
    }
    if (cached_has_bits & 0x00000080u) {
      readaheads_failed_ = from.readaheads_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      abi_violations_ = from.abi_violations_;
    }
    if (cached_has_bits & 0x00000200u) {
      chunks_rewritten_ = from.chunks_rewritten_;
    }
    if (cached_has_bits & 0x00000400u) {
      chunks_committed_out_of_order_ = from.chunks_committed_out_of_order_;
    }
    if (cached_has_bits & 0x00000800u) {
      buffer_size_ = from.buffer_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      bytes_overwritten_ = from.bytes_overwritten_;
    }
    if (cached_has_bits & 0x00002000u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00004000u) {
      padding_bytes_written_ = from.padding_bytes_written_;
    }
    if (cached_has_bits & 0x00008000u) {
      padding_bytes_cleared_ = from.padding_bytes_cleared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      chunks_read_ = from.chunks_read_;
    }
    if (cached_has_bits & 0x00020000u) {
      chunks_discarded_ = from.chunks_discarded_;
    }
    if (cached_has_bits & 0x00040000u) {
      trace_writer_packet_loss_ = from.trace_writer_packet_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceStats_BufferStats::CopyFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats.BufferStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats_BufferStats::IsInitialized() const {
  return true;
}

void TraceStats_BufferStats::InternalSwap(TraceStats_BufferStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bytes_written_, other->bytes_written_);
  swap(chunks_written_, other->chunks_written_);
  swap(chunks_overwritten_, other->chunks_overwritten_);
  swap(write_wrap_count_, other->write_wrap_count_);
  swap(patches_succeeded_, other->patches_succeeded_);
  swap(patches_failed_, other->patches_failed_);
  swap(readaheads_succeeded_, other->readaheads_succeeded_);
  swap(readaheads_failed_, other->readaheads_failed_);
  swap(abi_violations_, other->abi_violations_);
  swap(chunks_rewritten_, other->chunks_rewritten_);
  swap(chunks_committed_out_of_order_, other->chunks_committed_out_of_order_);
  swap(buffer_size_, other->buffer_size_);
  swap(bytes_overwritten_, other->bytes_overwritten_);
  swap(bytes_read_, other->bytes_read_);
  swap(padding_bytes_written_, other->padding_bytes_written_);
  swap(padding_bytes_cleared_, other->padding_bytes_cleared_);
  swap(chunks_read_, other->chunks_read_);
  swap(chunks_discarded_, other->chunks_discarded_);
  swap(trace_writer_packet_loss_, other->trace_writer_packet_loss_);
}

std::string TraceStats_BufferStats::GetTypeName() const {
  return "perfetto.protos.TraceStats.BufferStats";
}


// ===================================================================

void TraceStats::InitAsDefaultInstance() {
}
class TraceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceStats>()._has_bits_);
  static void set_has_producers_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_producers_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_sources_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_sources_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tracing_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total_buffers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chunks_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_patches_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_invalid_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TraceStats::TraceStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceStats)
}
TraceStats::TraceStats(const TraceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      buffer_stats_(from.buffer_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&producers_seen_, &from.producers_seen_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalid_packets_) -
    reinterpret_cast<char*>(&producers_seen_)) + sizeof(invalid_packets_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats)
}

void TraceStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto.base);
  ::memset(&producers_seen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_packets_) -
      reinterpret_cast<char*>(&producers_seen_)) + sizeof(invalid_packets_));
}

TraceStats::~TraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats)
  SharedDtor();
}

void TraceStats::SharedDtor() {
}

void TraceStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceStats& TraceStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto.base);
  return *internal_default_instance();
}


void TraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&producers_seen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patches_discarded_) -
        reinterpret_cast<char*>(&producers_seen_)) + sizeof(patches_discarded_));
  }
  invalid_packets_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_buffer_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional uint32 producers_connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_producers_connected(&has_bits);
          producers_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 producers_seen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_producers_seen(&has_bits);
          producers_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_sources_registered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_data_sources_registered(&has_bits);
          data_sources_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 data_sources_seen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_sources_seen(&has_bits);
          data_sources_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tracing_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tracing_sessions(&has_bits);
          tracing_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_buffers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_total_buffers(&has_bits);
          total_buffers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunks_discarded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_chunks_discarded(&has_bits);
          chunks_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 patches_discarded = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_patches_discarded(&has_bits);
          patches_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 invalid_packets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_invalid_packets(&has_bits);
          invalid_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_buffer_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 producers_connected = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_producers_connected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producers_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 producers_seen = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_producers_seen(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &producers_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_sources_registered = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_data_sources_registered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sources_registered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_sources_seen = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_data_sources_seen(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_sources_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tracing_sessions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_tracing_sessions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracing_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_buffers = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_total_buffers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_buffers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_discarded = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_chunks_discarded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_discarded = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_patches_discarded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 invalid_packets = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_invalid_packets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invalid_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buffer_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->buffer_stats(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 producers_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->producers_connected(), output);
  }

  // optional uint64 producers_seen = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->producers_seen(), output);
  }

  // optional uint32 data_sources_registered = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->data_sources_registered(), output);
  }

  // optional uint64 data_sources_seen = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->data_sources_seen(), output);
  }

  // optional uint32 tracing_sessions = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->tracing_sessions(), output);
  }

  // optional uint32 total_buffers = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->total_buffers(), output);
  }

  // optional uint64 chunks_discarded = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->chunks_discarded(), output);
  }

  // optional uint64 patches_discarded = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->patches_discarded(), output);
  }

  // optional uint64 invalid_packets = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->invalid_packets(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceStats)
}

size_t TraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buffer_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->buffer_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 producers_seen = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->producers_seen());
    }

    // optional uint32 producers_connected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->producers_connected());
    }

    // optional uint32 data_sources_registered = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_sources_registered());
    }

    // optional uint64 data_sources_seen = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->data_sources_seen());
    }

    // optional uint32 tracing_sessions = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tracing_sessions());
    }

    // optional uint32 total_buffers = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->total_buffers());
    }

    // optional uint64 chunks_discarded = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chunks_discarded());
    }

    // optional uint64 patches_discarded = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->patches_discarded());
    }

  }
  // optional uint64 invalid_packets = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->invalid_packets());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceStats*>(
      &from));
}

void TraceStats::MergeFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_stats_.MergeFrom(from.buffer_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      producers_seen_ = from.producers_seen_;
    }
    if (cached_has_bits & 0x00000002u) {
      producers_connected_ = from.producers_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_sources_registered_ = from.data_sources_registered_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_sources_seen_ = from.data_sources_seen_;
    }
    if (cached_has_bits & 0x00000010u) {
      tracing_sessions_ = from.tracing_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_buffers_ = from.total_buffers_;
    }
    if (cached_has_bits & 0x00000040u) {
      chunks_discarded_ = from.chunks_discarded_;
    }
    if (cached_has_bits & 0x00000080u) {
      patches_discarded_ = from.patches_discarded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_invalid_packets(from.invalid_packets());
  }
}

void TraceStats::CopyFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats::IsInitialized() const {
  return true;
}

void TraceStats::InternalSwap(TraceStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&buffer_stats_)->InternalSwap(CastToBase(&other->buffer_stats_));
  swap(producers_seen_, other->producers_seen_);
  swap(producers_connected_, other->producers_connected_);
  swap(data_sources_registered_, other->data_sources_registered_);
  swap(data_sources_seen_, other->data_sources_seen_);
  swap(tracing_sessions_, other->tracing_sessions_);
  swap(total_buffers_, other->total_buffers_);
  swap(chunks_discarded_, other->chunks_discarded_);
  swap(patches_discarded_, other->patches_discarded_);
  swap(invalid_packets_, other->invalid_packets_);
}

std::string TraceStats::GetTypeName() const {
  return "perfetto.protos.TraceStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceStats_BufferStats* Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats_BufferStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceStats_BufferStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceStats* Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
