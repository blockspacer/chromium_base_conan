// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/tracing_service_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/data_source_descriptor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class TracingServiceState;
class TracingServiceStateDefaultTypeInternal;
extern TracingServiceStateDefaultTypeInternal _TracingServiceState_default_instance_;
class TracingServiceState_DataSource;
class TracingServiceState_DataSourceDefaultTypeInternal;
extern TracingServiceState_DataSourceDefaultTypeInternal _TracingServiceState_DataSource_default_instance_;
class TracingServiceState_Producer;
class TracingServiceState_ProducerDefaultTypeInternal;
extern TracingServiceState_ProducerDefaultTypeInternal _TracingServiceState_Producer_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TracingServiceState* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceState>(Arena*);
template<> ::perfetto::protos::TracingServiceState_DataSource* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceState_DataSource>(Arena*);
template<> ::perfetto::protos::TracingServiceState_Producer* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceState_Producer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TracingServiceState_Producer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceState.Producer) */ {
 public:
  TracingServiceState_Producer();
  virtual ~TracingServiceState_Producer();

  TracingServiceState_Producer(const TracingServiceState_Producer& from);
  TracingServiceState_Producer(TracingServiceState_Producer&& from) noexcept
    : TracingServiceState_Producer() {
    *this = ::std::move(from);
  }

  inline TracingServiceState_Producer& operator=(const TracingServiceState_Producer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceState_Producer& operator=(TracingServiceState_Producer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingServiceState_Producer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingServiceState_Producer* internal_default_instance() {
    return reinterpret_cast<const TracingServiceState_Producer*>(
               &_TracingServiceState_Producer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TracingServiceState_Producer& a, TracingServiceState_Producer& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingServiceState_Producer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingServiceState_Producer* New() const final {
    return CreateMaybeMessage<TracingServiceState_Producer>(nullptr);
  }

  TracingServiceState_Producer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingServiceState_Producer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingServiceState_Producer& from);
  void MergeFrom(const TracingServiceState_Producer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceState_Producer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceState.Producer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kUidFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 3;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.Producer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
};
// -------------------------------------------------------------------

class TracingServiceState_DataSource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceState.DataSource) */ {
 public:
  TracingServiceState_DataSource();
  virtual ~TracingServiceState_DataSource();

  TracingServiceState_DataSource(const TracingServiceState_DataSource& from);
  TracingServiceState_DataSource(TracingServiceState_DataSource&& from) noexcept
    : TracingServiceState_DataSource() {
    *this = ::std::move(from);
  }

  inline TracingServiceState_DataSource& operator=(const TracingServiceState_DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceState_DataSource& operator=(TracingServiceState_DataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingServiceState_DataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingServiceState_DataSource* internal_default_instance() {
    return reinterpret_cast<const TracingServiceState_DataSource*>(
               &_TracingServiceState_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TracingServiceState_DataSource& a, TracingServiceState_DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingServiceState_DataSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingServiceState_DataSource* New() const final {
    return CreateMaybeMessage<TracingServiceState_DataSource>(nullptr);
  }

  TracingServiceState_DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingServiceState_DataSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingServiceState_DataSource& from);
  void MergeFrom(const TracingServiceState_DataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceState_DataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceState.DataSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsDescriptorFieldNumber = 1,
    kProducerIdFieldNumber = 2,
  };
  // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
  bool has_ds_descriptor() const;
  void clear_ds_descriptor();
  const ::perfetto::protos::DataSourceDescriptor& ds_descriptor() const;
  ::perfetto::protos::DataSourceDescriptor* release_ds_descriptor();
  ::perfetto::protos::DataSourceDescriptor* mutable_ds_descriptor();
  void set_allocated_ds_descriptor(::perfetto::protos::DataSourceDescriptor* ds_descriptor);

  // optional int32 producer_id = 2;
  bool has_producer_id() const;
  void clear_producer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 producer_id() const;
  void set_producer_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState.DataSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::DataSourceDescriptor* ds_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 producer_id_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
};
// -------------------------------------------------------------------

class TracingServiceState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceState) */ {
 public:
  TracingServiceState();
  virtual ~TracingServiceState();

  TracingServiceState(const TracingServiceState& from);
  TracingServiceState(TracingServiceState&& from) noexcept
    : TracingServiceState() {
    *this = ::std::move(from);
  }

  inline TracingServiceState& operator=(const TracingServiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceState& operator=(TracingServiceState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TracingServiceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingServiceState* internal_default_instance() {
    return reinterpret_cast<const TracingServiceState*>(
               &_TracingServiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TracingServiceState& a, TracingServiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingServiceState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracingServiceState* New() const final {
    return CreateMaybeMessage<TracingServiceState>(nullptr);
  }

  TracingServiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracingServiceState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TracingServiceState& from);
  void MergeFrom(const TracingServiceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TracingServiceState_Producer Producer;
  typedef TracingServiceState_DataSource DataSource;

  // accessors -------------------------------------------------------

  enum : int {
    kProducersFieldNumber = 1,
    kDataSourcesFieldNumber = 2,
    kNumSessionsFieldNumber = 3,
    kNumSessionsStartedFieldNumber = 4,
  };
  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  int producers_size() const;
  void clear_producers();
  ::perfetto::protos::TracingServiceState_Producer* mutable_producers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >*
      mutable_producers();
  const ::perfetto::protos::TracingServiceState_Producer& producers(int index) const;
  ::perfetto::protos::TracingServiceState_Producer* add_producers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >&
      producers() const;

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  int data_sources_size() const;
  void clear_data_sources();
  ::perfetto::protos::TracingServiceState_DataSource* mutable_data_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >*
      mutable_data_sources();
  const ::perfetto::protos::TracingServiceState_DataSource& data_sources(int index) const;
  ::perfetto::protos::TracingServiceState_DataSource* add_data_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >&
      data_sources() const;

  // optional int32 num_sessions = 3;
  bool has_num_sessions() const;
  void clear_num_sessions();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions() const;
  void set_num_sessions(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_sessions_started = 4;
  bool has_num_sessions_started() const;
  void clear_num_sessions_started();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions_started() const;
  void set_num_sessions_started(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer > producers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource > data_sources_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sessions_started_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TracingServiceState_Producer

// optional int32 id = 1;
inline bool TracingServiceState_Producer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingServiceState_Producer::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState_Producer::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.Producer.id)
  return id_;
}
inline void TracingServiceState_Producer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.Producer.id)
}

// optional string name = 2;
inline bool TracingServiceState_Producer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingServiceState_Producer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TracingServiceState_Producer::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.Producer.name)
  return name_.GetNoArena();
}
inline void TracingServiceState_Producer::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.Producer.name)
}
inline void TracingServiceState_Producer::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.TracingServiceState.Producer.name)
}
inline void TracingServiceState_Producer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TracingServiceState.Producer.name)
}
inline void TracingServiceState_Producer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TracingServiceState.Producer.name)
}
inline std::string* TracingServiceState_Producer::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.Producer.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TracingServiceState_Producer::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracingServiceState.Producer.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TracingServiceState_Producer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracingServiceState.Producer.name)
}

// optional int32 uid = 3;
inline bool TracingServiceState_Producer::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TracingServiceState_Producer::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState_Producer::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.Producer.uid)
  return uid_;
}
inline void TracingServiceState_Producer::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.Producer.uid)
}

// -------------------------------------------------------------------

// TracingServiceState_DataSource

// optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
inline bool TracingServiceState_DataSource::has_ds_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::perfetto::protos::DataSourceDescriptor& TracingServiceState_DataSource::ds_descriptor() const {
  const ::perfetto::protos::DataSourceDescriptor* p = ds_descriptor_;
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::DataSourceDescriptor*>(
      &::perfetto::protos::_DataSourceDescriptor_default_instance_);
}
inline ::perfetto::protos::DataSourceDescriptor* TracingServiceState_DataSource::release_ds_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::DataSourceDescriptor* temp = ds_descriptor_;
  ds_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::DataSourceDescriptor* TracingServiceState_DataSource::mutable_ds_descriptor() {
  _has_bits_[0] |= 0x00000001u;
  if (ds_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::DataSourceDescriptor>(GetArenaNoVirtual());
    ds_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
  return ds_descriptor_;
}
inline void TracingServiceState_DataSource::set_allocated_ds_descriptor(::perfetto::protos::DataSourceDescriptor* ds_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ds_descriptor_);
  }
  if (ds_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ds_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ds_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ds_descriptor_ = ds_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracingServiceState.DataSource.ds_descriptor)
}

// optional int32 producer_id = 2;
inline bool TracingServiceState_DataSource::has_producer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingServiceState_DataSource::clear_producer_id() {
  producer_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState_DataSource::producer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.DataSource.producer_id)
  return producer_id_;
}
inline void TracingServiceState_DataSource::set_producer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  producer_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.DataSource.producer_id)
}

// -------------------------------------------------------------------

// TracingServiceState

// repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
inline int TracingServiceState::producers_size() const {
  return producers_.size();
}
inline void TracingServiceState::clear_producers() {
  producers_.Clear();
}
inline ::perfetto::protos::TracingServiceState_Producer* TracingServiceState::mutable_producers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.producers)
  return producers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >*
TracingServiceState::mutable_producers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TracingServiceState.producers)
  return &producers_;
}
inline const ::perfetto::protos::TracingServiceState_Producer& TracingServiceState::producers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.producers)
  return producers_.Get(index);
}
inline ::perfetto::protos::TracingServiceState_Producer* TracingServiceState::add_producers() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TracingServiceState.producers)
  return producers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_Producer >&
TracingServiceState::producers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TracingServiceState.producers)
  return producers_;
}

// repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
inline int TracingServiceState::data_sources_size() const {
  return data_sources_.size();
}
inline void TracingServiceState::clear_data_sources() {
  data_sources_.Clear();
}
inline ::perfetto::protos::TracingServiceState_DataSource* TracingServiceState::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >*
TracingServiceState::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TracingServiceState.data_sources)
  return &data_sources_;
}
inline const ::perfetto::protos::TracingServiceState_DataSource& TracingServiceState::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_.Get(index);
}
inline ::perfetto::protos::TracingServiceState_DataSource* TracingServiceState::add_data_sources() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TracingServiceState_DataSource >&
TracingServiceState::data_sources() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TracingServiceState.data_sources)
  return data_sources_;
}

// optional int32 num_sessions = 3;
inline bool TracingServiceState::has_num_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingServiceState::clear_num_sessions() {
  num_sessions_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState::num_sessions() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.num_sessions)
  return num_sessions_;
}
inline void TracingServiceState::set_num_sessions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_sessions_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.num_sessions)
}

// optional int32 num_sessions_started = 4;
inline bool TracingServiceState::has_num_sessions_started() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingServiceState::clear_num_sessions_started() {
  num_sessions_started_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracingServiceState::num_sessions_started() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceState.num_sessions_started)
  return num_sessions_started_;
}
inline void TracingServiceState::set_num_sessions_started(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_sessions_started_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceState.num_sessions_started)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto
