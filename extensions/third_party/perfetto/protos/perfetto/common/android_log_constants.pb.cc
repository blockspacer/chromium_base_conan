// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/android_log_constants.proto

#include "protos/perfetto/common/android_log_constants.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool AndroidLogId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidLogId_strings[8] = {};

static const char AndroidLogId_names[] =
  "LID_CRASH"
  "LID_DEFAULT"
  "LID_EVENTS"
  "LID_KERNEL"
  "LID_RADIO"
  "LID_SECURITY"
  "LID_STATS"
  "LID_SYSTEM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidLogId_entries[] = {
  { {AndroidLogId_names + 0, 9}, 4 },
  { {AndroidLogId_names + 9, 11}, 0 },
  { {AndroidLogId_names + 20, 10}, 2 },
  { {AndroidLogId_names + 30, 10}, 7 },
  { {AndroidLogId_names + 40, 9}, 1 },
  { {AndroidLogId_names + 49, 12}, 6 },
  { {AndroidLogId_names + 61, 9}, 5 },
  { {AndroidLogId_names + 70, 10}, 3 },
};

static const int AndroidLogId_entries_by_number[] = {
  1, // 0 -> LID_DEFAULT
  4, // 1 -> LID_RADIO
  2, // 2 -> LID_EVENTS
  7, // 3 -> LID_SYSTEM
  0, // 4 -> LID_CRASH
  6, // 5 -> LID_STATS
  5, // 6 -> LID_SECURITY
  3, // 7 -> LID_KERNEL
};

const std::string& AndroidLogId_Name(
    AndroidLogId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidLogId_entries,
          AndroidLogId_entries_by_number,
          8, AndroidLogId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidLogId_entries,
      AndroidLogId_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidLogId_strings[idx].get();
}
bool AndroidLogId_Parse(
    const std::string& name, AndroidLogId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidLogId_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<AndroidLogId>(int_value);
  }
  return success;
}
bool AndroidLogPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidLogPriority_strings[8] = {};

static const char AndroidLogPriority_names[] =
  "PRIO_DEBUG"
  "PRIO_ERROR"
  "PRIO_FATAL"
  "PRIO_INFO"
  "PRIO_UNSPECIFIED"
  "PRIO_UNUSED"
  "PRIO_VERBOSE"
  "PRIO_WARN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidLogPriority_entries[] = {
  { {AndroidLogPriority_names + 0, 10}, 3 },
  { {AndroidLogPriority_names + 10, 10}, 6 },
  { {AndroidLogPriority_names + 20, 10}, 7 },
  { {AndroidLogPriority_names + 30, 9}, 4 },
  { {AndroidLogPriority_names + 39, 16}, 0 },
  { {AndroidLogPriority_names + 55, 11}, 1 },
  { {AndroidLogPriority_names + 66, 12}, 2 },
  { {AndroidLogPriority_names + 78, 9}, 5 },
};

static const int AndroidLogPriority_entries_by_number[] = {
  4, // 0 -> PRIO_UNSPECIFIED
  5, // 1 -> PRIO_UNUSED
  6, // 2 -> PRIO_VERBOSE
  0, // 3 -> PRIO_DEBUG
  3, // 4 -> PRIO_INFO
  7, // 5 -> PRIO_WARN
  1, // 6 -> PRIO_ERROR
  2, // 7 -> PRIO_FATAL
};

const std::string& AndroidLogPriority_Name(
    AndroidLogPriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidLogPriority_entries,
          AndroidLogPriority_entries_by_number,
          8, AndroidLogPriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidLogPriority_entries,
      AndroidLogPriority_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidLogPriority_strings[idx].get();
}
bool AndroidLogPriority_Parse(
    const std::string& name, AndroidLogPriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidLogPriority_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<AndroidLogPriority>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
